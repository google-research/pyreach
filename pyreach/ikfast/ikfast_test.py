# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for google3.third_party.robotics.ikfast.ikfast_util."""

from typing import List
import unittest
import numpy as np  # type: ignore
from pyreach.ikfast import ikfast


class IkfastUtilTest(unittest.TestCase):

  def test_ikfast_ur5(self) -> None:
    resolver = ikfast.IKFast("ur5.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [[
        0.10294705189091624,
        2.9057720806031386,
        2.011619009816082,
        2.9807817949616644,
        1.512389014027443,
        -1.5854321455669282,
    ],
                                 [
                                     0.10294705189094878,
                                     2.9413041271216556,
                                     1.4974508722646775,
                                     0.31782523240476457,
                                     -1.5123890140274414,
                                     1.5561605080229008,
                                 ],
                                 [
                                     0.1029470518910393,
                                     -1.9188698403478268,
                                     -1.4974508722646795,
                                     1.8897156372240311,
                                     -1.5123890140274374,
                                     1.5561605080229914,
                                 ],
                                 [
                                     2.745076118166182,
                                     -1.6472653950904435,
                                     2.0153720343702615,
                                     -2.005655425845945,
                                     -1.6009213486381686,
                                     -2.084610518971255,
                                 ],
                                 [
                                     0.10294705188992255,
                                     -1.4920570522272005,
                                     -2.0116190098160973,
                                     -1.1645216669349754,
                                     1.512389014027483,
                                     -1.585432145567923,
                                 ],
                                 [
                                     2.745076118166243,
                                     -1.2243445112144193,
                                     1.494050072651985,
                                     1.2343383055860577,
                                     1.6009213486381657,
                                     1.0569821346186032,
                                 ],
                                 [
                                     2.7450761181663506,
                                     0.19551923227662255,
                                     -1.494050072651981,
                                     2.8025747073989677,
                                     1.6009213486381728,
                                     1.0569821346187105,
                                 ],
                                 [
                                     2.745076118166387,
                                     0.24131969412969428,
                                     -2.015372034370251,
                                     0.13650355367431574,
                                     -1.6009213486381753,
                                     -2.0846105189710498,
                                 ]]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.75910822067493, -2.146299888647414, -1.6943876663147872,
                -0.8787322918414351, 1.655420395887572, 0.18456659620035673
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ],
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.75910822067493, -2.146299888647414, -1.6943876663147872,
                -0.8787322918414351, 1.655420395887572, 0.18456659620035673
            ])))

  def test_ikfast_ur5e(self) -> None:
    resolver = ikfast.IKFast("ur5e.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [
        [
            0.16405055986938188, 2.765791124520724, 2.1403950045986257,
            2.98833657267692, 1.509800259026823, -1.524274490132905
        ],
        [
            0.16405055986941708, 2.812858484030981, 1.5952639230344068,
            0.344807641141076, -1.5098002590268216, 1.6173181634569267
        ],
        [
            0.16405055986882972, -1.9578001796958513, -1.595263923034398,
            2.0228088437571556, -1.5098002590268453, 1.6173181634563387
        ],
        [
            2.687641187651362, -1.6129194695445, 2.1445565902551675,
            -2.1708019359199584, -1.5970429060996174, -2.141937160919743
        ],
        [
            0.1640505598697007, -1.5243944486163512, -2.1403950045986226,
            -1.0070584593479304, 1.5098002590268065, -1.5242744901325862
        ],
        [
            2.6876411876547217, -1.1867158554146933, 1.5917631540339052,
            1.0973805397612704, 1.5970429060998401, 0.9996554926734069
        ],
        [
            2.687641187652034, 0.32259890325751445, -1.5917631540338664,
            2.771592089156949, 1.5970429060996565, 0.9996554926707248
        ],
        [
            2.687641187650905, 0.3835133327531148, -2.1445565902551706,
            0.12187844229276258, -1.5970429060995792, -2.1419371609201985
        ]
    ]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.7965282406276215, -2.22330850771462, -1.7512629073471058,
                -0.7416700537416318, 1.6556240465808028, 0.22212078814240713
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.7965282406276215, -2.22330850771462, -1.7512629073471058,
                -0.7416700537416318, 1.6556240465808028, 0.22212078814240713
            ])))

  def test_ikfast_xarm6(self) -> None:
    resolver = ikfast.IKFast("XArm6.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [
        [
            3.0241143888332935, -2.4979339266159415, -0.869571351354945,
            2.9728619851022766, 2.855946930066941, -0.3971085573226188
        ],
        [
            -0.13629036084730872, 2.1264475502162976, 1.6838950019183567,
            -0.06968215873316722, 2.4148672492298697, -0.30601073944427765
        ],
        [
            2.985715758962136, -2.1663234855763496, -1.548893556849539,
            -0.07641723765342481, -2.508911406333506, 2.806453208942962
        ],
        [
            -0.14948326717072866, 1.7945329513322539, 2.3663428366356047,
            3.0898920675784742, -2.064377274088418, 2.849999303285056
        ],
        [
            2.9937505181857373, -0.37313097589941435, 1.6837958107043811,
            3.0935780878199486, 1.2537071699447582, -0.2504600050544283
        ],
        [
            -0.1527109989579265, 0.0013844348686441164, -0.8672603110596464,
            -0.06265836034117257, 0.8093362839222564, -0.22704470871038002
        ],
        [
            2.997243605175099, -0.8536303497795151, 2.3663553966125934,
            -0.046124307367660294, -1.4557065980813688, 2.8849426596237975
        ],
        [
            -0.14028908411558633, 0.4818663374284742, -1.549236376478318,
            3.0872423121973194, -1.011081532800383, 2.91257730170467
        ]
    ]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.5937576700857008, 0.935506050392982, -1.7341148539344895,
                0.11240818685999415, 0.8226610103120375, 1.5128080302488023
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                -1.563445952223937, -2.412728605995753, -1.733865098759504,
                -3.0431719068191505, 2.1565343828146206, 1.6283201194487749
            ])))

  def test_ikfast_lrmate200ic(self) -> None:
    resolver = ikfast.IKFast("lrmate200ic.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [[
        -0.14702247913212219, 0.16034728889163374, 0.17485384923751324,
        -3.095884823022829, 1.528085412362189, -2.8789233615489165
    ],
                                 [
                                     -0.14702247913212219, 0.16034728889163374,
                                     0.17485384923751324, 0.04570783056696115,
                                     -1.528085412362189, 0.2626692920408731
                                 ],
                                 [
                                     -0.14702247913212219, 1.3861858074105342,
                                     2.5062996297985927, -3.047913002542534,
                                     2.631778418156988, -2.795146542046531
                                 ],
                                 [
                                     -0.14702247913212219, 1.3861858074105342,
                                     2.5062996297985927, 0.09367965104725506,
                                     -2.631778418156988, 0.34644611154325844
                                 ]]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.586832262092123, 0.8836393164616538, 0.6534707816860157,
                -3.2255700376773384, 1.362807584317037, 1.576470205253172
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.586832262092123, -4.6798123690092215, -4.255502609829496,
                -3.2326082653650454, 2.014960035728337, 1.519892449681402
            ])))

  def test_ikfast_lrmate200id(self) -> None:
    resolver = ikfast.IKFast("lrmate200id.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [
        [
            2.994570174457678, -1.3037946958950393, 0.7039292786508708,
            0.09604786551728516, 2.6454714418591063, -2.7924436456339485
        ],
        [
            2.994570174457678, -1.3037946958950393, 0.7039292786508708,
            -3.0455447880725153, -2.6454714418591063, 0.34914900795584103
        ],
        [
            2.994570174457678, -0.5328206500292163, 2.22946349871972,
            0.04813734065101196, 1.892494928514801, -2.8617397938279296
        ],
        [
            2.994570174457678, -0.5328206500292163, 2.22946349871972,
            -3.0934553129387883, -1.892494928514801, 0.2798528597618599
        ],
        [
            -0.14702247913212219, 0.17928706929581928, 0.22741215153833055,
            -3.095924632692143, 1.5616688595405879, -2.8773874915996522
        ],
        [
            -0.14702247913212219, 0.17928706929581928, 0.22741215153833055,
            0.04566802089764721, -1.5616688595405879, 0.2642051619901373
        ],
        [
            -0.14702247913212219, 1.4331704093685016, 2.7059806258322605,
            -3.010958298998935, 2.7835449163035935, -2.754535197365122
        ],
        [
            -0.14702247913212219, 1.4331704093685016, 2.7059806258322605,
            0.13063435459085504, -2.7835449163035935, 0.38705745622466736
        ]
    ]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.586832262092123, 0.8583089346799717, 0.678704268127883,
                -3.224789478317228, 1.4131949941018875, 1.5721775665784599
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.586832262092123, -4.628376152869551, -4.028496797936878,
                -3.242526500173448, 2.189727907399642, 1.5003998827683611
            ])))

  def test_ikfast_fanuccr7ia(self) -> None:
    resolver = ikfast.IKFast("FanucCR7ia.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [
        [
            2.994570174457678, -1.3037946958950393, 0.7039292786508708,
            0.09604786551728516, 2.6454714418591063, -2.7924436456339485
        ],
        [
            2.994570174457678, -1.3037946958950393, 0.7039292786508708,
            -3.0455447880725153, -2.6454714418591063, 0.34914900795584103
        ],
        [
            2.994570174457678, -0.5328206500292163, 2.22946349871972,
            0.04813734065101196, 1.892494928514801, -2.8617397938279296
        ],
        [
            2.994570174457678, -0.5328206500292163, 2.22946349871972,
            -3.0934553129387883, -1.892494928514801, 0.2798528597618599
        ],
        [
            -0.14702247913212219, 0.17928706929581928, 0.22741215153833055,
            -3.095924632692143, 1.5616688595405879, -2.8773874915996522
        ],
        [
            -0.14702247913212219, 0.17928706929581928, 0.22741215153833055,
            0.04566802089764721, -1.5616688595405879, 0.2642051619901373
        ],
        [
            -0.14702247913212219, 1.4331704093685016, 2.7059806258322605,
            -3.010958298998935, 2.7835449163035935, -2.754535197365122
        ],
        [
            -0.14702247913212219, 1.4331704093685016, 2.7059806258322605,
            0.13063435459085504, -2.7835449163035935, 0.38705745622466736
        ]
    ]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.586832262092123, 0.8583089346799717, 0.678704268127883,
                -3.224789478317228, 1.4131949941018875, 1.5721775665784599
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.586832262092123, -4.628376152869551, -4.028496797936878,
                -3.242526500173448, 2.189727907399642, 1.5003998827683611
            ])))

  def test_ikfast_fcr7ia(self) -> None:
    resolver = ikfast.IKFast("FanucLrmate200id7l.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [
        [
            2.994570174457678, -1.6669017442036627, -0.051227634780463695,
            0.42134264859753107, 3.0297414721949014, -2.457962325116913
        ],
        [
            2.994570174457678, -1.6669017442036627, -0.051227634780463695,
            -2.7202500049922693, -3.0297414721949014, 0.6836303284728764
        ],
        [
            2.994570174457678, -0.16971360172061356, 3.0265378245933725,
            0.04595322756880707, 1.4589926469845675, -2.882100983937371
        ],
        [
            2.994570174457678, -0.16971360172061356, 3.0265378245933725,
            -3.095639426020993, -1.4589926469845675, 0.25949166965241854
        ],
        [
            -0.14702247913212219, -0.05654430315647474, -0.29095654371623825,
            -3.093915700981907, 1.279434998289845, -2.8906754142854263
        ],
        [
            -0.14702247913212219, -0.05654430315647474, -0.29095654371623825,
            0.047676952607882406, -1.279434998289845, 0.25091723930436327
        ],
        [
            -0.14702247913212219, 1.6690017818207956, -3.0169185736504427,
            -2.163681220897145, 3.0865202324865617, -1.8997622277531825
        ],
        [
            -0.14702247913212219, 1.6690017818207956, -3.0169185736504427,
            0.977911432692645, -3.0865202324865617, 1.241830425836607
        ]
    ]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                -1.554760391497667, -1.8843984866224632, 0.28949219178727287,
                -0.14878476484202274, 2.5548526994125202, 1.4349097267086428
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                4.728424915681919, -1.8843984866224632, 0.28949219178727287,
                -0.14878476484202274, 2.5548526994125202, 1.4349097267086428
            ])))

  def test_ikfast_ur10e(self) -> None:
    resolver = ikfast.IKFast("ur10e.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [
        [
            0.26371038014920006, 2.5632127944885656, 2.130956602388829,
            0.052486851447946986, -1.5060703338492818, 1.7171054720912662
        ],
        [
            0.26371038014919684, 2.6671374428526033, 2.5208619955436653,
            2.7002494635189085, 1.506070333849282, -1.4244871814985336
        ],
        [
            2.5915207323822638, -1.8177146660264059, 2.52537384343933,
            -2.3490226930855793, -1.5903658741686955, -2.237850788262641
        ],
        [
            0.26371038014483766, -1.717080607512376, -2.1309566023887507,
            2.311508151046817, -1.5060703338494312, 1.7171054720868972
        ],
        [
            0.26371038014703224, -1.3154916955612503, -2.520861995543703,
            -0.8417680213390858, 1.5060703338493528, -1.4244871815007016
        ],
        [
            2.591520732378091, -1.4302510002096036, 2.1278717290007685,
            0.8026084091259932, 1.5903658741683944, 0.9037418653229929
        ],
        [
            2.5915207323805673, 0.5700198052573013, -2.127871729000779,
            3.0580810616608023, 1.590365874168569, 0.9037418653254639
        ],
        [
            2.591520732379995, 0.48564632416723474, -2.525373843439346,
            0.39836400359934165, -1.5903658741685285, -2.237850788264904
        ]
    ]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.8590061918522973, -1.984199896619137, -2.283022773368963,
                -0.4437021074813956, 1.6556986786980046, 0.28482443103632815
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.8590061918522973, -1.984199896619137, -2.283022773368963,
                -0.4437021074813956, 1.6556986786980046, 0.28482443103632815
            ])))

  def test_ikfast_fr2000ia165f(self) -> None:
    resolver = ikfast.IKFast("FanucR2000ia165f.urdf")
    test_pose = np.array(
        [0.441, -0.069, 0.296, 3.07915249, 0.17924206, 0.07207276])
    inverse = resolver.ik(test_pose)
    expect: List[List[float]] = [
        [
            3.008767265421178, -2.3950602485110015, -0.985900131132994,
            2.7240509187664217, 3.0267767850771836, -0.1646653851240094
        ],
        [
            3.008767265421178, -2.3950602485110015, -0.985900131132994,
            -0.41754173482337853, -3.0267767850771836, 2.97692726846578
        ],
        [
            3.008767265421178, 0.4534452530700097, -2.503699724327534,
            0.047855671283256344, 1.3300054763716667, -2.9025799159024483
        ],
        [
            3.008767265421178, 0.4534452530700097, -2.503699724327534,
            -3.093736982306544, -1.3300054763716667, 0.23901273768734121
        ],
        [
            -0.13282538816862122, -1.566641780552722, -1.340762401419142,
            -3.094445791261965, 1.739882576772183, -2.8832198442544774
        ],
        [
            -0.13282538816862122, -1.566641780552722, -1.340762401419142,
            0.047146862327824834, -1.739882576772183, 0.25837280933531215
        ],
        [
            -0.13282538816862122, 2.0362517998715015, -2.148837454041386,
            -0.10219457500600466, 2.6687839851312125, 0.1593844153615318
        ],
        [
            -0.13282538816862122, 2.0362517998715015, -2.148837454041386,
            3.039398078583785, -2.6687839851312125, -2.982208238228268
        ]
    ]
    assert inverse is not None
    self.assertTrue(np.allclose(np.asarray(expect), inverse))
    for idx in range(inverse.shape[0]):
      forward = resolver.fk(inverse[idx, :])
      self.assertTrue(np.allclose(forward, test_pose))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.ik_search(test_pose, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.5694808119146213, -1.1130801326094413, -1.4029222239017034,
                -3.2263601374152837, 1.3047586646041642, 1.5988320979125414
            ])))

    test_pose = np.array([
        10000.0, 10000.0, 10000.0, 3.11639138331322, 0.005372085246919482,
        -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNone(joints)

    test_pose = np.array([
        -0.01672919342733003, 0.6336892500729367, 0.1106076186519042,
        3.11639138331322, 0.005372085246919482, -0.1276226213011794
    ])
    current_joints = [
        1.793768405914307, -2.222002168694967, -1.752705574035645,
        -0.7431128782084961, 1.653548717498779, 0.2220320701599121
    ]
    ik_hints = {
        0: [
            1.68749761581421, -1.98929464817047, -1.89353466033936,
            -0.851135075092316, 1.6761908531189, 0.265036106109619
        ],
        1: [
            1.39810276031494, -2.39948201179504, -1.09250926971436,
            -1.27997672557831, 1.65425539016724, -0.0296047367155552
        ]
    }
    joints = resolver.unity_ik_solve_search(test_pose, current_joints, ik_hints)
    self.assertIsNotNone(joints)
    self.assertTrue(
        np.allclose(
            joints,
            np.asarray([
                1.5694808119146213, -1.1130801326094413, -1.4029222239017034,
                -3.2263601374152837, 1.3047586646041642, 1.5988320979125414
            ])))


if __name__ == "__main__":
  unittest.main()
