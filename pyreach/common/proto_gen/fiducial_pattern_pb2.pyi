# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions
import vector_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class AprilTagPatternConfig(google.protobuf.message.Message):
    """FiducialPatternConfig defines a block of patterns.

    An April Tag pattern consists of a rows x cols grid of tags.  The ids and
    TagFamily specify the exact tag patterns.

         +--------------------------+
         |                          |  April Tag
         |  ######  ######  ######  |  rows: 2
         |  # # ##  #   ##  ##   #  |  cols: 3
         |  # ## #  #  # #  # ## #  |  ids: [, , , , ,]
         |  ######  ######  ######  |  square_spacing_bits: 2
         |                          |
         |  ######  ######  ######  |
         |  ##  ##  #  ###  #  ###  |
         |  # ## #  ###  #  #### #  |
         |  ######  ######  ######  |
         |                          |
         +--------------------------+

         +------------------------+    Chessboard
         |####    ####    ####    |    rows: 4
         |####    ####    ####    |    cols: 6
         |####    ####    ####    |
         |    ####    ####    ####|
         |    ####    ####    ####|
         |    ####    ####    ####|
         |####    ####    ####    |
         |####    ####    ####    |
         |####    ####    ####    |
         |    ####    ####    ####|
         |    ####    ####    ####|
         |    ####    ####    ####|
         +------------------------+

    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TagFamily:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TagFamilyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TagFamily.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNSPECIFIED_TAG_FAMILY: AprilTagPatternConfig.TagFamily.ValueType = ...  # 0
        TAG16H5: AprilTagPatternConfig.TagFamily.ValueType = ...  # 1
        TAG25H7: AprilTagPatternConfig.TagFamily.ValueType = ...  # 2
        TAG25H9: AprilTagPatternConfig.TagFamily.ValueType = ...  # 3
        TAG36H10: AprilTagPatternConfig.TagFamily.ValueType = ...  # 4
        TAG36H11: AprilTagPatternConfig.TagFamily.ValueType = ...  # 5
    class TagFamily(_TagFamily, metaclass=_TagFamilyEnumTypeWrapper):
        """The AprilTag specific TagFamily.  The first value is the number of bits per
        fiducial, and the second value (after H) is the minimum Hamming distance
        between two fiducials in the same family.
        """
        pass

    UNSPECIFIED_TAG_FAMILY: AprilTagPatternConfig.TagFamily.ValueType = ...  # 0
    TAG16H5: AprilTagPatternConfig.TagFamily.ValueType = ...  # 1
    TAG25H7: AprilTagPatternConfig.TagFamily.ValueType = ...  # 2
    TAG25H9: AprilTagPatternConfig.TagFamily.ValueType = ...  # 3
    TAG36H10: AprilTagPatternConfig.TagFamily.ValueType = ...  # 4
    TAG36H11: AprilTagPatternConfig.TagFamily.ValueType = ...  # 5

    TAG_FAMILY_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    SQUARE_SPACING_BITS_FIELD_NUMBER: builtins.int
    INTERTAG_BLACK_SQUARE_FIELD_NUMBER: builtins.int
    tag_family: global___AprilTagPatternConfig.TagFamily.ValueType = ...
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The list of AprilTag IDs to fill the rows*cols grid (row-major)."""
        pass
    square_spacing_bits: builtins.int = ...
    """The number of bits between AprilTags in the grid (must be >= 2)."""

    intertag_black_square: builtins.bool = ...
    """Whether or not to render a black square between and outside AprilTag
    corners.  For rendering only.
    """

    def __init__(self,
        *,
        tag_family : global___AprilTagPatternConfig.TagFamily.ValueType = ...,
        ids : typing.Optional[typing.Iterable[builtins.int]] = ...,
        square_spacing_bits : builtins.int = ...,
        intertag_black_square : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids",b"ids","intertag_black_square",b"intertag_black_square","square_spacing_bits",b"square_spacing_bits","tag_family",b"tag_family"]) -> None: ...
global___AprilTagPatternConfig = AprilTagPatternConfig

class ChessboardPatternConfig(google.protobuf.message.Message):
    """A chessboard of MxN will provide (M-1)x(N-1) corners."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ChessboardPatternConfig = ChessboardPatternConfig

class FiducialPatternConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ROWS_FIELD_NUMBER: builtins.int
    COLS_FIELD_NUMBER: builtins.int
    METERS_PER_BIT_FIELD_NUMBER: builtins.int
    PIXELS_PER_BIT_FIELD_NUMBER: builtins.int
    CHESSBOARD_PATTERN_CONFIG_FIELD_NUMBER: builtins.int
    APRIL_TAG_PATTERN_CONFIG_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    rows: builtins.int = ...
    cols: builtins.int = ...
    meters_per_bit: builtins.float = ...
    """The size (in meters) of one side of a solid bit in the fiducial pattern.

    For AprilTag: this represents the size (in meters) of 1 bit in the
    AprilTag fiducial.  For example, if bit_square_size_m = 0.01 or 1cm, then
    an AprilTag from TagFamily TAG16H5 will be 4cm square.

    For chessboard, this represents the size (in meters) of a chessboard
    square (each square is a bit).
    For geometry.
    """

    pixels_per_bit: builtins.int = ...
    """The size (in pixels) of one side of a solid bit in the fiducial pattern
    output pattern image.

    For AprilTag: this represents the size (in pixels) of 1 bit in the
    AprilTag fiducial.  For example, if pixels_per_bit = 1, then an AprilTag
    from TagFamily TAG16H5 will be 4x4 pixel square.

    For chessboard, this represents the size (in pixels) of a chessboard
    square (each square is a bit).
    For rendering.
    """

    @property
    def chessboard_pattern_config(self) -> global___ChessboardPatternConfig: ...
    @property
    def april_tag_pattern_config(self) -> global___AprilTagPatternConfig: ...
    @property
    def offset(self) -> vector_pb2.Vector3d:
        """Offset vector to be added to all 3D pattern points.  This can be used to
        represent the thickness of the fiducial board.

        The coordinate frame of the offset is the frame implicitly defined in
        GenerateFiducialPattern.  For April and chessboard patterns, the origin is
        at the center of the pattern with x-axis along rows, y-axis along columns,
        and z-axis pointing up.

        For example, if the pose of the fiducial board is given with respect to its
        bottom center, then the offset vector should be (0, 0, board_thickness).
        """
        pass
    def __init__(self,
        *,
        rows : builtins.int = ...,
        cols : builtins.int = ...,
        meters_per_bit : builtins.float = ...,
        pixels_per_bit : builtins.int = ...,
        chessboard_pattern_config : typing.Optional[global___ChessboardPatternConfig] = ...,
        april_tag_pattern_config : typing.Optional[global___AprilTagPatternConfig] = ...,
        offset : typing.Optional[vector_pb2.Vector3d] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["april_tag_pattern_config",b"april_tag_pattern_config","bit_sizing_type",b"bit_sizing_type","chessboard_pattern_config",b"chessboard_pattern_config","meters_per_bit",b"meters_per_bit","offset",b"offset","pattern_specific_config",b"pattern_specific_config","pixels_per_bit",b"pixels_per_bit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["april_tag_pattern_config",b"april_tag_pattern_config","bit_sizing_type",b"bit_sizing_type","chessboard_pattern_config",b"chessboard_pattern_config","cols",b"cols","meters_per_bit",b"meters_per_bit","offset",b"offset","pattern_specific_config",b"pattern_specific_config","pixels_per_bit",b"pixels_per_bit","rows",b"rows"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["bit_sizing_type",b"bit_sizing_type"]) -> typing.Optional[typing_extensions.Literal["meters_per_bit","pixels_per_bit"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["pattern_specific_config",b"pattern_specific_config"]) -> typing.Optional[typing_extensions.Literal["chessboard_pattern_config","april_tag_pattern_config"]]: ...
global___FiducialPatternConfig = FiducialPatternConfig
