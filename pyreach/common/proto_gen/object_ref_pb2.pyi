# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.message
import object_id_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ObjectRef(google.protobuf.message.Message):
    """Unique identifier for an object."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Id(google.protobuf.message.Message):
        """Id for the ObjectRef."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DATA_FIELD_NUMBER: builtins.int
        STR_ID_FIELD_NUMBER: builtins.int
        INT_ID_FIELD_NUMBER: builtins.int
        OBJECT_ID_FIELD_NUMBER: builtins.int
        KEY_FIELD_NUMBER: builtins.int
        @property
        def data(self) -> google.protobuf.any_pb2.Any:
            """Holds an identifier for an entity in an arbitrary format.
            One example is the ObjectId, which identifies an object by indices.
            Another is a string in an internal tool format.
            """
            pass
        str_id: typing.Text = ...
        """Common ID types."""

        int_id: builtins.int = ...
        @property
        def object_id(self) -> object_id_pb2.ObjectId: ...
        key: typing.Text = ...
        """This optional key is used to select a handler for the ID.
        For example, the key "path" indicates that the ID is a string field with
        path semantics.
        """

        def __init__(self,
            *,
            data : typing.Optional[google.protobuf.any_pb2.Any] = ...,
            str_id : typing.Text = ...,
            int_id : builtins.int = ...,
            object_id : typing.Optional[object_id_pb2.ObjectId] = ...,
            key : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["data",b"data","id_type",b"id_type","int_id",b"int_id","object_id",b"object_id","str_id",b"str_id"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["data",b"data","id_type",b"id_type","int_id",b"int_id","key",b"key","object_id",b"object_id","str_id",b"str_id"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["id_type",b"id_type"]) -> typing.Optional[typing_extensions.Literal["data","str_id","int_id","object_id"]]: ...

    PATH_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    path: typing.Text = ...
    """Fully specified name of an object, e.g. "/bldg/room102/s102A/desk/drawer0"."""

    type: object_id_pb2.ObjectId.ObjectType.ValueType = ...
    """Type of the referent (e.g. LINK) for this reference."""

    @property
    def id(self) -> global___ObjectRef.Id:
        """Identifier for the object in some other tool or system."""
        pass
    def __init__(self,
        *,
        path : typing.Text = ...,
        type : object_id_pb2.ObjectId.ObjectType.ValueType = ...,
        id : typing.Optional[global___ObjectRef.Id] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id",b"id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","path",b"path","type",b"type"]) -> None: ...
global___ObjectRef = ObjectRef
