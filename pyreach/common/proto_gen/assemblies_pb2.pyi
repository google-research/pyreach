# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Assembly(google.protobuf.message.Message):
    """option go_package = ".;workcell";

    Assembly is the data for an assembly, not including versioning information.
    An assembly is either a physically distinct piece of hardware, or a
    grouping of assemblies.

    Design doc: http://doc/1_tPoz_Hieepr36pk38-mofLBi3-XvgSy0WKDKmaRxFY
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SEARCH_NAME_FIELD_NUMBER: builtins.int
    PART_OF_FIELD_NUMBER: builtins.int
    SITE_FIELD_NUMBER: builtins.int
    type: typing.Text = ...
    """Type is the type of assembly. This can be anything, but should be generally
    well-known. There are three important types:

    * "workcell": The top-level assembly, a grouping.
    * "host": A computer that hosts Reach Serve.
    * "robot": An assembly that does physical motion. Can be a grouping.
    """

    name: typing.Text = ...
    """Name is the "friendly" name of an assembly. All assemblies have IDs which
    are Firestore document names, with this Assembly data inside. All
    non-workcell assemblies have IDs that are unique 6-digit hex (uppercase),
    e.g. 6ACD78. A workcell assembly can either have a hex ID or a non-hex ID
    -- although these must still be unique. Note that non-hex IDs for
    workcells are restricted ot the character set [a-z0-9_-], and must also
    not alias to a hex ID (e.g. "989099").

    The name of an assembly gives a more friendly way for humans to refer to
    assemblies than with an ID. Names are not unique. Names are also restricted
    to the character set [A-Za-z0-9_-].
    """

    search_name: typing.Text = ...
    """SearchName is the name but in lowercase. This is to allow case-insensitive
    search in Firestore.
    """

    part_of: typing.Text = ...
    """PartOf is the ID that this assembly is part of. If it is blank, then this
    is a top-level assembly, or an unattached assembly.
    """

    site: typing.Text = ...
    """Site is the physical location of this assembly. Generally only the
    workcell needs a site, since all assemblies under that workcell are
    usually at the same location.
    """

    def __init__(self,
        *,
        type : typing.Text = ...,
        name : typing.Text = ...,
        search_name : typing.Text = ...,
        part_of : typing.Text = ...,
        site : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","part_of",b"part_of","search_name",b"search_name","site",b"site","type",b"type"]) -> None: ...
global___Assembly = Assembly
