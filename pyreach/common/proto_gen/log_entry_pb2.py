# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: log_entry.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import log_entry_id_pb2 as log__entry__id__pb2
import log_entry_reach_pb2 as log__entry__reach__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='log_entry.proto',
  package='robotics.logging',
  syntax='proto2',
  serialized_options=b'Z#project-reach/pkg/rc/logentryprotos',
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x0flog_entry.proto\x12\x10robotics.logging\x1a\x12log_entry_id.proto\x1a\x15log_entry_reach.proto\"z\n\x08LogEntry\x12(\n\x02id\x18\x01 \x01(\x0b\x32\x1c.robotics.logging.LogEntryId\x12\x39\n\x05reach\x18\xe8\x07 \x01(\x0b\x32\'.robotics.logging.messages.ReachPayloadH\x00\x42\t\n\x07payloadB%Z#project-reach/pkg/rc/logentryprotos'
  ,
  dependencies=[log__entry__id__pb2.DESCRIPTOR,log__entry__reach__pb2.DESCRIPTOR,])




_LOGENTRY = _descriptor.Descriptor(
  name='LogEntry',
  full_name='robotics.logging.LogEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='robotics.logging.LogEntry.id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='reach', full_name='robotics.logging.LogEntry.reach', index=1,
      number=1000, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='payload', full_name='robotics.logging.LogEntry.payload',
      index=0, containing_type=None,
      create_key=_descriptor._internal_create_key,
    fields=[]),
  ],
  serialized_start=80,
  serialized_end=202,
)

_LOGENTRY.fields_by_name['id'].message_type = log__entry__id__pb2._LOGENTRYID
_LOGENTRY.fields_by_name['reach'].message_type = log__entry__reach__pb2._REACHPAYLOAD
_LOGENTRY.oneofs_by_name['payload'].fields.append(
  _LOGENTRY.fields_by_name['reach'])
_LOGENTRY.fields_by_name['reach'].containing_oneof = _LOGENTRY.oneofs_by_name['payload']
DESCRIPTOR.message_types_by_name['LogEntry'] = _LOGENTRY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

LogEntry = _reflection.GeneratedProtocolMessageType('LogEntry', (_message.Message,), {
  'DESCRIPTOR' : _LOGENTRY,
  '__module__' : 'log_entry_pb2'
  # @@protoc_insertion_point(class_scope:robotics.logging.LogEntry)
  })
_sym_db.RegisterMessage(LogEntry)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
