# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import logs_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ReachPayload(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COMMAND_DATA_FIELD_NUMBER: builtins.int
    DEVICE_DATA_FIELD_NUMBER: builtins.int
    SERVER_LOG_DATA_FIELD_NUMBER: builtins.int
    REACH_SERVE_SESSION_ID_FIELD_NUMBER: builtins.int
    @property
    def command_data(self) -> logs_pb2.CommandData: ...
    @property
    def device_data(self) -> logs_pb2.DeviceData: ...
    @property
    def server_log_data(self) -> logs_pb2.TextLogData: ...
    reach_serve_session_id: typing.Text = ...
    """robot session, which may have multiple operator sessions within it. This is
    normally unchanged reach serve lifetime.
    """

    def __init__(self,
        *,
        command_data : typing.Optional[logs_pb2.CommandData] = ...,
        device_data : typing.Optional[logs_pb2.DeviceData] = ...,
        server_log_data : typing.Optional[logs_pb2.TextLogData] = ...,
        reach_serve_session_id : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["command_data",b"command_data","data",b"data","device_data",b"device_data","reach_serve_session_id",b"reach_serve_session_id","server_log_data",b"server_log_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["command_data",b"command_data","data",b"data","device_data",b"device_data","reach_serve_session_id",b"reach_serve_session_id","server_log_data",b"server_log_data"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data",b"data"]) -> typing.Optional[typing_extensions.Literal["command_data","device_data","server_log_data"]]: ...
global___ReachPayload = ReachPayload
