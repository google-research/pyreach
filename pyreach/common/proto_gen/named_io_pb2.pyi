# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _DigitalState:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _DigitalStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DigitalState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    DIGITAL_STATE_UNSPECIFIED: DigitalState.ValueType = ...  # 0
    DIGITAL_STATE_OFF: DigitalState.ValueType = ...  # 1
    DIGITAL_STATE_ON: DigitalState.ValueType = ...  # 2
    DIGITAL_STATE_INDETERMINATE: DigitalState.ValueType = ...  # 3
class DigitalState(_DigitalState, metaclass=_DigitalStateEnumTypeWrapper):
    """The state of a quasi-digital I/O. Such an I/O could be abstracted from
    multiple signals, and some ombinations of those signals may lead to the
    abstracted signal being indeterminate.

    An example would be a vacuum attachment with two digital vacuum signals,
    where both are commanded on or off. In case one is on and other other is off,
    the overall signal for the vacuum is indeterminate.
    """
    pass

DIGITAL_STATE_UNSPECIFIED: DigitalState.ValueType = ...  # 0
DIGITAL_STATE_OFF: DigitalState.ValueType = ...  # 1
DIGITAL_STATE_ON: DigitalState.ValueType = ...  # 2
DIGITAL_STATE_INDETERMINATE: DigitalState.ValueType = ...  # 3
global___DigitalState = DigitalState


class NamedIo(google.protobuf.message.Message):
    """Represents multiple I/O states for named I/O signals."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class StateEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        @property
        def value(self) -> global___NamedIoState: ...
        def __init__(self,
            *,
            key : typing.Optional[typing.Text] = ...,
            value : typing.Optional[global___NamedIoState] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    STATE_FIELD_NUMBER: builtins.int
    @property
    def state(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___NamedIoState]: ...
    def __init__(self,
        *,
        state : typing.Optional[typing.Mapping[typing.Text, global___NamedIoState]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["state",b"state"]) -> None: ...
global___NamedIo = NamedIo

class NamedIoState(google.protobuf.message.Message):
    """Represents a single I/O state for a named I/O signal."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DIGITAL_VALUE_FIELD_NUMBER: builtins.int
    digital_value: global___DigitalState.ValueType = ...
    def __init__(self,
        *,
        digital_value : typing.Optional[global___DigitalState.ValueType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["digital_value",b"digital_value","payload",b"payload"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["digital_value",b"digital_value","payload",b"payload"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["payload",b"payload"]) -> typing.Optional[typing_extensions.Literal["digital_value"]]: ...
global___NamedIoState = NamedIoState
