# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class LogEntryId(google.protobuf.message.Message):
    """Globally unique ID of a data point in SSOT, used by both LogEntry and
    Session.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ROBOT_ID_FIELD_NUMBER: builtins.int
    LOG_TYPE_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    SEQ_FIELD_NUMBER: builtins.int
    robot_id: typing.Text
    """Uniquely identifies robot it belongs to."""

    log_type: typing.Text
    """Provided by robot, identifies stream this log entry belongs to.
    log_type should be in the form of $ssot_repository:$channel, indicating its
    permanent storage place in SSOT.
    Example: reach/logs:device-data
    """

    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """An on-device timestamp provided by robot, we trust that robot has a
        reasonable clock that reports correct walltime and consistently ticks as it
        should be on earth, this "reasonable clock" is required even for
        simulation.

        timestamps from the same (log_type, robot_id) channel should be based on
        same clock and comparable. Different log_types from the same robot_id may
        use a different time domain / clock so they're often close but not directly
        comparable. See domain_timestamps in LogEntry field for multi-domain
        alignment solutions.
        """
        pass
    seq: builtins.int
    """Additional bit assigned by processing pipeline to ensure uniqueness.
    Serialize as a string for web clients; see go/jspb-options#jstype.
    """

    def __init__(self,
        *,
        robot_id: typing.Optional[typing.Text] = ...,
        log_type: typing.Optional[typing.Text] = ...,
        timestamp: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        seq: typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["log_type",b"log_type","robot_id",b"robot_id","seq",b"seq","timestamp",b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["log_type",b"log_type","robot_id",b"robot_id","seq",b"seq","timestamp",b"timestamp"]) -> None: ...
global___LogEntryId = LogEntryId
