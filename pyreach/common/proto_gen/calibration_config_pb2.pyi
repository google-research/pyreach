# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import calibration_pb2
import fiducial_pattern_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import object_ref_pb2
import pose_pb2
import stats_pb2
import typing
import typing_extensions
import vector_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class CalibrationStamp(google.protobuf.message.Message):
    """---------------------------------------------------------------------------
    Stats - Error statistics for calibration.

    Where error is represented as a Stats protobuf, the represented value is the
    per-pixel error of the metric.

    The average per-pixel scalar error will be saved in Stats.mean.
    The total error can be calculated as Stats.mean * Stats.count
    ---------------------------------------------------------------------------

    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LABEL_FIELD_NUMBER: builtins.int
    SEQUENCE_FIELD_NUMBER: builtins.int
    label: typing.Text = ...
    sequence: builtins.int = ...
    def __init__(self,
        *,
        label : typing.Text = ...,
        sequence : typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_sequence",b"_sequence","sequence",b"sequence"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_sequence",b"_sequence","label",b"label","sequence",b"sequence"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_sequence",b"_sequence"]) -> typing.Optional[typing_extensions.Literal["sequence"]]: ...
global___CalibrationStamp = CalibrationStamp

class Vector2WithError(google.protobuf.message.Message):
    """2D Vector with error bounds."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VECTOR_FIELD_NUMBER: builtins.int
    ERROR_STDEV_FIELD_NUMBER: builtins.int
    ERROR_VECTOR_FIELD_NUMBER: builtins.int
    @property
    def vector(self) -> vector_pb2.Vector2d: ...
    error_stdev: builtins.float = ...
    @property
    def error_vector(self) -> vector_pb2.Vector2d: ...
    def __init__(self,
        *,
        vector : typing.Optional[vector_pb2.Vector2d] = ...,
        error_stdev : builtins.float = ...,
        error_vector : typing.Optional[vector_pb2.Vector2d] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error_stdev",b"error_stdev","error_type",b"error_type","error_vector",b"error_vector","vector",b"vector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_stdev",b"error_stdev","error_type",b"error_type","error_vector",b"error_vector","vector",b"vector"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["error_type",b"error_type"]) -> typing.Optional[typing_extensions.Literal["error_stdev","error_vector"]]: ...
global___Vector2WithError = Vector2WithError

class Vector3WithError(google.protobuf.message.Message):
    """3D Vector with error bounds."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VECTOR_FIELD_NUMBER: builtins.int
    ERROR_STDEV_FIELD_NUMBER: builtins.int
    ERROR_VECTOR_FIELD_NUMBER: builtins.int
    @property
    def vector(self) -> vector_pb2.Vector3d: ...
    error_stdev: builtins.float = ...
    @property
    def error_vector(self) -> vector_pb2.Vector3d: ...
    def __init__(self,
        *,
        vector : typing.Optional[vector_pb2.Vector3d] = ...,
        error_stdev : builtins.float = ...,
        error_vector : typing.Optional[vector_pb2.Vector3d] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error_stdev",b"error_stdev","error_type",b"error_type","error_vector",b"error_vector","vector",b"vector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_stdev",b"error_stdev","error_type",b"error_type","error_vector",b"error_vector","vector",b"vector"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["error_type",b"error_type"]) -> typing.Optional[typing_extensions.Literal["error_stdev","error_vector"]]: ...
global___Vector3WithError = Vector3WithError

class Pose3WithError(google.protobuf.message.Message):
    """3D Pose with error bounds."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    POSE_FIELD_NUMBER: builtins.int
    ERROR_STDEV_FIELD_NUMBER: builtins.int
    ERROR_POSE_FIELD_NUMBER: builtins.int
    @property
    def pose(self) -> pose_pb2.Pose3d: ...
    error_stdev: builtins.float = ...
    @property
    def error_pose(self) -> pose_pb2.Pose3d:
        """Error for each pose component."""
        pass
    def __init__(self,
        *,
        pose : typing.Optional[pose_pb2.Pose3d] = ...,
        error_stdev : builtins.float = ...,
        error_pose : typing.Optional[pose_pb2.Pose3d] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error_pose",b"error_pose","error_stdev",b"error_stdev","error_type",b"error_type","pose",b"pose"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_pose",b"error_pose","error_stdev",b"error_stdev","error_type",b"error_type","pose",b"pose"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["error_type",b"error_type"]) -> typing.Optional[typing_extensions.Literal["error_stdev","error_pose"]]: ...
global___Pose3WithError = Pose3WithError

class CalibrationSolverConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Fiducial(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class FramePose(google.protobuf.message.Message):
            """FramePose allows a fiducial to appear in different positions in different
            frames.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            WORLD_POSE_FIDUCIAL_FIELD_NUMBER: builtins.int
            FRAMES_FIELD_NUMBER: builtins.int
            @property
            def world_pose_fiducial(self) -> pose_pb2.Pose3d: ...
            @property
            def frames(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
                """Image frames where this pose should be used."""
                pass
            def __init__(self,
                *,
                world_pose_fiducial : typing.Optional[pose_pb2.Pose3d] = ...,
                frames : typing.Optional[typing.Iterable[builtins.int]] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["world_pose_fiducial",b"world_pose_fiducial"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["frames",b"frames","world_pose_fiducial",b"world_pose_fiducial"]) -> None: ...

        FIDUCIAL_PATTERN_FIELD_NUMBER: builtins.int
        FIDUCIAL_PATTERN_URI_FIELD_NUMBER: builtins.int
        WORLD_POSE_FIDUCIAL_FIELD_NUMBER: builtins.int
        FRAME_POSES_FIELD_NUMBER: builtins.int
        PATTERN_FRAME_FIELD_NUMBER: builtins.int
        @property
        def fiducial_pattern(self) -> fiducial_pattern_pb2.FiducialPatternConfig:
            """FiducialPatternConfig describes a fiducial pattern (e.g. chessboard or
            set of April tags) that is used to calibrate the camera(s).
            """
            pass
        fiducial_pattern_uri: typing.Text = ...
        """Path to file containing fiducial pattern configuration as a
        FiducialPatternConfig in prototext format.  This path will be used to
        populate the fiducial_pattern field if it is empty.
        """

        @property
        def world_pose_fiducial(self) -> pose_pb2.Pose3d:
            """If this pose is defined, the fiducial should have this pose in every
            frame.
            """
            pass
        @property
        def frame_poses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CalibrationSolverConfig.Fiducial.FramePose]: ...
        @property
        def pattern_frame(self) -> global___CalibrationFrame:
            """CalibrationPatterns will be constructed from the FiducialPatternConfig."""
            pass
        def __init__(self,
            *,
            fiducial_pattern : typing.Optional[fiducial_pattern_pb2.FiducialPatternConfig] = ...,
            fiducial_pattern_uri : typing.Text = ...,
            world_pose_fiducial : typing.Optional[pose_pb2.Pose3d] = ...,
            frame_poses : typing.Optional[typing.Iterable[global___CalibrationSolverConfig.Fiducial.FramePose]] = ...,
            pattern_frame : typing.Optional[global___CalibrationFrame] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["fiducial_pattern",b"fiducial_pattern","pattern_frame",b"pattern_frame","world_pose_fiducial",b"world_pose_fiducial"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["fiducial_pattern",b"fiducial_pattern","fiducial_pattern_uri",b"fiducial_pattern_uri","frame_poses",b"frame_poses","pattern_frame",b"pattern_frame","world_pose_fiducial",b"world_pose_fiducial"]) -> None: ...

    class IntrinsicOptions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _CvCalibFlag:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _CvCalibFlagEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CvCalibFlag.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            CALIB_NONE: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 0
            CALIB_ZERO_TANGENT_DIST: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 8
            CALIB_RATIONAL_MODEL: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 16384
            CALIB_FIX_K1: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 32
            CALIB_FIX_K2: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 64
            CALIB_FIX_K3: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 128
            CALIB_FIX_K4: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 2048
            CALIB_FIX_K5: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 4096
            CALIB_FIX_K6: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 8192
        class CvCalibFlag(_CvCalibFlag, metaclass=_CvCalibFlagEnumTypeWrapper):
            """Flags for cv::calibrateCamera
            These flags match the values defined in OpenCV's
            modules/calib3d/include/opencv2/calib3d.hpp
            """
            pass

        CALIB_NONE: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 0
        CALIB_ZERO_TANGENT_DIST: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 8
        CALIB_RATIONAL_MODEL: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 16384
        CALIB_FIX_K1: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 32
        CALIB_FIX_K2: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 64
        CALIB_FIX_K3: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 128
        CALIB_FIX_K4: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 2048
        CALIB_FIX_K5: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 4096
        CALIB_FIX_K6: CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType = ...  # 8192

        OPENCV_FLAGS_FIELD_NUMBER: builtins.int
        @property
        def opencv_flags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType]:
            """If no flags are specified, many combinations will be tried."""
            pass
        def __init__(self,
            *,
            opencv_flags : typing.Optional[typing.Iterable[global___CalibrationSolverConfig.IntrinsicOptions.CvCalibFlag.ValueType]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["opencv_flags",b"opencv_flags"]) -> None: ...

    class ExtrinsicOptions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _CvSolvePnPMethod:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _CvSolvePnPMethodEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CvSolvePnPMethod.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            SOLVEPNP_ITERATIVE: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 0
            """Requires 4 or more points, default value."""

            SOLVEPNP_EPNP: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 1
            """Requires 4 or more points."""

            SOLVEPNP_P3P: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 2
            """Requires exactly 4 points."""

            SOLVEPNP_AP3P: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 5
            """Requires exactly 4 points."""

            SOLVEPNP_IPPE: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 6
            """Requires coplanar points."""

            SOLVEPNP_IPPE_SQUARE: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 7
            """Requires exactly 4 points in a square."""

            SOLVEPNP_SQPNP: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 8
            """Requires 3 or more points."""

        class CvSolvePnPMethod(_CvSolvePnPMethod, metaclass=_CvSolvePnPMethodEnumTypeWrapper):
            """These flags match the values defined in OpenCV's
            modules/calib3d/include/opencv2/calib3d.hpp

            Definitions of these methods can be found at
            https://docs.opencv.org/4.x/d5/d1f/calib3d_solvePnP.html
            """
            pass

        SOLVEPNP_ITERATIVE: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 0
        """Requires 4 or more points, default value."""

        SOLVEPNP_EPNP: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 1
        """Requires 4 or more points."""

        SOLVEPNP_P3P: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 2
        """Requires exactly 4 points."""

        SOLVEPNP_AP3P: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 5
        """Requires exactly 4 points."""

        SOLVEPNP_IPPE: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 6
        """Requires coplanar points."""

        SOLVEPNP_IPPE_SQUARE: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 7
        """Requires exactly 4 points in a square."""

        SOLVEPNP_SQPNP: CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...  # 8
        """Requires 3 or more points."""


        OPENCV_METHOD_FIELD_NUMBER: builtins.int
        opencv_method: global___CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType = ...
        def __init__(self,
            *,
            opencv_method : typing.Optional[global___CalibrationSolverConfig.ExtrinsicOptions.CvSolvePnPMethod.ValueType] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_opencv_method",b"_opencv_method","opencv_method",b"opencv_method"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_opencv_method",b"_opencv_method","opencv_method",b"opencv_method"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_opencv_method",b"_opencv_method"]) -> typing.Optional[typing_extensions.Literal["opencv_method"]]: ...

    SOLVER_FIELD_NUMBER: builtins.int
    FIDUCIALS_FIELD_NUMBER: builtins.int
    INTRINSIC_FIELD_NUMBER: builtins.int
    EXTRINSIC_FIELD_NUMBER: builtins.int
    @property
    def solver(self) -> global___CalibrationStamp: ...
    @property
    def fiducials(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CalibrationSolverConfig.Fiducial]: ...
    @property
    def intrinsic(self) -> global___CalibrationSolverConfig.IntrinsicOptions: ...
    @property
    def extrinsic(self) -> global___CalibrationSolverConfig.ExtrinsicOptions: ...
    def __init__(self,
        *,
        solver : typing.Optional[global___CalibrationStamp] = ...,
        fiducials : typing.Optional[typing.Iterable[global___CalibrationSolverConfig.Fiducial]] = ...,
        intrinsic : typing.Optional[global___CalibrationSolverConfig.IntrinsicOptions] = ...,
        extrinsic : typing.Optional[global___CalibrationSolverConfig.ExtrinsicOptions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["extrinsic",b"extrinsic","intrinsic",b"intrinsic","solver",b"solver","solver_type",b"solver_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["extrinsic",b"extrinsic","fiducials",b"fiducials","intrinsic",b"intrinsic","solver",b"solver","solver_type",b"solver_type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["solver_type",b"solver_type"]) -> typing.Optional[typing_extensions.Literal["intrinsic","extrinsic"]]: ...
global___CalibrationSolverConfig = CalibrationSolverConfig

class CalibrationConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CAMERA_ID_FIELD_NUMBER: builtins.int
    CAMERA_SPEC_FIELD_NUMBER: builtins.int
    SOLVER_FIELD_NUMBER: builtins.int
    PLAYBACK_CONFIG_URI_FIELD_NUMBER: builtins.int
    INTRINSICS_INPUT_FIELD_NUMBER: builtins.int
    EXTRINSICS_INPUT_FIELD_NUMBER: builtins.int
    @property
    def camera_id(self) -> object_ref_pb2.ObjectRef: ...
    @property
    def camera_spec(self) -> calibration_pb2.CameraSpecification: ...
    @property
    def solver(self) -> global___CalibrationSolverConfig: ...
    playback_config_uri: typing.Text = ...
    """Path to file containing playback camera configuration as a
    MultiCameraDeviceConfig in prototext format.  This path will be used to
    populate the playback_config field if it is empty.
    """

    @property
    def intrinsics_input(self) -> calibration_pb2.CameraIntrinsics: ...
    @property
    def extrinsics_input(self) -> calibration_pb2.CameraExtrinsics: ...
    def __init__(self,
        *,
        camera_id : typing.Optional[object_ref_pb2.ObjectRef] = ...,
        camera_spec : typing.Optional[calibration_pb2.CameraSpecification] = ...,
        solver : typing.Optional[global___CalibrationSolverConfig] = ...,
        playback_config_uri : typing.Text = ...,
        intrinsics_input : typing.Optional[calibration_pb2.CameraIntrinsics] = ...,
        extrinsics_input : typing.Optional[calibration_pb2.CameraExtrinsics] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["camera_id",b"camera_id","camera_spec",b"camera_spec","extrinsics_input",b"extrinsics_input","intrinsics_input",b"intrinsics_input","solver",b"solver"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["camera_id",b"camera_id","camera_spec",b"camera_spec","extrinsics_input",b"extrinsics_input","intrinsics_input",b"intrinsics_input","playback_config_uri",b"playback_config_uri","solver",b"solver"]) -> None: ...
global___CalibrationConfig = CalibrationConfig

class CalibrationPattern(google.protobuf.message.Message):
    """Calibration input and output for a single pattern (chessboard or April tag).
    A fiducial board may contain multiple patterns.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Point(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        POINT_FIELD_NUMBER: builtins.int
        PATTERN_POINT_FIELD_NUMBER: builtins.int
        IMAGE_POINT_FIELD_NUMBER: builtins.int
        PROJ_POINT_FIELD_NUMBER: builtins.int
        CAMERA_POINT_FIELD_NUMBER: builtins.int
        WORLD_POINT_FIELD_NUMBER: builtins.int
        @property
        def point(self) -> global___CalibrationStamp:
            """Name of the point."""
            pass
        @property
        def pattern_point(self) -> global___Vector3WithError:
            """Position within pattern frame."""
            pass
        @property
        def image_point(self) -> global___Vector2WithError:
            """Detected camera image point."""
            pass
        @property
        def proj_point(self) -> global___Vector2WithError:
            """Reprojected image point."""
            pass
        @property
        def camera_point(self) -> global___Vector3WithError:
            """3D position within camera frame."""
            pass
        @property
        def world_point(self) -> global___Vector3WithError:
            """3D position within world frame."""
            pass
        def __init__(self,
            *,
            point : typing.Optional[global___CalibrationStamp] = ...,
            pattern_point : typing.Optional[global___Vector3WithError] = ...,
            image_point : typing.Optional[global___Vector2WithError] = ...,
            proj_point : typing.Optional[global___Vector2WithError] = ...,
            camera_point : typing.Optional[global___Vector3WithError] = ...,
            world_point : typing.Optional[global___Vector3WithError] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["camera_point",b"camera_point","image_point",b"image_point","pattern_point",b"pattern_point","point",b"point","proj_point",b"proj_point","world_point",b"world_point"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["camera_point",b"camera_point","image_point",b"image_point","pattern_point",b"pattern_point","point",b"point","proj_point",b"proj_point","world_point",b"world_point"]) -> None: ...

    PATTERN_FIELD_NUMBER: builtins.int
    POINTS_FIELD_NUMBER: builtins.int
    @property
    def pattern(self) -> global___CalibrationStamp: ...
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CalibrationPattern.Point]: ...
    def __init__(self,
        *,
        pattern : typing.Optional[global___CalibrationStamp] = ...,
        points : typing.Optional[typing.Iterable[global___CalibrationPattern.Point]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pattern",b"pattern"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["pattern",b"pattern","points",b"points"]) -> None: ...
global___CalibrationPattern = CalibrationPattern

class CalibrationFrame(google.protobuf.message.Message):
    """Each CalibrationFrame represents an image that may contain detected pattern
    points from a single fiducial board.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class PatternsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int = ...
        @property
        def value(self) -> global___CalibrationPattern: ...
        def __init__(self,
            *,
            key : builtins.int = ...,
            value : typing.Optional[global___CalibrationPattern] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    FRAME_FIELD_NUMBER: builtins.int
    PATTERNS_FIELD_NUMBER: builtins.int
    REPROJECTION_ERROR_FIELD_NUMBER: builtins.int
    CAMERA_POSE_FIDUCIAL_FIELD_NUMBER: builtins.int
    WORLD_POSE_FIDUCIAL_FIELD_NUMBER: builtins.int
    CAMERA_ID_FIELD_NUMBER: builtins.int
    FIDUCIAL_ID_FIELD_NUMBER: builtins.int
    IMAGE_ID_FIELD_NUMBER: builtins.int
    INPUT_IMAGE_FILE_FIELD_NUMBER: builtins.int
    OBSERVATION_IMAGE_FILE_FIELD_NUMBER: builtins.int
    PROJECTION_IMAGE_FILE_FIELD_NUMBER: builtins.int
    @property
    def frame(self) -> global___CalibrationStamp: ...
    @property
    def patterns(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___CalibrationPattern]:
        """Map from tagID to pattern."""
        pass
    @property
    def reprojection_error(self) -> stats_pb2.Stats:
        """Accumulated reprojection error.
        The reprojection_error for a pixel is the L2 distance between the observed
        pixel location and the pixel location calculated from the intrinsic or
        extrinsic camera model.
        """
        pass
    @property
    def camera_pose_fiducial(self) -> global___Pose3WithError:
        """Pose of the fiducial board in the camera frame (calculated from
        extrinsics).
        """
        pass
    @property
    def world_pose_fiducial(self) -> global___Pose3WithError:
        """Pose of the fiducial board in the world frame (calculated from extrinsics
        or provided as input).
        """
        pass
    camera_id: builtins.int = ...
    fiducial_id: builtins.int = ...
    image_id: builtins.int = ...
    input_image_file: typing.Text = ...
    observation_image_file: typing.Text = ...
    projection_image_file: typing.Text = ...
    def __init__(self,
        *,
        frame : typing.Optional[global___CalibrationStamp] = ...,
        patterns : typing.Optional[typing.Mapping[builtins.int, global___CalibrationPattern]] = ...,
        reprojection_error : typing.Optional[stats_pb2.Stats] = ...,
        camera_pose_fiducial : typing.Optional[global___Pose3WithError] = ...,
        world_pose_fiducial : typing.Optional[global___Pose3WithError] = ...,
        camera_id : builtins.int = ...,
        fiducial_id : builtins.int = ...,
        image_id : builtins.int = ...,
        input_image_file : typing.Text = ...,
        observation_image_file : typing.Text = ...,
        projection_image_file : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["camera_pose_fiducial",b"camera_pose_fiducial","frame",b"frame","reprojection_error",b"reprojection_error","world_pose_fiducial",b"world_pose_fiducial"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["camera_id",b"camera_id","camera_pose_fiducial",b"camera_pose_fiducial","fiducial_id",b"fiducial_id","frame",b"frame","image_id",b"image_id","input_image_file",b"input_image_file","observation_image_file",b"observation_image_file","patterns",b"patterns","projection_image_file",b"projection_image_file","reprojection_error",b"reprojection_error","world_pose_fiducial",b"world_pose_fiducial"]) -> None: ...
global___CalibrationFrame = CalibrationFrame

class CalibrationData(google.protobuf.message.Message):
    """Calibration input and output data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CAMERA_ID_FIELD_NUMBER: builtins.int
    OBSERVATION_FIELD_NUMBER: builtins.int
    CALIBRATION_CONFIG_FIELD_NUMBER: builtins.int
    INTRINSICS_FRAMES_FIELD_NUMBER: builtins.int
    INTRINSICS_INPUT_FIELD_NUMBER: builtins.int
    INTRINSICS_FIELD_NUMBER: builtins.int
    EXTRINSICS_FRAMES_FIELD_NUMBER: builtins.int
    EXTRINSICS_INPUT_FIELD_NUMBER: builtins.int
    EXTRINSICS_FIELD_NUMBER: builtins.int
    @property
    def camera_id(self) -> object_ref_pb2.ObjectRef: ...
    @property
    def observation(self) -> global___CalibrationStamp: ...
    @property
    def calibration_config(self) -> global___CalibrationConfig: ...
    @property
    def intrinsics_frames(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CalibrationFrame]:
        """Image frames with detected points."""
        pass
    @property
    def intrinsics_input(self) -> calibration_pb2.CameraIntrinsics:
        """Initial input for intrinsics."""
        pass
    @property
    def intrinsics(self) -> calibration_pb2.CameraIntrinsics:
        """Calculated intrinsics values."""
        pass
    @property
    def extrinsics_frames(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CalibrationFrame]:
        """Image frames with detected points."""
        pass
    @property
    def extrinsics_input(self) -> calibration_pb2.CameraExtrinsics:
        """Initial input for extrinsics."""
        pass
    @property
    def extrinsics(self) -> calibration_pb2.CameraExtrinsics:
        """Calculated extrinsics values."""
        pass
    def __init__(self,
        *,
        camera_id : typing.Optional[object_ref_pb2.ObjectRef] = ...,
        observation : typing.Optional[global___CalibrationStamp] = ...,
        calibration_config : typing.Optional[global___CalibrationConfig] = ...,
        intrinsics_frames : typing.Optional[typing.Iterable[global___CalibrationFrame]] = ...,
        intrinsics_input : typing.Optional[calibration_pb2.CameraIntrinsics] = ...,
        intrinsics : typing.Optional[calibration_pb2.CameraIntrinsics] = ...,
        extrinsics_frames : typing.Optional[typing.Iterable[global___CalibrationFrame]] = ...,
        extrinsics_input : typing.Optional[calibration_pb2.CameraExtrinsics] = ...,
        extrinsics : typing.Optional[calibration_pb2.CameraExtrinsics] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["calibration_config",b"calibration_config","camera_id",b"camera_id","extrinsics",b"extrinsics","extrinsics_input",b"extrinsics_input","intrinsics",b"intrinsics","intrinsics_input",b"intrinsics_input","observation",b"observation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["calibration_config",b"calibration_config","camera_id",b"camera_id","extrinsics",b"extrinsics","extrinsics_frames",b"extrinsics_frames","extrinsics_input",b"extrinsics_input","intrinsics",b"intrinsics","intrinsics_frames",b"intrinsics_frames","intrinsics_input",b"intrinsics_input","observation",b"observation"]) -> None: ...
global___CalibrationData = CalibrationData
