# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import event_timestamp_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PhaseSpaceMetadata(google.protobuf.message.Message):
    """Metadata to be used with a Transform payload that adds information required
    for PhaseSpace.
    The time that the PhaseSpace reading was received on the gLinux system is
    stored in the timestamp field of the LogEntryId.
    This is supposed to be within less than 1ms of the original acquisition
    time on the Phasespace server.
    The camera delay (delay between exposure and the server receiving the data)
    is approx. 3ms (data provided by Phasespace).
    Hence, the timestamp in this proto is approx. 3-4ms later than the
    exposure. This delay has low jitter, but is tricky to measure.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _DeviceType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _DeviceTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DeviceType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        DEVICE_TYPE_UNKNOWN: PhaseSpaceMetadata.DeviceType.ValueType = ...  # 0
        DEVICE_TYPE_MARKER: PhaseSpaceMetadata.DeviceType.ValueType = ...  # 1
        DEVICE_TYPE_RIGID: PhaseSpaceMetadata.DeviceType.ValueType = ...  # 2
    class DeviceType(_DeviceType, metaclass=_DeviceTypeEnumTypeWrapper):
        pass

    DEVICE_TYPE_UNKNOWN: PhaseSpaceMetadata.DeviceType.ValueType = ...  # 0
    DEVICE_TYPE_MARKER: PhaseSpaceMetadata.DeviceType.ValueType = ...  # 1
    DEVICE_TYPE_RIGID: PhaseSpaceMetadata.DeviceType.ValueType = ...  # 2

    TYPE_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    INTERNAL_FLAGS_FIELD_NUMBER: builtins.int
    INTERNAL_TIME_FIELD_NUMBER: builtins.int
    INTERNAL_COND_FIELD_NUMBER: builtins.int
    IS_RIGID_ESTIMATED_FROM_MARKER_FIELD_NUMBER: builtins.int
    type: global___PhaseSpaceMetadata.DeviceType.ValueType = ...
    id: builtins.int = ...
    """The ID of the device."""

    internal_flags: builtins.int = ...
    """Internal fields provided by the Phasespace SDK.
    See https://drive.google.com/open?id=1_FYo8lRkwee8O1nWhRotDdVai0sTeLSv
    for details
    """

    internal_time: builtins.int = ...
    internal_cond: builtins.float = ...
    is_rigid_estimated_from_marker: builtins.bool = ...
    """For a rigid body, whether it is estimated from marker positions or from
    phasespace API.
    """

    def __init__(self,
        *,
        type : global___PhaseSpaceMetadata.DeviceType.ValueType = ...,
        id : builtins.int = ...,
        internal_flags : builtins.int = ...,
        internal_time : builtins.int = ...,
        internal_cond : builtins.float = ...,
        is_rigid_estimated_from_marker : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","internal_cond",b"internal_cond","internal_flags",b"internal_flags","internal_time",b"internal_time","is_rigid_estimated_from_marker",b"is_rigid_estimated_from_marker","type",b"type"]) -> None: ...
global___PhaseSpaceMetadata = PhaseSpaceMetadata

class ImageMetadata(google.protobuf.message.Message):
    """Metadata for the EncodedImage or VideoFrame payload -- typically image
    information that is outside of the image's pixel contents.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class EventTimestampsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int = ...
        @property
        def value(self) -> event_timestamp_pb2.EventTimestamp: ...
        def __init__(self,
            *,
            key : builtins.int = ...,
            value : typing.Optional[event_timestamp_pb2.EventTimestamp] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    EVENT_TIMESTAMPS_FIELD_NUMBER: builtins.int
    FRAME_INDEX_FIELD_NUMBER: builtins.int
    ORIGIN_FILEPATH_FIELD_NUMBER: builtins.int
    REFERENCE_FRAME_ID_FIELD_NUMBER: builtins.int
    @property
    def event_timestamps(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, event_timestamp_pb2.EventTimestamp]:
        """Map of event timestamps whose keys are the casted int of TimestampType enum
        values.
        """
        pass
    frame_index: builtins.int = ...
    origin_filepath: typing.Text = ...
    reference_frame_id: typing.Text = ...
    """A unique designator for the reference frame that the image originated from.
    Useful when there's more than one source of images (e.g. two cameras).
    """

    def __init__(self,
        *,
        event_timestamps : typing.Optional[typing.Mapping[builtins.int, event_timestamp_pb2.EventTimestamp]] = ...,
        frame_index : typing.Optional[builtins.int] = ...,
        origin_filepath : typing.Optional[typing.Text] = ...,
        reference_frame_id : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_frame_index",b"_frame_index","_origin_filepath",b"_origin_filepath","_reference_frame_id",b"_reference_frame_id","frame_index",b"frame_index","origin_filepath",b"origin_filepath","reference_frame_id",b"reference_frame_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_frame_index",b"_frame_index","_origin_filepath",b"_origin_filepath","_reference_frame_id",b"_reference_frame_id","event_timestamps",b"event_timestamps","frame_index",b"frame_index","origin_filepath",b"origin_filepath","reference_frame_id",b"reference_frame_id"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_frame_index",b"_frame_index"]) -> typing.Optional[typing_extensions.Literal["frame_index"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_origin_filepath",b"_origin_filepath"]) -> typing.Optional[typing_extensions.Literal["origin_filepath"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_reference_frame_id",b"_reference_frame_id"]) -> typing.Optional[typing_extensions.Literal["reference_frame_id"]]: ...
global___ImageMetadata = ImageMetadata

class VideoMetadata(google.protobuf.message.Message):
    """Metadata for the VideoChunk payload to associate various timestamps with
    each video frame.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FRAME_TIMESTAMPS_FIELD_NUMBER: builtins.int
    @property
    def frame_timestamps(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ImageMetadata]: ...
    def __init__(self,
        *,
        frame_timestamps : typing.Optional[typing.Iterable[global___ImageMetadata]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["frame_timestamps",b"frame_timestamps"]) -> None: ...
global___VideoMetadata = VideoMetadata
