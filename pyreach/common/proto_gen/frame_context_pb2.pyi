# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import object_ref_pb2
import pose_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class FrameContext(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FRAME_REF_FIELD_NUMBER: builtins.int
    WORLD_POSE_FRAME_FIELD_NUMBER: builtins.int
    @property
    def frame_ref(self) -> object_ref_pb2.ObjectRef:
        """Reference to a frame or scope in a hierarchical arrangement of named and
        posed objects, such as a scene graph.

        The frame_ref.path field contains the full path name of the frame.
        """
        pass
    @property
    def world_pose_frame(self) -> pose_pb2.Pose3d:
        """Pose of the graph frame in the world.  Identity by default."""
        pass
    def __init__(self,
        *,
        frame_ref : typing.Optional[object_ref_pb2.ObjectRef] = ...,
        world_pose_frame : typing.Optional[pose_pb2.Pose3d] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["frame_ref",b"frame_ref","world_pose_frame",b"world_pose_frame"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["frame_ref",b"frame_ref","world_pose_frame",b"world_pose_frame"]) -> None: ...
global___FrameContext = FrameContext

class FrameContextRelative(google.protobuf.message.Message):
    """FrameContextRelative describes incremental information that will enable a
    child context to be created from its parent FrameContext.

    The child FrameContext will generally contain:

    frame_ref {
      path: "<parent.frame_ref.path>/<delta.relative_ref.path>"
      type: delta.relative_ref.type
      id: delta.relative_ref.id
    }
    world_pose_frame: parent.world_pose_frame * delta.parent_pose_frame

    For some ID types, a handler will construct a new child ID from parent and
    child IDs.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RELATIVE_REF_FIELD_NUMBER: builtins.int
    PARENT_POSE_FRAME_FIELD_NUMBER: builtins.int
    @property
    def relative_ref(self) -> object_ref_pb2.ObjectRef:
        """Fields to be modified in or appended to the parent frame_ref."""
        pass
    @property
    def parent_pose_frame(self) -> pose_pb2.Pose3d:
        """Pose of the frame with respect to its parent.  Identity by default."""
        pass
    def __init__(self,
        *,
        relative_ref : typing.Optional[object_ref_pb2.ObjectRef] = ...,
        parent_pose_frame : typing.Optional[pose_pb2.Pose3d] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["parent_pose_frame",b"parent_pose_frame","relative_ref",b"relative_ref"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["parent_pose_frame",b"parent_pose_frame","relative_ref",b"relative_ref"]) -> None: ...
global___FrameContextRelative = FrameContextRelative
