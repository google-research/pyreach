/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-12-06 23:29:44.258623
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.571)*x2);
x13=((0.12)*x3);
x14=((0.12)*x2);
x15=((1.0)*x10);
x16=((1.0)*x6);
x17=((1.0)*x8);
x18=((1.0)*x3);
x19=((1.0)*x2);
x20=((0.117)*x6);
x21=((1.0)*x5);
x22=((0.117)*x5);
x23=(x0*x4);
x24=(x1*x11);
x25=(x11*x8);
x26=(x1*x3);
x27=(x0*x8);
x28=(x11*x4);
x29=(x0*x1);
x30=(x3*x4);
x31=(x11*x15);
x32=(x18*x29);
x33=(x18*x24);
x34=(((x1*x2))+x30);
x35=(((x1*x18))+(((-1.0)*x19*x4)));
x36=(x34*x5);
x37=(x35*x6);
x38=((((-1.0)*x32))+((x2*x23)));
x39=((((-1.0)*x33))+((x2*x28)));
x40=(((x18*x23))+((x19*x29)));
x41=(((x18*x28))+((x19*x24)));
x42=(x38*x5);
x43=(x39*x5);
x44=(x41*x6);
x45=(((x35*x5))+((x6*(((((-1.0)*x18*x4))+(((-1.0)*x1*x19)))))));
x46=(x42+((x40*x6)));
x47=(x44+x43);
x48=(x47*x8);
x49=(((x16*(((((-1.0)*x32))+((x19*x23))))))+(((-1.0)*x21*x40)));
x50=(((x16*(((((-1.0)*x33))+((x19*x28))))))+(((-1.0)*x21*x41)));
eerot[0]=(((x9*(((((-1.0)*x17*x46))+x31))))+((x49*x7)));
eerot[1]=(((x7*(((((-1.0)*x31))+((x46*x8))))))+((x49*x9)));
eerot[2]=(((x10*x46))+x25);
eetrans[0]=(((x10*((((x20*x40))+((x22*x38))))))+(((-0.613)*x29))+(((0.174)*x11))+((x6*(((((-1.0)*x14*x23))+((x13*x29))))))+((x5*((((x14*x29))+((x13*x23))))))+(((-0.571)*x0*x26))+((x12*x23))+(((0.117)*x25)));
eerot[3]=(((x50*x7))+((x9*(((((-1.0)*x0*x15))+(((-1.0)*x17*x47)))))));
eerot[4]=(((x50*x9))+((x7*((((x0*x10))+x48)))));
eerot[5]=(((x10*x47))+(((-1.0)*x0*x17)));
eetrans[1]=(((x10*((((x20*x41))+((x22*x39))))))+((x5*((((x14*x24))+((x13*x28))))))+(((-0.613)*x24))+(((-0.571)*x24*x3))+((x6*(((((-1.0)*x14*x28))+((x13*x24))))))+((x12*x28))+(((-0.174)*x0))+(((-0.117)*x27)));
eerot[6]=(((x45*x7))+((x8*x9*((x37+x36)))));
eerot[7]=(((x45*x9))+((x7*x8*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x16*x35))+(((-1.0)*x21*x34)))));
IkReal x51=((1.0)*x1);
eetrans[2]=((0.181)+(((-0.571)*x30))+(((-1.0)*x12*x51))+((x10*(((((-1.0)*x20*x35))+(((-1.0)*x22*x34))))))+((x5*(((((-1.0)*x13*x51))+((x14*x4))))))+((x6*((((x1*x14))+((x13*x4))))))+(((-0.613)*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((0.117)*r02))+(((-1.0)*px)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((0.117)*r12))+(((-1.0)*py)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.181)+(((-0.117)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.24)*npx);
IkReal x56=((0.24)*npy);
IkReal x57=((0.12)*r22);
IkReal x58=((0.12)*r21);
IkReal x59=((-0.12)*r20);
IkReal x60=((-1.0)*r20);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-0.12)*r21);
IkReal x63=((-1.0)*r21);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*npx);
IkReal x66=((-1.0)*r22);
IkReal x67=((-1.0)*npz);
matrixinvcoeffs[0]=x59;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x60;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x61;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x59;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x60;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x66;
matrixinvcoeffs[76]=x57;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x57;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x64;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x62;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x64;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x58;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x60;
matrixinvcoeffs[133]=x65;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.12)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x60;
matrixinvcoeffs[151]=x65;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x59;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x66;
matrixinvcoeffs[165]=x67;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x57;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x66;
matrixinvcoeffs[183]=x67;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.12)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x63;
matrixinvcoeffs[204]=x58;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x58;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x65;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x59;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x60;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x59;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x61;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=pz*pz;
IkReal x69=pp*pp;
IkReal x70=((0.24)*pz);
IkReal x71=(gclwh4_8*rxp2_2);
IkReal x72=(pp*r21);
IkReal x73=(gclwh12_8*npy);
IkReal x74=(gclwh11_0*rxp2_2);
IkReal x75=(npy*pz);
IkReal x76=(gclwh13_15*rxp1_2);
IkReal x77=(gclwh4_11*rxp2_2);
IkReal x78=(gclwh12_11*rxp1_2);
IkReal x79=((0.0288)*r22);
IkReal x80=(npz*pz);
IkReal x81=((0.28416)*rxp1_2);
IkReal x82=(npx*pz);
IkReal x83=(gclwh10_12*r22);
IkReal x84=(gclwh15_1*r20);
IkReal x85=(gclwh5_10*rxp2_2);
IkReal x86=((0.348)*gclwh12_14);
IkReal x87=(pp*r20);
IkReal x88=((2.0)*gclwh11_10);
IkReal x89=(gclwh7_0*r21);
IkReal x90=(gclwh14_2*pz);
IkReal x91=(gclwh13_10*rxp1_2);
IkReal x92=((0.0144)*pz);
IkReal x93=(gclwh15_0*r20);
IkReal x94=(pp*r22);
IkReal x95=((0.348)*gclwh5_15);
IkReal x96=(gclwh12_8*r21);
IkReal x97=(gclwh5_9*rxp2_2);
IkReal x98=((2.0)*gclwh4_11);
IkReal x99=(gclwh13_0*rxp1_2);
IkReal x100=(gclwh12_2*r21);
IkReal x101=(gclwh15_1*rxp0_2);
IkReal x102=((0.24)*pp);
IkReal x103=((1.0)*pz);
IkReal x104=((0.29424)*rxp1_2);
IkReal x105=((4.0)*gclwh9_10);
IkReal x106=((0.0576)*r22);
IkReal x107=((2.0)*gclwh9_10);
IkReal x108=(gclwh0_0*r20);
IkReal x109=((0.0042336)*rxp2_2);
IkReal x110=(gclwh10_2*r22);
IkReal x111=((2.0)*gclwh15_10);
IkReal x112=(gclwh13_1*r21);
IkReal x113=(gclwh4_2*rxp2_2);
IkReal x114=((2.0)*gclwh13_10);
IkReal x115=((0.0340992)*r20);
IkReal x116=(gclwh14_8*r20);
IkReal x117=((0.0006048)*r22);
IkReal x118=((0.348)*gclwh13_15);
IkReal x119=((2.0)*gclwh10_11);
IkReal x120=(gclwh15_9*rxp0_2);
IkReal x121=(gclwh2_1*r21);
IkReal x122=((2.0)*pp);
IkReal x123=((4.0)*gclwh11_10);
IkReal x124=(gclwh0_1*r20);
IkReal x125=((0.02016)*rxp0_2);
IkReal x126=(gclwh11_13*rxp2_2);
IkReal x127=(gclwh14_8*rxp0_2);
IkReal x128=((2.0)*gclwh7_10);
IkReal x129=((0.0170496)*r20);
IkReal x130=((0.24)*rxp1_2);
IkReal x131=(gclwh13_9*r21);
IkReal x132=(gclwh3_2*r21);
IkReal x133=((0.04176)*rxp0_2);
IkReal x134=(gclwh6_2*r21);
IkReal x135=((0.48)*rxp0_2);
IkReal x136=((4.0)*gclwh8_11);
IkReal x137=(gclwh11_0*r22);
IkReal x138=((0.27408)*rxp0_2);
IkReal x139=(gclwh5_9*r22);
IkReal x140=((0.04176)*rxp2_2);
IkReal x141=((0.348)*gclwh15_15);
IkReal x142=((0.48)*rxp2_2);
IkReal x143=((0.0144)*r20);
IkReal x144=(gclwh8_12*rxp0_2);
IkReal x145=(gclwh7_0*rxp1_2);
IkReal x146=(gclwh6_12*r21);
IkReal x147=((0.0025056)*r20);
IkReal x148=((4.0)*gclwh7_10);
IkReal x149=((0.0025056)*r21);
IkReal x150=(gclwh7_10*r21);
IkReal x151=(gclwh9_10*r20);
IkReal x152=(gclwh8_12*r20);
IkReal x153=(gclwh8_2*r20);
IkReal x154=(gclwh9_0*r20);
IkReal x155=((0.96)*rxp0_2);
IkReal x156=(gclwh5_15*rxp2_2);
IkReal x157=(gclwh5_0*rxp2_2);
IkReal x158=((0.348)*gclwh14_14);
IkReal x159=(gclwh14_14*rxp0_2);
IkReal x160=((0.0144)*r22);
IkReal x161=(gclwh15_15*rxp0_2);
IkReal x162=((2.0)*gclwh6_11);
IkReal x163=(gclwh1_3*r20);
IkReal x164=((0.48)*rxp1_2);
IkReal x165=((0.0025056)*r22);
IkReal x166=((0.0050112)*r22);
IkReal x167=((0.0050112)*r21);
IkReal x168=(gclwh4_2*r22);
IkReal x169=((0.56832)*rxp0_2);
IkReal x170=((2.0)*gclwh12_11);
IkReal x171=(gclwh14_3*r20);
IkReal x172=((0.0144)*r21);
IkReal x173=((0.04176)*rxp1_2);
IkReal x174=(gclwh10_2*rxp2_2);
IkReal x175=(gclwh2_0*r21);
IkReal x176=(gclwh13_1*rxp1_2);
IkReal x177=(gclwh9_13*r20);
IkReal x178=((0.01008)*rxp1_2);
IkReal x179=(gclwh1_2*r20);
IkReal x180=(gclwh4_3*rxp2_2);
IkReal x181=(gclwh7_13*r21);
IkReal x182=(gclwh11_13*r22);
IkReal x183=(gclwh10_12*rxp2_2);
IkReal x184=(gclwh13_0*r21);
IkReal x185=((2.0)*gclwh8_11);
IkReal x186=((0.0204153408)*r22);
IkReal x187=((4.0)*gclwh10_11);
IkReal x188=(gclwh3_3*r21);
IkReal x189=((0.348)*gclwh4_14);
IkReal x190=(gclwh5_0*r22);
IkReal x191=((2.0)*gclwh5_10);
IkReal x192=((0.56832)*rxp1_2);
IkReal x193=(gclwh12_3*rxp1_2);
IkReal x194=(gclwh5_1*r22);
IkReal x195=(gclwh5_1*rxp2_2);
IkReal x196=(gclwh14_3*rxp0_2);
IkReal x197=(gclwh12_2*rxp1_2);
IkReal x198=(gclwh15_9*r20);
IkReal x199=((4.0)*gclwh6_11);
IkReal x200=((0.24)*rxp2_2);
IkReal x201=((0.24)*rxp0_2);
IkReal x202=((0.0288)*r21);
IkReal x203=(gclwh12_3*r21);
IkReal x204=((0.0288)*r20);
IkReal x205=(gclwh4_8*r22);
IkReal x206=(gclwh4_14*rxp2_2);
IkReal x207=((0.0050112)*r20);
IkReal x208=((0.0288)*rxp1_2);
IkReal x209=(gclwh6_2*rxp1_2);
IkReal x210=(gclwh4_3*r22);
IkReal x211=(gclwh12_14*rxp1_2);
IkReal x212=((2.0)*gclwh14_11);
IkReal x213=(gclwh9_13*rxp0_2);
IkReal x214=(gclwh6_5*x149);
IkReal x215=(gclwh14_14*x133);
IkReal x216=(gclwh10_5*x165);
IkReal x217=(gclwh12_14*x173);
IkReal x218=(gclwh8_5*x147);
IkReal x219=(gclwh4_14*x140);
IkReal x220=((0.0288)*x71);
IkReal x221=(gclwh6_11*x172);
IkReal x222=(gclwh12_8*x208);
IkReal x223=((0.24)*x77);
IkReal x224=((0.24)*x78);
IkReal x225=(gclwh14_11*x201);
IkReal x226=(gclwh10_11*x160);
IkReal x227=((0.0288)*x127);
IkReal x228=(gclwh8_11*x143);
IkReal x229=(gclwh9_10*x143);
IkReal x230=(gclwh13_9*x208);
IkReal x231=(gclwh15_10*x201);
IkReal x232=((0.0288)*x97);
IkReal x233=(gclwh11_10*x160);
IkReal x234=((0.0144)*x150);
IkReal x235=((0.24)*x91);
IkReal x236=((0.0288)*x120);
IkReal x237=((0.24)*x85);
IkReal x238=(gclwh7_7*x149);
IkReal x239=(gclwh15_15*x133);
IkReal x240=(gclwh9_7*x147);
IkReal x241=(gclwh11_7*x165);
IkReal x242=((0.04176)*x76);
IkReal x243=(gclwh5_15*x140);
IkReal x244=(gclwh8_5*x133);
IkReal x245=(gclwh14_14*x147);
IkReal x246=(gclwh10_5*x140);
IkReal x247=(gclwh12_14*x149);
IkReal x248=(gclwh6_5*x173);
IkReal x249=(gclwh4_14*x165);
IkReal x250=(gclwh10_11*x200);
IkReal x251=((0.001728)*x96);
IkReal x252=((0.001728)*x205);
IkReal x253=(gclwh12_11*x172);
IkReal x254=(gclwh4_11*x160);
IkReal x255=(gclwh8_11*x201);
IkReal x256=(gclwh6_11*x130);
IkReal x257=(gclwh14_11*x143);
IkReal x258=((0.001728)*x116);
IkReal x259=(gclwh13_10*x172);
IkReal x260=((0.001728)*x198);
IkReal x261=(gclwh5_10*x160);
IkReal x262=(gclwh11_10*x200);
IkReal x263=(gclwh9_10*x201);
IkReal x264=(gclwh7_10*x130);
IkReal x265=((0.001728)*x131);
IkReal x266=((0.001728)*x139);
IkReal x267=(gclwh15_10*x143);
IkReal x268=(gclwh5_15*x165);
IkReal x269=(gclwh7_7*x173);
IkReal x270=(gclwh13_15*x149);
IkReal x271=(gclwh9_7*x133);
IkReal x272=(gclwh15_15*x147);
IkReal x273=(gclwh11_7*x140);
IkReal x274=(gclwh14_11*x135);
IkReal x275=(gclwh10_11*x79);
IkReal x276=(gclwh8_11*x204);
IkReal x277=((0.08352)*x159);
IkReal x278=((0.08352)*x206);
IkReal x279=((0.08352)*x211);
IkReal x280=(gclwh6_11*x202);
IkReal x281=((0.48)*x77);
IkReal x282=((0.48)*x78);
IkReal x283=((0.08352)*x76);
IkReal x284=((0.08352)*x156);
IkReal x285=((0.08352)*x161);
IkReal x286=(gclwh15_10*x135);
IkReal x287=((0.0288)*x151);
IkReal x288=(gclwh11_10*x79);
IkReal x289=((0.48)*x85);
IkReal x290=((0.0288)*x150);
IkReal x291=((0.48)*x91);
IkReal x292=(gclwh6_11*x164);
IkReal x293=(gclwh14_11*x204);
IkReal x294=(gclwh14_14*x207);
IkReal x295=(gclwh4_14*x166);
IkReal x296=(gclwh12_14*x167);
IkReal x297=((2.0)*x68);
IkReal x298=((1.0)*x69);
IkReal x299=((0.348)*gclwh8_5*x82);
IkReal x300=((0.174)*gclwh6_5*x72);
IkReal x301=((0.348)*gclwh10_5*x80);
IkReal x302=((0.348)*gclwh6_5*x75);
IkReal x303=((0.174)*gclwh10_5*x94);
IkReal x304=((0.174)*gclwh8_5*x87);
IkReal x305=(gclwh14_2*rxp0_2*x70);
IkReal x306=(x102*x180);
IkReal x307=(x119*x80);
IkReal x308=(x185*x82);
IkReal x309=(gclwh10_2*pz*x94);
IkReal x310=(x153*x92);
IkReal x311=(x102*x193);
IkReal x312=(x110*x92);
IkReal x313=(gclwh8_2*pz*x87);
IkReal x314=(x197*x70);
IkReal x315=(x113*x70);
IkReal x316=(x162*x75);
IkReal x317=(x102*x196);
IkReal x318=(x134*x92);
IkReal x319=(x102*x176);
IkReal x320=(x102*x195);
IkReal x321=(gclwh15_0*rxp0_2*x70);
IkReal x322=(gclwh11_0*pz*x94);
IkReal x323=(x154*x92);
IkReal x324=(x128*x75);
IkReal x325=(x137*x92);
IkReal x326=(gclwh9_0*pz*x87);
IkReal x327=(x80*x88);
IkReal x328=(x70*x99);
IkReal x329=(x107*x82);
IkReal x330=(x157*x70);
IkReal x331=(x89*x92);
IkReal x332=(x101*x102);
IkReal x333=((0.174)*gclwh7_7*x72);
IkReal x334=((0.348)*gclwh9_7*x82);
IkReal x335=((0.348)*gclwh11_7*x80);
IkReal x336=((0.174)*gclwh11_7*x94);
IkReal x337=((0.348)*gclwh7_7*x75);
IkReal x338=((0.174)*gclwh9_7*x87);
IkReal x339=(x75*x86);
IkReal x340=((0.174)*gclwh14_14*x87);
IkReal x341=(x189*x80);
IkReal x342=((0.174)*gclwh12_14*x72);
IkReal x343=(x158*x82);
IkReal x344=((0.174)*gclwh4_14*x94);
IkReal x345=(x87*x90);
IkReal x346=(x203*x69);
IkReal x347=((0.12)*gclwh12_8*x72);
IkReal x348=(gclwh14_8*npx*x70);
IkReal x349=(x209*x70);
IkReal x350=((0.12)*gclwh4_8*x94);
IkReal x351=(x143*x90);
IkReal x352=(x179*x92);
IkReal x353=(x188*x69);
IkReal x354=(x163*x69);
IkReal x355=(x212*x82);
IkReal x356=(x210*x69);
IkReal x357=(x132*x92);
IkReal x358=(x80*x98);
IkReal x359=(x100*x92);
IkReal x360=(gclwh4_8*npz*x70);
IkReal x361=(x168*x92);
IkReal x362=(x174*x70);
IkReal x363=((0.12)*gclwh14_8*x87);
IkReal x364=(x70*x73);
IkReal x365=(gclwh8_2*rxp0_2*x70);
IkReal x366=(x170*x75);
IkReal x367=(x184*x92);
IkReal x368=(x69*x84);
IkReal x369=(x190*x92);
IkReal x370=(gclwh5_0*pz*x94);
IkReal x371=(gclwh13_0*pz*x72);
IkReal x372=(x108*x92);
IkReal x373=(x175*x92);
IkReal x374=((0.12)*gclwh15_9*x87);
IkReal x375=(x111*x82);
IkReal x376=(x121*x69);
IkReal x377=(x70*x74);
IkReal x378=(gclwh5_9*npz*x70);
IkReal x379=(gclwh13_9*npy*x70);
IkReal x380=(gclwh9_0*rxp0_2*x70);
IkReal x381=(x124*x69);
IkReal x382=((0.12)*gclwh13_9*x72);
IkReal x383=(gclwh15_9*npx*x70);
IkReal x384=(x92*x93);
IkReal x385=(x191*x80);
IkReal x386=((0.12)*gclwh5_9*x94);
IkReal x387=(x114*x75);
IkReal x388=(x145*x70);
IkReal x389=(x141*x82);
IkReal x390=((0.174)*gclwh13_15*x72);
IkReal x391=((0.174)*gclwh5_15*x94);
IkReal x392=((0.174)*gclwh15_15*x87);
IkReal x393=(x80*x95);
IkReal x394=(x118*x75);
IkReal x395=(x185*x87);
IkReal x396=(x119*x94);
IkReal x397=(x199*x75);
IkReal x398=(x136*x82);
IkReal x399=(x162*x72);
IkReal x400=(x187*x80);
IkReal x401=(x88*x94);
IkReal x402=(x148*x75);
IkReal x403=(x107*x87);
IkReal x404=(x128*x72);
IkReal x405=(x105*x82);
IkReal x406=(x123*x80);
IkReal x407=(x212*x87);
IkReal x408=((4.0)*gclwh12_11*x75);
IkReal x409=((4.0)*gclwh4_11*x80);
IkReal x410=((0.696)*gclwh4_14*x80);
IkReal x411=(x158*x87);
IkReal x412=((0.696)*gclwh12_14*x75);
IkReal x413=(x72*x86);
IkReal x414=((0.696)*gclwh14_14*x82);
IkReal x415=(x189*x94);
IkReal x416=(gclwh6_2*npy*x297);
IkReal x417=(gclwh6_2*x103*x72);
IkReal x418=(gclwh10_2*npz*x297);
IkReal x419=(gclwh8_2*npx*x297);
IkReal x420=(gclwh7_0*npy*x297);
IkReal x421=(gclwh9_0*npx*x297);
IkReal x422=(gclwh11_0*npz*x297);
IkReal x423=(gclwh7_0*x103*x72);
IkReal x424=(gclwh12_2*npy*x297);
IkReal x425=(gclwh3_2*npy*x297);
IkReal x426=(gclwh1_2*npx*x297);
IkReal x427=(gclwh14_3*x122*x82);
IkReal x428=(gclwh4_2*npz*x297);
IkReal x429=(gclwh4_3*x122*x80);
IkReal x430=(gclwh12_2*x103*x72);
IkReal x431=(gclwh1_2*x103*x87);
IkReal x432=(gclwh3_3*x122*x75);
IkReal x433=(gclwh4_2*x103*x94);
IkReal x434=(gclwh1_3*x122*x82);
IkReal x435=(gclwh3_2*x103*x72);
IkReal x436=(gclwh12_3*x122*x75);
IkReal x437=(gclwh14_2*npx*x297);
IkReal x438=(x171*x298);
IkReal x439=(gclwh0_0*npx*x297);
IkReal x440=(gclwh2_0*npy*x297);
IkReal x441=(gclwh5_1*x122*x80);
IkReal x442=(gclwh13_1*x122*x75);
IkReal x443=(gclwh15_0*npx*x297);
IkReal x444=(gclwh2_1*x122*x75);
IkReal x445=(gclwh0_1*x122*x82);
IkReal x446=(gclwh5_0*npz*x297);
IkReal x447=(gclwh13_0*npy*x297);
IkReal x448=(gclwh0_0*x103*x87);
IkReal x449=(gclwh15_0*x103*x87);
IkReal x450=(gclwh2_0*x103*x72);
IkReal x451=(x112*x298);
IkReal x452=(x194*x298);
IkReal x453=(gclwh15_1*x122*x82);
IkReal x454=(x273+x271);
IkReal x455=(x278+x279);
IkReal x456=(x246+x244);
IkReal x457=(x284+x283);
IkReal x458=(x243+x242);
IkReal x459=(x217+x219);
IkReal x460=(x316+x228+x225+x226);
IkReal x461=(x324+x229+x233+x231);
IkReal x462=(x387+x385+x264+x267);
IkReal x463=(x358+x366+x256+x257);
IkReal x464=(x394+x393+x392+x272);
IkReal x465=(x333+x335+x334+x238);
IkReal x466=(x339+x340+x341+x245);
IkReal x467=(x300+x301+x214+x299);
IkReal x468=(x294+x412+x410+x411);
IkReal x469=(x375+x259+x261+x263+x262);
IkReal x470=(x355+x254+x255+x250+x253);
IkReal x471=(x327+x329+x237+x234+x235);
IkReal x472=(x308+x307+x221+x223+x224);
IkReal x473=(x295+x296+x413+x414+x415);
IkReal x474=(x292+x293+x407+x409+x408);
IkReal x475=(x338+x337+x336+x241+x240);
IkReal x476=(x389+x391+x390+x268+x270);
IkReal x477=(x342+x343+x344+x247+x249);
IkReal x478=(x304+x302+x303+x216+x218);
IkReal x479=(x399+x398+x282+x281+x280+x400);
IkReal x480=(x290+x291+x289+x405+x404+x406);
IkReal x481=(x288+x287+x286+x401+x403+x402);
IkReal x482=(x395+x397+x396+x276+x274+x275);
IkReal x483=(((gclwh10_11*x142))+((gclwh8_11*x135))+((x170*x72))+((gclwh12_11*x202))+(((4.0)*gclwh14_11*x82))+((gclwh4_11*x79))+((x94*x98)));
IkReal x484=(x318+x315+x314+x317+x227+x417+x418+x419);
IkReal x485=(x332+x331+x330+x328+x236+x423+x422+x421);
IkReal x486=(x325+x326+x320+x321+x322+x323+x319+x232+x230+x420);
IkReal x487=(x309+x306+x305+x311+x310+x313+x312+x220+x222+x416);
IkReal x488=(x386+x384+x382+x383+x388+x265+x266+x449+x448+x445+x444+x447+x446+x452+x453+x450+x451);
IkReal x489=(x359+x360+x361+x362+x363+x364+x365+x258+x429+x438+x430+x431+x432+x433+x434+x435+x436+x437);
IkReal x490=(x351+x350+x353+x352+x354+x357+x356+x346+x347+x345+x348+x349+x251+x252+x428+x427+x426+x425+x424+x70);
IkReal x491=(x380+x381+x379+x378+x377+x376+x374+x373+x372+x371+x370+x368+x369+x367+x260+x439+x441+x440+x443+x442+x70);
op[0]=((((0.0170496)*x146))+(((-2.368)*gclwh6_12*x75))+(((2.368)*gclwh10_12*x80))+(((-1.0)*gclwh8_12*x129))+(((-0.28416)*x71))+(((2.368)*gclwh8_12*x82))+(((-1.0)*x478))+(((-1.184)*gclwh8_12*x87))+x459+x467+(((0.28416)*x127))+(((-0.0170496)*x83))+(((1.184)*gclwh6_12*x72))+(((-1.0)*x215))+(((-1.0)*gclwh12_8*x81))+(((-1.184)*pp*x83)));
op[1]=((((-1.0)*x484))+(((-1.0)*x472))+x487+x460+(((0.34025568)*x196))+(((-0.34025568)*x193))+(((-1.0)*gclwh6_11*x72))+(((-0.34025568)*x180))+((gclwh8_11*x87))+((gclwh10_11*x94)));
op[2]=((-0.397416)+(((-1.0)*x479))+x482);
op[3]=((((0.0164448)*x110))+(((0.29424)*x71))+((gclwh12_8*x104))+(((-0.27408)*x197))+(((-1.142)*gclwh6_2*x72))+(((-2.284)*gclwh8_2*x82))+(((2.284)*gclwh6_2*x75))+(((-1.0)*x455))+((gclwh14_2*x138))+x277+(((-2.284)*gclwh10_2*x80))+(((-0.29424)*x127))+(((1.142)*gclwh10_2*x94))+(((0.0164448)*x153))+(((-0.0164448)*x134))+(((1.142)*gclwh8_2*x87))+(((-0.27408)*x113)));
op[4]=((((0.084)*gclwh8_12*x82))+(((-0.042)*gclwh8_12*x87))+(((-1.0)*x478))+(((-0.0006048)*x152))+(((-1.0)*x459))+(((-0.084)*gclwh6_12*x75))+(((0.01008)*x71))+x215+x467+((gclwh12_8*x178))+(((-0.01008)*x127))+(((0.042)*gclwh6_12*x72))+(((-0.0006048)*x83))+(((0.084)*gclwh10_12*x80))+(((-0.042)*pp*x83))+(((0.0006048)*x146)));
op[5]=((((-1.0)*gclwh8_11*x87))+((gclwh6_11*x72))+(((-1.0)*gclwh10_11*x94))+(((-1.0)*x484))+(((-1.0)*x460))+(((-1.0)*gclwh4_3*x109))+x487+x472+(((0.0042336)*x196))+(((-0.0042336)*x193)));
op[6]=(((gclwh7_10*x72))+(((-1.0)*x485))+(((0.34025568)*x101))+(((-1.0)*x461))+(((-0.34025568)*x176))+x486+x471+(((-0.34025568)*x195))+(((-1.0)*gclwh9_10*x87))+(((-1.0)*gclwh11_10*x94)));
op[7]=((((0.0170496)*x181))+(((-1.0)*gclwh13_9*x81))+(((-0.28416)*x97))+(((2.368)*gclwh11_13*x80))+(((-1.0)*x475))+(((-1.184)*gclwh11_13*x94))+(((-1.184)*gclwh9_13*x87))+(((-1.0)*x239))+(((-0.0170496)*x182))+x458+x465+(((-1.0)*gclwh9_13*x129))+(((0.28416)*x120))+(((1.184)*gclwh7_13*x72))+(((2.368)*gclwh9_13*x82))+(((-2.368)*gclwh7_13*x75)));
op[8]=((((-2.284)*gclwh11_0*x80))+(((-0.27408)*x157))+(((0.0164448)*x137))+(((1.142)*gclwh9_0*x87))+((gclwh15_0*x138))+(((0.29424)*x120))+(((-2.284)*gclwh9_0*x82))+(((-1.0)*gclwh13_9*x104))+(((-1.142)*gclwh7_0*x72))+x457+(((-0.27408)*x99))+(((-0.29424)*x97))+(((-1.0)*x285))+(((0.0164448)*x154))+(((2.284)*gclwh7_0*x75))+(((1.142)*gclwh11_0*x94))+(((-0.0164448)*x89)));
op[9]=((-0.397416)+(((-1.0)*x480))+x481);
op[10]=((((-1.0)*x485))+(((0.0042336)*x101))+(((-1.0)*x471))+(((-1.0)*gclwh7_10*x72))+x486+x461+((gclwh11_10*x94))+(((-1.0)*gclwh5_1*x109))+((gclwh9_10*x87))+(((-0.0042336)*x176)));
op[11]=((((-1.0)*gclwh11_13*x117))+(((0.01008)*x97))+(((0.042)*gclwh7_13*x72))+(((-1.0)*x475))+(((-0.0006048)*x177))+(((-1.0)*x458))+x239+((gclwh13_9*x178))+x465+(((0.084)*gclwh11_13*x80))+(((-0.01008)*x120))+(((-0.084)*gclwh7_13*x75))+(((-0.042)*gclwh11_13*x94))+(((0.084)*gclwh9_13*x82))+(((0.0006048)*x181))+(((-0.042)*gclwh9_13*x87)));
op[12]=((((-2.368)*gclwh14_8*x82))+(((-1.184)*gclwh4_8*x94))+(((2.368)*gclwh4_8*x80))+(((-1.0)*x466))+(((2.368)*pz*x73))+(((-0.0170496)*x205))+(((-1.184)*gclwh12_8*x72))+x456+x477+(((1.184)*gclwh14_8*x87))+(((-0.0170496)*x96))+(((0.28416)*x144))+(((0.28416)*x183))+(((-1.0)*x248))+(((0.0170496)*x116))+(((-1.0)*gclwh6_12*x81)));
op[13]=((-1.432132)+(((2.835464)*gclwh3_3*x75))+(((0.0204153408)*x171))+(((0.0204153408)*x163))+(((-1.0)*gclwh4_11*x94))+(((-1.0)*x489))+(((2.835464)*gclwh4_3*x80))+(((2.835464)*gclwh12_3*x75))+(((-1.0)*x470))+(((-1.0)*gclwh12_11*x72))+((gclwh14_11*x87))+(((2.835464)*gclwh1_3*x82))+x490+x463+(((-0.0204153408)*x203))+(((-1.432132)*gclwh1_3*x87))+(((1.403332)*gclwh14_3*x87))+(((-1.432132)*gclwh3_3*x72))+(((-1.403332)*gclwh12_3*x72))+(((-2.835464)*gclwh14_3*x82))+(((-1.0)*gclwh4_3*x186))+(((0.0204153408)*x188))+(((-1.403332)*gclwh4_3*x94)));
op[14]=((-0.160008)+(((-1.0)*x483))+x474);
op[15]=((((0.0164448)*gclwh14_2*r20))+(((-1.142)*gclwh1_2*x87))+(((-2.284)*gclwh14_2*x82))+(((0.0164448)*x132))+(((1.226)*gclwh12_8*x72))+(((-0.27408)*x174))+(((-1.142)*gclwh4_2*x94))+(((0.27408)*x209))+(((2.452)*gclwh14_8*x82))+(((0.0176544)*x205))+(((-1.0)*x473))+(((-1.0)*gclwh8_2*x138))+(((2.284)*gclwh3_2*x75))+(((-0.0164448)*x168))+(((-1.226)*gclwh14_8*x87))+(((-2.452)*gclwh4_8*x80))+(((0.0176544)*x96))+x468+(((-0.0176544)*x116))+(((1.226)*gclwh4_8*x94))+(((-2.452)*pz*x73))+(((2.284)*gclwh12_2*x75))+(((2.284)*gclwh4_2*x80))+(((0.0164448)*x179))+(((-0.0164448)*x100))+(((2.284)*gclwh1_2*x82))+(((-1.142)*gclwh3_2*x72))+(((1.142)*gclwh14_2*x87))+(((-1.142)*gclwh12_2*x72)));
op[16]=((((-1.0)*gclwh6_12*x178))+(((0.084)*gclwh14_8*x82))+(((0.042)*gclwh4_8*x94))+(((0.042)*gclwh12_8*x72))+(((-0.084)*pz*x73))+(((-1.0)*x477))+x456+x466+(((0.01008)*x183))+((gclwh4_8*x117))+(((-1.0)*x248))+(((-0.0006048)*x116))+(((0.01008)*x144))+(((0.0006048)*x96))+(((-0.084)*gclwh4_8*x80))+(((-0.042)*gclwh14_8*x87)));
op[17]=((0.03204)+(((0.000254016)*x188))+(((-0.03528)*gclwh14_3*x82))+(((0.03528)*gclwh4_3*x80))+(((0.00324)*gclwh14_3*x87))+(((0.03528)*gclwh1_3*x82))+(((-1.0)*x489))+(((0.03528)*gclwh12_3*x75))+(((-1.0)*gclwh14_11*x87))+(((-0.000254016)*x203))+(((-0.03204)*gclwh3_3*x72))+((gclwh12_11*x72))+(((-1.0)*x463))+(((-0.00324)*gclwh4_3*x94))+((gclwh4_11*x94))+x490+x470+(((0.03528)*gclwh3_3*x75))+(((-0.000254016)*x210))+(((-0.00324)*gclwh12_3*x72))+(((-0.03204)*gclwh1_3*x87))+(((0.000254016)*x163))+(((0.000254016)*x171)));
op[18]=((1.432132)+((gclwh15_10*x87))+(((-1.403332)*pp*x84))+(((-1.0)*gclwh13_10*x72))+(((-1.432132)*gclwh2_1*x72))+(((0.0204153408)*x112))+(((-1.0)*x488))+(((1.403332)*gclwh13_1*x72))+(((-1.0)*gclwh5_10*x94))+(((-1.432132)*gclwh0_1*x87))+(((-0.0204153408)*x84))+(((2.835464)*gclwh15_1*x82))+(((0.0204153408)*x121))+(((0.0204153408)*x124))+(((-1.0)*x469))+x491+x462+(((-2.835464)*gclwh13_1*x75))+(((-2.835464)*gclwh5_1*x80))+(((2.835464)*gclwh0_1*x82))+((gclwh5_1*x186))+(((1.403332)*gclwh5_1*x94))+(((2.835464)*gclwh2_1*x75)));
op[19]=((((1.184)*gclwh13_9*x72))+(((-2.368)*gclwh13_9*x75))+(((-1.0)*x476))+(((1.184)*gclwh5_9*x94))+(((2.368)*gclwh15_9*x82))+(((-2.368)*gclwh5_9*x80))+(((-1.0)*x454))+x269+x464+(((-1.184)*gclwh15_9*x87))+(((-0.28416)*x213))+(((-1.0)*gclwh15_9*x129))+((gclwh7_13*x81))+(((-0.28416)*x126))+(((0.0170496)*x139))+(((0.0170496)*x131)));
op[20]=((((0.696)*gclwh13_15*x75))+(((-1.0)*x118*x72))+(((0.696)*gclwh5_15*x80))+(((-0.27408)*x145))+(((1.142)*gclwh5_0*x94))+(((-1.0)*gclwh5_15*x166))+((x141*x87))+(((-1.0)*x94*x95))+(((-0.0176544)*x198))+((gclwh15_15*x207))+(((-2.452)*gclwh13_9*x75))+(((1.226)*gclwh5_9*x94))+(((-2.452)*gclwh5_9*x80))+(((1.142)*gclwh13_0*x72))+(((-1.226)*gclwh15_9*x87))+(((-1.142)*gclwh15_0*x87))+(((-2.284)*gclwh13_0*x75))+(((0.0176544)*x131))+(((0.0176544)*x139))+(((-1.0)*gclwh13_15*x167))+((gclwh9_0*x138))+(((-2.284)*gclwh5_0*x80))+(((0.0164448)*x184))+(((2.284)*gclwh2_0*x75))+(((2.284)*gclwh15_0*x82))+(((0.0164448)*x190))+(((-0.0164448)*x93))+(((2.284)*gclwh0_0*x82))+(((1.226)*gclwh13_9*x72))+(((-1.142)*gclwh0_0*x87))+(((0.0164448)*x175))+(((-1.142)*gclwh2_0*x72))+(((0.27408)*x74))+(((-0.696)*gclwh15_15*x82))+(((2.452)*gclwh15_9*x82))+(((0.0164448)*x108)));
op[21]=((-0.160008)+(((-4.0)*gclwh5_10*x80))+((x191*x94))+(((4.0)*gclwh15_10*x82))+((gclwh11_10*x142))+(((-4.0)*gclwh13_10*x75))+(((-1.0)*x111*x87))+((gclwh5_10*x79))+(((-1.0)*gclwh15_10*x204))+(((-1.0)*gclwh7_10*x164))+((gclwh9_10*x135))+((gclwh13_10*x202))+((x114*x72)));
op[22]=((-0.03204)+((gclwh5_10*x94))+(((0.000254016)*x194))+(((-1.0)*x488))+(((-0.03528)*gclwh5_1*x80))+((gclwh13_10*x72))+(((0.03528)*gclwh15_1*x82))+(((0.00324)*gclwh13_1*x72))+(((-0.03528)*gclwh13_1*x75))+(((0.03528)*gclwh2_1*x75))+(((-1.0)*x462))+(((-0.000254016)*x84))+(((-0.00324)*pp*x84))+x491+x469+(((0.000254016)*x124))+(((0.000254016)*x121))+(((0.00324)*gclwh5_1*x94))+(((0.03528)*gclwh0_1*x82))+(((-0.03204)*gclwh0_1*x87))+(((-1.0)*gclwh15_10*x87))+(((0.000254016)*x112))+(((-0.03204)*gclwh2_1*x72)));
op[23]=((((0.0006048)*x198))+(((-1.0)*gclwh5_9*x117))+(((0.042)*gclwh15_9*x87))+(((-1.0)*x464))+(((-1.0)*x454))+x269+((gclwh7_13*x178))+(((-0.01008)*x213))+x476+(((-0.042)*gclwh5_9*x94))+(((-0.0006048)*x131))+(((-0.01008)*x126))+(((-0.084)*gclwh15_9*x82))+(((0.084)*gclwh5_9*x80))+(((0.084)*gclwh13_9*x75))+(((-0.042)*gclwh13_9*x72)));
op[24]=((-0.824064)+(((-1.0)*x479))+x482);
op[25]=((((4.736)*gclwh6_2*x75))+(((-4.736)*gclwh8_2*x82))+(((-1.0)*gclwh12_2*x192))+(((-0.0340992)*x134))+((gclwh8_2*x115))+(((-0.56832)*x113))+(((-2.368)*gclwh6_2*x72))+(((-1.0)*x455))+x277+(((2.368)*gclwh8_2*x87))+(((-4.736)*gclwh10_2*x80))+(((2.368)*gclwh10_2*x94))+((gclwh14_2*x169))+(((0.0340992)*x110)));
op[26]=((((0.0328896)*x152))+(((-4.568)*gclwh10_12*x80))+(((4.568)*gclwh6_12*x75))+(((0.0328896)*x83))+(((-0.16704)*x211))+(((0.16704)*x159))+(((-4.568)*gclwh8_12*x82))+(((-0.16704)*x206))+(((2.284)*gclwh8_12*x87))+(((-2.284)*gclwh6_12*x72))+(((-0.0328896)*x146))+(((2.284)*pp*x83)));
op[27]=((((-0.0576)*gclwh8_11*r20))+(((-1.0)*gclwh10_11*x106))+(((0.96)*x78))+(((0.96)*x77))+(((-1.0)*gclwh14_11*x155))+(((8.0)*gclwh8_11*x82))+(((8.0)*gclwh10_11*x80))+(((0.0576)*gclwh6_11*r21))+(((-1.0)*x187*x94))+(((-8.0)*gclwh6_11*x75))+(((-1.0)*x136*x87))+((x199*x72)));
op[28]=((-0.029232)+(((-1.0)*x482))+x479);
op[29]=((((-0.084)*gclwh6_2*x72))+(((0.0012096)*x153))+(((-0.168)*gclwh8_2*x82))+(((0.0012096)*x110))+((gclwh14_2*x125))+(((-0.0012096)*x134))+(((0.168)*gclwh6_2*x75))+x455+(((0.084)*gclwh8_2*x87))+(((0.084)*gclwh10_2*x94))+(((-1.0)*x277))+(((-0.168)*gclwh10_2*x80))+(((-0.02016)*x197))+(((-0.02016)*x113)));
op[30]=((((4.736)*gclwh7_0*x75))+(((0.0340992)*x137))+(((-4.736)*gclwh11_0*x80))+(((-4.736)*gclwh9_0*x82))+(((2.368)*gclwh9_0*x87))+((gclwh15_0*x169))+x457+(((-0.0340992)*x89))+(((-1.0)*x285))+((gclwh9_0*x115))+(((2.368)*gclwh11_0*x94))+(((-0.56832)*x99))+(((-0.56832)*x157))+(((-2.368)*gclwh7_0*x72)));
op[31]=((-0.824064)+(((-1.0)*x480))+x481);
op[32]=((((-1.0)*x148*x72))+(((-0.96)*x91))+((gclwh15_10*x155))+(((-0.96)*x85))+(((0.0576)*x151))+((gclwh11_10*x106))+(((8.0)*gclwh7_10*x75))+(((-0.0576)*x150))+(((-8.0)*gclwh11_10*x80))+(((-8.0)*gclwh9_10*x82))+((x123*x94))+((x105*x87)));
op[33]=((((0.0328896)*x182))+(((-0.16704)*x156))+(((-4.568)*gclwh9_13*x82))+(((2.284)*gclwh9_13*x87))+(((0.16704)*x161))+(((-0.16704)*x76))+(((4.568)*gclwh7_13*x75))+(((-0.0328896)*x181))+(((-4.568)*gclwh11_13*x80))+(((2.284)*gclwh11_13*x94))+(((-2.284)*gclwh7_13*x72))+(((0.0328896)*x177)));
op[34]=((((0.0012096)*x154))+(((0.0012096)*x137))+(((-0.084)*gclwh7_0*x72))+((gclwh15_0*x125))+(((-0.168)*gclwh9_0*x82))+(((-1.0)*x457))+(((0.084)*gclwh11_0*x94))+x285+(((-0.02016)*x99))+(((-0.0012096)*x89))+(((-0.02016)*x157))+(((0.084)*gclwh9_0*x87))+(((-0.168)*gclwh11_0*x80))+(((0.168)*gclwh7_0*x75)));
op[35]=((-0.029232)+(((-1.0)*x481))+x480);
op[36]=((2.74316)+(((-1.0)*x483))+x474);
op[37]=((((-0.0340992)*x100))+(((2.368)*gclwh14_2*x87))+(((0.0340992)*x132))+((gclwh6_2*x192))+(((4.736)*gclwh4_2*x80))+(((-2.368)*gclwh1_2*x87))+(((-2.368)*gclwh3_2*x72))+((gclwh14_2*x115))+(((-1.0)*x473))+(((4.736)*gclwh1_2*x82))+(((-4.736)*gclwh14_2*x82))+x468+(((-2.368)*gclwh12_2*x72))+((gclwh1_2*x115))+(((-2.368)*gclwh4_2*x94))+(((4.736)*gclwh3_2*x75))+(((-0.0340992)*x168))+(((-0.56832)*x174))+(((4.736)*gclwh12_2*x75))+(((-1.0)*gclwh8_2*x169)));
IkReal x492=pz*pz;
IkReal x493=pp*pp;
IkReal x494=((0.24)*pz);
IkReal x495=(gclwh4_8*rxp2_2);
IkReal x496=(pp*r21);
IkReal x497=(gclwh12_8*npy);
IkReal x498=(gclwh11_0*rxp2_2);
IkReal x499=(npy*pz);
IkReal x500=((4.0)*gclwh12_11);
IkReal x501=(gclwh4_11*rxp2_2);
IkReal x502=((0.24)*rxp1_2);
IkReal x503=((0.0288)*r22);
IkReal x504=(npz*pz);
IkReal x505=((0.28416)*rxp1_2);
IkReal x506=(npx*pz);
IkReal x507=((0.696)*gclwh5_15);
IkReal x508=(pp*r22);
IkReal x509=((0.348)*gclwh12_14);
IkReal x510=((2.0)*gclwh11_10);
IkReal x511=((0.0012096)*r21);
IkReal x512=((0.48)*rxp1_2);
IkReal x513=((0.0144)*pz);
IkReal x514=(gclwh15_0*r20);
IkReal x515=((0.348)*gclwh5_15);
IkReal x516=(gclwh12_8*r21);
IkReal x517=(gclwh5_9*rxp2_2);
IkReal x518=((2.0)*gclwh4_11);
IkReal x519=(gclwh13_0*rxp1_2);
IkReal x520=(gclwh12_2*r21);
IkReal x521=(gclwh15_1*rxp0_2);
IkReal x522=((0.24)*pp);
IkReal x523=(gclwh9_0*rxp0_2);
IkReal x524=(pp*r20);
IkReal x525=((0.0340992)*r21);
IkReal x526=((0.0164448)*r21);
IkReal x527=((1.0)*pz);
IkReal x528=((0.29424)*rxp1_2);
IkReal x529=((2.0)*gclwh9_10);
IkReal x530=(gclwh0_0*r20);
IkReal x531=(gclwh6_2*rxp1_2);
IkReal x532=((0.0042336)*rxp2_2);
IkReal x533=((2.0)*gclwh15_10);
IkReal x534=(gclwh13_1*r21);
IkReal x535=((0.696)*gclwh12_14);
IkReal x536=((0.0100224)*r20);
IkReal x537=((4.0)*gclwh14_11);
IkReal x538=((0.54816)*rxp0_2);
IkReal x539=((0.0100224)*r22);
IkReal x540=(gclwh5_10*rxp2_2);
IkReal x541=(gclwh4_2*rxp2_2);
IkReal x542=((2.0)*gclwh13_10);
IkReal x543=(gclwh7_13*rxp1_2);
IkReal x544=(gclwh14_8*r20);
IkReal x545=((0.0006048)*r22);
IkReal x546=((0.0100224)*r21);
IkReal x547=((0.348)*gclwh13_15);
IkReal x548=((0.0012096)*r22);
IkReal x549=((2.0)*gclwh10_11);
IkReal x550=(gclwh15_9*rxp0_2);
IkReal x551=(gclwh2_1*r21);
IkReal x552=((2.0)*pp);
IkReal x553=(gclwh0_1*r20);
IkReal x554=(gclwh11_13*rxp2_2);
IkReal x555=(gclwh14_8*rxp0_2);
IkReal x556=((2.0)*gclwh7_10);
IkReal x557=((0.0170496)*r20);
IkReal x558=(gclwh13_9*r21);
IkReal x559=((4.0)*gclwh15_10);
IkReal x560=((0.04176)*rxp1_2);
IkReal x561=((0.04176)*rxp0_2);
IkReal x562=(gclwh10_2*r22);
IkReal x563=((0.696)*gclwh13_15);
IkReal x564=((0.48)*rxp0_2);
IkReal x565=((0.27408)*rxp0_2);
IkReal x566=(gclwh11_0*r22);
IkReal x567=(gclwh5_9*r22);
IkReal x568=((0.04176)*rxp2_2);
IkReal x569=((0.348)*gclwh15_15);
IkReal x570=((0.48)*rxp2_2);
IkReal x571=((0.0144)*r20);
IkReal x572=(gclwh8_12*rxp0_2);
IkReal x573=(gclwh7_0*rxp1_2);
IkReal x574=((0.696)*gclwh4_14);
IkReal x575=((0.0006048)*r21);
IkReal x576=((0.0170496)*r22);
IkReal x577=((0.0025056)*r20);
IkReal x578=((0.0025056)*r21);
IkReal x579=((0.0006048)*r20);
IkReal x580=(gclwh8_2*r20);
IkReal x581=(gclwh9_0*r20);
IkReal x582=(gclwh5_0*rxp2_2);
IkReal x583=((0.348)*gclwh14_14);
IkReal x584=((0.0144)*r22);
IkReal x585=((4.0)*gclwh4_11);
IkReal x586=((0.96)*rxp1_2);
IkReal x587=((0.08352)*rxp0_2);
IkReal x588=((0.96)*rxp0_2);
IkReal x589=((2.0)*gclwh6_11);
IkReal x590=((0.0012096)*r20);
IkReal x591=(gclwh4_14*r22);
IkReal x592=((0.0050112)*r21);
IkReal x593=((2.0)*gclwh12_11);
IkReal x594=((0.000254016)*r20);
IkReal x595=(gclwh12_11*r21);
IkReal x596=((2.0)*gclwh14_11);
IkReal x597=(gclwh10_2*rxp2_2);
IkReal x598=(gclwh4_3*r22);
IkReal x599=((0.0288)*r20);
IkReal x600=(gclwh4_2*r22);
IkReal x601=((0.0042336)*rxp1_2);
IkReal x602=(gclwh1_2*r20);
IkReal x603=((0.08352)*rxp2_2);
IkReal x604=(gclwh4_3*rxp2_2);
IkReal x605=(gclwh13_10*r21);
IkReal x606=(gclwh10_12*rxp2_2);
IkReal x607=((0.0170496)*r21);
IkReal x608=((2.0)*gclwh8_11);
IkReal x609=((0.696)*gclwh14_14);
IkReal x610=((0.696)*gclwh15_15);
IkReal x611=(gclwh3_3*r21);
IkReal x612=((0.348)*gclwh4_14);
IkReal x613=((4.0)*gclwh5_10);
IkReal x614=((2.0)*gclwh5_10);
IkReal x615=((0.34025568)*rxp1_2);
IkReal x616=(gclwh5_1*r22);
IkReal x617=((4.0)*gclwh13_10);
IkReal x618=(gclwh5_1*rxp2_2);
IkReal x619=(gclwh14_3*rxp0_2);
IkReal x620=(gclwh15_9*r20);
IkReal x621=((0.0144)*r21);
IkReal x622=(gclwh11_10*rxp2_2);
IkReal x623=((0.24)*rxp0_2);
IkReal x624=(gclwh12_3*r21);
IkReal x625=(gclwh14_2*r20);
IkReal x626=(gclwh8_2*rxp0_2);
IkReal x627=(gclwh5_15*r22);
IkReal x628=((0.0576)*r22);
IkReal x629=(gclwh12_2*rxp1_2);
IkReal x630=(gclwh10_11*rxp2_2);
IkReal x631=(gclwh5_0*r22);
IkReal x632=((0.0025056)*r22);
IkReal x633=((0.08352)*rxp1_2);
IkReal x634=(gclwh4_8*r22);
IkReal x635=((0.0576)*r20);
IkReal x636=(gclwh13_9*rxp1_2);
IkReal x637=((0.0288)*r21);
IkReal x638=((0.0050112)*r20);
IkReal x639=((0.0204153408)*r20);
IkReal x640=(gclwh6_12*rxp1_2);
IkReal x641=(gclwh12_8*rxp1_2);
IkReal x642=(gclwh9_13*rxp0_2);
IkReal x643=((0.0050112)*x627);
IkReal x644=(gclwh13_15*x592);
IkReal x645=(gclwh15_15*x638);
IkReal x646=(gclwh7_10*x512);
IkReal x647=(gclwh15_10*x599);
IkReal x648=(gclwh9_10*x564);
IkReal x649=(gclwh5_10*x503);
IkReal x650=((0.0288)*x605);
IkReal x651=(gclwh11_10*x570);
IkReal x652=(gclwh6_5*x578);
IkReal x653=(gclwh12_14*x560);
IkReal x654=(gclwh4_14*x568);
IkReal x655=(gclwh10_5*x632);
IkReal x656=(gclwh14_14*x561);
IkReal x657=(gclwh8_5*x577);
IkReal x658=(gclwh14_11*x623);
IkReal x659=((0.0288)*x495);
IkReal x660=(gclwh10_11*x584);
IkReal x661=((0.0288)*x641);
IkReal x662=(gclwh8_11*x571);
IkReal x663=(gclwh6_11*x621);
IkReal x664=((0.0288)*x555);
IkReal x665=((0.24)*x501);
IkReal x666=(gclwh12_11*x502);
IkReal x667=(gclwh7_10*x621);
IkReal x668=((0.0288)*x636);
IkReal x669=(gclwh13_10*x502);
IkReal x670=((0.0288)*x517);
IkReal x671=((0.24)*x540);
IkReal x672=(gclwh9_10*x571);
IkReal x673=(gclwh15_10*x623);
IkReal x674=((0.0288)*x550);
IkReal x675=(gclwh11_10*x584);
IkReal x676=(gclwh7_7*x578);
IkReal x677=(gclwh13_15*x560);
IkReal x678=(gclwh5_15*x568);
IkReal x679=(gclwh9_7*x577);
IkReal x680=(gclwh11_7*x632);
IkReal x681=(gclwh15_15*x561);
IkReal x682=(gclwh8_11*x564);
IkReal x683=(gclwh10_11*x570);
IkReal x684=((0.0288)*x595);
IkReal x685=(gclwh4_11*x503);
IkReal x686=((0.0050112)*x591);
IkReal x687=(gclwh12_14*x592);
IkReal x688=(gclwh14_14*x638);
IkReal x689=(gclwh8_5*x561);
IkReal x690=(gclwh12_14*x578);
IkReal x691=(gclwh10_5*x568);
IkReal x692=((0.0025056)*x591);
IkReal x693=(gclwh14_14*x577);
IkReal x694=(gclwh6_5*x560);
IkReal x695=(gclwh6_11*x502);
IkReal x696=((0.001728)*x516);
IkReal x697=(gclwh14_11*x571);
IkReal x698=((0.001728)*x634);
IkReal x699=((0.24)*x630);
IkReal x700=((0.0144)*x595);
IkReal x701=((0.001728)*x544);
IkReal x702=(gclwh4_11*x584);
IkReal x703=(gclwh8_11*x623);
IkReal x704=(gclwh7_10*x502);
IkReal x705=((0.001728)*x620);
IkReal x706=(gclwh15_10*x571);
IkReal x707=((0.0144)*x605);
IkReal x708=((0.001728)*x558);
IkReal x709=(gclwh5_10*x584);
IkReal x710=((0.24)*x622);
IkReal x711=((0.001728)*x567);
IkReal x712=(gclwh9_10*x623);
IkReal x713=(gclwh7_7*x560);
IkReal x714=(gclwh15_15*x577);
IkReal x715=(gclwh9_7*x561);
IkReal x716=((0.0025056)*x627);
IkReal x717=(gclwh11_7*x568);
IkReal x718=(gclwh13_15*x578);
IkReal x719=(pz*x524);
IkReal x720=(r20*x493);
IkReal x721=((2.0)*x492);
IkReal x722=((1.0)*x493);
IkReal x723=(x496*x547);
IkReal x724=(x508*x515);
IkReal x725=(x506*x610);
IkReal x726=(x499*x563);
IkReal x727=(x504*x507);
IkReal x728=(x524*x569);
IkReal x729=(x524*x533);
IkReal x730=(x504*x613);
IkReal x731=(x499*x617);
IkReal x732=(x496*x542);
IkReal x733=(x506*x559);
IkReal x734=(x508*x614);
IkReal x735=((0.348)*gclwh8_5*x506);
IkReal x736=((0.174)*gclwh6_5*x496);
IkReal x737=((0.348)*gclwh10_5*x504);
IkReal x738=((0.348)*gclwh6_5*x499);
IkReal x739=((0.174)*gclwh10_5*x508);
IkReal x740=((0.174)*gclwh8_5*x524);
IkReal x741=(gclwh14_2*rxp0_2*x494);
IkReal x742=(x499*x589);
IkReal x743=(x522*x604);
IkReal x744=(gclwh10_2*pz*x508);
IkReal x745=(x513*x580);
IkReal x746=(gclwh12_3*pp*x502);
IkReal x747=(x513*x562);
IkReal x748=(gclwh8_2*x719);
IkReal x749=(x494*x629);
IkReal x750=(x494*x541);
IkReal x751=(x504*x549);
IkReal x752=(x522*x619);
IkReal x753=(x506*x608);
IkReal x754=(gclwh6_2*r21*x513);
IkReal x755=(gclwh13_1*pp*x502);
IkReal x756=(x504*x510);
IkReal x757=(x522*x618);
IkReal x758=(x506*x529);
IkReal x759=(gclwh15_0*rxp0_2*x494);
IkReal x760=(gclwh11_0*pz*x508);
IkReal x761=(x513*x581);
IkReal x762=(x513*x566);
IkReal x763=(gclwh9_0*x719);
IkReal x764=(x494*x519);
IkReal x765=(x494*x582);
IkReal x766=(gclwh7_0*r21*x513);
IkReal x767=(x521*x522);
IkReal x768=(x499*x556);
IkReal x769=((0.174)*gclwh7_7*x496);
IkReal x770=((0.348)*gclwh9_7*x506);
IkReal x771=((0.348)*gclwh11_7*x504);
IkReal x772=((0.174)*gclwh11_7*x508);
IkReal x773=((0.348)*gclwh7_7*x499);
IkReal x774=((0.174)*gclwh9_7*x524);
IkReal x775=(x508*x518);
IkReal x776=(x496*x593);
IkReal x777=(x506*x537);
IkReal x778=(x496*x509);
IkReal x779=(x506*x609);
IkReal x780=(x508*x612);
IkReal x781=(x504*x574);
IkReal x782=(x524*x583);
IkReal x783=(x499*x535);
IkReal x784=((0.174)*gclwh12_14*x496);
IkReal x785=(x506*x583);
IkReal x786=((0.174)*gclwh4_14*x508);
IkReal x787=(x499*x509);
IkReal x788=((0.174)*gclwh14_14*x524);
IkReal x789=(x504*x612);
IkReal x790=(gclwh14_2*x719);
IkReal x791=(x493*x624);
IkReal x792=((0.12)*gclwh12_8*x496);
IkReal x793=(gclwh14_8*npx*x494);
IkReal x794=(x494*x531);
IkReal x795=((0.12)*gclwh4_8*x508);
IkReal x796=(x504*x518);
IkReal x797=(x513*x625);
IkReal x798=(x513*x602);
IkReal x799=(x493*x611);
IkReal x800=(gclwh1_3*x720);
IkReal x801=(x493*x598);
IkReal x802=(gclwh3_2*r21*x513);
IkReal x803=(x499*x593);
IkReal x804=(x513*x520);
IkReal x805=(gclwh4_8*npz*x494);
IkReal x806=(x506*x596);
IkReal x807=(x513*x600);
IkReal x808=(x494*x597);
IkReal x809=((0.12)*gclwh14_8*x524);
IkReal x810=(x494*x497);
IkReal x811=(x494*x626);
IkReal x812=(gclwh13_0*r21*x513);
IkReal x813=(gclwh15_1*x720);
IkReal x814=(x513*x631);
IkReal x815=(gclwh5_0*pz*x508);
IkReal x816=(gclwh13_0*pz*x496);
IkReal x817=(x513*x530);
IkReal x818=(gclwh2_0*r21*x513);
IkReal x819=((0.12)*gclwh15_9*x524);
IkReal x820=(x493*x551);
IkReal x821=(x494*x498);
IkReal x822=(x504*x614);
IkReal x823=(x499*x542);
IkReal x824=(gclwh5_9*npz*x494);
IkReal x825=(gclwh13_9*npy*x494);
IkReal x826=(x494*x523);
IkReal x827=(x493*x553);
IkReal x828=((0.12)*gclwh13_9*x496);
IkReal x829=(gclwh15_9*npx*x494);
IkReal x830=(x513*x514);
IkReal x831=(x506*x533);
IkReal x832=((0.12)*gclwh5_9*x508);
IkReal x833=(x494*x573);
IkReal x834=((0.174)*gclwh15_15*x524);
IkReal x835=(x504*x515);
IkReal x836=(x499*x547);
IkReal x837=(x506*x569);
IkReal x838=((0.174)*gclwh13_15*x496);
IkReal x839=((0.174)*gclwh5_15*x508);
IkReal x840=(gclwh6_2*npy*x721);
IkReal x841=(gclwh6_2*x496*x527);
IkReal x842=(gclwh10_2*npz*x721);
IkReal x843=(gclwh8_2*npx*x721);
IkReal x844=(gclwh7_0*npy*x721);
IkReal x845=(gclwh9_0*npx*x721);
IkReal x846=(gclwh11_0*npz*x721);
IkReal x847=(gclwh7_0*x496*x527);
IkReal x848=(gclwh12_2*npy*x721);
IkReal x849=(gclwh3_2*npy*x721);
IkReal x850=(gclwh1_2*npx*x721);
IkReal x851=(gclwh14_3*x506*x552);
IkReal x852=(gclwh4_2*npz*x721);
IkReal x853=(gclwh4_3*x504*x552);
IkReal x854=(gclwh12_2*x496*x527);
IkReal x855=(gclwh1_2*x524*x527);
IkReal x856=(gclwh3_3*x499*x552);
IkReal x857=(gclwh4_2*x508*x527);
IkReal x858=(gclwh1_3*x506*x552);
IkReal x859=(gclwh3_2*x496*x527);
IkReal x860=(gclwh12_3*x499*x552);
IkReal x861=(gclwh14_2*npx*x721);
IkReal x862=((1.0)*gclwh14_3*x720);
IkReal x863=(gclwh0_0*npx*x721);
IkReal x864=(gclwh2_0*npy*x721);
IkReal x865=(gclwh5_1*x504*x552);
IkReal x866=(gclwh13_1*x499*x552);
IkReal x867=(gclwh15_0*npx*x721);
IkReal x868=(gclwh2_1*x499*x552);
IkReal x869=(gclwh0_1*x506*x552);
IkReal x870=(gclwh5_0*npz*x721);
IkReal x871=(gclwh13_0*npy*x721);
IkReal x872=(gclwh0_0*x524*x527);
IkReal x873=(pp*x514*x527);
IkReal x874=(gclwh2_0*x496*x527);
IkReal x875=(x534*x722);
IkReal x876=(x616*x722);
IkReal x877=(gclwh15_1*x506*x552);
IkReal x878=(x678+x677);
IkReal x879=(x715+x717);
IkReal x880=(x653+x654);
IkReal x881=(x689+x691);
IkReal x882=(x672+x673+x675+x768);
IkReal x883=(x658+x660+x662+x742);
IkReal x884=(x706+x704+x823+x822);
IkReal x885=(x695+x697+x796+x803);
IkReal x886=(x688+x782+x783+x781);
IkReal x887=(x645+x726+x727+x728);
IkReal x888=(x676+x771+x770+x769);
IkReal x889=(x714+x834+x835+x836);
IkReal x890=(x652+x737+x736+x735);
IkReal x891=(x693+x787+x788+x789);
IkReal x892=(x710+x712+x709+x707+x831);
IkReal x893=(x699+x702+x703+x700+x806);
IkReal x894=(x669+x667+x671+x756+x758);
IkReal x895=(x663+x665+x666+x751+x753);
IkReal x896=(((x504*x585))+((gclwh6_11*x512))+((gclwh14_11*x599))+((x524*x596))+((x499*x500)));
IkReal x897=(x647+x646+x731+x730+x729);
IkReal x898=(x679+x680+x773+x772+x774);
IkReal x899=(x655+x657+x739+x738+x740);
IkReal x900=(x644+x643+x723+x724+x725);
IkReal x901=(x687+x686+x779+x778+x780);
IkReal x902=(x718+x716+x837+x838+x839);
IkReal x903=(x690+x692+x786+x784+x785);
IkReal x904=(x649+x648+x650+x651+x734+x733+x732);
IkReal x905=(x683+x682+x685+x684+x777+x776+x775);
IkReal x906=(x674+x764+x765+x766+x767+x845+x847+x846);
IkReal x907=(x664+x754+x750+x752+x749+x841+x843+x842);
IkReal x908=(x668+x670+x755+x757+x759+x760+x761+x762+x763+x844);
IkReal x909=(x659+x661+x746+x747+x744+x745+x743+x741+x748+x840);
IkReal x910=(x711+x708+x869+x868+x870+x871+x872+x873+x874+x875+x876+x877+x829+x828+x830+x832+x833);
IkReal x911=(x701+x853+x856+x857+x854+x855+x858+x859+x862+x861+x860+x810+x811+x809+x808+x805+x804+x807);
IkReal x912=(x494+x696+x698+x791+x790+x793+x792+x795+x794+x797+x799+x798+x852+x850+x851+x849+x848+x801+x800+x802);
IkReal x913=(x494+x705+x867+x866+x865+x864+x863+x818+x819+x816+x817+x814+x815+x812+x813+x821+x820+x827+x826+x825+x824);
op[38]=((((-1.0)*gclwh4_14*x539))+(((-0.54816)*x606))+(((0.54816)*x640))+(((-1.392)*gclwh14_14*x506))+(((-1.0)*gclwh12_14*x546))+(((-1.0)*gclwh8_12*x538))+(((1.392)*gclwh4_14*x504))+((gclwh14_14*x536))+(((-1.0)*x496*x535))+((x524*x609))+(((1.392)*gclwh12_14*x499))+(((-1.0)*x508*x574)));
op[39]=((-0.077808)+((x508*x585))+(((-1.0)*x524*x537))+(((0.96)*x630))+((gclwh8_11*x588))+(((-1.0)*gclwh6_11*x586))+(((0.0576)*x595))+(((-8.0)*gclwh12_11*x499))+((gclwh4_11*x628))+(((8.0)*gclwh14_11*x506))+((x496*x500))+(((-8.0)*gclwh4_11*x504))+(((-1.0)*gclwh14_11*x635)));
op[40]=((0.057024)+(((-1.0)*x896))+x905);
op[41]=((((0.168)*gclwh3_2*x499))+((gclwh1_2*x590))+(((-0.02016)*x626))+((gclwh14_2*x590))+(((-1.0)*x886))+(((-0.02016)*x597))+(((0.168)*gclwh12_2*x499))+(((0.084)*gclwh14_2*x524))+(((-0.084)*gclwh4_2*x508))+(((0.168)*gclwh4_2*x504))+(((-0.084)*gclwh3_2*x496))+(((-0.084)*gclwh12_2*x496))+(((-0.168)*gclwh14_2*x506))+(((0.02016)*x531))+(((-0.084)*gclwh1_2*x524))+(((-1.0)*gclwh12_2*x511))+x901+((gclwh3_2*x511))+(((-1.0)*gclwh4_2*x548))+(((0.168)*gclwh1_2*x506)));
op[42]=((((-2.368)*pp*x514))+((gclwh13_0*x525))+(((-2.368)*gclwh0_0*x524))+(((-0.0340992)*x514))+(((-4.736)*gclwh5_0*x504))+(((-0.56832)*x573))+(((4.736)*gclwh2_0*x499))+((gclwh2_0*x525))+(((-1.0)*x900))+(((4.736)*gclwh0_0*x506))+(((0.0340992)*x530))+(((2.368)*gclwh13_0*x496))+(((-4.736)*gclwh13_0*x499))+x887+(((-2.368)*gclwh2_0*x496))+(((0.56832)*x498))+(((2.368)*gclwh5_0*x508))+(((4.736)*gclwh15_0*x506))+(((0.0340992)*x631))+(((0.56832)*x523)));
op[43]=((2.74316)+(((-1.0)*x897))+x904);
op[44]=((0.077808)+(((-1.0)*gclwh7_10*x586))+(((0.96)*x622))+(((-1.0)*x524*x559))+(((-8.0)*gclwh5_10*x504))+(((8.0)*gclwh15_10*x506))+((gclwh9_10*x588))+(((0.0576)*x605))+((x496*x617))+((x508*x613))+(((-8.0)*gclwh13_10*x499))+(((-1.0)*gclwh15_10*x635))+((gclwh5_10*x628)));
op[45]=((((-1.392)*gclwh13_15*x499))+((gclwh5_15*x539))+(((-1.0)*gclwh15_15*x536))+(((-1.392)*gclwh5_15*x504))+((x507*x508))+(((-1.0)*x524*x610))+(((-0.54816)*x543))+((gclwh13_15*x546))+((x496*x563))+(((0.54816)*x554))+(((1.392)*gclwh15_15*x506))+((gclwh9_13*x538)));
op[46]=(((gclwh2_0*x511))+(((0.168)*gclwh15_0*x506))+(((0.0012096)*x530))+(((0.084)*gclwh5_0*x508))+((gclwh13_0*x511))+(((-0.0012096)*x514))+((gclwh5_0*x548))+(((0.02016)*x498))+(((-0.168)*gclwh5_0*x504))+(((-1.0)*x887))+(((-0.168)*gclwh13_0*x499))+(((-0.02016)*x573))+(((0.168)*gclwh0_0*x506))+(((0.084)*gclwh13_0*x496))+(((-0.084)*pp*x514))+(((-0.084)*gclwh0_0*x524))+(((0.02016)*x523))+x900+(((-0.084)*gclwh2_0*x496))+(((0.168)*gclwh2_0*x499)));
op[47]=((0.057024)+(((-1.0)*x904))+x897);
op[48]=(((gclwh8_12*x557))+(((-1.184)*gclwh6_12*x496))+(((-2.368)*gclwh8_12*x506))+(((-0.28416)*x495))+(((-1.0)*gclwh6_12*x607))+(((-1.0)*x899))+(((-1.0)*x880))+(((1.184)*gclwh10_12*x508))+x656+(((-1.0)*gclwh12_8*x505))+(((2.368)*gclwh6_12*x499))+((gclwh10_12*x576))+x890+(((-2.368)*gclwh10_12*x504))+(((1.184)*gclwh8_12*x524))+(((0.28416)*x555)));
op[49]=((((-1.0)*gclwh12_3*x615))+(((-0.34025568)*x604))+(((0.34025568)*x619))+(((-1.0)*gclwh10_11*x508))+(((-1.0)*x907))+((gclwh6_11*x496))+(((-1.0)*x883))+(((-1.0)*gclwh8_11*x524))+x895+x909);
op[50]=((0.397416)+(((0.48)*x501))+((gclwh12_11*x512))+((gclwh6_11*x637))+(((-1.0)*gclwh8_11*x599))+((x496*x589))+(((-4.0)*gclwh6_11*x499))+(((4.0)*gclwh8_11*x506))+(((4.0)*gclwh10_11*x504))+(((-1.0)*gclwh10_11*x503))+(((-1.0)*gclwh14_11*x564))+(((-1.0)*x508*x549))+(((-1.0)*x524*x608)));
op[51]=((((-1.0)*gclwh14_14*x587))+((gclwh12_14*x633))+(((-1.142)*gclwh10_2*x508))+(((-1.0)*gclwh14_2*x565))+((gclwh4_14*x603))+(((-0.0164448)*x580))+(((0.27408)*x629))+(((2.284)*gclwh8_2*x506))+(((2.284)*gclwh10_2*x504))+(((-2.284)*gclwh6_2*x499))+(((0.29424)*x495))+((gclwh6_2*x526))+(((-0.29424)*x555))+(((-1.142)*gclwh8_2*x524))+(((0.27408)*x541))+(((-0.0164448)*x562))+(((1.142)*gclwh6_2*x496))+((gclwh12_8*x528)));
op[52]=((((0.042)*gclwh8_12*x524))+(((-1.0)*gclwh6_12*x575))+(((-0.042)*gclwh6_12*x496))+((gclwh10_12*x545))+(((0.084)*gclwh6_12*x499))+(((0.01008)*x641))+(((-1.0)*x899))+((gclwh8_12*x579))+(((-0.084)*gclwh10_12*x504))+(((-0.01008)*x555))+(((-1.0)*x656))+(((-0.084)*gclwh8_12*x506))+x880+x890+(((0.01008)*x495))+(((0.042)*gclwh10_12*x508)));
op[53]=(((gclwh8_11*x524))+(((-1.0)*gclwh12_3*x601))+(((-1.0)*x907))+(((-1.0)*x895))+((gclwh10_11*x508))+(((0.0042336)*x619))+(((-1.0)*gclwh4_3*x532))+x883+(((-1.0)*gclwh6_11*x496))+x909);
op[54]=(((gclwh11_10*x508))+(((-1.0)*gclwh13_1*x615))+(((-1.0)*x906))+(((0.34025568)*x521))+(((-1.0)*x894))+(((-1.0)*gclwh7_10*x496))+((gclwh9_10*x524))+x882+x908+(((-0.34025568)*x618)));
op[55]=(((gclwh9_13*x557))+(((-2.368)*gclwh11_13*x504))+(((-2.368)*gclwh9_13*x506))+(((-1.0)*x898))+(((2.368)*gclwh7_13*x499))+((gclwh11_13*x576))+(((-1.0)*gclwh13_9*x505))+(((-1.0)*gclwh7_13*x607))+(((-0.28416)*x517))+(((-1.184)*gclwh7_13*x496))+(((1.184)*gclwh11_13*x508))+x681+x888+(((1.184)*gclwh9_13*x524))+(((0.28416)*x550))+(((-1.0)*x878)));
op[56]=((((-1.142)*gclwh11_0*x508))+(((0.27408)*x582))+(((-0.0164448)*x581))+(((2.284)*gclwh9_0*x506))+(((-2.284)*gclwh7_0*x499))+(((-1.142)*gclwh9_0*x524))+(((1.142)*gclwh7_0*x496))+((gclwh7_0*x526))+(((-1.0)*gclwh13_15*x633))+(((0.29424)*x550))+(((-1.0)*gclwh13_9*x528))+(((0.27408)*x519))+((gclwh15_15*x587))+(((-0.0164448)*x566))+(((2.284)*gclwh11_0*x504))+(((-0.29424)*x517))+(((-1.0)*gclwh5_15*x603))+(((-1.0)*gclwh15_0*x565)));
op[57]=((0.397416)+(((4.0)*gclwh11_10*x504))+(((-1.0)*x524*x529))+(((-1.0)*gclwh15_10*x564))+(((0.48)*x540))+(((-4.0)*gclwh7_10*x499))+((x496*x556))+((gclwh13_10*x512))+(((4.0)*gclwh9_10*x506))+(((-1.0)*gclwh11_10*x503))+((gclwh7_10*x637))+(((-1.0)*x508*x510))+(((-1.0)*gclwh9_10*x599)));
op[58]=((((-1.0)*gclwh5_1*x532))+(((-1.0)*gclwh11_10*x508))+(((-1.0)*x906))+(((-1.0)*gclwh9_10*x524))+(((-1.0)*x882))+x894+((gclwh7_10*x496))+x908+(((-1.0)*gclwh13_1*x601))+(((0.0042336)*x521)));
op[59]=((((-1.0)*x681))+(((-0.042)*gclwh7_13*x496))+(((-1.0)*x898))+(((-0.01008)*x550))+(((0.042)*gclwh11_13*x508))+(((0.01008)*x636))+(((0.01008)*x517))+(((-0.084)*gclwh9_13*x506))+(((0.084)*gclwh7_13*x499))+((gclwh9_13*x579))+(((-0.084)*gclwh11_13*x504))+((gclwh11_13*x545))+(((-1.0)*gclwh7_13*x575))+(((0.042)*gclwh9_13*x524))+x878+x888);
op[60]=((((-1.184)*gclwh4_8*x508))+(((-2.368)*gclwh14_8*x506))+(((-1.0)*gclwh4_8*x576))+(((1.184)*gclwh14_8*x524))+(((-0.0170496)*x516))+(((-1.0)*x903))+(((2.368)*gclwh4_8*x504))+(((-0.28416)*x572))+(((-1.184)*gclwh12_8*x496))+(((-0.28416)*x606))+(((2.368)*pz*x497))+(((-1.0)*x694))+(((0.0170496)*x544))+((gclwh6_12*x505))+x881+x891);
op[61]=((1.432132)+(((-1.432132)*gclwh3_3*x496))+(((-2.835464)*gclwh14_3*x506))+(((-0.0204153408)*x598))+((gclwh12_11*x496))+(((-1.0)*x911))+(((-1.403332)*gclwh4_3*x508))+(((-1.0)*x885))+(((0.0204153408)*x611))+((gclwh1_3*x639))+(((2.835464)*gclwh4_3*x504))+(((2.835464)*gclwh12_3*x499))+(((2.835464)*gclwh1_3*x506))+(((-1.432132)*gclwh1_3*x524))+(((-1.0)*gclwh14_11*x524))+(((1.403332)*gclwh14_3*x524))+(((-1.403332)*gclwh12_3*x496))+(((2.835464)*gclwh3_3*x499))+x893+x912+((gclwh14_3*x639))+((gclwh4_11*x508))+(((-0.0204153408)*x624)));
op[62]=((0.160008)+(((-1.0)*x896))+x905);
op[63]=((((-1.142)*gclwh14_2*x524))+(((-1.226)*gclwh14_8*x524))+((gclwh8_2*x565))+(((-0.27408)*x531))+(((-0.0164448)*x602))+(((-0.0176544)*x544))+(((0.0164448)*x600))+(((-2.452)*gclwh4_8*x504))+(((1.142)*gclwh3_2*x496))+(((1.226)*gclwh12_8*x496))+(((-1.0)*gclwh3_2*x526))+(((-2.452)*pz*x497))+(((-1.0)*x886))+(((2.284)*gclwh14_2*x506))+(((-2.284)*gclwh4_2*x504))+(((1.142)*gclwh12_2*x496))+(((0.0164448)*x520))+(((1.226)*gclwh4_8*x508))+(((1.142)*gclwh1_2*x524))+(((-2.284)*gclwh1_2*x506))+(((0.27408)*x597))+(((1.142)*gclwh4_2*x508))+(((-2.284)*gclwh3_2*x499))+(((-2.284)*gclwh12_2*x499))+(((2.452)*gclwh14_8*x506))+(((0.0176544)*x634))+(((-0.0164448)*x625))+x901+(((0.0176544)*x516)));
op[64]=((((0.01008)*x640))+(((-1.0)*x891))+(((0.084)*gclwh14_8*x506))+(((-0.0006048)*x544))+(((-0.042)*gclwh14_8*x524))+(((0.0006048)*x516))+(((0.042)*gclwh12_8*x496))+(((-0.01008)*x572))+(((-0.084)*gclwh4_8*x504))+(((-1.0)*x694))+(((-0.084)*pz*x497))+x881+x903+(((0.042)*gclwh4_8*x508))+((gclwh4_8*x545))+(((-0.01008)*x606)));
op[65]=((-0.03204)+((gclwh14_11*x524))+(((-0.03204)*gclwh1_3*x524))+(((0.03528)*gclwh3_3*x499))+(((-0.03204)*gclwh3_3*x496))+(((0.03528)*gclwh1_3*x506))+(((0.03528)*gclwh4_3*x504))+(((-1.0)*x893))+(((-1.0)*x911))+(((-0.00324)*gclwh12_3*x496))+(((-0.000254016)*x598))+((gclwh14_3*x594))+(((-1.0)*gclwh4_11*x508))+(((-0.000254016)*x624))+((gclwh1_3*x594))+(((-0.03528)*gclwh14_3*x506))+(((0.03528)*gclwh12_3*x499))+(((-0.00324)*gclwh4_3*x508))+x885+(((0.00324)*gclwh14_3*x524))+x912+(((-1.0)*gclwh12_11*x496))+(((0.000254016)*x611)));
op[66]=((-1.432132)+(((1.403332)*gclwh5_1*x508))+(((2.835464)*gclwh15_1*x506))+(((-1.0)*gclwh15_10*x524))+(((-1.0)*gclwh15_1*x639))+(((1.403332)*gclwh13_1*x496))+(((-2.835464)*gclwh13_1*x499))+(((-1.403332)*gclwh15_1*x524))+(((0.0204153408)*x534))+(((2.835464)*gclwh2_1*x499))+(((-1.0)*x910))+(((-1.0)*x884))+(((0.0204153408)*x616))+(((-2.835464)*gclwh5_1*x504))+(((0.0204153408)*x553))+(((0.0204153408)*x551))+((gclwh5_10*x508))+(((-1.432132)*gclwh2_1*x496))+(((-1.432132)*gclwh0_1*x524))+((gclwh13_10*x496))+x892+x913+(((2.835464)*gclwh0_1*x506)));
op[67]=((((2.368)*gclwh15_9*x506))+(((-1.184)*gclwh15_9*x524))+(((-1.0)*gclwh7_13*x505))+(((-2.368)*gclwh5_9*x504))+(((0.0170496)*x567))+(((0.28416)*x642))+(((1.184)*gclwh13_9*x496))+(((-1.0)*x889))+(((-1.0)*gclwh15_9*x557))+x713+(((-2.368)*gclwh13_9*x499))+(((0.0170496)*x558))+(((0.28416)*x554))+x902+(((1.184)*gclwh5_9*x508))+(((-1.0)*x879)));
op[68]=((((0.0176544)*x567))+(((-1.142)*gclwh5_0*x508))+(((-0.27408)*x498))+(((-0.27408)*x523))+(((-2.284)*gclwh15_0*x506))+(((-1.226)*gclwh15_9*x524))+(((1.142)*gclwh0_0*x524))+(((-2.284)*gclwh2_0*x499))+(((-1.0)*gclwh2_0*x526))+(((-1.0)*x887))+(((-0.0164448)*x530))+(((2.284)*gclwh5_0*x504))+(((-2.452)*gclwh13_9*x499))+(((0.0176544)*x558))+(((0.27408)*x573))+(((2.452)*gclwh15_9*x506))+(((1.226)*gclwh5_9*x508))+(((1.142)*gclwh2_0*x496))+(((-1.142)*gclwh13_0*x496))+(((-0.0164448)*x631))+(((-2.284)*gclwh0_0*x506))+(((1.226)*gclwh13_9*x496))+(((-0.0176544)*x620))+(((1.142)*pp*x514))+x900+(((-1.0)*gclwh13_0*x526))+(((-2.452)*gclwh5_9*x504))+(((2.284)*gclwh13_0*x499))+(((0.0164448)*x514)));
op[69]=((0.160008)+(((-1.0)*x904))+x897);
op[70]=((0.03204)+(((-1.0)*gclwh15_1*x594))+(((0.03528)*gclwh15_1*x506))+((gclwh15_10*x524))+(((-1.0)*gclwh13_10*x496))+(((0.00324)*gclwh5_1*x508))+(((-1.0)*gclwh5_10*x508))+(((-1.0)*x892))+(((-1.0)*x910))+(((0.03528)*gclwh0_1*x506))+(((0.000254016)*x551))+(((0.000254016)*x553))+(((-0.03528)*gclwh5_1*x504))+(((-0.00324)*gclwh15_1*x524))+(((0.000254016)*x534))+(((0.03528)*gclwh2_1*x499))+(((-0.03204)*gclwh2_1*x496))+(((-0.03528)*gclwh13_1*x499))+(((-0.03204)*gclwh0_1*x524))+x884+x913+(((0.00324)*gclwh13_1*x496))+(((0.000254016)*x616)));
op[71]=((((-0.084)*gclwh15_9*x506))+(((0.042)*gclwh15_9*x524))+((gclwh15_9*x579))+(((0.084)*gclwh13_9*x499))+(((-1.0)*gclwh5_9*x545))+(((-0.01008)*x543))+(((-1.0)*x902))+(((0.01008)*x642))+(((-0.042)*gclwh13_9*x496))+(((-0.0006048)*x558))+(((0.01008)*x554))+(((0.084)*gclwh5_9*x504))+x713+(((-0.042)*gclwh5_9*x508))+x889+(((-1.0)*x879)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x914=htj1*htj1;
CheckValue<IkReal> x915=IKPowWithIntegerCheck(((1.0)+x914),-1);
if(!x915.valid){
continue;
}
cj1array[numsolutions]=((x915.value)*(((1.0)+(((-1.0)*x914)))));
CheckValue<IkReal> x916=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x916.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x916.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x917=htj2*htj2;
CheckValue<IkReal> x918=IKPowWithIntegerCheck(((1.0)+x917),-1);
if(!x918.valid){
continue;
}
cj2array[numsolutions]=((x918.value)*(((1.0)+(((-1.0)*x917)))));
CheckValue<IkReal> x919=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x919.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x919.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x920=htj3*htj3;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(((1.0)+x920),-1);
if(!x921.valid){
continue;
}
cj3array[numsolutions]=((x921.value)*(((1.0)+(((-1.0)*x920)))));
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x922.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x922.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x923=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x923);
rxp1_0=(pz*r11);
rxp1_1=(r01*x923);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x924=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x924);
rxp1_0=(pz*r11);
rxp1_1=(r01*x924);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(r22,-1);
if(!x925.valid){
continue;
}
CheckValue<IkReal> x926=IKPowWithIntegerCheck(sj3,-1);
if(!x926.valid){
continue;
}
sj4array[0]=((x925.value)*(x926.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x927=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x927);
rxp1_0=(pz*r11);
rxp1_1=(r01*x927);
IkReal x928=((16.0)*sj4);
IkReal x929=(cj1*cj2);
IkReal x930=((4.0)*sj3);
IkReal x931=((8.0)*sj4);
IkReal x932=((4.0)*cj4);
IkReal x933=(sj1*sj2);
IkReal x934=((4.0)*sj4);
IkReal x935=(cj3*r02);
IkReal x936=((16.0)*sj3);
IkReal x937=((8.0)*sj3);
IkReal x938=((12.0)*cj4);
IkReal x939=((12.0)*sj4);
IkReal x940=(cj3*r12);
IkReal x941=(r11*x930);
IkReal x942=(r01*x930);
IkReal x943=(r01*x933);
IkReal x944=(cj3*cj4*r01);
IkReal x945=(cj3*cj4*r11);
IkReal x946=(cj3*r10*x932);
IkReal x947=(x939*x940);
IkReal x948=(cj3*r00*x932);
IkReal x949=(x935*x939);
IkReal x950=(r00*x933*x934);
IkReal x951=(r02*x933*x938);
IkReal x952=(r00*x929*x934);
IkReal x953=(r02*x929*x938);
IkReal x954=(r10*x933*x934);
IkReal x955=(r12*x929*x938);
IkReal x956=(r12*x933*x938);
IkReal x957=(r10*x929*x934);
IkReal x958=(x952+x941);
IkReal x959=(x954+x942);
IkReal x960=(x950+x946);
IkReal x961=(x953+x947);
IkReal x962=(x957+x948);
IkReal x963=(x956+x949);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x934*x935))+((r12*x929*x932))+(((-1.0)*r12*x932*x933))+x959+(((-1.0)*x962)))))))+(((0.5)*(IKabs((x959+x955+(((-1.0)*x962))+(((-1.0)*x963)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x936))+(((-1.0)*x928*x943))+((r01*x928*x929))+(((-16.0)*x945)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x928*x929))+(((-16.0)*x944))+((r11*x928*x933))+(((-1.0)*r00*x936)))))))+(IKabs(((((-1.0)*r11*x929*x931))+((r11*x931*x933))+(((-8.0)*x944))+(((-1.0)*r00*x937)))))+(((0.5)*(IKabs(((((-1.0)*x959))+x962+x955+(((-1.0)*x963)))))))+(((0.5)*(IKabs((((r02*x932*x933))+(((-1.0)*r02*x929*x932))+x958+(((-1.0)*x960))+(((-1.0)*x934*x940)))))))+(((0.5)*(IKabs(((((-1.0)*x958))+x960+x951+(((-1.0)*x961)))))))+(IKabs(((((-1.0)*r10*x937))+(((-8.0)*x945))+(((-1.0)*x931*x943))+((r01*x929*x931)))))+(((0.5)*(IKabs((x958+x951+(((-1.0)*x961))+(((-1.0)*x960))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x964=(r10*sj3);
IkReal x965=(r01*sj4);
IkReal x966=(cj1*cj2);
IkReal x967=(cj3*cj4);
IkReal x968=(sj1*sj2);
IkReal x969=(cj4*r02);
IkReal x970=((4.0)*r11*sj3);
IkReal x971=(cj3*r12*sj4);
IkReal x972=((4.0)*r00*sj4);
IkReal x973=((4.0)*r10*x967);
IkReal x974=((12.0)*x971);
IkReal x975=((4.0)*x971);
IkReal x976=(x966*x972);
IkReal x977=(x968*x972);
IkReal x978=((12.0)*x968*x969);
IkReal x979=((12.0)*x966*x969);
IkReal x980=((4.0)*x968*x969);
IkReal x981=((4.0)*x966*x969);
IkReal x982=(x970+x976);
IkReal x983=(x973+x977);
IkReal x984=(x981+x975);
IkReal x985=(x974+x979);
IkReal x986=((((8.0)*x965*x966))+(((-8.0)*x964))+(((-8.0)*x965*x968))+(((-8.0)*r11*x967)));
op[0]=((((-1.0)*x984))+(((-1.0)*x983))+x980+x982);
op[1]=x986;
op[2]=((((-1.0)*x985))+(((-1.0)*x983))+x982+x978);
op[3]=((((16.0)*x965*x966))+(((-16.0)*r11*x967))+(((-16.0)*x965*x968))+(((-16.0)*x964)));
op[4]=((((-1.0)*x985))+(((-1.0)*x982))+x983+x978);
op[5]=x986;
op[6]=((((-1.0)*x984))+(((-1.0)*x982))+x980+x983);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x987=(cj1*cj2);
IkReal x988=((4.0)*cj4);
IkReal x989=(sj1*sj2);
IkReal x990=((4.0)*sj4);
IkReal x991=(r00*sj3);
IkReal x992=(cj3*r02);
IkReal x993=((4.0)*r01*sj3);
IkReal x994=((16.0)*r11*sj4);
IkReal x995=(cj3*cj4*r01);
IkReal x996=((12.0)*cj4*r12);
IkReal x997=((8.0)*r11*sj4);
IkReal x998=(cj3*r00*x988);
IkReal x999=((12.0)*sj4*x992);
IkReal x1000=(x990*x992);
IkReal x1001=(r10*x987*x990);
IkReal x1002=(r10*x989*x990);
IkReal x1003=(x987*x996);
IkReal x1004=(x989*x996);
IkReal x1005=(r12*x987*x988);
IkReal x1006=(r12*x988*x989);
IkReal x1007=(x1002+x993);
IkReal x1008=(x1001+x998);
IkReal x1009=(x1006+x1000);
IkReal x1010=(x1004+x999);
IkReal x1011=(((x989*x997))+(((-1.0)*x987*x997))+(((-8.0)*x991))+(((-8.0)*x995)));
j5evalpoly[0]=((((htj5*htj5*htj5)*((((x989*x994))+(((-16.0)*x995))+(((-16.0)*x991))+(((-1.0)*x987*x994))))))+x1008+x1005+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1007+x1005+(((-1.0)*x1008))+(((-1.0)*x1009))))))+(((-1.0)*x1009))+(((-1.0)*x1007))+(((htj5*htj5*htj5*htj5)*((x1007+x1003+(((-1.0)*x1008))+(((-1.0)*x1010))))))+((x1011*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1008+x1003+(((-1.0)*x1007))+(((-1.0)*x1010))))))+((htj5*x1011)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1012=(cj5*sj4);
IkReal x1013=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1012))+((r01*x1013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1012))+((cj4*r12))+(((-1.0)*r11*x1013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1012))+((r01*x1013))))+IKsqr((((r10*x1012))+((cj4*r12))+(((-1.0)*r11*x1013))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1012))+((r01*x1013))), (((r10*x1012))+((cj4*r12))+(((-1.0)*r11*x1013))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1014=IKcos(j0);
IkReal x1015=IKsin(j0);
IkReal x1016=(r02*sj4);
IkReal x1017=(sj4*sj5);
IkReal x1018=((1.0)*sj3);
IkReal x1019=(r12*sj4);
IkReal x1020=((0.571)*sj1);
IkReal x1021=(cj4*cj5);
IkReal x1022=(r00*sj3);
IkReal x1023=((1.0)*cj1);
IkReal x1024=(cj3*r10);
IkReal x1025=(cj4*sj5);
IkReal x1026=(cj5*r01);
IkReal x1027=((0.571)*cj2);
IkReal x1028=(r10*sj3);
IkReal x1029=(cj5*r11);
IkReal x1030=((1.0)*sj1);
IkReal x1031=(r00*sj5);
IkReal x1032=((1.0)*r00);
IkReal x1033=(cj5*sj4);
IkReal x1034=((1.0)*cj4);
IkReal x1035=(sj2*x1014);
IkReal x1036=(cj1*x1015);
IkReal x1037=(sj2*x1015);
IkReal x1038=(cj2*x1014);
IkReal x1039=(cj1*x1014);
IkReal x1040=(cj2*x1015);
evalcond[0]=((((-1.0)*r10*x1033))+x1014+(((-1.0)*r12*x1034))+((r11*x1017)));
evalcond[1]=((((-1.0)*x1032*x1033))+(((-1.0)*r02*x1034))+((r01*x1017))+(((-1.0)*x1015)));
evalcond[2]=((((-1.0)*x1020*x1035))+(((-0.12)*x1026))+(((0.613)*x1039))+(((-1.0)*px))+(((-0.174)*x1015))+((x1027*x1039))+(((-0.12)*x1031)));
evalcond[3]=((((-1.0)*x1020*x1037))+(((-0.12)*x1029))+(((0.613)*x1036))+(((-0.12)*r10*sj5))+(((-1.0)*py))+(((0.174)*x1014))+((x1027*x1036)));
evalcond[4]=((((-1.0)*cj3*x1021*x1032))+((cj3*x1016))+(((-1.0)*x1023*x1038))+((sj1*x1035))+((cj3*r01*x1025))+((sj5*x1022))+((sj3*x1026)));
evalcond[5]=(((cj3*x1019))+((sj1*x1037))+(((-1.0)*x1021*x1024))+(((-1.0)*x1023*x1040))+((cj3*r11*x1025))+((sj5*x1028))+((sj3*x1029)));
evalcond[6]=(((cj3*x1031))+(((-1.0)*x1023*x1035))+(((-1.0)*x1016*x1018))+((x1021*x1022))+(((-1.0)*x1030*x1038))+(((-1.0)*r01*x1018*x1025))+((cj3*x1026)));
evalcond[7]=((((-1.0)*x1018*x1019))+(((-1.0)*x1023*x1037))+((x1021*x1028))+(((-1.0)*r11*x1018*x1025))+((sj5*x1024))+(((-1.0)*x1030*x1040))+((cj3*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(cj3,-1);
if(!x1041.valid){
continue;
}
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(r22,-1);
if(!x1042.valid){
continue;
}
sj4array[0]=((-1.0)*(x1041.value)*(x1042.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1043=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1043);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1043);
IkReal x1044=((16.0)*sj4);
IkReal x1045=(cj1*cj2);
IkReal x1046=((4.0)*sj3);
IkReal x1047=((8.0)*sj4);
IkReal x1048=((4.0)*cj4);
IkReal x1049=(sj1*sj2);
IkReal x1050=((4.0)*sj4);
IkReal x1051=(cj3*r02);
IkReal x1052=((16.0)*sj3);
IkReal x1053=((8.0)*sj3);
IkReal x1054=((12.0)*cj4);
IkReal x1055=((12.0)*sj4);
IkReal x1056=(cj3*r12);
IkReal x1057=(r11*x1046);
IkReal x1058=(r01*x1046);
IkReal x1059=(r01*x1049);
IkReal x1060=(cj3*cj4*r01);
IkReal x1061=(cj3*cj4*r11);
IkReal x1062=(cj3*r10*x1048);
IkReal x1063=(x1055*x1056);
IkReal x1064=(cj3*r00*x1048);
IkReal x1065=(x1051*x1055);
IkReal x1066=(r00*x1049*x1050);
IkReal x1067=(r02*x1049*x1054);
IkReal x1068=(r00*x1045*x1050);
IkReal x1069=(r02*x1045*x1054);
IkReal x1070=(r10*x1049*x1050);
IkReal x1071=(r12*x1045*x1054);
IkReal x1072=(r12*x1049*x1054);
IkReal x1073=(r10*x1045*x1050);
IkReal x1074=(x1057+x1068);
IkReal x1075=(x1058+x1070);
IkReal x1076=(x1062+x1066);
IkReal x1077=(x1069+x1063);
IkReal x1078=(x1073+x1064);
IkReal x1079=(x1072+x1065);
j5eval[0]=((((0.5)*(IKabs((x1075+x1071+(((-1.0)*x1079))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1074+x1067+(((-1.0)*x1077))+(((-1.0)*x1076)))))))+(((0.5)*(IKabs((x1074+(((-1.0)*r02*x1045*x1048))+(((-1.0)*x1076))+(((-1.0)*x1050*x1056))+((r02*x1048*x1049)))))))+(IKabs(((((-1.0)*r10*x1053))+((r01*x1045*x1047))+(((-1.0)*x1047*x1059))+(((-8.0)*x1061)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1052))+(((-1.0)*x1044*x1059))+((r01*x1044*x1045))+(((-16.0)*x1061)))))))+(((0.5)*(IKabs((x1078+x1071+(((-1.0)*x1075))+(((-1.0)*x1079)))))))+(IKabs(((((-1.0)*r00*x1053))+(((-1.0)*r11*x1045*x1047))+((r11*x1047*x1049))+(((-8.0)*x1060)))))+(((0.5)*(IKabs((x1076+x1067+(((-1.0)*x1074))+(((-1.0)*x1077)))))))+(((0.5)*(IKabs((x1075+((r12*x1045*x1048))+(((-1.0)*r12*x1048*x1049))+(((-1.0)*x1078))+(((-1.0)*x1050*x1051)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1052))+((r11*x1044*x1049))+(((-16.0)*x1060))+(((-1.0)*r11*x1044*x1045))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1080=(r10*sj3);
IkReal x1081=(r01*sj4);
IkReal x1082=(cj1*cj2);
IkReal x1083=(cj3*cj4);
IkReal x1084=(sj1*sj2);
IkReal x1085=(cj4*r02);
IkReal x1086=((4.0)*r11*sj3);
IkReal x1087=(cj3*r12*sj4);
IkReal x1088=((4.0)*r00*sj4);
IkReal x1089=((4.0)*r10*x1083);
IkReal x1090=((12.0)*x1087);
IkReal x1091=((4.0)*x1087);
IkReal x1092=(x1082*x1088);
IkReal x1093=(x1084*x1088);
IkReal x1094=((12.0)*x1084*x1085);
IkReal x1095=((12.0)*x1082*x1085);
IkReal x1096=((4.0)*x1084*x1085);
IkReal x1097=((4.0)*x1082*x1085);
IkReal x1098=(x1092+x1086);
IkReal x1099=(x1093+x1089);
IkReal x1100=(x1097+x1091);
IkReal x1101=(x1095+x1090);
IkReal x1102=((((-8.0)*x1081*x1084))+(((-8.0)*r11*x1083))+(((8.0)*x1081*x1082))+(((-8.0)*x1080)));
op[0]=(x1096+x1098+(((-1.0)*x1099))+(((-1.0)*x1100)));
op[1]=x1102;
op[2]=(x1094+x1098+(((-1.0)*x1099))+(((-1.0)*x1101)));
op[3]=((((-16.0)*x1081*x1084))+(((-16.0)*x1080))+(((16.0)*x1081*x1082))+(((-16.0)*r11*x1083)));
op[4]=(x1094+x1099+(((-1.0)*x1098))+(((-1.0)*x1101)));
op[5]=x1102;
op[6]=(x1096+x1099+(((-1.0)*x1098))+(((-1.0)*x1100)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1103=(cj1*cj2);
IkReal x1104=((4.0)*cj4);
IkReal x1105=(sj1*sj2);
IkReal x1106=((4.0)*sj4);
IkReal x1107=(r00*sj3);
IkReal x1108=(cj3*r02);
IkReal x1109=((4.0)*r01*sj3);
IkReal x1110=((16.0)*r11*sj4);
IkReal x1111=(cj3*cj4*r01);
IkReal x1112=((12.0)*cj4*r12);
IkReal x1113=((8.0)*r11*sj4);
IkReal x1114=(cj3*r00*x1104);
IkReal x1115=((12.0)*sj4*x1108);
IkReal x1116=(x1106*x1108);
IkReal x1117=(r10*x1103*x1106);
IkReal x1118=(r10*x1105*x1106);
IkReal x1119=(x1103*x1112);
IkReal x1120=(x1105*x1112);
IkReal x1121=(r12*x1103*x1104);
IkReal x1122=(r12*x1104*x1105);
IkReal x1123=(x1109+x1118);
IkReal x1124=(x1114+x1117);
IkReal x1125=(x1116+x1122);
IkReal x1126=(x1115+x1120);
IkReal x1127=((((-1.0)*x1103*x1113))+((x1105*x1113))+(((-8.0)*x1107))+(((-8.0)*x1111)));
j5evalpoly[0]=(((htj5*x1127))+x1121+x1124+(((htj5*htj5)*((x1119+x1124+(((-1.0)*x1126))+(((-1.0)*x1123))))))+(((htj5*htj5*htj5)*(((((-1.0)*x1103*x1110))+((x1105*x1110))+(((-16.0)*x1111))+(((-16.0)*x1107))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1121+x1123+(((-1.0)*x1125))+(((-1.0)*x1124))))))+(((-1.0)*x1125))+(((-1.0)*x1123))+((x1127*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1119+x1123+(((-1.0)*x1126))+(((-1.0)*x1124)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1128=(cj5*sj4);
IkReal x1129=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1129))+(((-1.0)*r00*x1128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1129))+((r10*x1128))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1129))+(((-1.0)*r00*x1128))))+IKsqr(((((-1.0)*r11*x1129))+((r10*x1128))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1129))+(((-1.0)*r00*x1128))), ((((-1.0)*r11*x1129))+((r10*x1128))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1130=IKcos(j0);
IkReal x1131=IKsin(j0);
IkReal x1132=(r02*sj4);
IkReal x1133=(sj4*sj5);
IkReal x1134=((1.0)*sj3);
IkReal x1135=(r12*sj4);
IkReal x1136=((0.571)*sj1);
IkReal x1137=(cj4*cj5);
IkReal x1138=(r00*sj3);
IkReal x1139=((1.0)*cj1);
IkReal x1140=(cj3*r10);
IkReal x1141=(cj4*sj5);
IkReal x1142=(cj5*r01);
IkReal x1143=((0.571)*cj2);
IkReal x1144=(r10*sj3);
IkReal x1145=(cj5*r11);
IkReal x1146=((1.0)*sj1);
IkReal x1147=(r00*sj5);
IkReal x1148=((1.0)*r00);
IkReal x1149=(cj5*sj4);
IkReal x1150=((1.0)*cj4);
IkReal x1151=(sj2*x1130);
IkReal x1152=(cj1*x1131);
IkReal x1153=(sj2*x1131);
IkReal x1154=(cj2*x1130);
IkReal x1155=(cj1*x1130);
IkReal x1156=(cj2*x1131);
evalcond[0]=(x1130+(((-1.0)*r12*x1150))+(((-1.0)*r10*x1149))+((r11*x1133)));
evalcond[1]=(((r01*x1133))+(((-1.0)*r02*x1150))+(((-1.0)*x1131))+(((-1.0)*x1148*x1149)));
evalcond[2]=((((-0.12)*x1142))+(((-0.12)*x1147))+(((0.613)*x1155))+((x1143*x1155))+(((-1.0)*px))+(((-1.0)*x1136*x1151))+(((-0.174)*x1131)));
evalcond[3]=((((0.174)*x1130))+(((-0.12)*x1145))+(((0.613)*x1152))+((x1143*x1152))+(((-0.12)*r10*sj5))+(((-1.0)*py))+(((-1.0)*x1136*x1153)));
evalcond[4]=(((cj3*x1132))+((sj3*x1142))+((cj3*r01*x1141))+((sj5*x1138))+(((-1.0)*x1139*x1154))+((sj1*x1151))+(((-1.0)*cj3*x1137*x1148)));
evalcond[5]=(((cj3*x1135))+(((-1.0)*x1137*x1140))+((sj5*x1144))+((sj3*x1145))+((cj3*r11*x1141))+(((-1.0)*x1139*x1156))+((sj1*x1153)));
evalcond[6]=(((cj3*x1147))+((cj3*x1142))+((x1137*x1138))+(((-1.0)*x1146*x1154))+(((-1.0)*r01*x1134*x1141))+(((-1.0)*x1132*x1134))+(((-1.0)*x1139*x1151)));
evalcond[7]=(((x1137*x1144))+((sj5*x1140))+(((-1.0)*r11*x1134*x1141))+((cj3*x1145))+(((-1.0)*x1134*x1135))+(((-1.0)*x1146*x1156))+(((-1.0)*x1139*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1157=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1157);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1157);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1159=IKPowWithIntegerCheck(r22,-1);
if(!x1159.valid){
continue;
}
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(sj3,-1);
if(!x1160.valid){
continue;
}
sj4array[0]=((x1159.value)*(x1160.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1162=((4.0)*r01);
IkReal x1163=((16.0)*r00);
IkReal x1164=(cj3*sj2);
IkReal x1165=((8.0)*r00);
IkReal x1166=(cj2*cj3);
IkReal x1167=(cj4*r01);
IkReal x1168=((16.0)*cj1);
IkReal x1169=((8.0)*sj1);
IkReal x1170=((16.0)*sj1);
IkReal x1171=((8.0)*cj1);
IkReal x1172=(sj2*sj3);
IkReal x1173=(cj2*sj3);
IkReal x1174=(sj1*x1173);
IkReal x1175=((4.0)*cj4*r00);
IkReal x1176=(((sj1*x1172*x1175))+((x1162*x1174))+((cj1*x1162*x1172))+((sj1*x1162*x1164)));
IkReal x1177=(((cj1*x1173*x1175))+((sj1*x1166*x1175))+((cj1*x1162*x1166))+((cj1*x1164*x1175)));
IkReal x1178=(x1177+(((-1.0)*x1176)));
IkReal x1179=(((cj1*x1165*x1172))+((x1165*x1174))+((x1167*x1171*x1173))+((sj1*x1164*x1165))+((x1164*x1167*x1171))+(((-1.0)*x1167*x1169*x1172))+(((-1.0)*cj1*x1165*x1166))+((x1166*x1167*x1169)));
IkReal x1180=(x1176+(((-1.0)*x1177)));
op[0]=x1178;
op[1]=x1179;
op[2]=x1178;
op[3]=(((x1166*x1167*x1170))+((x1163*x1174))+((sj1*x1163*x1164))+((cj1*x1163*x1172))+((x1167*x1168*x1173))+((x1164*x1167*x1168))+(((-1.0)*cj1*x1163*x1166))+(((-1.0)*x1167*x1170*x1172)));
op[4]=x1180;
op[5]=x1179;
op[6]=x1180;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1181=(cj5*sj4);
IkReal x1182=(sj4*sj5);
if( IKabs((((r01*x1182))+(((-1.0)*r00*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1181))+(((-1.0)*r11*x1182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1182))+(((-1.0)*r00*x1181))))+IKsqr((((r10*x1181))+(((-1.0)*r11*x1182))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1182))+(((-1.0)*r00*x1181))), (((r10*x1181))+(((-1.0)*r11*x1182))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1183=IKcos(j0);
IkReal x1184=IKsin(j0);
IkReal x1185=((0.571)*cj2);
IkReal x1186=((1.0)*cj3);
IkReal x1187=((1.0)*sj2);
IkReal x1188=(r11*sj5);
IkReal x1189=(cj5*r01);
IkReal x1190=(r01*sj5);
IkReal x1191=(sj1*sj2);
IkReal x1192=(cj5*r11);
IkReal x1193=(cj3*cj4);
IkReal x1194=(r00*sj5);
IkReal x1195=((1.0)*cj2);
IkReal x1196=(r10*sj5);
IkReal x1197=(cj1*x1183);
IkReal x1198=(cj4*cj5*r00);
IkReal x1199=(cj4*cj5*r10);
IkReal x1200=((1.0)*cj4*sj3);
IkReal x1201=(cj1*x1184);
IkReal x1202=((1.0)*cj5*sj4);
evalcond[0]=(x1183+((sj4*x1188))+(((-1.0)*r10*x1202)));
evalcond[1]=(((sj4*x1190))+(((-1.0)*r00*x1202))+(((-1.0)*x1184)));
evalcond[2]=(((x1183*x1191))+(((-1.0)*x1195*x1197))+(((-1.0)*x1186*x1198))+((sj3*x1189))+((sj3*x1194))+((x1190*x1193)));
evalcond[3]=(((x1184*x1191))+((x1188*x1193))+(((-1.0)*x1186*x1199))+((sj3*x1192))+((sj3*x1196))+(((-1.0)*x1195*x1201)));
evalcond[4]=((((-1.0)*x1190*x1200))+(((-1.0)*x1187*x1197))+((sj3*x1198))+(((-1.0)*sj1*x1183*x1195))+((cj3*x1189))+((cj3*x1194)));
evalcond[5]=((((-1.0)*sj1*x1184*x1195))+(((-1.0)*x1188*x1200))+(((-1.0)*x1187*x1201))+((sj3*x1199))+((cj3*x1196))+((cj3*x1192)));
evalcond[6]=(((x1185*x1197))+(((-0.571)*x1183*x1191))+(((-0.12)*x1194))+(((-1.0)*px))+(((-0.12)*x1189))+(((-0.174)*x1184))+(((0.613)*x1197)));
evalcond[7]=((((-0.571)*x1184*x1191))+((x1185*x1201))+(((-0.12)*x1192))+(((-0.12)*x1196))+(((-1.0)*py))+(((0.613)*x1201))+(((0.174)*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(cj3,-1);
if(!x1203.valid){
continue;
}
CheckValue<IkReal> x1204=IKPowWithIntegerCheck(r22,-1);
if(!x1204.valid){
continue;
}
sj4array[0]=((-1.0)*(x1203.value)*(x1204.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1205=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1205);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1205);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1206=((4.0)*r01);
IkReal x1207=((16.0)*r00);
IkReal x1208=(cj3*sj2);
IkReal x1209=((8.0)*r00);
IkReal x1210=(cj2*cj3);
IkReal x1211=(cj4*r01);
IkReal x1212=((16.0)*cj1);
IkReal x1213=((8.0)*sj1);
IkReal x1214=((16.0)*sj1);
IkReal x1215=((8.0)*cj1);
IkReal x1216=(sj2*sj3);
IkReal x1217=(cj2*sj3);
IkReal x1218=(sj1*x1217);
IkReal x1219=((4.0)*cj4*r00);
IkReal x1220=(((cj1*x1206*x1216))+((sj1*x1216*x1219))+((x1206*x1218))+((sj1*x1206*x1208)));
IkReal x1221=(((cj1*x1206*x1210))+((cj1*x1208*x1219))+((cj1*x1217*x1219))+((sj1*x1210*x1219)));
IkReal x1222=(x1221+(((-1.0)*x1220)));
IkReal x1223=(((x1211*x1215*x1217))+((x1210*x1211*x1213))+((x1208*x1211*x1215))+((sj1*x1208*x1209))+((cj1*x1209*x1216))+(((-1.0)*x1211*x1213*x1216))+(((-1.0)*cj1*x1209*x1210))+((x1209*x1218)));
IkReal x1224=(x1220+(((-1.0)*x1221)));
op[0]=x1222;
op[1]=x1223;
op[2]=x1222;
op[3]=(((cj1*x1207*x1216))+((x1210*x1211*x1214))+((x1208*x1211*x1212))+(((-1.0)*x1211*x1214*x1216))+(((-1.0)*cj1*x1207*x1210))+((x1207*x1218))+((x1211*x1212*x1217))+((sj1*x1207*x1208)));
op[4]=x1224;
op[5]=x1223;
op[6]=x1224;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1225=(cj5*sj4);
IkReal x1226=(sj4*sj5);
if( IKabs((((r01*x1226))+(((-1.0)*r00*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1226))+((r10*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1226))+(((-1.0)*r00*x1225))))+IKsqr(((((-1.0)*r11*x1226))+((r10*x1225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1226))+(((-1.0)*r00*x1225))), ((((-1.0)*r11*x1226))+((r10*x1225))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1227=IKcos(j0);
IkReal x1228=IKsin(j0);
IkReal x1229=((0.571)*cj2);
IkReal x1230=((1.0)*cj3);
IkReal x1231=((1.0)*sj2);
IkReal x1232=(r11*sj5);
IkReal x1233=(cj5*r01);
IkReal x1234=(r01*sj5);
IkReal x1235=(sj1*sj2);
IkReal x1236=(cj5*r11);
IkReal x1237=(cj3*cj4);
IkReal x1238=(r00*sj5);
IkReal x1239=((1.0)*cj2);
IkReal x1240=(r10*sj5);
IkReal x1241=(cj1*x1227);
IkReal x1242=(cj4*cj5*r00);
IkReal x1243=(cj4*cj5*r10);
IkReal x1244=((1.0)*cj4*sj3);
IkReal x1245=(cj1*x1228);
IkReal x1246=((1.0)*cj5*sj4);
evalcond[0]=(x1227+(((-1.0)*r10*x1246))+((sj4*x1232)));
evalcond[1]=((((-1.0)*x1228))+((sj4*x1234))+(((-1.0)*r00*x1246)));
evalcond[2]=((((-1.0)*x1239*x1241))+((x1234*x1237))+((sj3*x1233))+((sj3*x1238))+(((-1.0)*x1230*x1242))+((x1227*x1235)));
evalcond[3]=((((-1.0)*x1239*x1245))+((sj3*x1236))+((sj3*x1240))+(((-1.0)*x1230*x1243))+((x1228*x1235))+((x1232*x1237)));
evalcond[4]=(((cj3*x1233))+((cj3*x1238))+(((-1.0)*x1231*x1241))+((sj3*x1242))+(((-1.0)*sj1*x1227*x1239))+(((-1.0)*x1234*x1244)));
evalcond[5]=(((cj3*x1236))+(((-1.0)*sj1*x1228*x1239))+(((-1.0)*x1231*x1245))+((sj3*x1243))+((cj3*x1240))+(((-1.0)*x1232*x1244)));
evalcond[6]=((((-0.571)*x1227*x1235))+((x1229*x1241))+(((-0.12)*x1233))+(((-0.12)*x1238))+(((-1.0)*px))+(((-0.174)*x1228))+(((0.613)*x1241)));
evalcond[7]=(((x1229*x1245))+(((-0.571)*x1228*x1235))+(((-0.12)*x1236))+(((-1.0)*py))+(((-0.12)*x1240))+(((0.174)*x1227))+(((0.613)*x1245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal(((-0.12)*r21)),IkReal(((-0.12)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
IkReal x1247=((1.0)*(x1249.value));
if((((((0.0144)*(r20*r20)))+(((0.0144)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1250=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0144)*(r20*r20)))+(((0.0144)*(r21*r21)))))),-1);
if(!x1250.valid){
continue;
}
if( (((-1.0)*(x1250.value)*(((((-0.613)*sj1))+(((-1.0)*pz))+(((-0.571)*cj2*sj1))+(((-0.571)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1250.value)*(((((-0.613)*sj1))+(((-1.0)*pz))+(((-0.571)*cj2*sj1))+(((-0.571)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1248=((-1.0)*(IKasin(((-1.0)*(x1250.value)*(((((-0.613)*sj1))+(((-1.0)*pz))+(((-0.571)*cj2*sj1))+(((-0.571)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1248))+(((-1.0)*x1247)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1247))+(((1.0)*x1248)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1251=cj5*cj5;
IkReal x1252=r21*r21;
IkReal x1253=(sj3*x1251);
IkReal x1254=(((sj3*(r22*r22)))+(((-1.0)*x1252*x1253))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1253*(r20*r20)))+((sj3*x1252)));
j4eval[0]=x1254;
j4eval[1]=IKsign(x1254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1255=cj5*cj5;
IkReal x1256=r21*r21;
IkReal x1257=((1.0)*cj3);
IkReal x1258=(cj3*x1255);
IkReal x1259=((((-1.0)*x1257*(r22*r22)))+((x1256*x1258))+(((-1.0)*x1256*x1257))+(((-1.0)*x1255*x1257*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1259;
j4eval[1]=IKsign(x1259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1260=cj1*cj1;
IkReal x1261=cj2*cj2;
IkReal x1262=(cj2*x1260);
IkReal x1263=(cj1*sj1*sj2);
IkReal x1264=(x1260*x1261);
j0eval[0]=((7.16531933719434)+(((-13.1129745817246)*cj2*x1263))+x1260+(((14.0775016087516)*x1262))+(((13.1129745817246)*x1264))+(((-14.0775016087516)*x1263))+(((-6.55648729086229)*x1261)));
j0eval[1]=IKsign(((89079.25)+(((12432.0)*x1260))+(((163020.5)*x1264))+(((-163020.5)*cj2*x1263))+(((-81510.25)*x1261))+(((-175011.5)*x1263))+(((175011.5)*x1262))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1265=((1.0)*cj5);
IkReal x1266=((1.0)*sj5);
IkReal x1267=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1267;
j0eval[1]=((IKabs(((((-1.0)*r10*x1266))+(((-1.0)*r11*x1265)))))+(IKabs(((((-1.0)*r00*x1266))+(((-1.0)*r01*x1265))))));
j0eval[2]=IKsign(x1267);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1268=cj5*cj5;
IkReal x1269=r21*r21;
IkReal x1270=(sj1*sj2);
IkReal x1271=(r21*sj5);
IkReal x1272=(cj5*r20);
IkReal x1273=(cj1*cj2);
IkReal x1274=(x1269+(r22*r22)+(((-1.0)*x1268*x1269))+(((-2.0)*x1271*x1272))+((x1268*(r20*r20))));
j4eval[0]=x1274;
j4eval[1]=IKsign(x1274);
j4eval[2]=((IKabs((((r22*x1270))+(((-1.0)*r22*x1273)))))+(IKabs(((((-1.0)*x1271*x1273))+((x1272*x1273))+((x1270*x1271))+(((-1.0)*x1270*x1272))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1275=(r00*sj5);
IkReal x1276=((306.5)*cj1);
IkReal x1277=(cj1*cj2);
IkReal x1278=(cj5*r01);
IkReal x1279=((500.0)*px);
IkReal x1280=(sj1*sj2);
IkReal x1281=((225.5)*x1280);
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(((((-87.0)*x1277))+(((87.0)*x1280))),-1);
if(!x1282.valid){
continue;
}
CheckValue<IkReal> x1283=IKPowWithIntegerCheck((x1280+(((-1.0)*x1277))),-1);
if(!x1283.valid){
continue;
}
if( IKabs(((x1282.value)*((((x1277*x1279))+((x1278*x1281))+(((-1.0)*x1275*x1276))+((x1275*x1281))+(((-1.0)*x1276*x1278))+(((-1.0)*x1279*x1280))+(((-225.5)*x1277*x1278))+(((-225.5)*x1275*x1277)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1283.value)*(((((-1.0)*x1275))+(((-1.0)*x1278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1282.value)*((((x1277*x1279))+((x1278*x1281))+(((-1.0)*x1275*x1276))+((x1275*x1281))+(((-1.0)*x1276*x1278))+(((-1.0)*x1279*x1280))+(((-225.5)*x1277*x1278))+(((-225.5)*x1275*x1277))))))+IKsqr(((x1283.value)*(((((-1.0)*x1275))+(((-1.0)*x1278))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1282.value)*((((x1277*x1279))+((x1278*x1281))+(((-1.0)*x1275*x1276))+((x1275*x1281))+(((-1.0)*x1276*x1278))+(((-1.0)*x1279*x1280))+(((-225.5)*x1277*x1278))+(((-225.5)*x1275*x1277))))), ((x1283.value)*(((((-1.0)*x1275))+(((-1.0)*x1278))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1284=IKcos(j0);
IkReal x1285=IKsin(j0);
IkReal x1286=(cj5*r01);
IkReal x1287=(sj1*sj2);
IkReal x1288=(cj5*r11);
IkReal x1289=(r00*sj5);
IkReal x1290=(r10*sj5);
IkReal x1291=((0.571)*x1287);
IkReal x1292=(cj1*x1285);
IkReal x1293=(cj1*cj2*x1284);
evalcond[0]=(x1286+x1289+((x1284*x1287))+(((-1.0)*x1293)));
evalcond[1]=(((x1285*x1287))+x1288+x1290+(((-1.0)*cj2*x1292)));
evalcond[2]=((((-1.0)*x1284*x1291))+(((-0.12)*x1286))+(((-0.12)*x1289))+(((-1.0)*px))+(((0.613)*cj1*x1284))+(((-0.174)*x1285))+(((0.571)*x1293)));
evalcond[3]=((((-0.12)*x1288))+(((0.571)*cj2*x1292))+(((0.613)*x1292))+(((-1.0)*py))+(((-0.12)*x1290))+(((-1.0)*x1285*x1291))+(((0.174)*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1294=((1.0)*cj5);
IkReal x1295=((((-1.0)*r01*x1294))+(((-1.0)*r00*sj5)));
j4eval[0]=x1295;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1294))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1296=((1.0)*cj5);
IkReal x1297=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1296)));
j4eval[0]=x1297;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1296))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1298=((1.0)*sj0);
IkReal x1299=((1.0)*cj0);
IkReal x1300=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1300;
j4eval[1]=((IKabs(((((-1.0)*r12*x1298))+(((-1.0)*r02*x1299)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1299))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1298))))));
j4eval[2]=IKsign(x1300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1301=((1.0)*sj0);
IkReal x1302=((1.0)*cj0);
CheckValue<IkReal> x1303 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1302))+(((-1.0)*r12*x1301)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1302))+(((-1.0)*r11*sj5*x1301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1303.valid){
continue;
}
CheckValue<IkReal> x1304=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1303.value)+(((1.5707963267949)*(x1304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1305=IKsin(j4);
IkReal x1306=IKcos(j4);
IkReal x1307=(cj5*r10);
IkReal x1308=(r01*sj5);
IkReal x1309=((1.0)*cj2);
IkReal x1310=(cj5*r00);
IkReal x1311=((1.0)*sj0);
IkReal x1312=(cj5*r20);
IkReal x1313=(cj1*sj2);
IkReal x1314=((1.0)*x1306);
IkReal x1315=((1.0)*x1305);
IkReal x1316=(sj5*x1305);
evalcond[0]=((((-1.0)*r22*x1314))+((r21*x1316))+(((-1.0)*x1312*x1315)));
evalcond[1]=(cj0+((r11*x1316))+(((-1.0)*x1307*x1315))+(((-1.0)*r12*x1314)));
evalcond[2]=(((x1305*x1308))+(((-1.0)*x1311))+(((-1.0)*r02*x1314))+(((-1.0)*x1310*x1315)));
evalcond[3]=((((-1.0)*r22*x1315))+((x1306*x1312))+((sj1*sj2))+(((-1.0)*cj1*x1309))+(((-1.0)*r21*sj5*x1314)));
evalcond[4]=((((-1.0)*x1308*x1314))+(((-1.0)*cj0*sj1*x1309))+((x1306*x1310))+(((-1.0)*cj0*x1313))+(((-1.0)*r02*x1315)));
evalcond[5]=((((-1.0)*x1311*x1313))+((x1306*x1307))+(((-1.0)*r12*x1315))+(((-1.0)*r11*sj5*x1314))+(((-1.0)*sj0*sj1*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1317=((1.0)*cj5);
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1317))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1317)))),-1);
if(!x1319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1318.value)+(((1.5707963267949)*(x1319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1320=IKsin(j4);
IkReal x1321=IKcos(j4);
IkReal x1322=(cj5*r10);
IkReal x1323=(r01*sj5);
IkReal x1324=((1.0)*cj2);
IkReal x1325=(cj5*r00);
IkReal x1326=((1.0)*sj0);
IkReal x1327=(cj5*r20);
IkReal x1328=(cj1*sj2);
IkReal x1329=((1.0)*x1321);
IkReal x1330=((1.0)*x1320);
IkReal x1331=(sj5*x1320);
evalcond[0]=((((-1.0)*x1327*x1330))+(((-1.0)*r22*x1329))+((r21*x1331)));
evalcond[1]=(((r11*x1331))+cj0+(((-1.0)*x1322*x1330))+(((-1.0)*r12*x1329)));
evalcond[2]=((((-1.0)*x1325*x1330))+((x1320*x1323))+(((-1.0)*x1326))+(((-1.0)*r02*x1329)));
evalcond[3]=((((-1.0)*r22*x1330))+((sj1*sj2))+(((-1.0)*r21*sj5*x1329))+((x1321*x1327))+(((-1.0)*cj1*x1324)));
evalcond[4]=((((-1.0)*cj0*sj1*x1324))+(((-1.0)*x1323*x1329))+(((-1.0)*cj0*x1328))+(((-1.0)*r02*x1330))+((x1321*x1325)));
evalcond[5]=((((-1.0)*sj0*sj1*x1324))+(((-1.0)*x1326*x1328))+(((-1.0)*r11*sj5*x1329))+((x1321*x1322))+(((-1.0)*r12*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1332=((1.0)*cj5);
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1332)))),-1);
if(!x1333.valid){
continue;
}
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1333.value)))+(x1334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1335=IKsin(j4);
IkReal x1336=IKcos(j4);
IkReal x1337=(cj5*r10);
IkReal x1338=(r01*sj5);
IkReal x1339=((1.0)*cj2);
IkReal x1340=(cj5*r00);
IkReal x1341=((1.0)*sj0);
IkReal x1342=(cj5*r20);
IkReal x1343=(cj1*sj2);
IkReal x1344=((1.0)*x1336);
IkReal x1345=((1.0)*x1335);
IkReal x1346=(sj5*x1335);
evalcond[0]=((((-1.0)*r22*x1344))+(((-1.0)*x1342*x1345))+((r21*x1346)));
evalcond[1]=(cj0+(((-1.0)*r12*x1344))+((r11*x1346))+(((-1.0)*x1337*x1345)));
evalcond[2]=((((-1.0)*x1340*x1345))+(((-1.0)*r02*x1344))+(((-1.0)*x1341))+((x1335*x1338)));
evalcond[3]=((((-1.0)*cj1*x1339))+((sj1*sj2))+(((-1.0)*r21*sj5*x1344))+(((-1.0)*r22*x1345))+((x1336*x1342)));
evalcond[4]=((((-1.0)*x1338*x1344))+(((-1.0)*r02*x1345))+(((-1.0)*cj0*sj1*x1339))+((x1336*x1340))+(((-1.0)*cj0*x1343)));
evalcond[5]=(((x1336*x1337))+(((-1.0)*x1341*x1343))+(((-1.0)*r12*x1345))+(((-1.0)*sj0*sj1*x1339))+(((-1.0)*r11*sj5*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1347=cj5*cj5;
IkReal x1348=r21*r21;
IkReal x1349=(sj1*sj2);
IkReal x1350=(r21*sj5);
IkReal x1351=(cj1*cj2);
IkReal x1352=(cj5*r20);
CheckValue<IkReal> x1353 = IKatan2WithCheck(IkReal((((r22*x1349))+(((-1.0)*r22*x1351)))),IkReal(((((-1.0)*x1350*x1351))+((x1349*x1350))+(((-1.0)*x1349*x1352))+((x1351*x1352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1353.valid){
continue;
}
CheckValue<IkReal> x1354=IKPowWithIntegerCheck(IKsign((x1348+(r22*r22)+(((-1.0)*x1347*x1348))+((x1347*(r20*r20)))+(((-2.0)*x1350*x1352)))),-1);
if(!x1354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1353.value)+(((1.5707963267949)*(x1354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1355=IKsin(j4);
IkReal x1356=IKcos(j4);
IkReal x1357=(r21*sj5);
IkReal x1358=(cj5*r20);
IkReal x1359=((1.0)*x1356);
IkReal x1360=((1.0)*x1355);
evalcond[0]=(((x1355*x1357))+(((-1.0)*r22*x1359))+(((-1.0)*x1358*x1360)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1360))+(((-1.0)*x1357*x1359))+((x1356*x1358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1361=(cj5*sj4);
IkReal x1362=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1362))+(((-1.0)*r00*x1361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1361))+(((-1.0)*r11*x1362))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1362))+(((-1.0)*r00*x1361))))+IKsqr((((r10*x1361))+(((-1.0)*r11*x1362))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1362))+(((-1.0)*r00*x1361))), (((r10*x1361))+(((-1.0)*r11*x1362))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1363=IKcos(j0);
IkReal x1364=IKsin(j0);
IkReal x1365=(cj4*cj5);
IkReal x1366=(cj1*cj2);
IkReal x1367=(sj1*sj2);
IkReal x1368=(cj5*r01);
IkReal x1369=((1.0)*sj2);
IkReal x1370=(r11*sj5);
IkReal x1371=((1.0)*sj4);
IkReal x1372=(cj2*sj1);
IkReal x1373=(cj5*r11);
IkReal x1374=(r00*sj5);
IkReal x1375=((1.0)*cj4);
IkReal x1376=(r01*sj5);
IkReal x1377=(r10*sj5);
IkReal x1378=((0.571)*x1363);
IkReal x1379=(cj1*x1364);
IkReal x1380=(cj1*x1363);
IkReal x1381=((0.571)*x1364);
IkReal x1382=((1.0)*x1363);
IkReal x1383=((1.0)*x1364);
evalcond[0]=(x1363+(((-1.0)*cj5*r10*x1371))+(((-1.0)*r12*x1375))+((sj4*x1370)));
evalcond[1]=((((-1.0)*x1383))+(((-1.0)*r02*x1375))+((sj4*x1376))+(((-1.0)*cj5*r00*x1371)));
evalcond[2]=(x1368+x1374+((x1363*x1367))+(((-1.0)*x1366*x1382)));
evalcond[3]=(x1373+x1377+(((-1.0)*x1366*x1383))+((x1364*x1367)));
evalcond[4]=((((-1.0)*x1372*x1382))+(((-1.0)*x1375*x1376))+(((-1.0)*r02*x1371))+(((-1.0)*x1369*x1380))+((r00*x1365)));
evalcond[5]=((((-1.0)*x1372*x1383))+((r10*x1365))+(((-1.0)*x1370*x1375))+(((-1.0)*r12*x1371))+(((-1.0)*x1369*x1379)));
evalcond[6]=((((-0.12)*x1374))+(((-0.174)*x1364))+((x1366*x1378))+(((-1.0)*px))+(((0.613)*x1380))+(((-1.0)*x1367*x1378))+(((-0.12)*x1368)));
evalcond[7]=(((x1366*x1381))+(((-0.12)*x1377))+(((-0.12)*x1373))+(((0.174)*x1363))+(((-1.0)*x1367*x1381))+(((-1.0)*py))+(((0.613)*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1384=((1.0)*cj5);
IkReal x1385=((1.0)*sj5);
CheckValue<IkReal> x1386 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1384))+(((-1.0)*r10*x1385)))),IkReal(((((-1.0)*r00*x1385))+(((-1.0)*r01*x1384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1386.valid){
continue;
}
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1387.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1386.value)+(((1.5707963267949)*(x1387.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1388=IKcos(j0);
IkReal x1389=IKsin(j0);
IkReal x1390=(cj5*r01);
IkReal x1391=(sj1*sj2);
IkReal x1392=(cj5*r11);
IkReal x1393=(r00*sj5);
IkReal x1394=(r10*sj5);
IkReal x1395=((0.571)*x1391);
IkReal x1396=(cj1*x1389);
IkReal x1397=(cj1*cj2*x1388);
evalcond[0]=(x1393+x1390+((x1388*x1391))+(((-1.0)*x1397)));
evalcond[1]=(x1394+x1392+(((-1.0)*cj2*x1396))+((x1389*x1391)));
evalcond[2]=((((-0.174)*x1389))+(((0.613)*cj1*x1388))+(((-1.0)*px))+(((-1.0)*x1388*x1395))+(((0.571)*x1397))+(((-0.12)*x1390))+(((-0.12)*x1393)));
evalcond[3]=((((-1.0)*x1389*x1395))+(((0.174)*x1388))+(((-1.0)*py))+(((0.613)*x1396))+(((-0.12)*x1394))+(((-0.12)*x1392))+(((0.571)*cj2*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1398=((1.0)*cj5);
IkReal x1399=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1398)));
j4eval[0]=x1399;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1398))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1400=((1.0)*cj5);
IkReal x1401=((((-1.0)*r11*x1400))+(((-1.0)*r10*sj5)));
j4eval[0]=x1401;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1400)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1402=((1.0)*sj0);
IkReal x1403=((1.0)*cj0);
IkReal x1404=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1404;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1403))+(((-1.0)*r11*sj5*x1402))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x1402))+(((-1.0)*r02*x1403))))));
j4eval[2]=IKsign(x1404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1405=((1.0)*sj0);
IkReal x1406=((1.0)*cj0);
CheckValue<IkReal> x1407 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1405))+(((-1.0)*r02*x1406)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1406))+(((-1.0)*r11*sj5*x1405))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1407.value)+(((1.5707963267949)*(x1408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1409=IKsin(j4);
IkReal x1410=IKcos(j4);
IkReal x1411=(cj5*r10);
IkReal x1412=(r01*sj5);
IkReal x1413=((1.0)*cj2);
IkReal x1414=(cj5*r00);
IkReal x1415=((1.0)*sj0);
IkReal x1416=(cj5*r20);
IkReal x1417=(cj1*sj2);
IkReal x1418=((1.0)*x1410);
IkReal x1419=((1.0)*x1409);
IkReal x1420=(sj5*x1409);
evalcond[0]=(((r21*x1420))+(((-1.0)*r22*x1418))+(((-1.0)*x1416*x1419)));
evalcond[1]=(((r11*x1420))+cj0+(((-1.0)*x1411*x1419))+(((-1.0)*r12*x1418)));
evalcond[2]=((((-1.0)*x1415))+(((-1.0)*x1414*x1419))+(((-1.0)*r02*x1418))+((x1409*x1412)));
evalcond[3]=((((-1.0)*cj1*x1413))+(((-1.0)*r22*x1419))+(((-1.0)*r21*sj5*x1418))+((sj1*sj2))+((x1410*x1416)));
evalcond[4]=((((-1.0)*x1412*x1418))+(((-1.0)*r02*x1419))+(((-1.0)*cj0*sj1*x1413))+(((-1.0)*cj0*x1417))+((x1410*x1414)));
evalcond[5]=((((-1.0)*x1415*x1417))+(((-1.0)*sj0*sj1*x1413))+(((-1.0)*r11*sj5*x1418))+((x1410*x1411))+(((-1.0)*r12*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1421=((1.0)*cj5);
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1421)))),-1);
if(!x1422.valid){
continue;
}
CheckValue<IkReal> x1423 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1421))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1422.value)))+(x1423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1424=IKsin(j4);
IkReal x1425=IKcos(j4);
IkReal x1426=(cj5*r10);
IkReal x1427=(r01*sj5);
IkReal x1428=((1.0)*cj2);
IkReal x1429=(cj5*r00);
IkReal x1430=((1.0)*sj0);
IkReal x1431=(cj5*r20);
IkReal x1432=(cj1*sj2);
IkReal x1433=((1.0)*x1425);
IkReal x1434=((1.0)*x1424);
IkReal x1435=(sj5*x1424);
evalcond[0]=((((-1.0)*r22*x1433))+(((-1.0)*x1431*x1434))+((r21*x1435)));
evalcond[1]=((((-1.0)*r12*x1433))+cj0+((r11*x1435))+(((-1.0)*x1426*x1434)));
evalcond[2]=(((x1424*x1427))+(((-1.0)*x1429*x1434))+(((-1.0)*x1430))+(((-1.0)*r02*x1433)));
evalcond[3]=((((-1.0)*r22*x1434))+((sj1*sj2))+((x1425*x1431))+(((-1.0)*r21*sj5*x1433))+(((-1.0)*cj1*x1428)));
evalcond[4]=(((x1425*x1429))+(((-1.0)*cj0*sj1*x1428))+(((-1.0)*r02*x1434))+(((-1.0)*cj0*x1432))+(((-1.0)*x1427*x1433)));
evalcond[5]=(((x1425*x1426))+(((-1.0)*r12*x1434))+(((-1.0)*r11*sj5*x1433))+(((-1.0)*x1430*x1432))+(((-1.0)*sj0*sj1*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1436=((1.0)*cj5);
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1436)))),-1);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1437.value)))+(x1438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1439=IKsin(j4);
IkReal x1440=IKcos(j4);
IkReal x1441=(cj5*r10);
IkReal x1442=(r01*sj5);
IkReal x1443=((1.0)*cj2);
IkReal x1444=(cj5*r00);
IkReal x1445=((1.0)*sj0);
IkReal x1446=(cj5*r20);
IkReal x1447=(cj1*sj2);
IkReal x1448=((1.0)*x1440);
IkReal x1449=((1.0)*x1439);
IkReal x1450=(sj5*x1439);
evalcond[0]=((((-1.0)*x1446*x1449))+(((-1.0)*r22*x1448))+((r21*x1450)));
evalcond[1]=(cj0+(((-1.0)*r12*x1448))+((r11*x1450))+(((-1.0)*x1441*x1449)));
evalcond[2]=(((x1439*x1442))+(((-1.0)*x1445))+(((-1.0)*x1444*x1449))+(((-1.0)*r02*x1448)));
evalcond[3]=((((-1.0)*r22*x1449))+(((-1.0)*r21*sj5*x1448))+((x1440*x1446))+((sj1*sj2))+(((-1.0)*cj1*x1443)));
evalcond[4]=(((x1440*x1444))+(((-1.0)*cj0*sj1*x1443))+(((-1.0)*r02*x1449))+(((-1.0)*x1442*x1448))+(((-1.0)*cj0*x1447)));
evalcond[5]=((((-1.0)*x1445*x1447))+((x1440*x1441))+(((-1.0)*r12*x1449))+(((-1.0)*r11*sj5*x1448))+(((-1.0)*sj0*sj1*x1443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1451=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1451;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x1451);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1452=r21*r21;
IkReal x1453=cj5*cj5;
IkReal x1454=(sj1*sj2);
IkReal x1455=(r21*sj5);
IkReal x1456=(cj5*r20);
IkReal x1457=(cj1*cj2);
IkReal x1458=((((-1.0)*x1453*(r20*r20)))+(((-1.0)*x1452))+(((-1.0)*(r22*r22)))+(((2.0)*x1455*x1456))+((x1452*x1453)));
j4eval[0]=x1458;
j4eval[1]=((IKabs((((x1456*x1457))+((x1454*x1455))+(((-1.0)*x1455*x1457))+(((-1.0)*x1454*x1456)))))+(IKabs((((r22*x1454))+(((-1.0)*r22*x1457))))));
j4eval[2]=IKsign(x1458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1459=(r00*sj5);
IkReal x1460=((306.5)*cj1);
IkReal x1461=(cj5*r01);
IkReal x1462=((500.0)*px);
IkReal x1463=(cj1*cj2);
IkReal x1464=(sj1*sj2);
IkReal x1465=((345.5)*x1464);
CheckValue<IkReal> x1466=IKPowWithIntegerCheck(((((87.0)*x1464))+(((-87.0)*x1463))),-1);
if(!x1466.valid){
continue;
}
CheckValue<IkReal> x1467=IKPowWithIntegerCheck((x1464+(((-1.0)*x1463))),-1);
if(!x1467.valid){
continue;
}
if( IKabs(((x1466.value)*(((((-1.0)*x1459*x1465))+((x1459*x1460))+(((345.5)*x1461*x1463))+(((-1.0)*x1462*x1464))+(((345.5)*x1459*x1463))+((x1460*x1461))+((x1462*x1463))+(((-1.0)*x1461*x1465)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1467.value)*((x1461+x1459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1466.value)*(((((-1.0)*x1459*x1465))+((x1459*x1460))+(((345.5)*x1461*x1463))+(((-1.0)*x1462*x1464))+(((345.5)*x1459*x1463))+((x1460*x1461))+((x1462*x1463))+(((-1.0)*x1461*x1465))))))+IKsqr(((x1467.value)*((x1461+x1459))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1466.value)*(((((-1.0)*x1459*x1465))+((x1459*x1460))+(((345.5)*x1461*x1463))+(((-1.0)*x1462*x1464))+(((345.5)*x1459*x1463))+((x1460*x1461))+((x1462*x1463))+(((-1.0)*x1461*x1465))))), ((x1467.value)*((x1461+x1459))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1468=IKcos(j0);
IkReal x1469=IKsin(j0);
IkReal x1470=((0.571)*cj2);
IkReal x1471=(cj5*r11);
IkReal x1472=(cj5*r01);
IkReal x1473=((1.0)*sj5);
IkReal x1474=(sj1*sj2);
IkReal x1475=((0.12)*sj5);
IkReal x1476=((1.0)*cj2);
IkReal x1477=((0.571)*x1474);
IkReal x1478=(cj1*x1469);
IkReal x1479=(cj1*x1468);
evalcond[0]=((((-1.0)*r00*x1473))+(((-1.0)*x1476*x1479))+(((-1.0)*x1472))+((x1468*x1474)));
evalcond[1]=((((-1.0)*x1476*x1478))+(((-1.0)*r10*x1473))+(((-1.0)*x1471))+((x1469*x1474)));
evalcond[2]=((((-1.0)*r00*x1475))+(((0.613)*x1479))+((x1470*x1479))+(((-0.174)*x1469))+(((-1.0)*px))+(((-0.12)*x1472))+(((-1.0)*x1468*x1477)));
evalcond[3]=((((-1.0)*r10*x1475))+(((0.613)*x1478))+((x1470*x1478))+(((-1.0)*py))+(((-0.12)*x1471))+(((-1.0)*x1469*x1477))+(((0.174)*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1480=((1.0)*cj5);
IkReal x1481=((((-1.0)*r01*x1480))+(((-1.0)*r00*sj5)));
j4eval[0]=x1481;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1480)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1482=((1.0)*cj5);
IkReal x1483=((((-1.0)*r11*x1482))+(((-1.0)*r10*sj5)));
j4eval[0]=x1483;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1482))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1484=((1.0)*sj0);
IkReal x1485=((1.0)*cj0);
IkReal x1486=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1486;
j4eval[1]=((IKabs(((((-1.0)*r12*x1484))+(((-1.0)*r02*x1485)))))+(IKabs(((((-1.0)*r11*sj5*x1484))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1485))))));
j4eval[2]=IKsign(x1486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1487=((1.0)*sj0);
IkReal x1488=((1.0)*cj0);
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1487))+(((-1.0)*r02*x1488)))),IkReal(((((-1.0)*r11*sj5*x1487))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1489.value)+(((1.5707963267949)*(x1490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1491=IKsin(j4);
IkReal x1492=IKcos(j4);
IkReal x1493=(cj5*r00);
IkReal x1494=(cj5*r10);
IkReal x1495=(r21*sj5);
IkReal x1496=((1.0)*cj2);
IkReal x1497=((1.0)*sj0);
IkReal x1498=(cj1*sj2);
IkReal x1499=(cj5*r20);
IkReal x1500=((1.0)*x1492);
IkReal x1501=((1.0)*x1491);
IkReal x1502=(sj5*x1491);
IkReal x1503=(sj5*x1492);
evalcond[0]=((((-1.0)*x1499*x1501))+(((-1.0)*r22*x1500))+((x1491*x1495)));
evalcond[1]=(((r11*x1502))+cj0+(((-1.0)*x1494*x1501))+(((-1.0)*r12*x1500)));
evalcond[2]=((((-1.0)*x1497))+((r01*x1502))+(((-1.0)*r02*x1500))+(((-1.0)*x1493*x1501)));
evalcond[3]=((((-1.0)*x1499*x1500))+(((-1.0)*cj1*x1496))+((sj1*sj2))+((x1492*x1495))+((r22*x1491)));
evalcond[4]=((((-1.0)*cj0*x1498))+((r01*x1503))+(((-1.0)*cj0*sj1*x1496))+(((-1.0)*x1493*x1500))+((r02*x1491)));
evalcond[5]=((((-1.0)*sj0*sj1*x1496))+((r11*x1503))+(((-1.0)*x1494*x1500))+((r12*x1491))+(((-1.0)*x1497*x1498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1504=((1.0)*cj5);
CheckValue<IkReal> x1505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1504)))),-1);
if(!x1505.valid){
continue;
}
CheckValue<IkReal> x1506 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1505.value)))+(x1506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1507=IKsin(j4);
IkReal x1508=IKcos(j4);
IkReal x1509=(cj5*r00);
IkReal x1510=(cj5*r10);
IkReal x1511=(r21*sj5);
IkReal x1512=((1.0)*cj2);
IkReal x1513=((1.0)*sj0);
IkReal x1514=(cj1*sj2);
IkReal x1515=(cj5*r20);
IkReal x1516=((1.0)*x1508);
IkReal x1517=((1.0)*x1507);
IkReal x1518=(sj5*x1507);
IkReal x1519=(sj5*x1508);
evalcond[0]=((((-1.0)*x1515*x1517))+(((-1.0)*r22*x1516))+((x1507*x1511)));
evalcond[1]=(((r11*x1518))+cj0+(((-1.0)*x1510*x1517))+(((-1.0)*r12*x1516)));
evalcond[2]=((((-1.0)*x1513))+((r01*x1518))+(((-1.0)*r02*x1516))+(((-1.0)*x1509*x1517)));
evalcond[3]=((((-1.0)*x1515*x1516))+(((-1.0)*cj1*x1512))+((x1508*x1511))+((sj1*sj2))+((r22*x1507)));
evalcond[4]=(((r01*x1519))+((r02*x1507))+(((-1.0)*cj0*x1514))+(((-1.0)*x1509*x1516))+(((-1.0)*cj0*sj1*x1512)));
evalcond[5]=((((-1.0)*sj0*sj1*x1512))+((r11*x1519))+((r12*x1507))+(((-1.0)*x1513*x1514))+(((-1.0)*x1510*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1520=((1.0)*cj5);
CheckValue<IkReal> x1521 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1520))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1521.valid){
continue;
}
CheckValue<IkReal> x1522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1520))+(((-1.0)*r00*sj5)))),-1);
if(!x1522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1521.value)+(((1.5707963267949)*(x1522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1523=IKsin(j4);
IkReal x1524=IKcos(j4);
IkReal x1525=(cj5*r00);
IkReal x1526=(cj5*r10);
IkReal x1527=(r21*sj5);
IkReal x1528=((1.0)*cj2);
IkReal x1529=((1.0)*sj0);
IkReal x1530=(cj1*sj2);
IkReal x1531=(cj5*r20);
IkReal x1532=((1.0)*x1524);
IkReal x1533=((1.0)*x1523);
IkReal x1534=(sj5*x1523);
IkReal x1535=(sj5*x1524);
evalcond[0]=((((-1.0)*x1531*x1533))+(((-1.0)*r22*x1532))+((x1523*x1527)));
evalcond[1]=((((-1.0)*r12*x1532))+cj0+((r11*x1534))+(((-1.0)*x1526*x1533)));
evalcond[2]=((((-1.0)*x1525*x1533))+((r01*x1534))+(((-1.0)*x1529))+(((-1.0)*r02*x1532)));
evalcond[3]=(((x1524*x1527))+(((-1.0)*x1531*x1532))+((sj1*sj2))+((r22*x1523))+(((-1.0)*cj1*x1528)));
evalcond[4]=((((-1.0)*x1525*x1532))+((r01*x1535))+(((-1.0)*cj0*x1530))+((r02*x1523))+(((-1.0)*cj0*sj1*x1528)));
evalcond[5]=((((-1.0)*x1529*x1530))+((r12*x1523))+((r11*x1535))+(((-1.0)*sj0*sj1*x1528))+(((-1.0)*x1526*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1536=r21*r21;
IkReal x1537=cj5*cj5;
IkReal x1538=(sj1*sj2);
IkReal x1539=(r21*sj5);
IkReal x1540=(cj1*cj2);
IkReal x1541=(cj5*r20);
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1536))+(((2.0)*x1539*x1541))+((x1536*x1537))+(((-1.0)*x1537*(r20*r20)))+(((-1.0)*(r22*r22))))),-1);
if(!x1542.valid){
continue;
}
CheckValue<IkReal> x1543 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1540))+((r22*x1538)))),IkReal(((((-1.0)*x1539*x1540))+((x1538*x1539))+((x1540*x1541))+(((-1.0)*x1538*x1541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1542.value)))+(x1543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1544=IKsin(j4);
IkReal x1545=IKcos(j4);
IkReal x1546=(r21*sj5);
IkReal x1547=(cj5*r20);
IkReal x1548=((1.0)*x1545);
evalcond[0]=((((-1.0)*x1544*x1547))+((x1544*x1546))+(((-1.0)*r22*x1548)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1547*x1548))+((r22*x1544))+((x1545*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1549=(cj5*sj4);
IkReal x1550=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1550))+(((-1.0)*r00*x1549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1550))+((r10*x1549))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1550))+(((-1.0)*r00*x1549))))+IKsqr(((((-1.0)*r11*x1550))+((r10*x1549))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1550))+(((-1.0)*r00*x1549))), ((((-1.0)*r11*x1550))+((r10*x1549))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1551=IKcos(j0);
IkReal x1552=IKsin(j0);
IkReal x1553=(cj1*cj2);
IkReal x1554=(sj1*sj2);
IkReal x1555=((1.0)*sj2);
IkReal x1556=(r11*sj5);
IkReal x1557=((1.0)*sj5);
IkReal x1558=(cj5*r11);
IkReal x1559=(cj5*r01);
IkReal x1560=(cj2*sj1);
IkReal x1561=((0.12)*sj5);
IkReal x1562=((1.0)*cj4);
IkReal x1563=(r01*sj5);
IkReal x1564=((0.571)*x1551);
IkReal x1565=(cj1*x1552);
IkReal x1566=(cj1*x1551);
IkReal x1567=(cj5*x1562);
IkReal x1568=((0.571)*x1552);
IkReal x1569=((1.0)*x1551);
IkReal x1570=((1.0)*x1552);
IkReal x1571=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x1556))+x1551+(((-1.0)*r10*x1571))+(((-1.0)*r12*x1562)));
evalcond[1]=((((-1.0)*r02*x1562))+((sj4*x1563))+(((-1.0)*r00*x1571))+(((-1.0)*x1570)));
evalcond[2]=(((x1551*x1554))+(((-1.0)*x1559))+(((-1.0)*x1553*x1569))+(((-1.0)*r00*x1557)));
evalcond[3]=((((-1.0)*x1558))+((x1552*x1554))+(((-1.0)*x1553*x1570))+(((-1.0)*r10*x1557)));
evalcond[4]=(((cj4*x1563))+(((-1.0)*x1555*x1566))+(((-1.0)*x1560*x1569))+((r02*sj4))+(((-1.0)*r00*x1567)));
evalcond[5]=((((-1.0)*x1555*x1565))+(((-1.0)*x1560*x1570))+((r12*sj4))+(((-1.0)*r10*x1567))+((cj4*x1556)));
evalcond[6]=((((0.613)*x1566))+((x1553*x1564))+(((-0.12)*x1559))+(((-0.174)*x1552))+(((-1.0)*px))+(((-1.0)*r00*x1561))+(((-1.0)*x1554*x1564)));
evalcond[7]=((((0.613)*x1565))+((x1553*x1568))+(((0.174)*x1551))+(((-0.12)*x1558))+(((-1.0)*py))+(((-1.0)*r10*x1561))+(((-1.0)*x1554*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1572.valid){
continue;
}
CheckValue<IkReal> x1573=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1573.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1572.value)+(((1.5707963267949)*(x1573.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1574=IKcos(j0);
IkReal x1575=IKsin(j0);
IkReal x1576=((0.571)*cj2);
IkReal x1577=(cj5*r11);
IkReal x1578=(cj5*r01);
IkReal x1579=((1.0)*sj5);
IkReal x1580=(sj1*sj2);
IkReal x1581=((0.12)*sj5);
IkReal x1582=((1.0)*cj2);
IkReal x1583=((0.571)*x1580);
IkReal x1584=(cj1*x1575);
IkReal x1585=(cj1*x1574);
evalcond[0]=((((-1.0)*r00*x1579))+((x1574*x1580))+(((-1.0)*x1582*x1585))+(((-1.0)*x1578)));
evalcond[1]=(((x1575*x1580))+(((-1.0)*r10*x1579))+(((-1.0)*x1582*x1584))+(((-1.0)*x1577)));
evalcond[2]=((((0.613)*x1585))+(((-0.12)*x1578))+((x1576*x1585))+(((-1.0)*r00*x1581))+(((-1.0)*px))+(((-0.174)*x1575))+(((-1.0)*x1574*x1583)));
evalcond[3]=((((0.613)*x1584))+(((-0.12)*x1577))+((x1576*x1584))+(((-1.0)*py))+(((0.174)*x1574))+(((-1.0)*x1575*x1583))+(((-1.0)*r10*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1586=((1.0)*cj5);
IkReal x1587=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1586)));
j4eval[0]=x1587;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1586))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1588=((1.0)*cj5);
IkReal x1589=((((-1.0)*r11*x1588))+(((-1.0)*r10*sj5)));
j4eval[0]=x1589;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1588))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1590=((1.0)*sj0);
IkReal x1591=((1.0)*cj0);
IkReal x1592=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1592;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1591))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1590)))))+(IKabs(((((-1.0)*r02*x1591))+(((-1.0)*r12*x1590))))));
j4eval[2]=IKsign(x1592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1593=((1.0)*sj0);
IkReal x1594=((1.0)*cj0);
CheckValue<IkReal> x1595 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1594))+(((-1.0)*r12*x1593)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1594))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1595.valid){
continue;
}
CheckValue<IkReal> x1596=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1595.value)+(((1.5707963267949)*(x1596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1597=IKsin(j4);
IkReal x1598=IKcos(j4);
IkReal x1599=(cj5*r00);
IkReal x1600=(cj5*r10);
IkReal x1601=(r21*sj5);
IkReal x1602=((1.0)*cj2);
IkReal x1603=((1.0)*sj0);
IkReal x1604=(cj1*sj2);
IkReal x1605=(cj5*r20);
IkReal x1606=((1.0)*x1598);
IkReal x1607=((1.0)*x1597);
IkReal x1608=(sj5*x1597);
IkReal x1609=(sj5*x1598);
evalcond[0]=((((-1.0)*r22*x1606))+(((-1.0)*x1605*x1607))+((x1597*x1601)));
evalcond[1]=(cj0+((r11*x1608))+(((-1.0)*x1600*x1607))+(((-1.0)*r12*x1606)));
evalcond[2]=((((-1.0)*x1603))+((r01*x1608))+(((-1.0)*x1599*x1607))+(((-1.0)*r02*x1606)));
evalcond[3]=((((-1.0)*cj1*x1602))+((sj1*sj2))+((r22*x1597))+(((-1.0)*x1605*x1606))+((x1598*x1601)));
evalcond[4]=((((-1.0)*cj0*sj1*x1602))+((r01*x1609))+(((-1.0)*x1599*x1606))+((r02*x1597))+(((-1.0)*cj0*x1604)));
evalcond[5]=(((r12*x1597))+((r11*x1609))+(((-1.0)*x1600*x1606))+(((-1.0)*sj0*sj1*x1602))+(((-1.0)*x1603*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1610=((1.0)*cj5);
CheckValue<IkReal> x1611 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1611.valid){
continue;
}
CheckValue<IkReal> x1612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1610))+(((-1.0)*r10*sj5)))),-1);
if(!x1612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1611.value)+(((1.5707963267949)*(x1612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1613=IKsin(j4);
IkReal x1614=IKcos(j4);
IkReal x1615=(cj5*r00);
IkReal x1616=(cj5*r10);
IkReal x1617=(r21*sj5);
IkReal x1618=((1.0)*cj2);
IkReal x1619=((1.0)*sj0);
IkReal x1620=(cj1*sj2);
IkReal x1621=(cj5*r20);
IkReal x1622=((1.0)*x1614);
IkReal x1623=((1.0)*x1613);
IkReal x1624=(sj5*x1613);
IkReal x1625=(sj5*x1614);
evalcond[0]=((((-1.0)*x1621*x1623))+(((-1.0)*r22*x1622))+((x1613*x1617)));
evalcond[1]=((((-1.0)*r12*x1622))+(((-1.0)*x1616*x1623))+cj0+((r11*x1624)));
evalcond[2]=(((r01*x1624))+(((-1.0)*x1619))+(((-1.0)*r02*x1622))+(((-1.0)*x1615*x1623)));
evalcond[3]=(((sj1*sj2))+((x1614*x1617))+(((-1.0)*x1621*x1622))+((r22*x1613))+(((-1.0)*cj1*x1618)));
evalcond[4]=(((r01*x1625))+(((-1.0)*cj0*sj1*x1618))+(((-1.0)*cj0*x1620))+(((-1.0)*x1615*x1622))+((r02*x1613)));
evalcond[5]=((((-1.0)*x1619*x1620))+(((-1.0)*x1616*x1622))+((r12*x1613))+((r11*x1625))+(((-1.0)*sj0*sj1*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1626=((1.0)*cj5);
CheckValue<IkReal> x1627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1626)))),-1);
if(!x1627.valid){
continue;
}
CheckValue<IkReal> x1628 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1627.value)))+(x1628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1629=IKsin(j4);
IkReal x1630=IKcos(j4);
IkReal x1631=(cj5*r00);
IkReal x1632=(cj5*r10);
IkReal x1633=(r21*sj5);
IkReal x1634=((1.0)*cj2);
IkReal x1635=((1.0)*sj0);
IkReal x1636=(cj1*sj2);
IkReal x1637=(cj5*r20);
IkReal x1638=((1.0)*x1630);
IkReal x1639=((1.0)*x1629);
IkReal x1640=(sj5*x1629);
IkReal x1641=(sj5*x1630);
evalcond[0]=((((-1.0)*r22*x1638))+((x1629*x1633))+(((-1.0)*x1637*x1639)));
evalcond[1]=(((r11*x1640))+cj0+(((-1.0)*r12*x1638))+(((-1.0)*x1632*x1639)));
evalcond[2]=((((-1.0)*x1635))+((r01*x1640))+(((-1.0)*x1631*x1639))+(((-1.0)*r02*x1638)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x1634))+(((-1.0)*x1637*x1638))+((r22*x1629))+((x1630*x1633)));
evalcond[4]=(((r02*x1629))+(((-1.0)*cj0*x1636))+((r01*x1641))+(((-1.0)*cj0*sj1*x1634))+(((-1.0)*x1631*x1638)));
evalcond[5]=((((-1.0)*x1635*x1636))+((r11*x1641))+((r12*x1629))+(((-1.0)*x1632*x1638))+(((-1.0)*sj0*sj1*x1634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1642=((1.0)*cj5);
IkReal x1643=((1.0)*sj5);
IkReal x1644=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1644;
j0eval[1]=((IKabs(((((-1.0)*r11*x1642))+(((-1.0)*r10*x1643)))))+(IKabs(((((-1.0)*r00*x1643))+(((-1.0)*r01*x1642))))));
j0eval[2]=IKsign(x1644);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1645=r21*r21;
IkReal x1646=cj5*cj5;
IkReal x1647=(cj2*sj1);
IkReal x1648=(cj1*sj2);
IkReal x1649=(r21*sj5);
IkReal x1650=((1.0)*cj5*r20);
IkReal x1651=((((-1.0)*x1646*(r20*r20)))+(((2.0)*cj5*r20*x1649))+((x1645*x1646))+(((-1.0)*x1645))+(((-1.0)*(r22*r22))));
j4eval[0]=x1651;
j4eval[1]=((IKabs(((((-1.0)*x1647*x1650))+((x1648*x1649))+((x1647*x1649))+(((-1.0)*x1648*x1650)))))+(IKabs((((r22*x1647))+((r22*x1648))))));
j4eval[2]=IKsign(x1651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1652=cj1*cj1;
IkReal x1653=(cj2*sj2);
IkReal x1654=(cj2*sj1);
IkReal x1655=(cj1*sj1);
j0eval[0]=((((-2.0)*x1652*x1653))+(((-2.0)*cj1*cj2*x1654))+x1653+x1655+(((-1.07355516637478)*sj2*x1652))+(((-1.07355516637478)*cj1*x1654)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x1654)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1656=cj1*cj1;
IkReal x1657=((500.0)*py);
IkReal x1658=(cj1*sj2);
IkReal x1659=(cj1*sj1);
IkReal x1660=(r00*sj5);
IkReal x1661=(cj2*sj1);
IkReal x1662=(cj5*r01);
IkReal x1663=(sj2*x1656);
IkReal x1664=((60.0)*r10*sj5);
IkReal x1665=((60.0)*cj5*r11);
CheckValue<IkReal> x1666=IKPowWithIntegerCheck(((((-571.0)*cj2*x1663))+(((285.5)*x1659))+(((-306.5)*cj2*x1659))+(((285.5)*cj2*sj2))+(((-571.0)*x1659*(cj2*cj2)))+(((-306.5)*x1663))),-1);
if(!x1666.valid){
continue;
}
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(((((-1.0)*x1661))+(((-1.0)*x1658))),-1);
if(!x1667.valid){
continue;
}
if( IKabs(((x1666.value)*(((((-1.0)*x1661*x1665))+(((-1.0)*x1661*x1664))+(((87.0)*x1662))+(((87.0)*x1660))+(((-1.0)*x1657*x1658))+(((-1.0)*x1657*x1661))+(((-1.0)*x1658*x1664))+(((-1.0)*x1658*x1665)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1667.value)*(((((-1.0)*x1662))+(((-1.0)*x1660)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1666.value)*(((((-1.0)*x1661*x1665))+(((-1.0)*x1661*x1664))+(((87.0)*x1662))+(((87.0)*x1660))+(((-1.0)*x1657*x1658))+(((-1.0)*x1657*x1661))+(((-1.0)*x1658*x1664))+(((-1.0)*x1658*x1665))))))+IKsqr(((x1667.value)*(((((-1.0)*x1662))+(((-1.0)*x1660))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1666.value)*(((((-1.0)*x1661*x1665))+(((-1.0)*x1661*x1664))+(((87.0)*x1662))+(((87.0)*x1660))+(((-1.0)*x1657*x1658))+(((-1.0)*x1657*x1661))+(((-1.0)*x1658*x1664))+(((-1.0)*x1658*x1665))))), ((x1667.value)*(((((-1.0)*x1662))+(((-1.0)*x1660))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1668=IKcos(j0);
IkReal x1669=IKsin(j0);
IkReal x1670=((0.571)*sj1);
IkReal x1671=(cj5*r01);
IkReal x1672=((1.0)*cj1);
IkReal x1673=((1.0)*sj1);
IkReal x1674=(cj5*r11);
IkReal x1675=(r00*sj5);
IkReal x1676=(r10*sj5);
IkReal x1677=(sj2*x1668);
IkReal x1678=(sj2*x1669);
IkReal x1679=(cj2*x1668);
IkReal x1680=(cj1*x1669);
evalcond[0]=((((-1.0)*x1672*x1677))+(((-1.0)*x1673*x1679))+x1675+x1671);
evalcond[1]=((((-1.0)*x1672*x1678))+x1674+x1676+(((-1.0)*cj2*x1669*x1673)));
evalcond[2]=((((0.571)*cj1*x1679))+(((0.613)*cj1*x1668))+(((-0.12)*x1671))+(((-0.12)*x1675))+(((-1.0)*px))+(((-0.174)*x1669))+(((-1.0)*x1670*x1677)));
evalcond[3]=((((0.174)*x1668))+(((-0.12)*x1674))+(((-0.12)*x1676))+(((-1.0)*py))+(((0.571)*cj2*x1680))+(((-1.0)*x1670*x1678))+(((0.613)*x1680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1681=((1.0)*cj5);
IkReal x1682=((((-1.0)*r01*x1681))+(((-1.0)*r00*sj5)));
j4eval[0]=x1682;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1681)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1683=((1.0)*cj5);
IkReal x1684=((((-1.0)*r11*x1683))+(((-1.0)*r10*sj5)));
j4eval[0]=x1684;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1683))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1685=((1.0)*sj0);
IkReal x1686=((1.0)*cj0);
IkReal x1687=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1687;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1685))+(((-1.0)*r01*sj5*x1686))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x1685))+(((-1.0)*r02*x1686))))));
j4eval[2]=IKsign(x1687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1688=((1.0)*sj0);
IkReal x1689=((1.0)*cj0);
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1690.valid){
continue;
}
CheckValue<IkReal> x1691 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1688))+(((-1.0)*r02*x1689)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1688))+(((-1.0)*r01*sj5*x1689))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1690.value)))+(x1691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1692=IKsin(j4);
IkReal x1693=IKcos(j4);
IkReal x1694=(cj5*r00);
IkReal x1695=(cj5*r10);
IkReal x1696=(r21*sj5);
IkReal x1697=(sj1*sj2);
IkReal x1698=(cj5*r20);
IkReal x1699=((1.0)*x1693);
IkReal x1700=((1.0)*cj1*cj2);
IkReal x1701=((1.0)*x1692);
IkReal x1702=(sj5*x1692);
IkReal x1703=(sj5*x1693);
evalcond[0]=((((-1.0)*x1698*x1701))+((x1692*x1696))+(((-1.0)*r22*x1699)));
evalcond[1]=(cj0+(((-1.0)*r12*x1699))+((r11*x1702))+(((-1.0)*x1695*x1701)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1702))+(((-1.0)*r02*x1699))+(((-1.0)*x1694*x1701)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1698*x1699))+((cj1*sj2))+((r22*x1692))+((x1693*x1696)));
evalcond[4]=((((-1.0)*x1694*x1699))+((r01*x1703))+((r02*x1692))+((cj0*x1697))+(((-1.0)*cj0*x1700)));
evalcond[5]=(((r12*x1692))+((sj0*x1697))+((r11*x1703))+(((-1.0)*sj0*x1700))+(((-1.0)*x1695*x1699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1704=((1.0)*cj5);
CheckValue<IkReal> x1705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1704)))),-1);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1705.value)))+(x1706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1707=IKsin(j4);
IkReal x1708=IKcos(j4);
IkReal x1709=(cj5*r00);
IkReal x1710=(cj5*r10);
IkReal x1711=(r21*sj5);
IkReal x1712=(sj1*sj2);
IkReal x1713=(cj5*r20);
IkReal x1714=((1.0)*x1708);
IkReal x1715=((1.0)*cj1*cj2);
IkReal x1716=((1.0)*x1707);
IkReal x1717=(sj5*x1707);
IkReal x1718=(sj5*x1708);
evalcond[0]=((((-1.0)*x1713*x1716))+(((-1.0)*r22*x1714))+((x1707*x1711)));
evalcond[1]=((((-1.0)*x1710*x1716))+cj0+((r11*x1717))+(((-1.0)*r12*x1714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1709*x1716))+((r01*x1717))+(((-1.0)*r02*x1714)));
evalcond[3]=(((cj2*sj1))+((r22*x1707))+(((-1.0)*x1713*x1714))+((cj1*sj2))+((x1708*x1711)));
evalcond[4]=(((r02*x1707))+(((-1.0)*x1709*x1714))+((cj0*x1712))+((r01*x1718))+(((-1.0)*cj0*x1715)));
evalcond[5]=((((-1.0)*x1710*x1714))+((r12*x1707))+((r11*x1718))+(((-1.0)*sj0*x1715))+((sj0*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1719=((1.0)*cj5);
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1719)))),-1);
if(!x1721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1720.value)+(((1.5707963267949)*(x1721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1722=IKsin(j4);
IkReal x1723=IKcos(j4);
IkReal x1724=(cj5*r00);
IkReal x1725=(cj5*r10);
IkReal x1726=(r21*sj5);
IkReal x1727=(sj1*sj2);
IkReal x1728=(cj5*r20);
IkReal x1729=((1.0)*x1723);
IkReal x1730=((1.0)*cj1*cj2);
IkReal x1731=((1.0)*x1722);
IkReal x1732=(sj5*x1722);
IkReal x1733=(sj5*x1723);
evalcond[0]=((((-1.0)*r22*x1729))+((x1722*x1726))+(((-1.0)*x1728*x1731)));
evalcond[1]=(cj0+(((-1.0)*r12*x1729))+((r11*x1732))+(((-1.0)*x1725*x1731)));
evalcond[2]=(((r01*x1732))+(((-1.0)*sj0))+(((-1.0)*x1724*x1731))+(((-1.0)*r02*x1729)));
evalcond[3]=(((x1723*x1726))+((cj2*sj1))+(((-1.0)*x1728*x1729))+((cj1*sj2))+((r22*x1722)));
evalcond[4]=(((r01*x1733))+((cj0*x1727))+(((-1.0)*cj0*x1730))+((r02*x1722))+(((-1.0)*x1724*x1729)));
evalcond[5]=((((-1.0)*sj0*x1730))+((sj0*x1727))+((r11*x1733))+(((-1.0)*x1725*x1729))+((r12*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1734=r21*r21;
IkReal x1735=cj5*cj5;
IkReal x1736=(cj2*sj1);
IkReal x1737=(cj1*sj2);
IkReal x1738=(r21*sj5);
IkReal x1739=((1.0)*cj5*r20);
CheckValue<IkReal> x1740 = IKatan2WithCheck(IkReal((((r22*x1737))+((r22*x1736)))),IkReal((((x1736*x1738))+((x1737*x1738))+(((-1.0)*x1736*x1739))+(((-1.0)*x1737*x1739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1740.valid){
continue;
}
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1735*(r20*r20)))+((x1734*x1735))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x1738))+(((-1.0)*x1734)))),-1);
if(!x1741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1740.value)+(((1.5707963267949)*(x1741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1742=IKsin(j4);
IkReal x1743=IKcos(j4);
IkReal x1744=(r21*sj5);
IkReal x1745=(cj5*r20);
IkReal x1746=((1.0)*x1743);
evalcond[0]=((((-1.0)*r22*x1746))+((x1742*x1744))+(((-1.0)*x1742*x1745)));
evalcond[1]=(((cj2*sj1))+((r22*x1742))+((cj1*sj2))+(((-1.0)*x1745*x1746))+((x1743*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1747=(cj5*sj4);
IkReal x1748=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1747))+((r01*x1748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1748))+((r10*x1747))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1747))+((r01*x1748))))+IKsqr(((((-1.0)*r11*x1748))+((r10*x1747))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1747))+((r01*x1748))), ((((-1.0)*r11*x1748))+((r10*x1747))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1749=IKcos(j0);
IkReal x1750=IKsin(j0);
IkReal x1751=(cj1*cj2);
IkReal x1752=(sj1*sj2);
IkReal x1753=(cj5*r01);
IkReal x1754=((1.0)*sj2);
IkReal x1755=(r11*sj5);
IkReal x1756=(cj2*sj1);
IkReal x1757=(cj5*r11);
IkReal x1758=(r00*sj5);
IkReal x1759=((1.0)*cj4);
IkReal x1760=(r01*sj5);
IkReal x1761=(r10*sj5);
IkReal x1762=((0.571)*x1749);
IkReal x1763=(cj1*x1750);
IkReal x1764=(cj1*x1749);
IkReal x1765=(cj5*x1759);
IkReal x1766=((0.571)*x1750);
IkReal x1767=((1.0)*x1749);
IkReal x1768=((1.0)*x1750);
IkReal x1769=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x1759))+x1749+((sj4*x1755))+(((-1.0)*r10*x1769)));
evalcond[1]=((((-1.0)*r00*x1769))+(((-1.0)*x1768))+((sj4*x1760))+(((-1.0)*r02*x1759)));
evalcond[2]=((((-1.0)*x1754*x1764))+x1758+x1753+(((-1.0)*x1756*x1767)));
evalcond[3]=((((-1.0)*x1754*x1763))+x1761+x1757+(((-1.0)*x1756*x1768)));
evalcond[4]=((((-1.0)*r00*x1765))+((x1749*x1752))+((cj4*x1760))+((r02*sj4))+(((-1.0)*x1751*x1767)));
evalcond[5]=(((x1750*x1752))+((r12*sj4))+(((-1.0)*r10*x1765))+(((-1.0)*x1751*x1768))+((cj4*x1755)));
evalcond[6]=((((-1.0)*x1752*x1762))+(((-0.174)*x1750))+((x1751*x1762))+(((-1.0)*px))+(((-0.12)*x1753))+(((-0.12)*x1758))+(((0.613)*x1764)));
evalcond[7]=((((-1.0)*x1752*x1766))+(((-0.12)*x1761))+((x1751*x1766))+(((-1.0)*py))+(((-0.12)*x1757))+(((0.174)*x1749))+(((0.613)*x1763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1770=((1.0)*cj5);
IkReal x1771=((1.0)*sj5);
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1771))+(((-1.0)*r11*x1770)))),IkReal(((((-1.0)*r00*x1771))+(((-1.0)*r01*x1770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1773.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1772.value)+(((1.5707963267949)*(x1773.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1774=IKcos(j0);
IkReal x1775=IKsin(j0);
IkReal x1776=((0.571)*sj1);
IkReal x1777=(cj5*r01);
IkReal x1778=((1.0)*cj1);
IkReal x1779=((1.0)*sj1);
IkReal x1780=(cj5*r11);
IkReal x1781=(r00*sj5);
IkReal x1782=(r10*sj5);
IkReal x1783=(sj2*x1774);
IkReal x1784=(sj2*x1775);
IkReal x1785=(cj2*x1774);
IkReal x1786=(cj1*x1775);
evalcond[0]=(x1781+x1777+(((-1.0)*x1779*x1785))+(((-1.0)*x1778*x1783)));
evalcond[1]=(x1780+x1782+(((-1.0)*cj2*x1775*x1779))+(((-1.0)*x1778*x1784)));
evalcond[2]=((((0.571)*cj1*x1785))+(((-0.12)*x1777))+(((-1.0)*px))+(((-0.12)*x1781))+(((-0.174)*x1775))+(((0.613)*cj1*x1774))+(((-1.0)*x1776*x1783)));
evalcond[3]=((((0.613)*x1786))+(((0.571)*cj2*x1786))+(((-1.0)*py))+(((-0.12)*x1780))+(((-0.12)*x1782))+(((-1.0)*x1776*x1784))+(((0.174)*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1787=((1.0)*cj5);
IkReal x1788=((((-1.0)*r01*x1787))+(((-1.0)*r00*sj5)));
j4eval[0]=x1788;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1787))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1789=((1.0)*cj5);
IkReal x1790=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1789)));
j4eval[0]=x1790;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1789))))));
j4eval[2]=IKsign(x1790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1791=((1.0)*sj0);
IkReal x1792=((1.0)*cj0);
IkReal x1793=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1793;
j4eval[1]=((IKabs(((((-1.0)*r12*x1791))+(((-1.0)*r02*x1792)))))+(IKabs(((((-1.0)*r11*sj5*x1791))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1792))))));
j4eval[2]=IKsign(x1793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1794=((1.0)*sj0);
IkReal x1795=((1.0)*cj0);
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1794))+(((-1.0)*r02*x1795)))),IkReal(((((-1.0)*r11*sj5*x1794))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1796.value)+(((1.5707963267949)*(x1797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1798=IKsin(j4);
IkReal x1799=IKcos(j4);
IkReal x1800=(cj5*r00);
IkReal x1801=(cj5*r10);
IkReal x1802=(r21*sj5);
IkReal x1803=(sj1*sj2);
IkReal x1804=(cj5*r20);
IkReal x1805=((1.0)*x1799);
IkReal x1806=((1.0)*cj1*cj2);
IkReal x1807=((1.0)*x1798);
IkReal x1808=(sj5*x1798);
IkReal x1809=(sj5*x1799);
evalcond[0]=(((x1798*x1802))+(((-1.0)*x1804*x1807))+(((-1.0)*r22*x1805)));
evalcond[1]=(cj0+(((-1.0)*x1801*x1807))+((r11*x1808))+(((-1.0)*r12*x1805)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1800*x1807))+(((-1.0)*r02*x1805))+((r01*x1808)));
evalcond[3]=(((cj2*sj1))+((x1799*x1802))+((cj1*sj2))+(((-1.0)*x1804*x1805))+((r22*x1798)));
evalcond[4]=((((-1.0)*cj0*x1806))+((cj0*x1803))+(((-1.0)*x1800*x1805))+((r02*x1798))+((r01*x1809)));
evalcond[5]=(((sj0*x1803))+(((-1.0)*sj0*x1806))+(((-1.0)*x1801*x1805))+((r12*x1798))+((r11*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1810=((1.0)*cj5);
CheckValue<IkReal> x1811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1810)))),-1);
if(!x1811.valid){
continue;
}
CheckValue<IkReal> x1812 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1810))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1811.value)))+(x1812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1813=IKsin(j4);
IkReal x1814=IKcos(j4);
IkReal x1815=(cj5*r00);
IkReal x1816=(cj5*r10);
IkReal x1817=(r21*sj5);
IkReal x1818=(sj1*sj2);
IkReal x1819=(cj5*r20);
IkReal x1820=((1.0)*x1814);
IkReal x1821=((1.0)*cj1*cj2);
IkReal x1822=((1.0)*x1813);
IkReal x1823=(sj5*x1813);
IkReal x1824=(sj5*x1814);
evalcond[0]=(((x1813*x1817))+(((-1.0)*x1819*x1822))+(((-1.0)*r22*x1820)));
evalcond[1]=(cj0+(((-1.0)*r12*x1820))+(((-1.0)*x1816*x1822))+((r11*x1823)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1823))+(((-1.0)*r02*x1820))+(((-1.0)*x1815*x1822)));
evalcond[3]=(((r22*x1813))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1819*x1820))+((x1814*x1817)));
evalcond[4]=(((r02*x1813))+((cj0*x1818))+((r01*x1824))+(((-1.0)*cj0*x1821))+(((-1.0)*x1815*x1820)));
evalcond[5]=(((sj0*x1818))+(((-1.0)*x1816*x1820))+((r11*x1824))+(((-1.0)*sj0*x1821))+((r12*x1813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1825=((1.0)*cj5);
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1825))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1825)))),-1);
if(!x1827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1826.value)+(((1.5707963267949)*(x1827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1828=IKsin(j4);
IkReal x1829=IKcos(j4);
IkReal x1830=(cj5*r00);
IkReal x1831=(cj5*r10);
IkReal x1832=(r21*sj5);
IkReal x1833=(sj1*sj2);
IkReal x1834=(cj5*r20);
IkReal x1835=((1.0)*x1829);
IkReal x1836=((1.0)*cj1*cj2);
IkReal x1837=((1.0)*x1828);
IkReal x1838=(sj5*x1828);
IkReal x1839=(sj5*x1829);
evalcond[0]=((((-1.0)*x1834*x1837))+((x1828*x1832))+(((-1.0)*r22*x1835)));
evalcond[1]=(cj0+((r11*x1838))+(((-1.0)*r12*x1835))+(((-1.0)*x1831*x1837)));
evalcond[2]=(((r01*x1838))+(((-1.0)*sj0))+(((-1.0)*r02*x1835))+(((-1.0)*x1830*x1837)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1834*x1835))+((cj1*sj2))+((x1829*x1832))+((r22*x1828)));
evalcond[4]=(((r01*x1839))+(((-1.0)*cj0*x1836))+((cj0*x1833))+((r02*x1828))+(((-1.0)*x1830*x1835)));
evalcond[5]=(((sj0*x1833))+(((-1.0)*sj0*x1836))+((r11*x1839))+(((-1.0)*x1831*x1835))+((r12*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1840=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1840;
j0eval[1]=IKsign(x1840);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1841=cj5*cj5;
IkReal x1842=r21*r21;
IkReal x1843=(cj2*sj1);
IkReal x1844=(cj1*sj2);
IkReal x1845=(r21*sj5);
IkReal x1846=((1.0)*cj5*r20);
IkReal x1847=((((-2.0)*cj5*r20*x1845))+(r22*r22)+((x1841*(r20*r20)))+x1842+(((-1.0)*x1841*x1842)));
j4eval[0]=x1847;
j4eval[1]=IKsign(x1847);
j4eval[2]=((IKabs((((r22*x1843))+((r22*x1844)))))+(IKabs(((((-1.0)*x1843*x1846))+((x1844*x1845))+((x1843*x1845))+(((-1.0)*x1844*x1846))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1848=cj1*cj1;
IkReal x1849=(cj2*sj2);
IkReal x1850=(cj2*sj1);
IkReal x1851=(cj1*sj1);
j0eval[0]=((((-2.0)*x1848*x1849))+(((-2.0)*cj1*cj2*x1850))+(((-1.07355516637478)*cj1*x1850))+(((-1.07355516637478)*sj2*x1848))+x1851+x1849);
j0eval[1]=((((-1.0)*x1850))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1852=cj1*cj1;
IkReal x1853=((500.0)*py);
IkReal x1854=(cj1*sj2);
IkReal x1855=(cj1*sj1);
IkReal x1856=(cj2*sj1);
IkReal x1857=(cj5*r01);
IkReal x1858=(r00*sj5);
IkReal x1859=(sj2*x1852);
IkReal x1860=((60.0)*r10*sj5);
IkReal x1861=((60.0)*cj5*r11);
CheckValue<IkReal> x1862=IKPowWithIntegerCheck(((((-306.5)*x1859))+(((285.5)*x1855))+(((-571.0)*cj2*x1859))+(((285.5)*cj2*sj2))+(((-571.0)*x1855*(cj2*cj2)))+(((-306.5)*cj2*x1855))),-1);
if(!x1862.valid){
continue;
}
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(((((-1.0)*x1856))+(((-1.0)*x1854))),-1);
if(!x1863.valid){
continue;
}
if( IKabs(((x1862.value)*(((((-1.0)*x1856*x1861))+(((-1.0)*x1856*x1860))+(((-1.0)*x1854*x1860))+(((-1.0)*x1854*x1861))+(((-87.0)*x1857))+(((-87.0)*x1858))+(((-1.0)*x1853*x1854))+(((-1.0)*x1853*x1856)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1863.value)*((x1858+x1857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1862.value)*(((((-1.0)*x1856*x1861))+(((-1.0)*x1856*x1860))+(((-1.0)*x1854*x1860))+(((-1.0)*x1854*x1861))+(((-87.0)*x1857))+(((-87.0)*x1858))+(((-1.0)*x1853*x1854))+(((-1.0)*x1853*x1856))))))+IKsqr(((x1863.value)*((x1858+x1857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1862.value)*(((((-1.0)*x1856*x1861))+(((-1.0)*x1856*x1860))+(((-1.0)*x1854*x1860))+(((-1.0)*x1854*x1861))+(((-87.0)*x1857))+(((-87.0)*x1858))+(((-1.0)*x1853*x1854))+(((-1.0)*x1853*x1856))))), ((x1863.value)*((x1858+x1857))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1864=IKcos(j0);
IkReal x1865=IKsin(j0);
IkReal x1866=((0.571)*sj1);
IkReal x1867=((1.0)*cj1);
IkReal x1868=((0.571)*cj2);
IkReal x1869=((1.0)*sj5);
IkReal x1870=(cj5*r11);
IkReal x1871=(cj5*r01);
IkReal x1872=((0.12)*sj5);
IkReal x1873=(sj2*x1864);
IkReal x1874=(cj1*x1865);
IkReal x1875=(sj2*x1865);
IkReal x1876=((1.0)*cj2*sj1);
IkReal x1877=(cj1*x1864);
evalcond[0]=((((-1.0)*x1864*x1876))+(((-1.0)*x1867*x1873))+(((-1.0)*r00*x1869))+(((-1.0)*x1871)));
evalcond[1]=((((-1.0)*x1867*x1875))+(((-1.0)*x1865*x1876))+(((-1.0)*x1870))+(((-1.0)*r10*x1869)));
evalcond[2]=((((-0.174)*x1865))+(((-1.0)*r00*x1872))+(((-1.0)*x1866*x1873))+(((-1.0)*px))+(((-0.12)*x1871))+((x1868*x1877))+(((0.613)*x1877)));
evalcond[3]=((((-1.0)*r10*x1872))+(((0.174)*x1864))+(((-1.0)*x1866*x1875))+(((-1.0)*py))+(((-0.12)*x1870))+((x1868*x1874))+(((0.613)*x1874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1878=((1.0)*cj5);
IkReal x1879=((((-1.0)*r01*x1878))+(((-1.0)*r00*sj5)));
j4eval[0]=x1879;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1878)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1880=((1.0)*cj5);
IkReal x1881=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1880)));
j4eval[0]=x1881;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1880))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1882=((1.0)*sj0);
IkReal x1883=((1.0)*cj0);
IkReal x1884=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1884;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x1883))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1882)))))+(IKabs(((((-1.0)*r02*x1883))+(((-1.0)*r12*x1882))))));
j4eval[2]=IKsign(x1884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1885=((1.0)*sj0);
IkReal x1886=((1.0)*cj0);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1886))+(((-1.0)*r12*x1885)))),IkReal(((((-1.0)*r01*sj5*x1886))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1887.value)+(((1.5707963267949)*(x1888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1889=IKsin(j4);
IkReal x1890=IKcos(j4);
IkReal x1891=(cj5*r10);
IkReal x1892=(sj1*sj2);
IkReal x1893=(r01*sj5);
IkReal x1894=(cj5*r00);
IkReal x1895=(cj5*r20);
IkReal x1896=((1.0)*x1890);
IkReal x1897=((1.0)*cj1*cj2);
IkReal x1898=((1.0)*x1889);
IkReal x1899=(sj5*x1889);
evalcond[0]=((((-1.0)*r22*x1896))+(((-1.0)*x1895*x1898))+((r21*x1899)));
evalcond[1]=(cj0+((r11*x1899))+(((-1.0)*x1891*x1898))+(((-1.0)*r12*x1896)));
evalcond[2]=((((-1.0)*r02*x1896))+(((-1.0)*sj0))+(((-1.0)*x1894*x1898))+((x1889*x1893)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1896))+(((-1.0)*r22*x1898))+((x1890*x1895)));
evalcond[4]=((((-1.0)*x1893*x1896))+(((-1.0)*r02*x1898))+((cj0*x1892))+(((-1.0)*cj0*x1897))+((x1890*x1894)));
evalcond[5]=((((-1.0)*r12*x1898))+(((-1.0)*sj0*x1897))+((sj0*x1892))+(((-1.0)*r11*sj5*x1896))+((x1890*x1891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1900=((1.0)*cj5);
CheckValue<IkReal> x1901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1900)))),-1);
if(!x1901.valid){
continue;
}
CheckValue<IkReal> x1902 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1901.value)))+(x1902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1903=IKsin(j4);
IkReal x1904=IKcos(j4);
IkReal x1905=(cj5*r10);
IkReal x1906=(sj1*sj2);
IkReal x1907=(r01*sj5);
IkReal x1908=(cj5*r00);
IkReal x1909=(cj5*r20);
IkReal x1910=((1.0)*x1904);
IkReal x1911=((1.0)*cj1*cj2);
IkReal x1912=((1.0)*x1903);
IkReal x1913=(sj5*x1903);
evalcond[0]=((((-1.0)*r22*x1910))+((r21*x1913))+(((-1.0)*x1909*x1912)));
evalcond[1]=(cj0+(((-1.0)*x1905*x1912))+(((-1.0)*r12*x1910))+((r11*x1913)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1910))+((x1903*x1907))+(((-1.0)*x1908*x1912)));
evalcond[3]=(((cj2*sj1))+((x1904*x1909))+(((-1.0)*r22*x1912))+((cj1*sj2))+(((-1.0)*r21*sj5*x1910)));
evalcond[4]=((((-1.0)*cj0*x1911))+(((-1.0)*r02*x1912))+((x1904*x1908))+(((-1.0)*x1907*x1910))+((cj0*x1906)));
evalcond[5]=((((-1.0)*r11*sj5*x1910))+((x1904*x1905))+(((-1.0)*r12*x1912))+((sj0*x1906))+(((-1.0)*sj0*x1911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1914=((1.0)*cj5);
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
CheckValue<IkReal> x1916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1914))+(((-1.0)*r00*sj5)))),-1);
if(!x1916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1915.value)+(((1.5707963267949)*(x1916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1917=IKsin(j4);
IkReal x1918=IKcos(j4);
IkReal x1919=(cj5*r10);
IkReal x1920=(sj1*sj2);
IkReal x1921=(r01*sj5);
IkReal x1922=(cj5*r00);
IkReal x1923=(cj5*r20);
IkReal x1924=((1.0)*x1918);
IkReal x1925=((1.0)*cj1*cj2);
IkReal x1926=((1.0)*x1917);
IkReal x1927=(sj5*x1917);
evalcond[0]=((((-1.0)*r22*x1924))+((r21*x1927))+(((-1.0)*x1923*x1926)));
evalcond[1]=((((-1.0)*r12*x1924))+cj0+(((-1.0)*x1919*x1926))+((r11*x1927)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1922*x1926))+((x1917*x1921))+(((-1.0)*r02*x1924)));
evalcond[3]=(((cj2*sj1))+((x1918*x1923))+((cj1*sj2))+(((-1.0)*r21*sj5*x1924))+(((-1.0)*r22*x1926)));
evalcond[4]=(((x1918*x1922))+((cj0*x1920))+(((-1.0)*cj0*x1925))+(((-1.0)*r02*x1926))+(((-1.0)*x1921*x1924)));
evalcond[5]=((((-1.0)*r12*x1926))+(((-1.0)*sj0*x1925))+(((-1.0)*r11*sj5*x1924))+((x1918*x1919))+((sj0*x1920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1928=cj5*cj5;
IkReal x1929=r21*r21;
IkReal x1930=(cj2*sj1);
IkReal x1931=(cj1*sj2);
IkReal x1932=(r21*sj5);
IkReal x1933=((1.0)*cj5*r20);
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x1932))+x1929+((x1928*(r20*r20)))+(((-1.0)*x1928*x1929)))),-1);
if(!x1934.valid){
continue;
}
CheckValue<IkReal> x1935 = IKatan2WithCheck(IkReal((((r22*x1931))+((r22*x1930)))),IkReal(((((-1.0)*x1930*x1933))+((x1931*x1932))+((x1930*x1932))+(((-1.0)*x1931*x1933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1934.value)))+(x1935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1936=IKsin(j4);
IkReal x1937=IKcos(j4);
IkReal x1938=(r21*sj5);
IkReal x1939=(cj5*r20);
IkReal x1940=((1.0)*x1937);
IkReal x1941=((1.0)*x1936);
evalcond[0]=((((-1.0)*r22*x1940))+((x1936*x1938))+(((-1.0)*x1939*x1941)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x1941))+((cj1*sj2))+(((-1.0)*x1938*x1940))+((x1937*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1942=(cj5*sj4);
IkReal x1943=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1942))+((r01*x1943)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1942))+(((-1.0)*r11*x1943))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1942))+((r01*x1943))))+IKsqr((((r10*x1942))+(((-1.0)*r11*x1943))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1942))+((r01*x1943))), (((r10*x1942))+(((-1.0)*r11*x1943))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1944=IKcos(j0);
IkReal x1945=IKsin(j0);
IkReal x1946=(cj4*cj5);
IkReal x1947=(cj1*cj2);
IkReal x1948=(sj1*sj2);
IkReal x1949=((1.0)*sj2);
IkReal x1950=(r11*sj5);
IkReal x1951=((1.0)*sj5);
IkReal x1952=(cj5*r11);
IkReal x1953=((1.0)*sj4);
IkReal x1954=(cj5*r01);
IkReal x1955=(cj2*sj1);
IkReal x1956=((0.12)*sj5);
IkReal x1957=((1.0)*cj4);
IkReal x1958=((0.571)*x1944);
IkReal x1959=(cj1*x1945);
IkReal x1960=(cj1*x1944);
IkReal x1961=((0.571)*x1945);
IkReal x1962=((1.0)*x1944);
IkReal x1963=((1.0)*x1945);
evalcond[0]=((((-1.0)*cj5*r10*x1953))+x1944+(((-1.0)*r12*x1957))+((sj4*x1950)));
evalcond[1]=((((-1.0)*r02*x1957))+(((-1.0)*cj5*r00*x1953))+(((-1.0)*x1963))+((r01*sj4*sj5)));
evalcond[2]=((((-1.0)*x1949*x1960))+(((-1.0)*x1954))+(((-1.0)*r00*x1951))+(((-1.0)*x1955*x1962)));
evalcond[3]=((((-1.0)*x1949*x1959))+(((-1.0)*x1952))+(((-1.0)*r10*x1951))+(((-1.0)*x1955*x1963)));
evalcond[4]=(((x1944*x1948))+(((-1.0)*r02*x1953))+(((-1.0)*x1947*x1962))+((r00*x1946))+(((-1.0)*cj4*r01*x1951)));
evalcond[5]=(((x1945*x1948))+(((-1.0)*x1950*x1957))+((r10*x1946))+(((-1.0)*x1947*x1963))+(((-1.0)*r12*x1953)));
evalcond[6]=((((-0.12)*x1954))+(((-1.0)*x1948*x1958))+(((-0.174)*x1945))+(((0.613)*x1960))+(((-1.0)*px))+(((-1.0)*r00*x1956))+((x1947*x1958)));
evalcond[7]=((((-0.12)*x1952))+(((-1.0)*x1948*x1961))+(((0.613)*x1959))+(((-1.0)*py))+(((-1.0)*r10*x1956))+(((0.174)*x1944))+((x1947*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
CheckValue<IkReal> x1965=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1965.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1964.value)+(((1.5707963267949)*(x1965.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1966=IKcos(j0);
IkReal x1967=IKsin(j0);
IkReal x1968=((0.571)*sj1);
IkReal x1969=((1.0)*cj1);
IkReal x1970=((0.571)*cj2);
IkReal x1971=((1.0)*sj5);
IkReal x1972=(cj5*r11);
IkReal x1973=(cj5*r01);
IkReal x1974=((0.12)*sj5);
IkReal x1975=(sj2*x1966);
IkReal x1976=(cj1*x1967);
IkReal x1977=(sj2*x1967);
IkReal x1978=((1.0)*cj2*sj1);
IkReal x1979=(cj1*x1966);
evalcond[0]=((((-1.0)*x1966*x1978))+(((-1.0)*r00*x1971))+(((-1.0)*x1973))+(((-1.0)*x1969*x1975)));
evalcond[1]=((((-1.0)*x1972))+(((-1.0)*r10*x1971))+(((-1.0)*x1969*x1977))+(((-1.0)*x1967*x1978)));
evalcond[2]=((((0.613)*x1979))+(((-0.174)*x1967))+((x1970*x1979))+(((-1.0)*x1968*x1975))+(((-1.0)*r00*x1974))+(((-1.0)*px))+(((-0.12)*x1973)));
evalcond[3]=((((0.613)*x1976))+((x1970*x1976))+(((-1.0)*x1968*x1977))+(((-1.0)*py))+(((-1.0)*r10*x1974))+(((-0.12)*x1972))+(((0.174)*x1966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1980=((1.0)*cj5);
IkReal x1981=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1980)));
j4eval[0]=x1981;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1980))))));
j4eval[2]=IKsign(x1981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1982=((1.0)*cj5);
IkReal x1983=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1982)));
j4eval[0]=x1983;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1982))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1984=((1.0)*sj0);
IkReal x1985=((1.0)*cj0);
IkReal x1986=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1986;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1984))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1985)))))+(IKabs(((((-1.0)*r02*x1985))+(((-1.0)*r12*x1984))))));
j4eval[2]=IKsign(x1986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1987=((1.0)*sj0);
IkReal x1988=((1.0)*cj0);
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1988))+(((-1.0)*r12*x1987)))),IkReal(((((-1.0)*r11*sj5*x1987))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
CheckValue<IkReal> x1990=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1989.value)+(((1.5707963267949)*(x1990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1991=IKsin(j4);
IkReal x1992=IKcos(j4);
IkReal x1993=(cj5*r10);
IkReal x1994=(sj1*sj2);
IkReal x1995=(r01*sj5);
IkReal x1996=(cj5*r00);
IkReal x1997=(cj5*r20);
IkReal x1998=((1.0)*x1992);
IkReal x1999=((1.0)*cj1*cj2);
IkReal x2000=((1.0)*x1991);
IkReal x2001=(sj5*x1991);
evalcond[0]=(((r21*x2001))+(((-1.0)*x1997*x2000))+(((-1.0)*r22*x1998)));
evalcond[1]=(((r11*x2001))+cj0+(((-1.0)*r12*x1998))+(((-1.0)*x1993*x2000)));
evalcond[2]=((((-1.0)*sj0))+((x1991*x1995))+(((-1.0)*r02*x1998))+(((-1.0)*x1996*x2000)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2000))+(((-1.0)*r21*sj5*x1998))+((cj1*sj2))+((x1992*x1997)));
evalcond[4]=(((cj0*x1994))+(((-1.0)*cj0*x1999))+(((-1.0)*r02*x2000))+(((-1.0)*x1995*x1998))+((x1992*x1996)));
evalcond[5]=(((sj0*x1994))+(((-1.0)*r12*x2000))+(((-1.0)*sj0*x1999))+((x1992*x1993))+(((-1.0)*r11*sj5*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2002=((1.0)*cj5);
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2002)))),-1);
if(!x2003.valid){
continue;
}
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2003.value)))+(x2004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2005=IKsin(j4);
IkReal x2006=IKcos(j4);
IkReal x2007=(cj5*r10);
IkReal x2008=(sj1*sj2);
IkReal x2009=(r01*sj5);
IkReal x2010=(cj5*r00);
IkReal x2011=(cj5*r20);
IkReal x2012=((1.0)*x2006);
IkReal x2013=((1.0)*cj1*cj2);
IkReal x2014=((1.0)*x2005);
IkReal x2015=(sj5*x2005);
evalcond[0]=((((-1.0)*x2011*x2014))+((r21*x2015))+(((-1.0)*r22*x2012)));
evalcond[1]=(cj0+(((-1.0)*x2007*x2014))+(((-1.0)*r12*x2012))+((r11*x2015)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2010*x2014))+((x2005*x2009))+(((-1.0)*r02*x2012)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2012))+((x2006*x2011))+(((-1.0)*r22*x2014)));
evalcond[4]=((((-1.0)*x2009*x2012))+((cj0*x2008))+(((-1.0)*r02*x2014))+((x2006*x2010))+(((-1.0)*cj0*x2013)));
evalcond[5]=((((-1.0)*r11*sj5*x2012))+(((-1.0)*sj0*x2013))+((sj0*x2008))+(((-1.0)*r12*x2014))+((x2006*x2007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2016=((1.0)*cj5);
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2016)))),-1);
if(!x2017.valid){
continue;
}
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2017.value)))+(x2018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2019=IKsin(j4);
IkReal x2020=IKcos(j4);
IkReal x2021=(cj5*r10);
IkReal x2022=(sj1*sj2);
IkReal x2023=(r01*sj5);
IkReal x2024=(cj5*r00);
IkReal x2025=(cj5*r20);
IkReal x2026=((1.0)*x2020);
IkReal x2027=((1.0)*cj1*cj2);
IkReal x2028=((1.0)*x2019);
IkReal x2029=(sj5*x2019);
evalcond[0]=((((-1.0)*r22*x2026))+(((-1.0)*x2025*x2028))+((r21*x2029)));
evalcond[1]=((((-1.0)*x2021*x2028))+cj0+((r11*x2029))+(((-1.0)*r12*x2026)));
evalcond[2]=((((-1.0)*sj0))+((x2019*x2023))+(((-1.0)*r02*x2026))+(((-1.0)*x2024*x2028)));
evalcond[3]=(((x2020*x2025))+((cj2*sj1))+(((-1.0)*r21*sj5*x2026))+(((-1.0)*r22*x2028))+((cj1*sj2)));
evalcond[4]=(((x2020*x2024))+(((-1.0)*x2023*x2026))+(((-1.0)*r02*x2028))+((cj0*x2022))+(((-1.0)*cj0*x2027)));
evalcond[5]=(((x2020*x2021))+((sj0*x2022))+(((-1.0)*r12*x2028))+(((-1.0)*r11*sj5*x2026))+(((-1.0)*sj0*x2027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2030=cj1*cj1;
IkReal x2031=cj2*cj2;
IkReal x2032=(cj1*cj2);
IkReal x2033=(sj1*sj2);
IkReal x2034=(r00*sj5);
IkReal x2035=((18390.0)*cj1);
IkReal x2036=((153250.0)*cj1);
IkReal x2037=(cj5*r01);
IkReal x2038=(cj5*r11);
IkReal x2039=((142750.0)*py);
IkReal x2040=(r10*sj5);
IkReal x2041=((142750.0)*px);
IkReal x2042=((17130.0)*x2037);
IkReal x2043=((17130.0)*x2040);
CheckValue<IkReal> x2044=IKPowWithIntegerCheck(IKsign(((89079.25)+(((175011.5)*cj2*x2030))+(((-81510.25)*x2031))+(((12432.0)*x2030))+(((-175011.5)*cj1*x2033))+(((-163020.5)*x2032*x2033))+(((163020.5)*x2030*x2031)))),-1);
if(!x2044.valid){
continue;
}
CheckValue<IkReal> x2045 = IKatan2WithCheck(IkReal((((x2032*x2043))+((x2032*x2039))+((py*x2036))+(((-17130.0)*x2033*x2038))+(((17130.0)*x2032*x2038))+(((-5220.0)*x2037))+(((-5220.0)*x2034))+((x2035*x2038))+(((-1.0)*x2033*x2043))+((x2035*x2040))+(((-1.0)*x2033*x2039))+(((-43500.0)*px)))),IkReal(((((5220.0)*x2040))+((x2034*x2035))+((x2032*x2041))+((x2032*x2042))+((px*x2036))+(((-17130.0)*x2033*x2034))+(((43500.0)*py))+(((17130.0)*x2032*x2034))+((x2035*x2037))+(((-1.0)*x2033*x2042))+(((-1.0)*x2033*x2041))+(((5220.0)*x2038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2045.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2044.value)))+(x2045.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2046=IKcos(j0);
IkReal x2047=IKsin(j0);
IkReal x2048=(cj1*cj2);
IkReal x2049=((0.613)*cj1);
IkReal x2050=((0.12)*cj5);
IkReal x2051=(sj1*sj2);
IkReal x2052=((0.12)*sj5);
IkReal x2053=((0.571)*x2046);
IkReal x2054=((0.571)*x2047);
evalcond[0]=((((-1.0)*r00*x2052))+(((-1.0)*r01*x2050))+(((-1.0)*px))+((x2046*x2049))+(((-1.0)*x2051*x2053))+((x2048*x2053))+(((-0.174)*x2047)));
evalcond[1]=((((-1.0)*r10*x2052))+(((-1.0)*r11*x2050))+(((-1.0)*py))+(((-1.0)*x2051*x2054))+((x2048*x2054))+(((0.174)*x2046))+((x2047*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2055=((1.0)*cj5);
IkReal x2056=((((-1.0)*r01*x2055))+(((-1.0)*r00*sj5)));
j4eval[0]=x2056;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2055)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2057=((1.0)*cj5);
IkReal x2058=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2057)));
j4eval[0]=x2058;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2057))))));
j4eval[2]=IKsign(x2058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2059=((1.0)*sj0);
IkReal x2060=((1.0)*cj0);
IkReal x2061=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2061;
j4eval[1]=((IKabs(((((-1.0)*r02*x2060))+(((-1.0)*r12*x2059)))))+(IKabs(((((-1.0)*r01*sj5*x2060))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2059))))));
j4eval[2]=IKsign(x2061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2062=((-1.0)*r20);
IkReal x2064 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2064)==0){
continue;
}
IkReal x2063=pow(x2064,-0.5);
CheckValue<IkReal> x2065 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2062),IKFAST_ATAN2_MAGTHRESH);
if(!x2065.valid){
continue;
}
IkReal gconst0=((-1.0)*(x2065.value));
IkReal gconst1=(r21*x2063);
IkReal gconst2=(x2062*x2063);
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2066.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2067=((-1.0)*r20);
IkReal x2068=x2063;
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2067),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
IkReal x2069=((-1.0)*(x2070.value));
sj5=gconst1;
cj5=gconst2;
j5=x2069;
IkReal gconst0=x2069;
IkReal gconst1=(r21*x2068);
IkReal gconst2=(x2067*x2068);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2071=((-1.0)*r20);
IkReal x2072=x2063;
CheckValue<IkReal> x2074 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2071),IKFAST_ATAN2_MAGTHRESH);
if(!x2074.valid){
continue;
}
IkReal x2073=((-1.0)*(x2074.value));
sj5=gconst1;
cj5=gconst2;
j5=x2073;
IkReal gconst0=x2073;
IkReal gconst1=(r21*x2072);
IkReal gconst2=(x2071*x2072);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2075=((-1.0)*r20);
IkReal x2076=x2063;
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2075),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
IkReal x2077=((-1.0)*(x2078.value));
sj5=gconst1;
cj5=gconst2;
j5=x2077;
IkReal gconst0=x2077;
IkReal gconst1=(r21*x2076);
IkReal gconst2=(x2075*x2076);
IkReal x2079=r22*r22;
CheckValue<IkReal> x2083=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2079))),-1);
if(!x2083.valid){
continue;
}
IkReal x2080=x2083.value;
IkReal x2081=(sj3*x2080);
IkReal x2082=(((x2081*(r21*r21*r21*r21)))+((sj3*x2079))+(((2.0)*x2081*(r20*r20)*(r21*r21)))+((x2081*(r20*r20*r20*r20))));
j4eval[0]=x2082;
j4eval[1]=IKsign(x2082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2084=gconst1*gconst1;
IkReal x2085=r21*r21;
IkReal x2086=gconst2*gconst2;
IkReal x2087=r20*r20;
IkReal x2088=(gconst2*r20);
IkReal x2089=(cj1*cj2);
IkReal x2090=(sj1*sj2);
IkReal x2091=(gconst1*r21);
IkReal x2092=(cj3*gconst2);
IkReal x2093=(cj3*r20);
CheckValue<IkReal> x2094=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x2088*x2091))+((sj3*x2084*x2085))+((sj3*x2086*x2087)))),-1);
if(!x2094.valid){
continue;
}
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal((((gconst1*r22*x2093))+((r22*x2090))+(((-1.0)*r22*x2089))+((r21*r22*x2092)))),IkReal((((gconst1*x2085*x2092))+(((-1.0)*gconst1*x2087*x2092))+(((-1.0)*x2088*x2090))+(((-1.0)*x2089*x2091))+((x2090*x2091))+((r21*x2084*x2093))+((x2088*x2089))+(((-1.0)*r21*x2086*x2093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2094.value)))+(x2095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2096=IKsin(j4);
IkReal x2097=IKcos(j4);
IkReal x2098=(cj3*gconst1);
IkReal x2099=(gconst1*r01);
IkReal x2100=(gconst1*r11);
IkReal x2101=(sj1*sj2);
IkReal x2102=(cj3*gconst2);
IkReal x2103=(gconst1*sj3);
IkReal x2104=(gconst2*sj3);
IkReal x2105=((1.0)*sj0);
IkReal x2106=(cj1*sj2);
IkReal x2107=((1.0)*x2097);
IkReal x2108=((1.0)*x2096);
IkReal x2109=((1.0)*cj1*cj2);
IkReal x2110=(cj3*x2096);
IkReal x2111=((1.0)*cj2*sj1);
IkReal x2112=(x2097*x2104);
evalcond[0]=((((-1.0)*r22*x2107))+((gconst1*r21*x2096))+(((-1.0)*gconst2*r20*x2108)));
evalcond[1]=((((-1.0)*r12*x2107))+cj0+((x2096*x2100))+(((-1.0)*gconst2*r10*x2108)));
evalcond[2]=((((-1.0)*r02*x2107))+(((-1.0)*x2105))+((x2096*x2099))+(((-1.0)*gconst2*r00*x2108)));
evalcond[3]=(((r20*x2103))+((cj2*sj1))+((r21*x2104))+x2106+((r21*x2097*x2098))+(((-1.0)*r20*x2102*x2107))+((r22*x2110)));
evalcond[4]=(((r20*x2098))+((r21*x2102))+(((-1.0)*x2109))+x2101+((r20*x2112))+(((-1.0)*r22*sj3*x2108))+(((-1.0)*r21*x2103*x2107)));
evalcond[5]=(((cj0*x2101))+((r01*x2097*x2098))+((r00*x2103))+((r01*x2104))+((r02*x2110))+(((-1.0)*r00*x2102*x2107))+(((-1.0)*cj0*x2109)));
evalcond[6]=(((r12*x2110))+(((-1.0)*cj1*cj2*x2105))+((r11*x2104))+((r10*x2103))+(((-1.0)*r10*x2102*x2107))+((r11*x2097*x2098))+((sj0*x2101)));
evalcond[7]=((((-1.0)*sj3*x2099*x2107))+((r00*x2112))+(((-1.0)*cj0*x2106))+(((-1.0)*cj0*x2111))+((r00*x2098))+((r01*x2102))+(((-1.0)*r02*sj3*x2108)));
evalcond[8]=(((r11*x2102))+(((-1.0)*sj3*x2100*x2107))+((r10*x2098))+(((-1.0)*x2105*x2106))+((r10*x2112))+(((-1.0)*r12*sj3*x2108))+(((-1.0)*cj2*sj1*x2105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2113=((1.0)*gconst2);
CheckValue<IkReal> x2114=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x2113)))),-1);
if(!x2114.valid){
continue;
}
CheckValue<IkReal> x2115 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2113))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2114.value)))+(x2115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2116=IKsin(j4);
IkReal x2117=IKcos(j4);
IkReal x2118=(cj3*gconst1);
IkReal x2119=(gconst1*r01);
IkReal x2120=(gconst1*r11);
IkReal x2121=(sj1*sj2);
IkReal x2122=(cj3*gconst2);
IkReal x2123=(gconst1*sj3);
IkReal x2124=(gconst2*sj3);
IkReal x2125=((1.0)*sj0);
IkReal x2126=(cj1*sj2);
IkReal x2127=((1.0)*x2117);
IkReal x2128=((1.0)*x2116);
IkReal x2129=((1.0)*cj1*cj2);
IkReal x2130=(cj3*x2116);
IkReal x2131=((1.0)*cj2*sj1);
IkReal x2132=(x2117*x2124);
evalcond[0]=(((gconst1*r21*x2116))+(((-1.0)*r22*x2127))+(((-1.0)*gconst2*r20*x2128)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x2128))+(((-1.0)*r12*x2127))+((x2116*x2120)));
evalcond[2]=((((-1.0)*gconst2*r00*x2128))+((x2116*x2119))+(((-1.0)*r02*x2127))+(((-1.0)*x2125)));
evalcond[3]=((((-1.0)*r20*x2122*x2127))+((cj2*sj1))+((r21*x2117*x2118))+((r20*x2123))+x2126+((r21*x2124))+((r22*x2130)));
evalcond[4]=((((-1.0)*r21*x2123*x2127))+x2121+((r21*x2122))+((r20*x2118))+(((-1.0)*r22*sj3*x2128))+(((-1.0)*x2129))+((r20*x2132)));
evalcond[5]=(((r02*x2130))+((r01*x2124))+((r00*x2123))+((r01*x2117*x2118))+(((-1.0)*cj0*x2129))+((cj0*x2121))+(((-1.0)*r00*x2122*x2127)));
evalcond[6]=(((r12*x2130))+(((-1.0)*cj1*cj2*x2125))+((sj0*x2121))+(((-1.0)*r10*x2122*x2127))+((r10*x2123))+((r11*x2124))+((r11*x2117*x2118)));
evalcond[7]=(((r00*x2118))+(((-1.0)*r02*sj3*x2128))+(((-1.0)*cj0*x2126))+((r00*x2132))+(((-1.0)*cj0*x2131))+(((-1.0)*sj3*x2119*x2127))+((r01*x2122)));
evalcond[8]=((((-1.0)*r12*sj3*x2128))+(((-1.0)*sj3*x2120*x2127))+(((-1.0)*x2125*x2126))+((r11*x2122))+((r10*x2132))+((r10*x2118))+(((-1.0)*cj2*sj1*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2133=((1.0)*gconst2);
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2133))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x2133)))),-1);
if(!x2135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2134.value)+(((1.5707963267949)*(x2135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2136=IKsin(j4);
IkReal x2137=IKcos(j4);
IkReal x2138=(cj3*gconst1);
IkReal x2139=(gconst1*r01);
IkReal x2140=(gconst1*r11);
IkReal x2141=(sj1*sj2);
IkReal x2142=(cj3*gconst2);
IkReal x2143=(gconst1*sj3);
IkReal x2144=(gconst2*sj3);
IkReal x2145=((1.0)*sj0);
IkReal x2146=(cj1*sj2);
IkReal x2147=((1.0)*x2137);
IkReal x2148=((1.0)*x2136);
IkReal x2149=((1.0)*cj1*cj2);
IkReal x2150=(cj3*x2136);
IkReal x2151=((1.0)*cj2*sj1);
IkReal x2152=(x2137*x2144);
evalcond[0]=((((-1.0)*gconst2*r20*x2148))+(((-1.0)*r22*x2147))+((gconst1*r21*x2136)));
evalcond[1]=(cj0+(((-1.0)*r12*x2147))+(((-1.0)*gconst2*r10*x2148))+((x2136*x2140)));
evalcond[2]=(((x2136*x2139))+(((-1.0)*r02*x2147))+(((-1.0)*x2145))+(((-1.0)*gconst2*r00*x2148)));
evalcond[3]=(((cj2*sj1))+((r20*x2143))+(((-1.0)*r20*x2142*x2147))+((r21*x2137*x2138))+x2146+((r22*x2150))+((r21*x2144)));
evalcond[4]=(((r20*x2152))+x2141+(((-1.0)*r21*x2143*x2147))+(((-1.0)*x2149))+((r21*x2142))+(((-1.0)*r22*sj3*x2148))+((r20*x2138)));
evalcond[5]=((((-1.0)*cj0*x2149))+((cj0*x2141))+((r01*x2137*x2138))+((r02*x2150))+(((-1.0)*r00*x2142*x2147))+((r01*x2144))+((r00*x2143)));
evalcond[6]=(((r11*x2144))+(((-1.0)*r10*x2142*x2147))+(((-1.0)*cj1*cj2*x2145))+((sj0*x2141))+((r10*x2143))+((r11*x2137*x2138))+((r12*x2150)));
evalcond[7]=((((-1.0)*cj0*x2151))+((r00*x2138))+(((-1.0)*cj0*x2146))+(((-1.0)*r02*sj3*x2148))+((r00*x2152))+((r01*x2142))+(((-1.0)*sj3*x2139*x2147)));
evalcond[8]=(((r11*x2142))+(((-1.0)*r12*sj3*x2148))+((r10*x2138))+(((-1.0)*cj2*sj1*x2145))+((r10*x2152))+(((-1.0)*x2145*x2146))+(((-1.0)*sj3*x2140*x2147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2153=((-1.0)*r21);
IkReal x2155 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2155)==0){
continue;
}
IkReal x2154=pow(x2155,-0.5);
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal(x2153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2156.value))));
IkReal gconst4=(x2153*x2154);
IkReal gconst5=((1.0)*r20*x2154);
CheckValue<IkReal> x2157 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2157.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2157.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2158=((-1.0)*r21);
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal(x2158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
IkReal x2159=((1.0)*(x2161.value));
IkReal x2160=x2154;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2159)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2159)));
IkReal gconst4=(x2158*x2160);
IkReal gconst5=((1.0)*r20*x2160);
IkReal x2162=r22*r22;
IkReal x2163=((1.0)*x2162);
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(((-1.0)+x2162),-1);
if(!x2167.valid){
continue;
}
IkReal x2164=x2167.value;
if((((1.0)+(((-1.0)*x2163)))) < -0.00001)
continue;
IkReal x2165=IKsqrt(((1.0)+(((-1.0)*x2163))));
IkReal x2166=(cj0*x2164*x2165);
j4eval[0]=((IKabs(((((-1.0)*x2163*x2166))+x2166)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2168=((-1.0)*r21);
CheckValue<IkReal> x2171 = IKatan2WithCheck(IkReal(x2168),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2171.valid){
continue;
}
IkReal x2169=((1.0)*(x2171.value));
IkReal x2170=x2154;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2169)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2169)));
IkReal gconst4=(x2168*x2170);
IkReal gconst5=((1.0)*r20*x2170);
IkReal x2172=r22*r22;
IkReal x2173=((1.0)*x2172);
CheckValue<IkReal> x2177=IKPowWithIntegerCheck(((-1.0)+x2172),-1);
if(!x2177.valid){
continue;
}
IkReal x2174=x2177.value;
if((((1.0)+(((-1.0)*x2173)))) < -0.00001)
continue;
IkReal x2175=IKsqrt(((1.0)+(((-1.0)*x2173))));
IkReal x2176=(sj0*x2174*x2175);
j4eval[0]=((IKabs((x2176+(((-1.0)*x2173*x2176)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2178=((-1.0)*r21);
CheckValue<IkReal> x2181 = IKatan2WithCheck(IkReal(x2178),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
IkReal x2179=((1.0)*(x2181.value));
IkReal x2180=x2154;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2179)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2179)));
IkReal gconst4=(x2178*x2180);
IkReal gconst5=((1.0)*r20*x2180);
IkReal x2182=r22*r22;
IkReal x2183=(r12*sj0);
IkReal x2184=(cj0*r02);
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(((-1.0)+x2182),-1);
if(!x2188.valid){
continue;
}
IkReal x2185=x2188.value;
if((((1.0)+(((-1.0)*x2182)))) < -0.00001)
continue;
IkReal x2186=IKsqrt(((1.0)+(((-1.0)*x2182))));
IkReal x2187=(r22*x2185*x2186);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2184))+(((-1.0)*x2183)))))+(IKabs((((x2183*x2187))+((x2184*x2187))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2189=((1.0)*sj0);
IkReal x2190=((1.0)*gconst4);
CheckValue<IkReal> x2191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2190))+(((-1.0)*gconst5*r21)))),-1);
if(!x2191.valid){
continue;
}
CheckValue<IkReal> x2192 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2189)))),IkReal(((((-1.0)*cj0*r01*x2190))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*gconst4*r11*x2189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2191.value)))+(x2192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2193=IKsin(j4);
IkReal x2194=IKcos(j4);
IkReal x2195=(gconst5*sj3);
IkReal x2196=(cj3*gconst5);
IkReal x2197=(gconst4*r11);
IkReal x2198=(sj1*sj2);
IkReal x2199=(cj2*sj1);
IkReal x2200=((1.0)*sj0);
IkReal x2201=(gconst4*r01);
IkReal x2202=(gconst4*r21);
IkReal x2203=((1.0)*cj0);
IkReal x2204=(cj1*sj2);
IkReal x2205=(gconst4*sj3);
IkReal x2206=(cj3*gconst4);
IkReal x2207=((1.0)*x2194);
IkReal x2208=((1.0)*cj1*cj2);
IkReal x2209=(cj3*x2193);
IkReal x2210=(cj3*x2194);
IkReal x2211=((1.0)*gconst5*x2193);
IkReal x2212=((1.0)*sj3*x2193);
evalcond[0]=((((-1.0)*r22*x2207))+((x2193*x2202))+(((-1.0)*r20*x2211)));
evalcond[1]=(((x2193*x2197))+cj0+(((-1.0)*r10*x2211))+(((-1.0)*r12*x2207)));
evalcond[2]=((((-1.0)*x2200))+((x2193*x2201))+(((-1.0)*r00*x2211))+(((-1.0)*r02*x2207)));
evalcond[3]=(((x2202*x2210))+x2204+((r20*x2205))+x2199+((r21*x2195))+((r22*x2209))+(((-1.0)*r20*x2196*x2207)));
evalcond[4]=(((r20*x2206))+(((-1.0)*x2208))+(((-1.0)*r22*x2212))+x2198+(((-1.0)*sj3*x2202*x2207))+((r21*x2196))+((r20*x2194*x2195)));
evalcond[5]=(((r02*x2209))+((r00*x2205))+(((-1.0)*cj1*cj2*x2203))+((x2201*x2210))+((cj0*x2198))+(((-1.0)*r00*x2196*x2207))+((r01*x2195)));
evalcond[6]=((((-1.0)*cj1*cj2*x2200))+((r12*x2209))+((sj0*x2198))+((r10*x2205))+((r11*x2195))+(((-1.0)*r10*x2196*x2207))+((x2197*x2210)));
evalcond[7]=((((-1.0)*x2203*x2204))+((r00*x2206))+(((-1.0)*sj3*x2201*x2207))+((r00*x2194*x2195))+(((-1.0)*x2199*x2203))+(((-1.0)*r02*x2212))+((r01*x2196)));
evalcond[8]=((((-1.0)*r12*x2212))+(((-1.0)*x2199*x2200))+((r10*x2206))+((r11*x2196))+(((-1.0)*x2200*x2204))+((r10*x2194*x2195))+(((-1.0)*sj3*x2197*x2207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2213=((1.0)*gconst5);
CheckValue<IkReal> x2214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2213))+(((-1.0)*gconst4*r10)))),-1);
if(!x2214.valid){
continue;
}
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2213))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2214.value)))+(x2215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2216=IKsin(j4);
IkReal x2217=IKcos(j4);
IkReal x2218=(gconst5*sj3);
IkReal x2219=(cj3*gconst5);
IkReal x2220=(gconst4*r11);
IkReal x2221=(sj1*sj2);
IkReal x2222=(cj2*sj1);
IkReal x2223=((1.0)*sj0);
IkReal x2224=(gconst4*r01);
IkReal x2225=(gconst4*r21);
IkReal x2226=((1.0)*cj0);
IkReal x2227=(cj1*sj2);
IkReal x2228=(gconst4*sj3);
IkReal x2229=(cj3*gconst4);
IkReal x2230=((1.0)*x2217);
IkReal x2231=((1.0)*cj1*cj2);
IkReal x2232=(cj3*x2216);
IkReal x2233=(cj3*x2217);
IkReal x2234=((1.0)*gconst5*x2216);
IkReal x2235=((1.0)*sj3*x2216);
evalcond[0]=((((-1.0)*r20*x2234))+((x2216*x2225))+(((-1.0)*r22*x2230)));
evalcond[1]=((((-1.0)*r10*x2234))+cj0+((x2216*x2220))+(((-1.0)*r12*x2230)));
evalcond[2]=(((x2216*x2224))+(((-1.0)*r02*x2230))+(((-1.0)*r00*x2234))+(((-1.0)*x2223)));
evalcond[3]=(x2227+x2222+((r22*x2232))+((x2225*x2233))+((r20*x2228))+((r21*x2218))+(((-1.0)*r20*x2219*x2230)));
evalcond[4]=(x2221+(((-1.0)*sj3*x2225*x2230))+((r20*x2217*x2218))+(((-1.0)*x2231))+(((-1.0)*r22*x2235))+((r20*x2229))+((r21*x2219)));
evalcond[5]=((((-1.0)*cj1*cj2*x2226))+((r01*x2218))+((r02*x2232))+((cj0*x2221))+((x2224*x2233))+(((-1.0)*r00*x2219*x2230))+((r00*x2228)));
evalcond[6]=((((-1.0)*cj1*cj2*x2223))+((sj0*x2221))+((r10*x2228))+((r11*x2218))+(((-1.0)*r10*x2219*x2230))+((x2220*x2233))+((r12*x2232)));
evalcond[7]=((((-1.0)*x2226*x2227))+(((-1.0)*x2222*x2226))+((r01*x2219))+((r00*x2217*x2218))+(((-1.0)*r02*x2235))+(((-1.0)*sj3*x2224*x2230))+((r00*x2229)));
evalcond[8]=((((-1.0)*x2222*x2223))+((r10*x2229))+((r11*x2219))+(((-1.0)*x2223*x2227))+(((-1.0)*sj3*x2220*x2230))+((r10*x2217*x2218))+(((-1.0)*r12*x2235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2236=((1.0)*gconst5);
CheckValue<IkReal> x2237=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x2236)))),-1);
if(!x2237.valid){
continue;
}
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2236))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2237.value)))+(x2238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2239=IKsin(j4);
IkReal x2240=IKcos(j4);
IkReal x2241=(gconst5*sj3);
IkReal x2242=(cj3*gconst5);
IkReal x2243=(gconst4*r11);
IkReal x2244=(sj1*sj2);
IkReal x2245=(cj2*sj1);
IkReal x2246=((1.0)*sj0);
IkReal x2247=(gconst4*r01);
IkReal x2248=(gconst4*r21);
IkReal x2249=((1.0)*cj0);
IkReal x2250=(cj1*sj2);
IkReal x2251=(gconst4*sj3);
IkReal x2252=(cj3*gconst4);
IkReal x2253=((1.0)*x2240);
IkReal x2254=((1.0)*cj1*cj2);
IkReal x2255=(cj3*x2239);
IkReal x2256=(cj3*x2240);
IkReal x2257=((1.0)*gconst5*x2239);
IkReal x2258=((1.0)*sj3*x2239);
evalcond[0]=((((-1.0)*r22*x2253))+((x2239*x2248))+(((-1.0)*r20*x2257)));
evalcond[1]=(cj0+(((-1.0)*r12*x2253))+(((-1.0)*r10*x2257))+((x2239*x2243)));
evalcond[2]=((((-1.0)*r02*x2253))+(((-1.0)*r00*x2257))+(((-1.0)*x2246))+((x2239*x2247)));
evalcond[3]=((((-1.0)*r20*x2242*x2253))+x2245+x2250+((r20*x2251))+((r21*x2241))+((r22*x2255))+((x2248*x2256)));
evalcond[4]=(x2244+(((-1.0)*r22*x2258))+(((-1.0)*x2254))+((r20*x2252))+((r20*x2240*x2241))+((r21*x2242))+(((-1.0)*sj3*x2248*x2253)));
evalcond[5]=((((-1.0)*r00*x2242*x2253))+((x2247*x2256))+((r01*x2241))+((r00*x2251))+(((-1.0)*cj1*cj2*x2249))+((r02*x2255))+((cj0*x2244)));
evalcond[6]=(((r10*x2251))+((r11*x2241))+((r12*x2255))+((x2243*x2256))+((sj0*x2244))+(((-1.0)*r10*x2242*x2253))+(((-1.0)*cj1*cj2*x2246)));
evalcond[7]=((((-1.0)*x2249*x2250))+(((-1.0)*sj3*x2247*x2253))+(((-1.0)*r02*x2258))+((r01*x2242))+((r00*x2240*x2241))+((r00*x2252))+(((-1.0)*x2245*x2249)));
evalcond[8]=((((-1.0)*sj3*x2243*x2253))+((r10*x2252))+((r11*x2242))+(((-1.0)*r12*x2258))+(((-1.0)*x2246*x2250))+((r10*x2240*x2241))+(((-1.0)*x2245*x2246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2259=((-1.0)*r10);
IkReal x2261 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2261)==0){
continue;
}
IkReal x2260=pow(x2261,-0.5);
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2259),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2262.value));
IkReal gconst7=(r11*x2260);
IkReal gconst8=(x2259*x2260);
CheckValue<IkReal> x2263 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2263.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2263.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2264=((-1.0)*r10);
IkReal x2265=x2260;
CheckValue<IkReal> x2267 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2264),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
IkReal x2266=((-1.0)*(x2267.value));
sj5=gconst7;
cj5=gconst8;
j5=x2266;
IkReal gconst6=x2266;
IkReal gconst7=(r11*x2265);
IkReal gconst8=(x2264*x2265);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2268=((1.0)*sj0);
IkReal x2269=((1.0)*gconst7);
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2269))+(((-1.0)*gconst8*r21)))),-1);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2268)))),IkReal(((((-1.0)*gconst7*r11*x2268))+((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x2269))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2270.value)))+(x2271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2272=IKsin(j4);
IkReal x2273=IKcos(j4);
IkReal x2274=(gconst7*sj3);
IkReal x2275=(cj3*gconst8);
IkReal x2276=(cj3*gconst7);
IkReal x2277=(sj1*sj2);
IkReal x2278=(cj2*sj1);
IkReal x2279=((1.0)*sj0);
IkReal x2280=((1.0)*cj0);
IkReal x2281=(gconst8*sj3);
IkReal x2282=(cj1*sj2);
IkReal x2283=((1.0)*x2273);
IkReal x2284=((1.0)*x2272);
IkReal x2285=((1.0)*cj1*cj2);
IkReal x2286=(cj3*x2272);
IkReal x2287=(gconst7*x2272);
IkReal x2288=(x2273*x2281);
evalcond[0]=((((-1.0)*gconst8*r20*x2284))+((r21*x2287))+(((-1.0)*r22*x2283)));
evalcond[1]=((((-1.0)*gconst8*r10*x2284))+((r11*x2287))+cj0+(((-1.0)*r12*x2283)));
evalcond[2]=((((-1.0)*r02*x2283))+(((-1.0)*gconst8*r00*x2284))+((r01*x2287))+(((-1.0)*x2279)));
evalcond[3]=((((-1.0)*r20*x2275*x2283))+x2282+x2278+((r21*x2273*x2276))+((r21*x2281))+((r20*x2274))+((r22*x2286)));
evalcond[4]=((((-1.0)*r22*sj3*x2284))+((r21*x2275))+x2277+(((-1.0)*x2285))+(((-1.0)*r21*x2274*x2283))+((r20*x2288))+((r20*x2276)));
evalcond[5]=((((-1.0)*r00*x2275*x2283))+((r00*x2274))+((cj0*x2277))+((r01*x2281))+(((-1.0)*cj1*cj2*x2280))+((r02*x2286))+((r01*x2273*x2276)));
evalcond[6]=(((sj0*x2277))+(((-1.0)*cj1*cj2*x2279))+((r11*x2281))+((r12*x2286))+((r11*x2273*x2276))+((r10*x2274))+(((-1.0)*r10*x2275*x2283)));
evalcond[7]=(((r01*x2275))+((r00*x2276))+(((-1.0)*r01*x2274*x2283))+(((-1.0)*x2280*x2282))+(((-1.0)*x2278*x2280))+((r00*x2288))+(((-1.0)*r02*sj3*x2284)));
evalcond[8]=((((-1.0)*x2278*x2279))+((r10*x2288))+(((-1.0)*r12*sj3*x2284))+(((-1.0)*r11*x2274*x2283))+(((-1.0)*x2279*x2282))+((r10*x2276))+((r11*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2289=((1.0)*gconst8);
CheckValue<IkReal> x2290 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x2289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2290.valid){
continue;
}
CheckValue<IkReal> x2291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x2289)))),-1);
if(!x2291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2290.value)+(((1.5707963267949)*(x2291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2292=IKsin(j4);
IkReal x2293=IKcos(j4);
IkReal x2294=(gconst7*sj3);
IkReal x2295=(cj3*gconst8);
IkReal x2296=(cj3*gconst7);
IkReal x2297=(sj1*sj2);
IkReal x2298=(cj2*sj1);
IkReal x2299=((1.0)*sj0);
IkReal x2300=((1.0)*cj0);
IkReal x2301=(gconst8*sj3);
IkReal x2302=(cj1*sj2);
IkReal x2303=((1.0)*x2293);
IkReal x2304=((1.0)*x2292);
IkReal x2305=((1.0)*cj1*cj2);
IkReal x2306=(cj3*x2292);
IkReal x2307=(gconst7*x2292);
IkReal x2308=(x2293*x2301);
evalcond[0]=((((-1.0)*r22*x2303))+(((-1.0)*gconst8*r20*x2304))+((r21*x2307)));
evalcond[1]=(((r11*x2307))+cj0+(((-1.0)*gconst8*r10*x2304))+(((-1.0)*r12*x2303)));
evalcond[2]=((((-1.0)*gconst8*r00*x2304))+(((-1.0)*x2299))+((r01*x2307))+(((-1.0)*r02*x2303)));
evalcond[3]=(((r21*x2293*x2296))+x2298+x2302+(((-1.0)*r20*x2295*x2303))+((r22*x2306))+((r20*x2294))+((r21*x2301)));
evalcond[4]=((((-1.0)*r21*x2294*x2303))+x2297+((r20*x2308))+((r21*x2295))+(((-1.0)*x2305))+((r20*x2296))+(((-1.0)*r22*sj3*x2304)));
evalcond[5]=((((-1.0)*r00*x2295*x2303))+((cj0*x2297))+((r01*x2293*x2296))+((r02*x2306))+(((-1.0)*cj1*cj2*x2300))+((r00*x2294))+((r01*x2301)));
evalcond[6]=(((r12*x2306))+((sj0*x2297))+((r11*x2301))+((r10*x2294))+((r11*x2293*x2296))+(((-1.0)*r10*x2295*x2303))+(((-1.0)*cj1*cj2*x2299)));
evalcond[7]=((((-1.0)*x2300*x2302))+(((-1.0)*r02*sj3*x2304))+((r00*x2296))+(((-1.0)*x2298*x2300))+((r00*x2308))+((r01*x2295))+(((-1.0)*r01*x2294*x2303)));
evalcond[8]=((((-1.0)*r11*x2294*x2303))+(((-1.0)*r12*sj3*x2304))+((r10*x2308))+((r10*x2296))+(((-1.0)*x2298*x2299))+(((-1.0)*x2299*x2302))+((r11*x2295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2309=((-1.0)*r11);
IkReal x2311 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2311)==0){
continue;
}
IkReal x2310=pow(x2311,-0.5);
CheckValue<IkReal> x2312 = IKatan2WithCheck(IkReal(x2309),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2312.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2312.value))));
IkReal gconst10=(x2309*x2310);
IkReal gconst11=((1.0)*r10*x2310);
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2313.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2314=((-1.0)*r11);
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(x2314),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
IkReal x2315=((1.0)*(x2317.value));
IkReal x2316=x2310;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2315)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2315)));
IkReal gconst10=(x2314*x2316);
IkReal gconst11=((1.0)*r10*x2316);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2318=((-1.0)*r11);
CheckValue<IkReal> x2321 = IKatan2WithCheck(IkReal(x2318),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2321.valid){
continue;
}
IkReal x2319=((1.0)*(x2321.value));
IkReal x2320=x2310;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2319)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2319)));
IkReal gconst10=(x2318*x2320);
IkReal gconst11=((1.0)*r10*x2320);
IkReal x2322=r12*r12;
IkReal x2323=((1.0)*sj0);
IkReal x2324=(cj0*r02);
IkReal x2325=x2310;
j4eval[0]=((IKabs((((r12*x2324*x2325))+(((-1.0)*x2323*x2325))+((sj0*x2322*x2325)))))+(IKabs(((((-1.0)*r12*x2323))+(((-1.0)*x2324))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2326=((-1.0)*r11);
CheckValue<IkReal> x2329 = IKatan2WithCheck(IkReal(x2326),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2329.valid){
continue;
}
IkReal x2327=((1.0)*(x2329.value));
IkReal x2328=x2310;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2327)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2327)));
IkReal gconst10=(x2326*x2328);
IkReal gconst11=((1.0)*r10*x2328);
IkReal x2330=((1.0)*cj3);
CheckValue<IkReal> x2335=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2335.valid){
continue;
}
IkReal x2331=x2335.value;
IkReal x2332=(cj3*x2331);
IkReal x2333=(x2330*x2331);
IkReal x2334=((((-2.0)*r10*r11*r20*r21*x2332))+(((-1.0)*x2333*(r11*r11)*(r21*r21)))+(((-1.0)*x2330*(r22*r22)))+(((-1.0)*x2333*(r10*r10)*(r20*r20))));
j4eval[0]=x2334;
j4eval[1]=IKsign(x2334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2336=gconst10*gconst10;
IkReal x2337=r21*r21;
IkReal x2338=gconst11*gconst11;
IkReal x2339=r20*r20;
IkReal x2340=((1.0)*cj3);
IkReal x2341=(r20*sj3);
IkReal x2342=(gconst10*gconst11);
IkReal x2343=(cj2*sj1);
IkReal x2344=(gconst10*r21);
IkReal x2345=(cj1*sj2);
IkReal x2346=((1.0)*gconst11*r20);
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2340*(r22*r22)))+(((-1.0)*x2338*x2339*x2340))+(((-1.0)*x2336*x2337*x2340))+(((2.0)*cj3*r20*r21*x2342)))),-1);
if(!x2347.valid){
continue;
}
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x2343))+((r22*x2345))+((gconst10*r22*x2341)))),IkReal(((((-1.0)*x2345*x2346))+((sj3*x2337*x2342))+(((-1.0)*sj3*x2339*x2342))+((x2344*x2345))+((x2343*x2344))+(((-1.0)*x2343*x2346))+(((-1.0)*r21*x2338*x2341))+((r21*x2336*x2341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2347.value)))+(x2348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2349=IKsin(j4);
IkReal x2350=IKcos(j4);
IkReal x2351=(cj3*r10);
IkReal x2352=(gconst11*r20);
IkReal x2353=(gconst11*sj3);
IkReal x2354=(sj1*sj2);
IkReal x2355=(gconst11*r00);
IkReal x2356=(cj3*r11);
IkReal x2357=(gconst10*sj3);
IkReal x2358=(cj2*sj1);
IkReal x2359=(cj3*r01);
IkReal x2360=((1.0)*sj0);
IkReal x2361=(cj1*sj2);
IkReal x2362=(cj3*r21);
IkReal x2363=(cj3*gconst10);
IkReal x2364=((1.0)*cj0);
IkReal x2365=((1.0)*x2350);
IkReal x2366=((1.0)*x2349);
IkReal x2367=((1.0)*cj1*cj2);
IkReal x2368=(cj3*x2349);
IkReal x2369=(gconst10*x2349);
IkReal x2370=(gconst10*x2350);
evalcond[0]=((((-1.0)*r22*x2365))+((r21*x2369))+(((-1.0)*x2352*x2366)));
evalcond[1]=(((r11*x2369))+cj0+(((-1.0)*gconst11*r10*x2366))+(((-1.0)*r12*x2365)));
evalcond[2]=((((-1.0)*x2360))+(((-1.0)*x2355*x2366))+((r01*x2369))+(((-1.0)*r02*x2365)));
evalcond[3]=(x2361+x2358+((r22*x2368))+((r20*x2357))+((x2362*x2370))+((r21*x2353))+(((-1.0)*cj3*x2352*x2365)));
evalcond[4]=(((r20*x2363))+((gconst11*x2362))+(((-1.0)*r21*x2357*x2365))+(((-1.0)*r22*sj3*x2366))+x2354+(((-1.0)*x2367))+((sj3*x2350*x2352)));
evalcond[5]=(((cj0*x2354))+((r00*x2357))+((r01*x2353))+((r02*x2368))+(((-1.0)*cj1*cj2*x2364))+((x2359*x2370))+(((-1.0)*cj3*x2355*x2365)));
evalcond[6]=(((sj0*x2354))+((r12*x2368))+((r10*x2357))+((r11*x2353))+(((-1.0)*cj1*cj2*x2360))+(((-1.0)*gconst11*x2351*x2365))+((x2356*x2370)));
evalcond[7]=((((-1.0)*r01*x2357*x2365))+(((-1.0)*r02*sj3*x2366))+(((-1.0)*x2358*x2364))+((gconst11*x2359))+((r00*x2350*x2353))+(((-1.0)*x2361*x2364))+((r00*x2363)));
evalcond[8]=((((-1.0)*r12*sj3*x2366))+((gconst10*x2351))+(((-1.0)*x2358*x2360))+((r10*x2350*x2353))+((gconst11*x2356))+(((-1.0)*x2360*x2361))+(((-1.0)*r11*x2357*x2365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2371=((1.0)*sj0);
IkReal x2372=((1.0)*gconst10);
CheckValue<IkReal> x2373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2372))+(((-1.0)*gconst11*r21)))),-1);
if(!x2373.valid){
continue;
}
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2371)))),IkReal(((((-1.0)*cj0*r01*x2372))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x2371))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2373.value)))+(x2374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2375=IKsin(j4);
IkReal x2376=IKcos(j4);
IkReal x2377=(cj3*r10);
IkReal x2378=(gconst11*r20);
IkReal x2379=(gconst11*sj3);
IkReal x2380=(sj1*sj2);
IkReal x2381=(gconst11*r00);
IkReal x2382=(cj3*r11);
IkReal x2383=(gconst10*sj3);
IkReal x2384=(cj2*sj1);
IkReal x2385=(cj3*r01);
IkReal x2386=((1.0)*sj0);
IkReal x2387=(cj1*sj2);
IkReal x2388=(cj3*r21);
IkReal x2389=(cj3*gconst10);
IkReal x2390=((1.0)*cj0);
IkReal x2391=((1.0)*x2376);
IkReal x2392=((1.0)*x2375);
IkReal x2393=((1.0)*cj1*cj2);
IkReal x2394=(cj3*x2375);
IkReal x2395=(gconst10*x2375);
IkReal x2396=(gconst10*x2376);
evalcond[0]=((((-1.0)*x2378*x2392))+(((-1.0)*r22*x2391))+((r21*x2395)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x2392))+((r11*x2395))+(((-1.0)*r12*x2391)));
evalcond[2]=((((-1.0)*x2381*x2392))+(((-1.0)*r02*x2391))+((r01*x2395))+(((-1.0)*x2386)));
evalcond[3]=(x2384+x2387+((r20*x2383))+((r22*x2394))+(((-1.0)*cj3*x2378*x2391))+((x2388*x2396))+((r21*x2379)));
evalcond[4]=(((gconst11*x2388))+x2380+(((-1.0)*r22*sj3*x2392))+((r20*x2389))+(((-1.0)*x2393))+(((-1.0)*r21*x2383*x2391))+((sj3*x2376*x2378)));
evalcond[5]=(((x2385*x2396))+((r00*x2383))+((r02*x2394))+((cj0*x2380))+(((-1.0)*cj3*x2381*x2391))+(((-1.0)*cj1*cj2*x2390))+((r01*x2379)));
evalcond[6]=(((r12*x2394))+(((-1.0)*gconst11*x2377*x2391))+((x2382*x2396))+((r10*x2383))+(((-1.0)*cj1*cj2*x2386))+((sj0*x2380))+((r11*x2379)));
evalcond[7]=(((r00*x2376*x2379))+(((-1.0)*r01*x2383*x2391))+((gconst11*x2385))+((r00*x2389))+(((-1.0)*r02*sj3*x2392))+(((-1.0)*x2384*x2390))+(((-1.0)*x2387*x2390)));
evalcond[8]=(((r10*x2376*x2379))+((gconst11*x2382))+((gconst10*x2377))+(((-1.0)*x2386*x2387))+(((-1.0)*r12*sj3*x2392))+(((-1.0)*x2384*x2386))+(((-1.0)*r11*x2383*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2397=((1.0)*gconst11);
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x2397)))),-1);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x2397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2398.value)))+(x2399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2400=IKsin(j4);
IkReal x2401=IKcos(j4);
IkReal x2402=(cj3*r10);
IkReal x2403=(gconst11*r20);
IkReal x2404=(gconst11*sj3);
IkReal x2405=(sj1*sj2);
IkReal x2406=(gconst11*r00);
IkReal x2407=(cj3*r11);
IkReal x2408=(gconst10*sj3);
IkReal x2409=(cj2*sj1);
IkReal x2410=(cj3*r01);
IkReal x2411=((1.0)*sj0);
IkReal x2412=(cj1*sj2);
IkReal x2413=(cj3*r21);
IkReal x2414=(cj3*gconst10);
IkReal x2415=((1.0)*cj0);
IkReal x2416=((1.0)*x2401);
IkReal x2417=((1.0)*x2400);
IkReal x2418=((1.0)*cj1*cj2);
IkReal x2419=(cj3*x2400);
IkReal x2420=(gconst10*x2400);
IkReal x2421=(gconst10*x2401);
evalcond[0]=(((r21*x2420))+(((-1.0)*x2403*x2417))+(((-1.0)*r22*x2416)));
evalcond[1]=(cj0+(((-1.0)*r12*x2416))+(((-1.0)*gconst11*r10*x2417))+((r11*x2420)));
evalcond[2]=((((-1.0)*x2406*x2417))+(((-1.0)*r02*x2416))+(((-1.0)*x2411))+((r01*x2420)));
evalcond[3]=(((r22*x2419))+((x2413*x2421))+x2409+x2412+((r20*x2408))+(((-1.0)*cj3*x2403*x2416))+((r21*x2404)));
evalcond[4]=(((gconst11*x2413))+x2405+(((-1.0)*x2418))+((r20*x2414))+(((-1.0)*r21*x2408*x2416))+(((-1.0)*r22*sj3*x2417))+((sj3*x2401*x2403)));
evalcond[5]=(((r01*x2404))+((r00*x2408))+((cj0*x2405))+(((-1.0)*cj1*cj2*x2415))+((r02*x2419))+(((-1.0)*cj3*x2406*x2416))+((x2410*x2421)));
evalcond[6]=(((r10*x2408))+((x2407*x2421))+((r11*x2404))+(((-1.0)*gconst11*x2402*x2416))+(((-1.0)*cj1*cj2*x2411))+((sj0*x2405))+((r12*x2419)));
evalcond[7]=(((gconst11*x2410))+(((-1.0)*r01*x2408*x2416))+((r00*x2414))+((r00*x2401*x2404))+(((-1.0)*r02*sj3*x2417))+(((-1.0)*x2412*x2415))+(((-1.0)*x2409*x2415)));
evalcond[8]=((((-1.0)*r12*sj3*x2417))+(((-1.0)*r11*x2408*x2416))+(((-1.0)*x2411*x2412))+((r10*x2401*x2404))+((gconst10*x2402))+(((-1.0)*x2409*x2411))+((gconst11*x2407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2422=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2422;
j4eval[1]=IKsign(x2422);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2423=((1.0)*cj5);
IkReal x2424=((((-1.0)*r01*x2423))+(((-1.0)*r00*sj5)));
j4eval[0]=x2424;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2423))))));
j4eval[2]=IKsign(x2424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2425=cj5*cj5;
IkReal x2426=(cj3*r21);
IkReal x2427=(cj5*sj5);
IkReal x2428=((1.0)*cj3);
IkReal x2429=(((r10*x2426*x2427))+((r11*x2425*x2426))+((cj3*r11*r20*x2427))+(((-1.0)*r11*x2426))+(((-1.0)*r12*r22*x2428))+(((-1.0)*r10*r20*x2425*x2428)));
j4eval[0]=x2429;
j4eval[1]=IKsign(x2429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2430=cj5*cj5;
IkReal x2431=((1.0)*cj3);
IkReal x2432=(r10*r21);
IkReal x2433=(cj5*sj5);
IkReal x2434=(r11*r21);
IkReal x2435=(r11*r20);
IkReal x2436=(r22*sj3);
IkReal x2437=(r10*r20);
IkReal x2438=((1.0)*sj3*x2430);
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal((((r10*sj5*x2436))+((cj5*r11*x2436)))),IkReal((((sj3*x2433*x2434))+((sj3*x2432))+(((-1.0)*x2432*x2438))+(((-1.0)*x2435*x2438))+(((-1.0)*sj3*x2433*x2437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(IKsign((((cj3*x2430*x2434))+(((-1.0)*x2431*x2434))+(((-1.0)*r12*r22*x2431))+(((-1.0)*x2430*x2431*x2437))+((cj3*x2433*x2435))+((cj3*x2432*x2433)))),-1);
if(!x2440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2439.value)+(((1.5707963267949)*(x2440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2441=IKsin(j4);
IkReal x2442=IKcos(j4);
IkReal x2443=(sj1*sj2);
IkReal x2444=(cj5*sj3);
IkReal x2445=(cj5*r10);
IkReal x2446=(r00*sj5);
IkReal x2447=(r11*sj5);
IkReal x2448=(cj3*cj5);
IkReal x2449=((1.0)*cj1);
IkReal x2450=(cj3*sj5);
IkReal x2451=(r21*sj5);
IkReal x2452=(cj2*sj1);
IkReal x2453=(sj3*sj5);
IkReal x2454=(r01*sj5);
IkReal x2455=(cj2*x2449);
IkReal x2456=((1.0)*x2442);
IkReal x2457=((1.0)*x2441);
IkReal x2458=(cj3*x2441);
IkReal x2459=(cj3*x2442);
evalcond[0]=((((-1.0)*r22*x2456))+(((-1.0)*cj5*r20*x2457))+((x2441*x2451)));
evalcond[1]=((((-1.0)*cj5*r00*x2457))+(((-1.0)*r02*x2456))+((x2441*x2454)));
evalcond[2]=((1.0)+(((-1.0)*x2445*x2457))+(((-1.0)*r12*x2456))+((x2441*x2447)));
evalcond[3]=(((x2447*x2459))+((r10*x2453))+((r12*x2458))+((r11*x2444))+(((-1.0)*cj3*x2445*x2456)));
evalcond[4]=(((r10*x2450))+(((-1.0)*sj3*x2447*x2456))+(((-1.0)*r12*sj3*x2457))+((r11*x2448))+((r10*x2442*x2444)));
evalcond[5]=(x2452+((r22*x2458))+((cj1*sj2))+(((-1.0)*r20*x2448*x2456))+((r21*x2442*x2450))+((r20*x2453))+((r21*x2444)));
evalcond[6]=(((r02*x2458))+((sj3*x2446))+x2443+((r01*x2444))+((r01*x2442*x2450))+(((-1.0)*r00*x2448*x2456))+(((-1.0)*x2455)));
evalcond[7]=(x2443+((r20*x2442*x2444))+(((-1.0)*r22*sj3*x2457))+(((-1.0)*x2455))+((r20*x2450))+(((-1.0)*sj3*x2451*x2456))+((r21*x2448)));
evalcond[8]=(((r00*x2442*x2444))+(((-1.0)*r02*sj3*x2457))+((r01*x2448))+(((-1.0)*x2452))+(((-1.0)*r01*x2453*x2456))+(((-1.0)*sj2*x2449))+((cj3*x2446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2460=((1.0)*cj5);
CheckValue<IkReal> x2461 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2461.valid){
continue;
}
CheckValue<IkReal> x2462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2460))+(((-1.0)*r00*sj5)))),-1);
if(!x2462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2461.value)+(((1.5707963267949)*(x2462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2463=IKsin(j4);
IkReal x2464=IKcos(j4);
IkReal x2465=(sj1*sj2);
IkReal x2466=(cj5*sj3);
IkReal x2467=(cj5*r10);
IkReal x2468=(r00*sj5);
IkReal x2469=(r11*sj5);
IkReal x2470=(cj3*cj5);
IkReal x2471=((1.0)*cj1);
IkReal x2472=(cj3*sj5);
IkReal x2473=(r21*sj5);
IkReal x2474=(cj2*sj1);
IkReal x2475=(sj3*sj5);
IkReal x2476=(r01*sj5);
IkReal x2477=(cj2*x2471);
IkReal x2478=((1.0)*x2464);
IkReal x2479=((1.0)*x2463);
IkReal x2480=(cj3*x2463);
IkReal x2481=(cj3*x2464);
evalcond[0]=(((x2463*x2473))+(((-1.0)*r22*x2478))+(((-1.0)*cj5*r20*x2479)));
evalcond[1]=((((-1.0)*cj5*r00*x2479))+((x2463*x2476))+(((-1.0)*r02*x2478)));
evalcond[2]=((1.0)+(((-1.0)*x2467*x2479))+(((-1.0)*r12*x2478))+((x2463*x2469)));
evalcond[3]=(((x2469*x2481))+((r10*x2475))+((r11*x2466))+(((-1.0)*cj3*x2467*x2478))+((r12*x2480)));
evalcond[4]=(((r10*x2472))+(((-1.0)*r12*sj3*x2479))+(((-1.0)*sj3*x2469*x2478))+((r10*x2464*x2466))+((r11*x2470)));
evalcond[5]=(x2474+(((-1.0)*r20*x2470*x2478))+((r22*x2480))+((cj1*sj2))+((r21*x2466))+((r20*x2475))+((r21*x2464*x2472)));
evalcond[6]=(((r01*x2466))+x2465+((r02*x2480))+(((-1.0)*r00*x2470*x2478))+((r01*x2464*x2472))+(((-1.0)*x2477))+((sj3*x2468)));
evalcond[7]=((((-1.0)*r22*sj3*x2479))+x2465+((r20*x2464*x2466))+((r21*x2470))+(((-1.0)*x2477))+((r20*x2472))+(((-1.0)*sj3*x2473*x2478)));
evalcond[8]=((((-1.0)*r01*x2475*x2478))+((r00*x2464*x2466))+((cj3*x2468))+(((-1.0)*x2474))+((r01*x2470))+(((-1.0)*r02*sj3*x2479))+(((-1.0)*sj2*x2471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2482=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2482.valid){
continue;
}
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2482.value)))+(x2483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2484=IKsin(j4);
IkReal x2485=IKcos(j4);
IkReal x2486=(sj1*sj2);
IkReal x2487=(cj5*sj3);
IkReal x2488=(cj5*r10);
IkReal x2489=(r00*sj5);
IkReal x2490=(r11*sj5);
IkReal x2491=(cj3*cj5);
IkReal x2492=((1.0)*cj1);
IkReal x2493=(cj3*sj5);
IkReal x2494=(r21*sj5);
IkReal x2495=(cj2*sj1);
IkReal x2496=(sj3*sj5);
IkReal x2497=(r01*sj5);
IkReal x2498=(cj2*x2492);
IkReal x2499=((1.0)*x2485);
IkReal x2500=((1.0)*x2484);
IkReal x2501=(cj3*x2484);
IkReal x2502=(cj3*x2485);
evalcond[0]=(((x2484*x2494))+(((-1.0)*cj5*r20*x2500))+(((-1.0)*r22*x2499)));
evalcond[1]=(((x2484*x2497))+(((-1.0)*r02*x2499))+(((-1.0)*cj5*r00*x2500)));
evalcond[2]=((1.0)+((x2484*x2490))+(((-1.0)*x2488*x2500))+(((-1.0)*r12*x2499)));
evalcond[3]=((((-1.0)*cj3*x2488*x2499))+((r12*x2501))+((x2490*x2502))+((r11*x2487))+((r10*x2496)));
evalcond[4]=((((-1.0)*r12*sj3*x2500))+((r11*x2491))+(((-1.0)*sj3*x2490*x2499))+((r10*x2485*x2487))+((r10*x2493)));
evalcond[5]=(((r21*x2485*x2493))+x2495+((r22*x2501))+((cj1*sj2))+(((-1.0)*r20*x2491*x2499))+((r21*x2487))+((r20*x2496)));
evalcond[6]=(((r01*x2487))+((sj3*x2489))+x2486+((r02*x2501))+(((-1.0)*r00*x2491*x2499))+(((-1.0)*x2498))+((r01*x2485*x2493)));
evalcond[7]=((((-1.0)*r22*sj3*x2500))+x2486+(((-1.0)*x2498))+((r20*x2485*x2487))+((r21*x2491))+((r20*x2493))+(((-1.0)*sj3*x2494*x2499)));
evalcond[8]=((((-1.0)*x2495))+(((-1.0)*r01*x2496*x2499))+((cj3*x2489))+(((-1.0)*sj2*x2492))+((r00*x2485*x2487))+(((-1.0)*r02*sj3*x2500))+((r01*x2491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2503=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2503;
j4eval[1]=IKsign(x2503);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2504=((1.0)*cj5);
IkReal x2505=((((-1.0)*r20*sj5))+(((-1.0)*r21*x2504)));
j4eval[0]=x2505;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2504))))));
j4eval[2]=IKsign(x2505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2506=cj5*cj5;
IkReal x2507=(cj3*r21);
IkReal x2508=(cj5*sj5);
IkReal x2509=((1.0)*cj3);
IkReal x2510=(((r10*x2507*x2508))+(((-1.0)*r12*r22*x2509))+((cj3*r11*r20*x2508))+(((-1.0)*r10*r20*x2506*x2509))+((r11*x2506*x2507))+(((-1.0)*r11*x2507)));
j4eval[0]=x2510;
j4eval[1]=IKsign(x2510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2511=cj5*cj5;
IkReal x2512=((1.0)*cj3);
IkReal x2513=(r10*r21);
IkReal x2514=(cj5*sj5);
IkReal x2515=(r11*r21);
IkReal x2516=(r11*r20);
IkReal x2517=(r22*sj3);
IkReal x2518=(r10*r20);
IkReal x2519=((1.0)*sj3*x2511);
CheckValue<IkReal> x2520=IKPowWithIntegerCheck(IKsign((((cj3*x2511*x2515))+(((-1.0)*x2511*x2512*x2518))+((cj3*x2514*x2516))+(((-1.0)*r12*r22*x2512))+(((-1.0)*x2512*x2515))+((cj3*x2513*x2514)))),-1);
if(!x2520.valid){
continue;
}
CheckValue<IkReal> x2521 = IKatan2WithCheck(IkReal((((cj5*r11*x2517))+((r10*sj5*x2517)))),IkReal((((sj3*x2514*x2515))+(((-1.0)*x2513*x2519))+(((-1.0)*x2516*x2519))+((sj3*x2513))+(((-1.0)*sj3*x2514*x2518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2520.value)))+(x2521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2522=IKsin(j4);
IkReal x2523=IKcos(j4);
IkReal x2524=(cj2*sj1);
IkReal x2525=(cj1*sj2);
IkReal x2526=(cj5*sj3);
IkReal x2527=(cj5*r10);
IkReal x2528=(r00*sj5);
IkReal x2529=(sj1*sj2);
IkReal x2530=(r11*sj5);
IkReal x2531=(cj3*cj5);
IkReal x2532=(cj3*sj5);
IkReal x2533=(r21*sj5);
IkReal x2534=(cj1*cj2);
IkReal x2535=(sj3*sj5);
IkReal x2536=(r01*sj5);
IkReal x2537=((1.0)*x2523);
IkReal x2538=((1.0)*x2522);
IkReal x2539=(cj3*x2522);
IkReal x2540=(cj3*x2523);
IkReal x2541=(x2525+x2524);
evalcond[0]=((((-1.0)*cj5*r20*x2538))+(((-1.0)*r22*x2537))+((x2522*x2533)));
evalcond[1]=((((-1.0)*r02*x2537))+((x2522*x2536))+(((-1.0)*cj5*r00*x2538)));
evalcond[2]=((-1.0)+(((-1.0)*x2527*x2538))+(((-1.0)*r12*x2537))+((x2522*x2530)));
evalcond[3]=(((r10*x2535))+((r11*x2526))+((x2530*x2540))+(((-1.0)*cj3*x2527*x2537))+((r12*x2539)));
evalcond[4]=((((-1.0)*sj3*x2530*x2537))+((r10*x2532))+((r10*x2523*x2526))+((r11*x2531))+(((-1.0)*r12*sj3*x2538)));
evalcond[5]=(x2541+((r21*x2523*x2532))+((r20*x2535))+((r22*x2539))+(((-1.0)*r20*x2531*x2537))+((r21*x2526)));
evalcond[6]=(x2534+(((-1.0)*x2529))+((sj3*x2528))+((r01*x2526))+((r02*x2539))+((r01*x2523*x2532))+(((-1.0)*r00*x2531*x2537)));
evalcond[7]=(((r01*x2531))+(((-1.0)*r01*x2535*x2537))+x2541+((cj3*x2528))+(((-1.0)*r02*sj3*x2538))+((r00*x2523*x2526)));
evalcond[8]=(x2529+(((-1.0)*r22*sj3*x2538))+((r20*x2532))+((r21*x2531))+((r20*x2523*x2526))+(((-1.0)*sj3*x2533*x2537))+(((-1.0)*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2542=((1.0)*cj5);
CheckValue<IkReal> x2543 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2543.valid){
continue;
}
CheckValue<IkReal> x2544=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2542))+(((-1.0)*r20*sj5)))),-1);
if(!x2544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2543.value)+(((1.5707963267949)*(x2544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2545=IKsin(j4);
IkReal x2546=IKcos(j4);
IkReal x2547=(cj2*sj1);
IkReal x2548=(cj1*sj2);
IkReal x2549=(cj5*sj3);
IkReal x2550=(cj5*r10);
IkReal x2551=(r00*sj5);
IkReal x2552=(sj1*sj2);
IkReal x2553=(r11*sj5);
IkReal x2554=(cj3*cj5);
IkReal x2555=(cj3*sj5);
IkReal x2556=(r21*sj5);
IkReal x2557=(cj1*cj2);
IkReal x2558=(sj3*sj5);
IkReal x2559=(r01*sj5);
IkReal x2560=((1.0)*x2546);
IkReal x2561=((1.0)*x2545);
IkReal x2562=(cj3*x2545);
IkReal x2563=(cj3*x2546);
IkReal x2564=(x2547+x2548);
evalcond[0]=((((-1.0)*r22*x2560))+(((-1.0)*cj5*r20*x2561))+((x2545*x2556)));
evalcond[1]=((((-1.0)*r02*x2560))+((x2545*x2559))+(((-1.0)*cj5*r00*x2561)));
evalcond[2]=((-1.0)+(((-1.0)*x2550*x2561))+(((-1.0)*r12*x2560))+((x2545*x2553)));
evalcond[3]=(((r11*x2549))+((r12*x2562))+((r10*x2558))+((x2553*x2563))+(((-1.0)*cj3*x2550*x2560)));
evalcond[4]=(((r11*x2554))+(((-1.0)*sj3*x2553*x2560))+((r10*x2546*x2549))+(((-1.0)*r12*sj3*x2561))+((r10*x2555)));
evalcond[5]=(((r22*x2562))+x2564+((r21*x2549))+((r21*x2546*x2555))+((r20*x2558))+(((-1.0)*r20*x2554*x2560)));
evalcond[6]=(x2557+((r01*x2546*x2555))+(((-1.0)*x2552))+((sj3*x2551))+((r01*x2549))+(((-1.0)*r00*x2554*x2560))+((r02*x2562)));
evalcond[7]=((((-1.0)*r01*x2558*x2560))+x2564+(((-1.0)*r02*sj3*x2561))+((cj3*x2551))+((r00*x2546*x2549))+((r01*x2554)));
evalcond[8]=(x2552+(((-1.0)*x2557))+((r20*x2546*x2549))+((r20*x2555))+(((-1.0)*r22*sj3*x2561))+(((-1.0)*sj3*x2556*x2560))+((r21*x2554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2565.value)+(((1.5707963267949)*(x2566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2567=IKsin(j4);
IkReal x2568=IKcos(j4);
IkReal x2569=(cj2*sj1);
IkReal x2570=(cj1*sj2);
IkReal x2571=(cj5*sj3);
IkReal x2572=(cj5*r10);
IkReal x2573=(r00*sj5);
IkReal x2574=(sj1*sj2);
IkReal x2575=(r11*sj5);
IkReal x2576=(cj3*cj5);
IkReal x2577=(cj3*sj5);
IkReal x2578=(r21*sj5);
IkReal x2579=(cj1*cj2);
IkReal x2580=(sj3*sj5);
IkReal x2581=(r01*sj5);
IkReal x2582=((1.0)*x2568);
IkReal x2583=((1.0)*x2567);
IkReal x2584=(cj3*x2567);
IkReal x2585=(cj3*x2568);
IkReal x2586=(x2569+x2570);
evalcond[0]=(((x2567*x2578))+(((-1.0)*cj5*r20*x2583))+(((-1.0)*r22*x2582)));
evalcond[1]=(((x2567*x2581))+(((-1.0)*r02*x2582))+(((-1.0)*cj5*r00*x2583)));
evalcond[2]=((-1.0)+(((-1.0)*x2572*x2583))+((x2567*x2575))+(((-1.0)*r12*x2582)));
evalcond[3]=(((r11*x2571))+((r12*x2584))+((r10*x2580))+((x2575*x2585))+(((-1.0)*cj3*x2572*x2582)));
evalcond[4]=((((-1.0)*r12*sj3*x2583))+((r10*x2577))+((r11*x2576))+((r10*x2568*x2571))+(((-1.0)*sj3*x2575*x2582)));
evalcond[5]=(((r21*x2571))+((r22*x2584))+x2586+((r20*x2580))+(((-1.0)*r20*x2576*x2582))+((r21*x2568*x2577)));
evalcond[6]=(x2579+(((-1.0)*r00*x2576*x2582))+((sj3*x2573))+(((-1.0)*x2574))+((r01*x2571))+((r02*x2584))+((r01*x2568*x2577)));
evalcond[7]=(x2586+((cj3*x2573))+(((-1.0)*r02*sj3*x2583))+((r01*x2576))+((r00*x2568*x2571))+(((-1.0)*r01*x2580*x2582)));
evalcond[8]=(((r21*x2576))+x2574+(((-1.0)*x2579))+((r20*x2577))+((r20*x2568*x2571))+(((-1.0)*sj3*x2578*x2582))+(((-1.0)*r22*sj3*x2583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2587=((-1.0)*r00);
IkReal x2589 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2589)==0){
continue;
}
IkReal x2588=pow(x2589,-0.5);
CheckValue<IkReal> x2590 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2587),IKFAST_ATAN2_MAGTHRESH);
if(!x2590.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2590.value));
IkReal gconst13=(r01*x2588);
IkReal gconst14=(x2587*x2588);
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2591.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2592=((-1.0)*r00);
IkReal x2593=x2588;
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2592),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
IkReal x2594=((-1.0)*(x2595.value));
sj5=gconst13;
cj5=gconst14;
j5=x2594;
IkReal gconst12=x2594;
IkReal gconst13=(r01*x2593);
IkReal gconst14=(x2592*x2593);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2596=((1.0)*sj0);
IkReal x2597=((1.0)*cj0);
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2597))+(((-1.0)*r12*x2596)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x2596))+(((-1.0)*gconst13*r01*x2597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x2599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2598.value)+(((1.5707963267949)*(x2599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2600=IKsin(j4);
IkReal x2601=IKcos(j4);
IkReal x2602=((1.0)*r22);
IkReal x2603=((1.0)*r12);
IkReal x2604=(gconst13*sj3);
IkReal x2605=(gconst13*r01);
IkReal x2606=(sj1*sj2);
IkReal x2607=(gconst14*sj3);
IkReal x2608=(cj2*sj1);
IkReal x2609=((1.0)*sj0);
IkReal x2610=(cj3*gconst13);
IkReal x2611=(cj3*gconst14);
IkReal x2612=((1.0)*cj0);
IkReal x2613=((1.0)*gconst14);
IkReal x2614=(cj1*sj2);
IkReal x2615=(sj3*x2600);
IkReal x2616=((1.0)*cj1*cj2);
IkReal x2617=(cj3*x2601);
IkReal x2618=(cj3*x2600);
IkReal x2619=(gconst13*x2600);
IkReal x2620=((1.0)*x2601);
IkReal x2621=(x2600*x2613);
evalcond[0]=((((-1.0)*x2601*x2602))+((r21*x2619))+(((-1.0)*r20*x2621)));
evalcond[1]=((((-1.0)*x2601*x2603))+cj0+(((-1.0)*r10*x2621))+((r11*x2619)));
evalcond[2]=((((-1.0)*r00*x2621))+((x2600*x2605))+(((-1.0)*r02*x2620))+(((-1.0)*x2609)));
evalcond[3]=(((r20*x2604))+(((-1.0)*r20*x2611*x2620))+((r21*x2601*x2610))+((r21*x2607))+((r22*x2618))+x2608+x2614);
evalcond[4]=(((r20*x2610))+(((-1.0)*x2602*x2615))+((r20*x2601*x2607))+(((-1.0)*r21*x2604*x2620))+(((-1.0)*x2616))+((r21*x2611))+x2606);
evalcond[5]=((((-1.0)*cj1*cj2*x2612))+(((-1.0)*r00*x2611*x2620))+((r02*x2618))+((x2605*x2617))+((cj0*x2606))+((r01*x2607))+((r00*x2604)));
evalcond[6]=(((r10*x2604))+(((-1.0)*r10*x2611*x2620))+((sj0*x2606))+((r11*x2601*x2610))+((r12*x2618))+((r11*x2607))+(((-1.0)*cj1*cj2*x2609)));
evalcond[7]=(((r00*x2610))+((r01*x2611))+(((-1.0)*x2608*x2612))+((r00*x2601*x2607))+(((-1.0)*x2612*x2614))+(((-1.0)*r02*x2615))+(((-1.0)*r01*x2604*x2620)));
evalcond[8]=((((-1.0)*x2608*x2609))+(((-1.0)*x2609*x2614))+(((-1.0)*x2603*x2615))+((r11*x2611))+((r10*x2610))+((r10*x2601*x2607))+(((-1.0)*r11*x2604*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2622=((1.0)*gconst14);
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x2622)))),-1);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2622))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2623.value)))+(x2624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2625=IKsin(j4);
IkReal x2626=IKcos(j4);
IkReal x2627=((1.0)*r22);
IkReal x2628=((1.0)*r12);
IkReal x2629=(gconst13*sj3);
IkReal x2630=(gconst13*r01);
IkReal x2631=(sj1*sj2);
IkReal x2632=(gconst14*sj3);
IkReal x2633=(cj2*sj1);
IkReal x2634=((1.0)*sj0);
IkReal x2635=(cj3*gconst13);
IkReal x2636=(cj3*gconst14);
IkReal x2637=((1.0)*cj0);
IkReal x2638=((1.0)*gconst14);
IkReal x2639=(cj1*sj2);
IkReal x2640=(sj3*x2625);
IkReal x2641=((1.0)*cj1*cj2);
IkReal x2642=(cj3*x2626);
IkReal x2643=(cj3*x2625);
IkReal x2644=(gconst13*x2625);
IkReal x2645=((1.0)*x2626);
IkReal x2646=(x2625*x2638);
evalcond[0]=(((r21*x2644))+(((-1.0)*x2626*x2627))+(((-1.0)*r20*x2646)));
evalcond[1]=(((r11*x2644))+cj0+(((-1.0)*x2626*x2628))+(((-1.0)*r10*x2646)));
evalcond[2]=((((-1.0)*r00*x2646))+(((-1.0)*x2634))+(((-1.0)*r02*x2645))+((x2625*x2630)));
evalcond[3]=(((r20*x2629))+((r21*x2626*x2635))+((r21*x2632))+((r22*x2643))+(((-1.0)*r20*x2636*x2645))+x2639+x2633);
evalcond[4]=(((r20*x2626*x2632))+(((-1.0)*r21*x2629*x2645))+((r21*x2636))+((r20*x2635))+(((-1.0)*x2641))+(((-1.0)*x2627*x2640))+x2631);
evalcond[5]=(((r00*x2629))+(((-1.0)*r00*x2636*x2645))+((cj0*x2631))+((r02*x2643))+((x2630*x2642))+((r01*x2632))+(((-1.0)*cj1*cj2*x2637)));
evalcond[6]=(((r12*x2643))+((sj0*x2631))+(((-1.0)*r10*x2636*x2645))+((r11*x2632))+((r11*x2626*x2635))+(((-1.0)*cj1*cj2*x2634))+((r10*x2629)));
evalcond[7]=((((-1.0)*x2637*x2639))+((r01*x2636))+((r00*x2635))+((r00*x2626*x2632))+(((-1.0)*r01*x2629*x2645))+(((-1.0)*x2633*x2637))+(((-1.0)*r02*x2640)));
evalcond[8]=((((-1.0)*x2628*x2640))+((r10*x2626*x2632))+((r11*x2636))+(((-1.0)*r11*x2629*x2645))+((r10*x2635))+(((-1.0)*x2634*x2639))+(((-1.0)*x2633*x2634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2647=((-1.0)*r01);
IkReal x2649 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2649)==0){
continue;
}
IkReal x2648=pow(x2649,-0.5);
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal(x2647),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2650.value))));
IkReal gconst16=(x2647*x2648);
IkReal gconst17=((1.0)*r00*x2648);
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2651.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2652=((-1.0)*r01);
CheckValue<IkReal> x2655 = IKatan2WithCheck(IkReal(x2652),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2655.valid){
continue;
}
IkReal x2653=((1.0)*(x2655.value));
IkReal x2654=x2648;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2653)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2653)));
IkReal gconst16=(x2652*x2654);
IkReal gconst17=((1.0)*r00*x2654);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2656=((-1.0)*r01);
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(x2656),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
IkReal x2657=((1.0)*(x2659.value));
IkReal x2658=x2648;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2657)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2657)));
IkReal gconst16=(x2656*x2658);
IkReal gconst17=((1.0)*r00*x2658);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2660=((-1.0)*r01);
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(x2660),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
IkReal x2661=((1.0)*(x2663.value));
IkReal x2662=x2648;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2661)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2661)));
IkReal gconst16=(x2660*x2662);
IkReal gconst17=((1.0)*r00*x2662);
IkReal x2664=r02*r02;
IkReal x2665=(r12*sj0);
IkReal x2666=((1.0)*cj0);
IkReal x2667=x2648;
j4eval[0]=((IKabs(((((-1.0)*x2665))+(((-1.0)*r02*x2666)))))+(IKabs((((cj0*x2664*x2667))+((r02*x2665*x2667))+(((-1.0)*x2666*x2667))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2668=((1.0)*sj0);
IkReal x2669=((1.0)*cj0);
CheckValue<IkReal> x2670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x2670.valid){
continue;
}
CheckValue<IkReal> x2671 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2668))+(((-1.0)*r02*x2669)))),IkReal(((((-1.0)*gconst16*r11*x2668))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r01*x2669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2670.value)))+(x2671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2672=IKsin(j4);
IkReal x2673=IKcos(j4);
IkReal x2674=(cj3*gconst17);
IkReal x2675=(gconst16*r21);
IkReal x2676=(gconst17*sj3);
IkReal x2677=(gconst16*r20);
IkReal x2678=(sj1*sj2);
IkReal x2679=(gconst16*r10);
IkReal x2680=(cj2*sj1);
IkReal x2681=(gconst16*sj3);
IkReal x2682=((1.0)*cj0);
IkReal x2683=((1.0)*sj0);
IkReal x2684=(cj1*sj2);
IkReal x2685=((1.0)*x2673);
IkReal x2686=(gconst16*x2672);
IkReal x2687=(cj3*x2673);
IkReal x2688=(cj3*x2672);
IkReal x2689=((1.0)*cj1*cj2);
IkReal x2690=((1.0)*gconst17*x2672);
IkReal x2691=((1.0)*sj3*x2672);
evalcond[0]=(((x2672*x2675))+(((-1.0)*r22*x2685))+(((-1.0)*r20*x2690)));
evalcond[1]=((((-1.0)*r12*x2685))+((r11*x2686))+(((-1.0)*r10*x2690))+cj0);
evalcond[2]=((((-1.0)*r02*x2685))+((r01*x2686))+(((-1.0)*r00*x2690))+(((-1.0)*x2683)));
evalcond[3]=((((-1.0)*r20*x2674*x2685))+((r21*x2676))+((r22*x2688))+((sj3*x2677))+((x2675*x2687))+x2684+x2680);
evalcond[4]=(((r21*x2674))+((r20*x2673*x2676))+(((-1.0)*r22*x2691))+(((-1.0)*sj3*x2675*x2685))+(((-1.0)*x2689))+((cj3*x2677))+x2678);
evalcond[5]=(((r02*x2688))+(((-1.0)*cj1*cj2*x2682))+(((-1.0)*r00*x2674*x2685))+((r00*x2681))+((gconst16*r01*x2687))+((cj0*x2678))+((r01*x2676)));
evalcond[6]=(((sj0*x2678))+(((-1.0)*cj1*cj2*x2683))+((gconst16*r11*x2687))+(((-1.0)*r10*x2674*x2685))+((sj3*x2679))+((r12*x2688))+((r11*x2676)));
evalcond[7]=((((-1.0)*r02*x2691))+(((-1.0)*r01*x2681*x2685))+(((-1.0)*x2680*x2682))+(((-1.0)*x2682*x2684))+((r01*x2674))+((cj3*gconst16*r00))+((r00*x2673*x2676)));
evalcond[8]=((((-1.0)*x2683*x2684))+(((-1.0)*r11*x2681*x2685))+(((-1.0)*x2680*x2683))+((r10*x2673*x2676))+((cj3*x2679))+(((-1.0)*r12*x2691))+((r11*x2674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2692=((1.0)*gconst17);
CheckValue<IkReal> x2693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x2692)))),-1);
if(!x2693.valid){
continue;
}
CheckValue<IkReal> x2694 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x2692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2693.value)))+(x2694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2695=IKsin(j4);
IkReal x2696=IKcos(j4);
IkReal x2697=(cj3*gconst17);
IkReal x2698=(gconst16*r21);
IkReal x2699=(gconst17*sj3);
IkReal x2700=(gconst16*r20);
IkReal x2701=(sj1*sj2);
IkReal x2702=(gconst16*r10);
IkReal x2703=(cj2*sj1);
IkReal x2704=(gconst16*sj3);
IkReal x2705=((1.0)*cj0);
IkReal x2706=((1.0)*sj0);
IkReal x2707=(cj1*sj2);
IkReal x2708=((1.0)*x2696);
IkReal x2709=(gconst16*x2695);
IkReal x2710=(cj3*x2696);
IkReal x2711=(cj3*x2695);
IkReal x2712=((1.0)*cj1*cj2);
IkReal x2713=((1.0)*gconst17*x2695);
IkReal x2714=((1.0)*sj3*x2695);
evalcond[0]=((((-1.0)*r22*x2708))+(((-1.0)*r20*x2713))+((x2695*x2698)));
evalcond[1]=(((r11*x2709))+cj0+(((-1.0)*r10*x2713))+(((-1.0)*r12*x2708)));
evalcond[2]=(((r01*x2709))+(((-1.0)*r02*x2708))+(((-1.0)*x2706))+(((-1.0)*r00*x2713)));
evalcond[3]=(x2707+x2703+((r22*x2711))+((x2698*x2710))+((r21*x2699))+(((-1.0)*r20*x2697*x2708))+((sj3*x2700)));
evalcond[4]=(x2701+(((-1.0)*x2712))+((r21*x2697))+((cj3*x2700))+(((-1.0)*r22*x2714))+((r20*x2696*x2699))+(((-1.0)*sj3*x2698*x2708)));
evalcond[5]=(((r00*x2704))+(((-1.0)*r00*x2697*x2708))+((r02*x2711))+(((-1.0)*cj1*cj2*x2705))+((cj0*x2701))+((r01*x2699))+((gconst16*r01*x2710)));
evalcond[6]=(((r12*x2711))+((sj0*x2701))+((gconst16*r11*x2710))+(((-1.0)*cj1*cj2*x2706))+(((-1.0)*r10*x2697*x2708))+((sj3*x2702))+((r11*x2699)));
evalcond[7]=((((-1.0)*r02*x2714))+(((-1.0)*x2705*x2707))+(((-1.0)*r01*x2704*x2708))+((r01*x2697))+((r00*x2696*x2699))+((cj3*gconst16*r00))+(((-1.0)*x2703*x2705)));
evalcond[8]=((((-1.0)*r11*x2704*x2708))+((r10*x2696*x2699))+(((-1.0)*x2706*x2707))+((cj3*x2702))+((r11*x2697))+(((-1.0)*r12*x2714))+(((-1.0)*x2703*x2706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2715=((1.0)*gconst17);
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2715))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
CheckValue<IkReal> x2717=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x2715)))),-1);
if(!x2717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2716.value)+(((1.5707963267949)*(x2717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2718=IKsin(j4);
IkReal x2719=IKcos(j4);
IkReal x2720=(cj3*gconst17);
IkReal x2721=(gconst16*r21);
IkReal x2722=(gconst17*sj3);
IkReal x2723=(gconst16*r20);
IkReal x2724=(sj1*sj2);
IkReal x2725=(gconst16*r10);
IkReal x2726=(cj2*sj1);
IkReal x2727=(gconst16*sj3);
IkReal x2728=((1.0)*cj0);
IkReal x2729=((1.0)*sj0);
IkReal x2730=(cj1*sj2);
IkReal x2731=((1.0)*x2719);
IkReal x2732=(gconst16*x2718);
IkReal x2733=(cj3*x2719);
IkReal x2734=(cj3*x2718);
IkReal x2735=((1.0)*cj1*cj2);
IkReal x2736=((1.0)*gconst17*x2718);
IkReal x2737=((1.0)*sj3*x2718);
evalcond[0]=(((x2718*x2721))+(((-1.0)*r22*x2731))+(((-1.0)*r20*x2736)));
evalcond[1]=(cj0+(((-1.0)*r12*x2731))+(((-1.0)*r10*x2736))+((r11*x2732)));
evalcond[2]=(((r01*x2732))+(((-1.0)*r02*x2731))+(((-1.0)*x2729))+(((-1.0)*r00*x2736)));
evalcond[3]=(x2730+x2726+((r22*x2734))+((x2721*x2733))+((r21*x2722))+(((-1.0)*r20*x2720*x2731))+((sj3*x2723)));
evalcond[4]=(x2724+(((-1.0)*sj3*x2721*x2731))+((cj3*x2723))+((r20*x2719*x2722))+((r21*x2720))+(((-1.0)*r22*x2737))+(((-1.0)*x2735)));
evalcond[5]=(((r02*x2734))+(((-1.0)*r00*x2720*x2731))+((gconst16*r01*x2733))+((r00*x2727))+((r01*x2722))+(((-1.0)*cj1*cj2*x2728))+((cj0*x2724)));
evalcond[6]=((((-1.0)*r10*x2720*x2731))+((gconst16*r11*x2733))+((r12*x2734))+((r11*x2722))+(((-1.0)*cj1*cj2*x2729))+((sj0*x2724))+((sj3*x2725)));
evalcond[7]=((((-1.0)*r01*x2727*x2731))+(((-1.0)*x2728*x2730))+(((-1.0)*x2726*x2728))+((r01*x2720))+(((-1.0)*r02*x2737))+((r00*x2719*x2722))+((cj3*gconst16*r00)));
evalcond[8]=(((r10*x2719*x2722))+(((-1.0)*x2726*x2729))+((cj3*x2725))+((r11*x2720))+(((-1.0)*r12*x2737))+(((-1.0)*r11*x2727*x2731))+(((-1.0)*x2729*x2730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2738=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2738;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2739=((1.0)*cj5);
IkReal x2740=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2739)));
j4eval[0]=x2740;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2739))))));
j4eval[2]=IKsign(x2740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2741=cj5*cj5;
IkReal x2742=(cj3*r01);
IkReal x2743=(cj5*sj5);
IkReal x2744=((1.0)*cj3);
IkReal x2745=((((-1.0)*r21*x2742))+((r20*x2742*x2743))+((cj3*r00*r21*x2743))+((r21*x2741*x2742))+(((-1.0)*r02*r22*x2744))+(((-1.0)*r00*r20*x2741*x2744)));
j4eval[0]=x2745;
j4eval[1]=IKsign(x2745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2746=cj5*cj5;
IkReal x2747=(cj3*r20);
IkReal x2748=(r21*sj3);
IkReal x2749=((1.0)*cj3);
IkReal x2750=(r01*r21);
IkReal x2751=(r01*sj3);
IkReal x2752=(r00*sj5);
IkReal x2753=(cj5*r01*sj5);
IkReal x2754=((1.0)*x2746);
CheckValue<IkReal> x2755 = IKatan2WithCheck(IkReal((((cj5*r22*x2751))+((r22*sj3*x2752)))),IkReal(((((-1.0)*r20*x2751*x2754))+(((-1.0)*r00*x2748*x2754))+((x2748*x2753))+((r00*x2748))+(((-1.0)*cj5*r20*sj3*x2752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x2752))+((cj3*x2746*x2750))+(((-1.0)*r02*r22*x2749))+(((-1.0)*x2749*x2750))+((x2747*x2753))+(((-1.0)*r00*x2747*x2754)))),-1);
if(!x2756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2755.value)+(((1.5707963267949)*(x2756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2757=IKsin(j4);
IkReal x2758=IKcos(j4);
IkReal x2759=(sj1*sj2);
IkReal x2760=(r11*sj5);
IkReal x2761=(cj5*r10);
IkReal x2762=(cj5*r01);
IkReal x2763=(cj5*r00);
IkReal x2764=((1.0)*cj1);
IkReal x2765=(cj3*sj5);
IkReal x2766=(r21*sj5);
IkReal x2767=(cj5*sj3);
IkReal x2768=(sj3*sj5);
IkReal x2769=(cj2*sj1);
IkReal x2770=(r01*sj5);
IkReal x2771=(cj3*cj5);
IkReal x2772=(cj5*r20);
IkReal x2773=(cj2*x2764);
IkReal x2774=((1.0)*x2758);
IkReal x2775=((1.0)*x2757);
IkReal x2776=(cj3*x2758);
IkReal x2777=(sj3*x2758);
IkReal x2778=(cj3*x2757);
evalcond[0]=(((x2757*x2766))+(((-1.0)*x2772*x2775))+(((-1.0)*r22*x2774)));
evalcond[1]=(((x2757*x2760))+(((-1.0)*r12*x2774))+(((-1.0)*x2761*x2775)));
evalcond[2]=((-1.0)+(((-1.0)*x2763*x2775))+((x2757*x2770))+(((-1.0)*r02*x2774)));
evalcond[3]=(((r00*x2768))+((r01*x2758*x2765))+((sj3*x2762))+(((-1.0)*cj3*x2763*x2774))+((r02*x2778)));
evalcond[4]=(((x2763*x2777))+((r00*x2765))+((cj3*x2762))+(((-1.0)*r02*sj3*x2775))+(((-1.0)*r01*x2768*x2774)));
evalcond[5]=(x2769+((r22*x2778))+((cj1*sj2))+((r20*x2768))+(((-1.0)*r20*x2771*x2774))+((r21*x2758*x2765))+((r21*x2767)));
evalcond[6]=(x2759+((r10*x2768))+(((-1.0)*x2773))+(((-1.0)*cj3*x2761*x2774))+((x2760*x2776))+((r12*x2778))+((r11*x2767)));
evalcond[7]=(x2759+((r20*x2758*x2767))+((r20*x2765))+(((-1.0)*x2773))+((r21*x2771))+(((-1.0)*r22*sj3*x2775))+(((-1.0)*sj3*x2766*x2774)));
evalcond[8]=((((-1.0)*sj3*x2760*x2774))+(((-1.0)*x2769))+((r11*x2771))+((x2761*x2777))+(((-1.0)*r12*sj3*x2775))+((r10*x2765))+(((-1.0)*sj2*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2779=((1.0)*cj5);
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2779)))),-1);
if(!x2781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2780.value)+(((1.5707963267949)*(x2781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2782=IKsin(j4);
IkReal x2783=IKcos(j4);
IkReal x2784=(sj1*sj2);
IkReal x2785=(r11*sj5);
IkReal x2786=(cj5*r10);
IkReal x2787=(cj5*r01);
IkReal x2788=(cj5*r00);
IkReal x2789=((1.0)*cj1);
IkReal x2790=(cj3*sj5);
IkReal x2791=(r21*sj5);
IkReal x2792=(cj5*sj3);
IkReal x2793=(sj3*sj5);
IkReal x2794=(cj2*sj1);
IkReal x2795=(r01*sj5);
IkReal x2796=(cj3*cj5);
IkReal x2797=(cj5*r20);
IkReal x2798=(cj2*x2789);
IkReal x2799=((1.0)*x2783);
IkReal x2800=((1.0)*x2782);
IkReal x2801=(cj3*x2783);
IkReal x2802=(sj3*x2783);
IkReal x2803=(cj3*x2782);
evalcond[0]=(((x2782*x2791))+(((-1.0)*r22*x2799))+(((-1.0)*x2797*x2800)));
evalcond[1]=(((x2782*x2785))+(((-1.0)*x2786*x2800))+(((-1.0)*r12*x2799)));
evalcond[2]=((-1.0)+(((-1.0)*x2788*x2800))+((x2782*x2795))+(((-1.0)*r02*x2799)));
evalcond[3]=(((r02*x2803))+(((-1.0)*cj3*x2788*x2799))+((sj3*x2787))+((r00*x2793))+((r01*x2783*x2790)));
evalcond[4]=((((-1.0)*r01*x2793*x2799))+((cj3*x2787))+((x2788*x2802))+((r00*x2790))+(((-1.0)*r02*sj3*x2800)));
evalcond[5]=(x2794+((r21*x2783*x2790))+((r21*x2792))+((cj1*sj2))+(((-1.0)*r20*x2796*x2799))+((r22*x2803))+((r20*x2793)));
evalcond[6]=(x2784+((r12*x2803))+(((-1.0)*x2798))+(((-1.0)*cj3*x2786*x2799))+((x2785*x2801))+((r11*x2792))+((r10*x2793)));
evalcond[7]=(x2784+(((-1.0)*x2798))+((r21*x2796))+((r20*x2783*x2792))+(((-1.0)*sj3*x2791*x2799))+((r20*x2790))+(((-1.0)*r22*sj3*x2800)));
evalcond[8]=((((-1.0)*sj2*x2789))+(((-1.0)*sj3*x2785*x2799))+((r11*x2796))+(((-1.0)*x2794))+(((-1.0)*r12*sj3*x2800))+((r10*x2790))+((x2786*x2802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2804.value)))+(x2805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(sj1*sj2);
IkReal x2809=(r11*sj5);
IkReal x2810=(cj5*r10);
IkReal x2811=(cj5*r01);
IkReal x2812=(cj5*r00);
IkReal x2813=((1.0)*cj1);
IkReal x2814=(cj3*sj5);
IkReal x2815=(r21*sj5);
IkReal x2816=(cj5*sj3);
IkReal x2817=(sj3*sj5);
IkReal x2818=(cj2*sj1);
IkReal x2819=(r01*sj5);
IkReal x2820=(cj3*cj5);
IkReal x2821=(cj5*r20);
IkReal x2822=(cj2*x2813);
IkReal x2823=((1.0)*x2807);
IkReal x2824=((1.0)*x2806);
IkReal x2825=(cj3*x2807);
IkReal x2826=(sj3*x2807);
IkReal x2827=(cj3*x2806);
evalcond[0]=((((-1.0)*x2821*x2824))+(((-1.0)*r22*x2823))+((x2806*x2815)));
evalcond[1]=((((-1.0)*x2810*x2824))+(((-1.0)*r12*x2823))+((x2806*x2809)));
evalcond[2]=((-1.0)+(((-1.0)*x2812*x2824))+(((-1.0)*r02*x2823))+((x2806*x2819)));
evalcond[3]=(((r00*x2817))+((r02*x2827))+(((-1.0)*cj3*x2812*x2823))+((r01*x2807*x2814))+((sj3*x2811)));
evalcond[4]=(((r00*x2814))+(((-1.0)*r02*sj3*x2824))+(((-1.0)*r01*x2817*x2823))+((x2812*x2826))+((cj3*x2811)));
evalcond[5]=(((cj1*sj2))+((r21*x2816))+((r21*x2807*x2814))+((r22*x2827))+(((-1.0)*r20*x2820*x2823))+x2818+((r20*x2817)));
evalcond[6]=(((r10*x2817))+(((-1.0)*cj3*x2810*x2823))+((r11*x2816))+((x2809*x2825))+(((-1.0)*x2822))+x2808+((r12*x2827)));
evalcond[7]=((((-1.0)*r22*sj3*x2824))+(((-1.0)*sj3*x2815*x2823))+((r21*x2820))+(((-1.0)*x2822))+x2808+((r20*x2814))+((r20*x2807*x2816)));
evalcond[8]=(((r10*x2814))+(((-1.0)*x2818))+(((-1.0)*r12*sj3*x2824))+(((-1.0)*sj2*x2813))+(((-1.0)*sj3*x2809*x2823))+((x2810*x2826))+((r11*x2820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2828=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2828;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2829=((1.0)*cj5);
IkReal x2830=((((-1.0)*r21*x2829))+(((-1.0)*r20*sj5)));
j4eval[0]=x2830;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2829))+((r11*sj5))))));
j4eval[2]=IKsign(x2830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2831=cj5*cj5;
IkReal x2832=(cj3*r01);
IkReal x2833=(cj5*sj5);
IkReal x2834=((1.0)*cj3);
IkReal x2835=((((-1.0)*r02*r22*x2834))+(((-1.0)*r21*x2832))+((cj3*r00*r21*x2833))+((r21*x2831*x2832))+(((-1.0)*r00*r20*x2831*x2834))+((r20*x2832*x2833)));
j4eval[0]=x2835;
j4eval[1]=IKsign(x2835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2836=cj5*cj5;
IkReal x2837=(cj3*r20);
IkReal x2838=(r21*sj3);
IkReal x2839=((1.0)*cj3);
IkReal x2840=(r01*r21);
IkReal x2841=(r01*sj3);
IkReal x2842=(r00*sj5);
IkReal x2843=(cj5*r01*sj5);
IkReal x2844=((1.0)*x2836);
CheckValue<IkReal> x2845 = IKatan2WithCheck(IkReal((((cj5*r22*x2841))+((r22*sj3*x2842)))),IkReal((((x2838*x2843))+(((-1.0)*r20*x2841*x2844))+(((-1.0)*cj5*r20*sj3*x2842))+(((-1.0)*r00*x2838*x2844))+((r00*x2838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2845.valid){
continue;
}
CheckValue<IkReal> x2846=IKPowWithIntegerCheck(IKsign((((x2837*x2843))+(((-1.0)*r02*r22*x2839))+(((-1.0)*x2839*x2840))+((cj3*x2836*x2840))+(((-1.0)*r00*x2837*x2844))+((cj3*cj5*r21*x2842)))),-1);
if(!x2846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2845.value)+(((1.5707963267949)*(x2846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2847=IKsin(j4);
IkReal x2848=IKcos(j4);
IkReal x2849=(cj2*sj1);
IkReal x2850=(cj1*sj2);
IkReal x2851=(r11*sj5);
IkReal x2852=(cj5*r10);
IkReal x2853=(sj1*sj2);
IkReal x2854=(cj5*r01);
IkReal x2855=(cj5*r00);
IkReal x2856=(cj3*sj5);
IkReal x2857=(r21*sj5);
IkReal x2858=(cj1*cj2);
IkReal x2859=(cj5*sj3);
IkReal x2860=(sj3*sj5);
IkReal x2861=(r01*sj5);
IkReal x2862=(cj3*cj5);
IkReal x2863=(cj5*r20);
IkReal x2864=((1.0)*x2848);
IkReal x2865=((1.0)*x2847);
IkReal x2866=(cj3*x2848);
IkReal x2867=(sj3*x2848);
IkReal x2868=(cj3*x2847);
IkReal x2869=(x2849+x2850);
evalcond[0]=(((x2847*x2857))+(((-1.0)*r22*x2864))+(((-1.0)*x2863*x2865)));
evalcond[1]=((((-1.0)*r12*x2864))+(((-1.0)*x2852*x2865))+((x2847*x2851)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2864))+(((-1.0)*x2855*x2865))+((x2847*x2861)));
evalcond[3]=(((r00*x2860))+((sj3*x2854))+((r02*x2868))+(((-1.0)*cj3*x2855*x2864))+((r01*x2848*x2856)));
evalcond[4]=(((cj3*x2854))+(((-1.0)*r02*sj3*x2865))+((x2855*x2867))+(((-1.0)*r01*x2860*x2864))+((r00*x2856)));
evalcond[5]=(((r21*x2859))+((r21*x2848*x2856))+((r22*x2868))+(((-1.0)*r20*x2862*x2864))+((r20*x2860))+x2869);
evalcond[6]=(((x2851*x2866))+((r11*x2859))+((r10*x2860))+(((-1.0)*cj3*x2852*x2864))+((r12*x2868))+(((-1.0)*x2853))+x2858);
evalcond[7]=(((x2852*x2867))+(((-1.0)*sj3*x2851*x2864))+((r11*x2862))+x2869+(((-1.0)*r12*sj3*x2865))+((r10*x2856)));
evalcond[8]=((((-1.0)*sj3*x2857*x2864))+(((-1.0)*r22*sj3*x2865))+((r20*x2856))+((r21*x2862))+(((-1.0)*x2858))+x2853+((r20*x2848*x2859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2870=((1.0)*cj5);
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2870))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2870))+(((-1.0)*r20*sj5)))),-1);
if(!x2872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2871.value)+(((1.5707963267949)*(x2872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2873=IKsin(j4);
IkReal x2874=IKcos(j4);
IkReal x2875=(cj2*sj1);
IkReal x2876=(cj1*sj2);
IkReal x2877=(r11*sj5);
IkReal x2878=(cj5*r10);
IkReal x2879=(sj1*sj2);
IkReal x2880=(cj5*r01);
IkReal x2881=(cj5*r00);
IkReal x2882=(cj3*sj5);
IkReal x2883=(r21*sj5);
IkReal x2884=(cj1*cj2);
IkReal x2885=(cj5*sj3);
IkReal x2886=(sj3*sj5);
IkReal x2887=(r01*sj5);
IkReal x2888=(cj3*cj5);
IkReal x2889=(cj5*r20);
IkReal x2890=((1.0)*x2874);
IkReal x2891=((1.0)*x2873);
IkReal x2892=(cj3*x2874);
IkReal x2893=(sj3*x2874);
IkReal x2894=(cj3*x2873);
IkReal x2895=(x2876+x2875);
evalcond[0]=((((-1.0)*r22*x2890))+(((-1.0)*x2889*x2891))+((x2873*x2883)));
evalcond[1]=((((-1.0)*x2878*x2891))+((x2873*x2877))+(((-1.0)*r12*x2890)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2890))+((x2873*x2887))+(((-1.0)*x2881*x2891)));
evalcond[3]=(((sj3*x2880))+((r01*x2874*x2882))+((r00*x2886))+(((-1.0)*cj3*x2881*x2890))+((r02*x2894)));
evalcond[4]=(((cj3*x2880))+(((-1.0)*r02*sj3*x2891))+((r00*x2882))+(((-1.0)*r01*x2886*x2890))+((x2881*x2893)));
evalcond[5]=(((r20*x2886))+((r22*x2894))+((r21*x2885))+((r21*x2874*x2882))+x2895+(((-1.0)*r20*x2888*x2890)));
evalcond[6]=((((-1.0)*x2879))+((r11*x2885))+((r12*x2894))+((r10*x2886))+(((-1.0)*cj3*x2878*x2890))+x2884+((x2877*x2892)));
evalcond[7]=((((-1.0)*r12*sj3*x2891))+(((-1.0)*sj3*x2877*x2890))+((r11*x2888))+((x2878*x2893))+((r10*x2882))+x2895);
evalcond[8]=(((r20*x2882))+((r20*x2874*x2885))+(((-1.0)*r22*sj3*x2891))+((r21*x2888))+(((-1.0)*x2884))+(((-1.0)*sj3*x2883*x2890))+x2879);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2896.value)+(((1.5707963267949)*(x2897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2898=IKsin(j4);
IkReal x2899=IKcos(j4);
IkReal x2900=(cj2*sj1);
IkReal x2901=(cj1*sj2);
IkReal x2902=(r11*sj5);
IkReal x2903=(cj5*r10);
IkReal x2904=(sj1*sj2);
IkReal x2905=(cj5*r01);
IkReal x2906=(cj5*r00);
IkReal x2907=(cj3*sj5);
IkReal x2908=(r21*sj5);
IkReal x2909=(cj1*cj2);
IkReal x2910=(cj5*sj3);
IkReal x2911=(sj3*sj5);
IkReal x2912=(r01*sj5);
IkReal x2913=(cj3*cj5);
IkReal x2914=(cj5*r20);
IkReal x2915=((1.0)*x2899);
IkReal x2916=((1.0)*x2898);
IkReal x2917=(cj3*x2899);
IkReal x2918=(sj3*x2899);
IkReal x2919=(cj3*x2898);
IkReal x2920=(x2901+x2900);
evalcond[0]=((((-1.0)*x2914*x2916))+((x2898*x2908))+(((-1.0)*r22*x2915)));
evalcond[1]=((((-1.0)*r12*x2915))+((x2898*x2902))+(((-1.0)*x2903*x2916)));
evalcond[2]=((1.0)+((x2898*x2912))+(((-1.0)*x2906*x2916))+(((-1.0)*r02*x2915)));
evalcond[3]=(((r00*x2911))+((sj3*x2905))+((r01*x2899*x2907))+((r02*x2919))+(((-1.0)*cj3*x2906*x2915)));
evalcond[4]=(((cj3*x2905))+((r00*x2907))+(((-1.0)*r01*x2911*x2915))+(((-1.0)*r02*sj3*x2916))+((x2906*x2918)));
evalcond[5]=(((r20*x2911))+(((-1.0)*r20*x2913*x2915))+((r21*x2910))+((r21*x2899*x2907))+((r22*x2919))+x2920);
evalcond[6]=(((r11*x2910))+((r12*x2919))+(((-1.0)*cj3*x2903*x2915))+(((-1.0)*x2904))+((x2902*x2917))+x2909+((r10*x2911)));
evalcond[7]=(((r11*x2913))+((r10*x2907))+(((-1.0)*r12*sj3*x2916))+(((-1.0)*sj3*x2902*x2915))+((x2903*x2918))+x2920);
evalcond[8]=((((-1.0)*r22*sj3*x2916))+((r21*x2913))+((r20*x2907))+((r20*x2899*x2910))+(((-1.0)*x2909))+(((-1.0)*sj3*x2908*x2915))+x2904);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2921=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2921);
rxp1_1=(px*r21);
rxp1_2=(r11*x2921);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2922=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2922);
rxp1_1=(px*r21);
rxp1_2=(r11*x2922);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2923=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x2923))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2923)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2924=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2924);
rxp1_1=(px*r21);
rxp1_2=(r11*x2924);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2926=IKPowWithIntegerCheck(r02,-1);
if(!x2926.valid){
continue;
}
IkReal x2925=x2926.value;
CheckValue<IkReal> x2927=IKPowWithIntegerCheck(cj3,-1);
if(!x2927.valid){
continue;
}
if( IKabs((x2925*(x2927.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x2925)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2925*(x2927.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x2925))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2925*(x2927.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x2925));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2928=IKsin(j4);
IkReal x2929=IKcos(j4);
IkReal x2930=(cj5*r10);
IkReal x2931=(sj1*sj2);
IkReal x2932=(cj5*sj3);
IkReal x2933=(r11*sj5);
IkReal x2934=(cj3*cj5);
IkReal x2935=(cj3*sj5);
IkReal x2936=(r21*sj5);
IkReal x2937=(cj2*sj1);
IkReal x2938=((1.0)*sj0);
IkReal x2939=((1.0)*cj0);
IkReal x2940=(sj3*sj5);
IkReal x2941=(cj1*sj2);
IkReal x2942=((1.0)*cj1*cj2);
IkReal x2943=((1.0)*x2928);
IkReal x2944=(r20*x2929);
IkReal x2945=(cj3*x2929);
IkReal x2946=(sj3*x2929);
evalcond[0]=((((-1.0)*x2938))+(((-1.0)*r02*x2929)));
evalcond[1]=(((x2928*x2936))+(((-1.0)*cj5*r20*x2943)));
evalcond[2]=(((x2928*x2933))+cj0+(((-1.0)*x2930*x2943)));
evalcond[3]=((((-1.0)*cj1*cj2*x2939))+((cj0*x2931))+((cj3*r02*x2928)));
evalcond[4]=((((-1.0)*x2939*x2941))+(((-1.0)*r02*sj3*x2943))+(((-1.0)*x2937*x2939)));
evalcond[5]=(((r21*x2929*x2935))+((r21*x2932))+(((-1.0)*x2934*x2944))+x2937+x2941+((r20*x2940)));
evalcond[6]=(((x2932*x2944))+((r21*x2934))+(((-1.0)*x2942))+((r20*x2935))+x2931+(((-1.0)*x2936*x2946)));
evalcond[7]=((((-1.0)*cj1*cj2*x2938))+((r10*x2940))+((x2933*x2945))+(((-1.0)*x2930*x2945))+((sj0*x2931))+((r11*x2932)));
evalcond[8]=(((r10*x2935))+(((-1.0)*x2933*x2946))+((x2930*x2946))+((r11*x2934))+(((-1.0)*x2938*x2941))+(((-1.0)*x2937*x2938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2947=((1.0)*sj3);
IkReal x2948=((1.0)*cj5);
CheckValue<IkReal> x2949=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x2948))),-1);
if(!x2949.valid){
continue;
}
CheckValue<IkReal> x2950=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x2948))+((cj3*r21*sj5))),-1);
if(!x2950.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2949.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2950.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x2947))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x2947)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2949.value)))+IKsqr(((x2950.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x2947))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x2947))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2949.value)), ((x2950.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x2947))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x2947))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2951=IKsin(j4);
IkReal x2952=IKcos(j4);
IkReal x2953=(cj5*r10);
IkReal x2954=(sj1*sj2);
IkReal x2955=(cj5*sj3);
IkReal x2956=(r11*sj5);
IkReal x2957=(cj3*cj5);
IkReal x2958=(cj3*sj5);
IkReal x2959=(r21*sj5);
IkReal x2960=(cj2*sj1);
IkReal x2961=((1.0)*sj0);
IkReal x2962=((1.0)*cj0);
IkReal x2963=(sj3*sj5);
IkReal x2964=(cj1*sj2);
IkReal x2965=((1.0)*cj1*cj2);
IkReal x2966=((1.0)*x2951);
IkReal x2967=(r20*x2952);
IkReal x2968=(cj3*x2952);
IkReal x2969=(sj3*x2952);
evalcond[0]=((((-1.0)*x2961))+(((-1.0)*r02*x2952)));
evalcond[1]=(((x2951*x2959))+(((-1.0)*cj5*r20*x2966)));
evalcond[2]=(((x2951*x2956))+cj0+(((-1.0)*x2953*x2966)));
evalcond[3]=((((-1.0)*cj1*cj2*x2962))+((cj0*x2954))+((cj3*r02*x2951)));
evalcond[4]=((((-1.0)*x2962*x2964))+(((-1.0)*x2960*x2962))+(((-1.0)*r02*sj3*x2966)));
evalcond[5]=(((r21*x2955))+((r21*x2952*x2958))+((r20*x2963))+(((-1.0)*x2957*x2967))+x2964+x2960);
evalcond[6]=(((x2955*x2967))+((r21*x2957))+(((-1.0)*x2965))+((r20*x2958))+(((-1.0)*x2959*x2969))+x2954);
evalcond[7]=(((sj0*x2954))+((x2956*x2968))+(((-1.0)*cj1*cj2*x2961))+((r10*x2963))+(((-1.0)*x2953*x2968))+((r11*x2955)));
evalcond[8]=(((r10*x2958))+(((-1.0)*x2961*x2964))+(((-1.0)*x2956*x2969))+(((-1.0)*x2960*x2961))+((r11*x2957))+((x2953*x2969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2970=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2970.valid){
continue;
}
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(r02,-1);
if(!x2971.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2970.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x2971.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2970.value)))+IKsqr(((-1.0)*sj0*(x2971.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2970.value)), ((-1.0)*sj0*(x2971.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2972=IKsin(j4);
IkReal x2973=IKcos(j4);
IkReal x2974=(cj5*r10);
IkReal x2975=(sj1*sj2);
IkReal x2976=(cj5*sj3);
IkReal x2977=(r11*sj5);
IkReal x2978=(cj3*cj5);
IkReal x2979=(cj3*sj5);
IkReal x2980=(r21*sj5);
IkReal x2981=(cj2*sj1);
IkReal x2982=((1.0)*sj0);
IkReal x2983=((1.0)*cj0);
IkReal x2984=(sj3*sj5);
IkReal x2985=(cj1*sj2);
IkReal x2986=((1.0)*cj1*cj2);
IkReal x2987=((1.0)*x2972);
IkReal x2988=(r20*x2973);
IkReal x2989=(cj3*x2973);
IkReal x2990=(sj3*x2973);
evalcond[0]=((((-1.0)*x2982))+(((-1.0)*r02*x2973)));
evalcond[1]=((((-1.0)*cj5*r20*x2987))+((x2972*x2980)));
evalcond[2]=(cj0+(((-1.0)*x2974*x2987))+((x2972*x2977)));
evalcond[3]=(((cj3*r02*x2972))+((cj0*x2975))+(((-1.0)*cj1*cj2*x2983)));
evalcond[4]=((((-1.0)*x2981*x2983))+(((-1.0)*r02*sj3*x2987))+(((-1.0)*x2983*x2985)));
evalcond[5]=(((r21*x2973*x2979))+(((-1.0)*x2978*x2988))+((r20*x2984))+x2981+x2985+((r21*x2976)));
evalcond[6]=(((x2976*x2988))+(((-1.0)*x2986))+(((-1.0)*x2980*x2990))+((r20*x2979))+x2975+((r21*x2978)));
evalcond[7]=(((x2977*x2989))+(((-1.0)*x2974*x2989))+((r11*x2976))+((sj0*x2975))+((r10*x2984))+(((-1.0)*cj1*cj2*x2982)));
evalcond[8]=((((-1.0)*x2982*x2985))+(((-1.0)*x2981*x2982))+((r10*x2979))+((x2974*x2990))+((r11*x2978))+(((-1.0)*x2977*x2990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2991=((1.0)*sj0);
IkReal x2992=((1.0)*cj0);
CheckValue<IkReal> x2993 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2991))+(((-1.0)*r02*x2992)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2991))+(((-1.0)*r01*sj5*x2992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2993.valid){
continue;
}
CheckValue<IkReal> x2994=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2993.value)+(((1.5707963267949)*(x2994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2995=IKsin(j4);
IkReal x2996=IKcos(j4);
IkReal x2997=(r11*sj5);
IkReal x2998=(cj5*r10);
IkReal x2999=(sj1*sj2);
IkReal x3000=(cj5*sj3);
IkReal x3001=((1.0)*sj0);
IkReal x3002=(cj3*cj5);
IkReal x3003=(cj3*sj5);
IkReal x3004=(r21*sj5);
IkReal x3005=(cj2*sj1);
IkReal x3006=(sj3*sj5);
IkReal x3007=(r01*sj5);
IkReal x3008=((1.0)*cj0);
IkReal x3009=(cj1*sj2);
IkReal x3010=((1.0)*x2996);
IkReal x3011=((1.0)*x2995);
IkReal x3012=(cj3*x2996);
IkReal x3013=((1.0)*cj1*cj2);
IkReal x3014=(cj3*x2995);
evalcond[0]=((((-1.0)*r22*x3010))+((x2995*x3004))+(((-1.0)*cj5*r20*x3011)));
evalcond[1]=(((x2995*x2997))+cj0+(((-1.0)*r12*x3010))+(((-1.0)*x2998*x3011)));
evalcond[2]=((((-1.0)*r02*x3010))+((x2995*x3007))+(((-1.0)*x3001))+(((-1.0)*cj5*r00*x3011)));
evalcond[3]=(((r21*x2996*x3003))+x3005+x3009+((r22*x3014))+((r20*x3006))+(((-1.0)*r20*x3002*x3010))+((r21*x3000)));
evalcond[4]=(((r20*x2996*x3000))+(((-1.0)*r22*sj3*x3011))+(((-1.0)*x3013))+((r20*x3003))+(((-1.0)*sj3*x3004*x3010))+((r21*x3002))+x2999);
evalcond[5]=(((r01*x3000))+((cj0*x2999))+((r00*x3006))+(((-1.0)*cj1*cj2*x3008))+(((-1.0)*r00*x3002*x3010))+((r01*x2996*x3003))+((r02*x3014)));
evalcond[6]=(((x2997*x3012))+(((-1.0)*cj3*x2998*x3010))+((sj0*x2999))+(((-1.0)*cj1*cj2*x3001))+((r10*x3006))+((r12*x3014))+((r11*x3000)));
evalcond[7]=(((r01*x3002))+((r00*x3003))+(((-1.0)*r02*sj3*x3011))+(((-1.0)*r01*x3006*x3010))+((r00*x2996*x3000))+(((-1.0)*x3005*x3008))+(((-1.0)*x3008*x3009)));
evalcond[8]=((((-1.0)*r12*sj3*x3011))+((sj3*x2996*x2998))+((r10*x3003))+((r11*x3002))+(((-1.0)*sj3*x2997*x3010))+(((-1.0)*x3001*x3009))+(((-1.0)*x3001*x3005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3015=((1.0)*cj5);
CheckValue<IkReal> x3016 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3015)))),-1);
if(!x3017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3016.value)+(((1.5707963267949)*(x3017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3018=IKsin(j4);
IkReal x3019=IKcos(j4);
IkReal x3020=(r11*sj5);
IkReal x3021=(cj5*r10);
IkReal x3022=(sj1*sj2);
IkReal x3023=(cj5*sj3);
IkReal x3024=((1.0)*sj0);
IkReal x3025=(cj3*cj5);
IkReal x3026=(cj3*sj5);
IkReal x3027=(r21*sj5);
IkReal x3028=(cj2*sj1);
IkReal x3029=(sj3*sj5);
IkReal x3030=(r01*sj5);
IkReal x3031=((1.0)*cj0);
IkReal x3032=(cj1*sj2);
IkReal x3033=((1.0)*x3019);
IkReal x3034=((1.0)*x3018);
IkReal x3035=(cj3*x3019);
IkReal x3036=((1.0)*cj1*cj2);
IkReal x3037=(cj3*x3018);
evalcond[0]=((((-1.0)*cj5*r20*x3034))+(((-1.0)*r22*x3033))+((x3018*x3027)));
evalcond[1]=(cj0+(((-1.0)*x3021*x3034))+(((-1.0)*r12*x3033))+((x3018*x3020)));
evalcond[2]=(((x3018*x3030))+(((-1.0)*x3024))+(((-1.0)*r02*x3033))+(((-1.0)*cj5*r00*x3034)));
evalcond[3]=(x3032+x3028+(((-1.0)*r20*x3025*x3033))+((r20*x3029))+((r21*x3023))+((r22*x3037))+((r21*x3019*x3026)));
evalcond[4]=(x3022+((r20*x3026))+(((-1.0)*r22*sj3*x3034))+(((-1.0)*sj3*x3027*x3033))+((r20*x3019*x3023))+((r21*x3025))+(((-1.0)*x3036)));
evalcond[5]=(((r02*x3037))+((r01*x3019*x3026))+(((-1.0)*r00*x3025*x3033))+((r00*x3029))+((r01*x3023))+((cj0*x3022))+(((-1.0)*cj1*cj2*x3031)));
evalcond[6]=(((r10*x3029))+((r11*x3023))+((sj0*x3022))+((r12*x3037))+(((-1.0)*cj1*cj2*x3024))+(((-1.0)*cj3*x3021*x3033))+((x3020*x3035)));
evalcond[7]=((((-1.0)*r02*sj3*x3034))+((r00*x3019*x3023))+(((-1.0)*r01*x3029*x3033))+(((-1.0)*x3028*x3031))+((r00*x3026))+(((-1.0)*x3031*x3032))+((r01*x3025)));
evalcond[8]=(((r10*x3026))+(((-1.0)*x3024*x3032))+((r11*x3025))+(((-1.0)*r12*sj3*x3034))+(((-1.0)*x3024*x3028))+((sj3*x3019*x3021))+(((-1.0)*sj3*x3020*x3033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3038=((1.0)*cj5);
CheckValue<IkReal> x3039 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3039.valid){
continue;
}
CheckValue<IkReal> x3040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3038))+(((-1.0)*r00*sj5)))),-1);
if(!x3040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3039.value)+(((1.5707963267949)*(x3040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3041=IKsin(j4);
IkReal x3042=IKcos(j4);
IkReal x3043=(r11*sj5);
IkReal x3044=(cj5*r10);
IkReal x3045=(sj1*sj2);
IkReal x3046=(cj5*sj3);
IkReal x3047=((1.0)*sj0);
IkReal x3048=(cj3*cj5);
IkReal x3049=(cj3*sj5);
IkReal x3050=(r21*sj5);
IkReal x3051=(cj2*sj1);
IkReal x3052=(sj3*sj5);
IkReal x3053=(r01*sj5);
IkReal x3054=((1.0)*cj0);
IkReal x3055=(cj1*sj2);
IkReal x3056=((1.0)*x3042);
IkReal x3057=((1.0)*x3041);
IkReal x3058=(cj3*x3042);
IkReal x3059=((1.0)*cj1*cj2);
IkReal x3060=(cj3*x3041);
evalcond[0]=((((-1.0)*cj5*r20*x3057))+((x3041*x3050))+(((-1.0)*r22*x3056)));
evalcond[1]=(cj0+(((-1.0)*x3044*x3057))+(((-1.0)*r12*x3056))+((x3041*x3043)));
evalcond[2]=((((-1.0)*x3047))+((x3041*x3053))+(((-1.0)*r02*x3056))+(((-1.0)*cj5*r00*x3057)));
evalcond[3]=(((r21*x3046))+((r22*x3060))+((r21*x3042*x3049))+x3055+x3051+(((-1.0)*r20*x3048*x3056))+((r20*x3052)));
evalcond[4]=(((r21*x3048))+x3045+(((-1.0)*r22*sj3*x3057))+(((-1.0)*sj3*x3050*x3056))+((r20*x3049))+(((-1.0)*x3059))+((r20*x3042*x3046)));
evalcond[5]=((((-1.0)*r00*x3048*x3056))+((r00*x3052))+((r01*x3042*x3049))+((r02*x3060))+(((-1.0)*cj1*cj2*x3054))+((cj0*x3045))+((r01*x3046)));
evalcond[6]=((((-1.0)*cj1*cj2*x3047))+((x3043*x3058))+((r10*x3052))+(((-1.0)*cj3*x3044*x3056))+((r12*x3060))+((sj0*x3045))+((r11*x3046)));
evalcond[7]=((((-1.0)*r01*x3052*x3056))+(((-1.0)*x3051*x3054))+((r00*x3042*x3046))+(((-1.0)*x3054*x3055))+(((-1.0)*r02*sj3*x3057))+((r00*x3049))+((r01*x3048)));
evalcond[8]=((((-1.0)*x3047*x3055))+(((-1.0)*x3047*x3051))+((sj3*x3042*x3044))+((r10*x3049))+(((-1.0)*r12*sj3*x3057))+(((-1.0)*sj3*x3043*x3056))+((r11*x3048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3061=cj5*cj5;
IkReal x3062=r21*r21;
IkReal x3063=r20*r20;
IkReal x3064=(r20*r21);
IkReal x3065=((1.0)*cj3);
IkReal x3066=((1.0)*cj5);
IkReal x3067=(cj1*sj2);
IkReal x3068=(cj5*sj5);
IkReal x3069=(sj3*sj5);
IkReal x3070=(cj2*sj1);
IkReal x3071=(r21*sj5);
CheckValue<IkReal> x3072 = IKatan2WithCheck(IkReal((((r20*r22*x3069))+((r22*x3067))+((cj5*r21*r22*sj3))+((r22*x3070)))),IkReal((((sj3*x3064))+((sj3*x3062*x3068))+(((-1.0)*x3063*x3066*x3069))+((x3070*x3071))+(((-1.0)*r20*x3066*x3070))+(((-1.0)*r20*x3066*x3067))+((x3067*x3071))+(((-2.0)*sj3*x3061*x3064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3072.valid){
continue;
}
CheckValue<IkReal> x3073=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x3064*x3068))+(((-1.0)*x3062*x3065))+(((-1.0)*x3061*x3063*x3065))+((cj3*x3061*x3062))+(((-1.0)*x3065*(r22*r22))))),-1);
if(!x3073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3072.value)+(((1.5707963267949)*(x3073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3074=IKsin(j4);
IkReal x3075=IKcos(j4);
IkReal x3076=(cj3*r21);
IkReal x3077=(r21*sj5);
IkReal x3078=(r20*sj5);
IkReal x3079=(cj5*r20);
IkReal x3080=((1.0)*x3075);
IkReal x3081=((1.0)*x3074);
evalcond[0]=((((-1.0)*x3079*x3081))+(((-1.0)*r22*x3080))+((x3074*x3077)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x3079*x3080))+((cj3*r22*x3074))+((sj5*x3075*x3076))+((sj3*x3078)));
evalcond[2]=((((-1.0)*sj3*x3077*x3080))+((cj5*x3076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x3081))+((sj3*x3075*x3079))+((cj3*x3078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3082=(cj5*sj4);
IkReal x3083=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3082))+((r01*x3083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3083))+((r10*x3082))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3082))+((r01*x3083))))+IKsqr(((((-1.0)*r11*x3083))+((r10*x3082))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3082))+((r01*x3083))), ((((-1.0)*r11*x3083))+((r10*x3082))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3084=IKcos(j0);
IkReal x3085=IKsin(j0);
IkReal x3086=(r02*sj4);
IkReal x3087=(sj4*sj5);
IkReal x3088=((1.0)*sj3);
IkReal x3089=(r12*sj4);
IkReal x3090=((0.571)*sj1);
IkReal x3091=(cj4*cj5);
IkReal x3092=(r00*sj3);
IkReal x3093=((1.0)*cj1);
IkReal x3094=(cj3*r10);
IkReal x3095=(cj4*sj5);
IkReal x3096=(cj5*r01);
IkReal x3097=((0.571)*cj2);
IkReal x3098=(r10*sj3);
IkReal x3099=(cj5*r11);
IkReal x3100=((1.0)*sj1);
IkReal x3101=(r00*sj5);
IkReal x3102=((1.0)*r00);
IkReal x3103=(cj5*sj4);
IkReal x3104=((1.0)*cj4);
IkReal x3105=(sj2*x3084);
IkReal x3106=(cj1*x3085);
IkReal x3107=(sj2*x3085);
IkReal x3108=(cj2*x3084);
IkReal x3109=(cj1*x3084);
IkReal x3110=(cj2*x3085);
evalcond[0]=(x3084+((r11*x3087))+(((-1.0)*r10*x3103))+(((-1.0)*r12*x3104)));
evalcond[1]=((((-1.0)*x3085))+(((-1.0)*x3102*x3103))+((r01*x3087))+(((-1.0)*r02*x3104)));
evalcond[2]=((((-0.12)*x3096))+(((0.613)*x3109))+(((-0.174)*x3085))+((x3097*x3109))+(((-1.0)*x3090*x3105))+(((-1.0)*px))+(((-0.12)*x3101)));
evalcond[3]=((((-0.12)*x3099))+(((0.613)*x3106))+((x3097*x3106))+(((-1.0)*x3090*x3107))+(((-0.12)*r10*sj5))+(((-1.0)*py))+(((0.174)*x3084)));
evalcond[4]=(((cj3*x3086))+((sj3*x3096))+((sj1*x3105))+((sj5*x3092))+(((-1.0)*x3093*x3108))+((cj3*r01*x3095))+(((-1.0)*cj3*x3091*x3102)));
evalcond[5]=(((cj3*x3089))+(((-1.0)*x3093*x3110))+((cj3*r11*x3095))+(((-1.0)*x3091*x3094))+((sj3*x3099))+((sj1*x3107))+((sj5*x3098)));
evalcond[6]=((((-1.0)*x3093*x3105))+((cj3*x3101))+(((-1.0)*r01*x3088*x3095))+((x3091*x3092))+(((-1.0)*x3100*x3108))+((cj3*x3096))+(((-1.0)*x3086*x3088)));
evalcond[7]=(((sj5*x3094))+(((-1.0)*x3093*x3107))+(((-1.0)*r11*x3088*x3095))+((x3091*x3098))+((cj3*x3099))+(((-1.0)*x3100*x3110))+(((-1.0)*x3088*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3111=cj5*cj5;
IkReal x3112=r21*r21;
IkReal x3113=r20*r20;
IkReal x3114=(r20*r21);
IkReal x3115=(sj1*sj2);
IkReal x3116=(r21*sj5);
IkReal x3117=(cj1*cj2);
IkReal x3118=(cj5*r20);
IkReal x3119=(cj5*sj5);
IkReal x3120=(cj3*r22);
IkReal x3121=(sj3*x3112);
CheckValue<IkReal> x3122=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x3121+(((-1.0)*x3111*x3121))+(((-2.0)*sj3*x3114*x3119))+((sj3*x3111*x3113)))),-1);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123 = IKatan2WithCheck(IkReal((((r20*sj5*x3120))+((r22*x3115))+(((-1.0)*r22*x3117))+((cj5*r21*x3120)))),IkReal(((((-2.0)*cj3*x3111*x3114))+((cj3*x3114))+(((-1.0)*cj3*x3113*x3119))+(((-1.0)*x3116*x3117))+((cj3*x3112*x3119))+(((-1.0)*x3115*x3118))+((x3115*x3116))+((x3117*x3118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3122.value)))+(x3123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3124=IKsin(j4);
IkReal x3125=IKcos(j4);
IkReal x3126=(cj3*r21);
IkReal x3127=(r21*sj5);
IkReal x3128=(r20*sj5);
IkReal x3129=(cj5*r20);
IkReal x3130=((1.0)*x3125);
IkReal x3131=((1.0)*x3124);
evalcond[0]=(((x3124*x3127))+(((-1.0)*r22*x3130))+(((-1.0)*x3129*x3131)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x3124))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x3128))+(((-1.0)*cj3*x3129*x3130))+((sj5*x3125*x3126)));
evalcond[2]=((((-1.0)*r22*sj3*x3131))+((cj3*x3128))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x3126))+(((-1.0)*sj3*x3127*x3130))+((sj3*x3125*x3129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3132=(cj5*sj4);
IkReal x3133=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x3133))+(((-1.0)*r00*x3132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3133))+((r10*x3132))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x3133))+(((-1.0)*r00*x3132))))+IKsqr(((((-1.0)*r11*x3133))+((r10*x3132))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x3133))+(((-1.0)*r00*x3132))), ((((-1.0)*r11*x3133))+((r10*x3132))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3134=IKcos(j0);
IkReal x3135=IKsin(j0);
IkReal x3136=(r02*sj4);
IkReal x3137=(sj4*sj5);
IkReal x3138=((1.0)*sj3);
IkReal x3139=(r12*sj4);
IkReal x3140=((0.571)*sj1);
IkReal x3141=(cj4*cj5);
IkReal x3142=(r00*sj3);
IkReal x3143=((1.0)*cj1);
IkReal x3144=(cj3*r10);
IkReal x3145=(cj4*sj5);
IkReal x3146=(cj5*r01);
IkReal x3147=((0.571)*cj2);
IkReal x3148=(r10*sj3);
IkReal x3149=(cj5*r11);
IkReal x3150=((1.0)*sj1);
IkReal x3151=(r00*sj5);
IkReal x3152=((1.0)*r00);
IkReal x3153=(cj5*sj4);
IkReal x3154=((1.0)*cj4);
IkReal x3155=(sj2*x3134);
IkReal x3156=(cj1*x3135);
IkReal x3157=(sj2*x3135);
IkReal x3158=(cj2*x3134);
IkReal x3159=(cj1*x3134);
IkReal x3160=(cj2*x3135);
evalcond[0]=(x3134+(((-1.0)*r10*x3153))+((r11*x3137))+(((-1.0)*r12*x3154)));
evalcond[1]=(((r01*x3137))+(((-1.0)*x3135))+(((-1.0)*r02*x3154))+(((-1.0)*x3152*x3153)));
evalcond[2]=(((x3147*x3159))+(((-0.174)*x3135))+(((-0.12)*x3146))+(((-1.0)*x3140*x3155))+(((-1.0)*px))+(((-0.12)*x3151))+(((0.613)*x3159)));
evalcond[3]=(((x3147*x3156))+(((-0.12)*r10*sj5))+(((0.174)*x3134))+(((-0.12)*x3149))+(((-1.0)*x3140*x3157))+(((-1.0)*py))+(((0.613)*x3156)));
evalcond[4]=(((sj5*x3142))+(((-1.0)*cj3*x3141*x3152))+((sj3*x3146))+(((-1.0)*x3143*x3158))+((cj3*x3136))+((sj1*x3155))+((cj3*r01*x3145)));
evalcond[5]=(((sj5*x3148))+(((-1.0)*x3141*x3144))+((sj3*x3149))+(((-1.0)*x3143*x3160))+((cj3*r11*x3145))+((cj3*x3139))+((sj1*x3157)));
evalcond[6]=((((-1.0)*x3150*x3158))+(((-1.0)*x3143*x3155))+(((-1.0)*x3136*x3138))+((cj3*x3151))+((cj3*x3146))+(((-1.0)*r01*x3138*x3145))+((x3141*x3142)));
evalcond[7]=(((sj5*x3144))+(((-1.0)*x3150*x3160))+(((-1.0)*x3138*x3139))+(((-1.0)*x3143*x3157))+((cj3*x3149))+(((-1.0)*r11*x3138*x3145))+((x3141*x3148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur10e (5063accfb7939496bf6e9a66b9d18189)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
