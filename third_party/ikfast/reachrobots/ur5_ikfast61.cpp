/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-08-26 21:44:25.220099
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.39225)*x0);
x13=((0.09465)*x0);
x14=((1.0)*x11);
x15=((0.09465)*x11);
x16=((1.0)*x6);
x17=((0.0823)*x5);
x18=((0.0823)*x6);
x19=((1.0)*x8);
x20=((0.39225)*x2);
x21=((0.425)*x1);
x22=((1.0)*x0);
x23=((1.0)*x5);
x24=(x1*x3);
x25=(x11*x8);
x26=(x11*x4);
x27=(x1*x2);
x28=(x3*x4);
x29=(x0*x10);
x30=(x2*x4);
x31=(x10*x14);
x32=(x22*x24);
x33=(x14*x24);
x34=(x27+x28);
x35=((((-1.0)*x30))+(((1.0)*x24)));
x36=(x34*x5);
x37=(x35*x6);
x38=((((-1.0)*x32))+((x0*x30)));
x39=((((-1.0)*x33))+((x2*x26)));
x40=(x22*((x27+x28)));
x41=(x14*((x27+x28)));
x42=(((x35*x5))+((x6*(((((-1.0)*x27))+(((-1.0)*x28)))))));
x43=(((x40*x6))+((x38*x5)));
x44=(((x41*x6))+((x39*x5)));
x45=(((x16*(((((-1.0)*x32))+((x22*x30))))))+(((-1.0)*x23*x40)));
x46=(((x16*(((((-1.0)*x33))+((x14*x30))))))+(((-1.0)*x23*x41)));
eerot[0]=(((x9*(((((-1.0)*x19*x43))+x31))))+((x45*x7)));
eerot[1]=(((x7*(((((-1.0)*x31))+((x43*x8))))))+((x45*x9)));
eerot[2]=(((x10*x43))+x25);
eetrans[0]=(((x5*((((x13*x28))+((x13*x27))))))+(((0.10915)*x11))+((x10*((((x17*x38))+((x18*x40))))))+(((-1.0)*x0*x21))+(((-1.0)*x12*x24))+((x6*(((((-1.0)*x13*x30))+((x13*x24))))))+((x12*x30))+(((0.0823)*x25)));
eerot[3]=(((x46*x7))+((x9*(((((-1.0)*x19*x44))+(((-1.0)*x10*x22)))))));
eerot[4]=(((x46*x9))+((x7*((x29+((x44*x8)))))));
eerot[5]=(((x10*x44))+(((-1.0)*x0*x19)));
eetrans[1]=((((-0.0823)*x0*x8))+((x5*((((x15*x27))+((x15*x28))))))+((x10*((((x17*x39))+((x18*x41))))))+(((-0.10915)*x0))+(((-0.39225)*x11*x24))+((x6*((((x15*x24))+(((-1.0)*x15*x30))))))+(((-1.0)*x11*x21))+((x20*x26)));
eerot[6]=(((x42*x7))+((x8*x9*((x37+x36)))));
eerot[7]=(((x42*x9))+((x7*x8*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x16*x35))+(((-1.0)*x23*x34)))));
eetrans[2]=((0.089159)+(((-1.0)*x1*x20))+((x5*(((((-0.09465)*x24))+(((0.09465)*x30))))))+(((-0.425)*x4))+((x10*(((((-1.0)*x18*x35))+(((-1.0)*x17*x34))))))+((x6*(((((0.09465)*x28))+(((0.09465)*x27))))))+(((-0.39225)*x28)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((0.0823)*r02))+(((-1.0)*px)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((0.0823)*r12))+(((-1.0)*py)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+pz+(((-0.0823)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x50=((0.1893)*npx);
IkReal x51=((0.1893)*npy);
IkReal x52=((0.09465)*r22);
IkReal x53=((0.09465)*r21);
IkReal x54=((-0.09465)*r20);
IkReal x55=((-1.0)*r20);
IkReal x56=((-1.0)*rxp0_2);
IkReal x57=((-0.09465)*r21);
IkReal x58=((-1.0)*r21);
IkReal x59=((-1.0)*rxp1_2);
IkReal x60=((-1.0)*npx);
IkReal x61=((-1.0)*r22);
IkReal x62=((-1.0)*npz);
matrixinvcoeffs[0]=x54;
matrixinvcoeffs[1]=x50;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x55;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x56;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x54;
matrixinvcoeffs[19]=x50;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x55;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x56;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x51;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x58;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x59;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x51;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x58;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x59;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x61;
matrixinvcoeffs[76]=x52;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x62;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x52;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x59;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x57;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x59;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x53;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x55;
matrixinvcoeffs[133]=x60;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x55;
matrixinvcoeffs[151]=x60;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x54;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x61;
matrixinvcoeffs[165]=x62;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x52;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x61;
matrixinvcoeffs[183]=x62;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x58;
matrixinvcoeffs[204]=x53;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x59;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x53;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x60;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x54;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x55;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x54;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x56;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x63=pz*pz;
IkReal x64=pp*pp;
IkReal x65=((0.1893)*pz);
IkReal x66=((1.7)*pz);
IkReal x67=(gclwh15_9*npx);
IkReal x68=(gclwh6_11*r21);
IkReal x69=(pp*r22);
IkReal x70=((0.00702803935125)*r21);
IkReal x71=(gclwh5_9*npz);
IkReal x72=(gclwh8_11*r20);
IkReal x73=(npy*pz);
IkReal x74=((3.60823078949063e-5)*r22);
IkReal x75=(gclwh14_3*rxp0_2);
IkReal x76=((0.000977833645875)*r20);
IkReal x77=(npz*pz);
IkReal x78=((0.000977833645875)*r21);
IkReal x79=(gclwh10_12*r22);
IkReal x80=(gclwh10_2*rxp2_2);
IkReal x81=((0.00076243651125)*rxp1_2);
IkReal x82=((0.00600991575645741)*r20);
IkReal x83=((0.154705425)*rxp1_2);
IkReal x84=((0.017917245)*r21);
IkReal x85=(gclwh6_11*rxp1_2);
IkReal x86=((0.3786)*rxp1_2);
IkReal x87=(gclwh7_0*rxp1_2);
IkReal x88=((0.7572)*rxp1_2);
IkReal x89=((0.154705425)*rxp2_2);
IkReal x90=((2.0)*gclwh11_10);
IkReal x91=(gclwh12_8*r21);
IkReal x92=((0.81725)*pp);
IkReal x93=(pp*pz);
IkReal x94=(gclwh14_2*r20);
IkReal x95=(pp*r21);
IkReal x96=((2.0)*gclwh4_11);
IkReal x97=(gclwh8_12*r20);
IkReal x98=(npx*pz);
IkReal x99=(gclwh14_8*rxp0_2);
IkReal x100=((0.1893)*rxp2_2);
IkReal x101=(gclwh5_9*rxp2_2);
IkReal x102=((0.020662095)*rxp1_2);
IkReal x103=((0.007321434238125)*r21);
IkReal x104=((1.6345)*pz);
IkReal x105=((0.0089586225)*pz);
IkReal x106=(gclwh13_0*r21);
IkReal x107=(gclwh5_9*r22);
IkReal x108=(gclwh11_10*r22);
IkReal x109=(gclwh11_13*r22);
IkReal x110=((1.0)*r21);
IkReal x111=((0.3786)*rxp0_2);
IkReal x112=(gclwh14_14*rxp0_2);
IkReal x113=(pp*r20);
IkReal x114=((0.00195566729175)*r22);
IkReal x115=(gclwh15_10*rxp0_2);
IkReal x116=(gclwh14_8*r20);
IkReal x117=(gclwh12_8*rxp1_2);
IkReal x118=((2.0)*gclwh9_10);
IkReal x119=((2.0)*gclwh15_10);
IkReal x120=(gclwh5_15*rxp2_2);
IkReal x121=((2.0)*gclwh13_10);
IkReal x122=((0.00702803935125)*r20);
IkReal x123=(gclwh13_9*r21);
IkReal x124=(gclwh5_0*r22);
IkReal x125=((0.01464286847625)*r20);
IkReal x126=(gclwh15_1*r20);
IkReal x127=((0.000977833645875)*r22);
IkReal x128=((0.0089586225)*r20);
IkReal x129=((2.0)*gclwh10_11);
IkReal x130=(gclwh5_10*r22);
IkReal x131=((2.0)*pp);
IkReal x132=(gclwh15_9*r20);
IkReal x133=(gclwh1_3*r20);
IkReal x134=((0.00195566729175)*r20);
IkReal x135=(gclwh4_3*rxp2_2);
IkReal x136=((0.2183)*gclwh13_15);
IkReal x137=((2.0)*gclwh7_10);
IkReal x138=(gclwh15_0*r20);
IkReal x139=(gclwh9_0*r20);
IkReal x140=(gclwh15_15*rxp0_2);
IkReal x141=(gclwh2_1*r21);
IkReal x142=((4.0)*gclwh11_10);
IkReal x143=((0.30941085)*rxp0_2);
IkReal x144=(gclwh9_0*rxp0_2);
IkReal x145=(gclwh5_10*rxp2_2);
IkReal x146=((0.2183)*gclwh12_14);
IkReal x147=((0.2183)*gclwh14_14);
IkReal x148=(gclwh4_2*rxp2_2);
IkReal x149=((0.03275)*pp);
IkReal x150=((0.006199575)*rxp1_2);
IkReal x151=(gclwh12_2*rxp1_2);
IkReal x152=(gclwh5_0*rxp2_2);
IkReal x153=((3.60823078949063e-5)*r21);
IkReal x154=(gclwh14_11*rxp0_2);
IkReal x155=((0.020662095)*rxp0_2);
IkReal x156=(gclwh14_8*npx);
IkReal x157=((4.0)*gclwh9_10);
IkReal x158=((0.00195566729175)*r21);
IkReal x159=(gclwh8_12*rxp0_2);
IkReal x160=((0.01464286847625)*r21);
IkReal x161=((0.3786)*rxp2_2);
IkReal x162=((0.01464286847625)*r22);
IkReal x163=(gclwh7_13*r21);
IkReal x164=((4.0)*gclwh7_10);
IkReal x165=(gclwh13_0*rxp1_2);
IkReal x166=((0.1893)*rxp1_2);
IkReal x167=(gclwh6_2*r21);
IkReal x168=(gclwh5_1*rxp2_2);
IkReal x169=(gclwh8_2*rxp0_2);
IkReal x170=(gclwh9_10*r20);
IkReal x171=((4.0)*pp);
IkReal x172=(gclwh15_1*rxp0_2);
IkReal x173=(gclwh9_13*r20);
IkReal x174=((0.0089586225)*r21);
IkReal x175=(gclwh0_0*r20);
IkReal x176=(gclwh10_11*r22);
IkReal x177=((2.0)*gclwh12_11);
IkReal x178=((0.0655)*pz);
IkReal x179=((0.006199575)*rxp2_2);
IkReal x180=(gclwh12_14*rxp1_2);
IkReal x181=(gclwh15_0*rxp0_2);
IkReal x182=((2.0)*npx);
IkReal x183=(gclwh9_13*rxp0_2);
IkReal x184=((1.0)*pp);
IkReal x185=((4.0)*gclwh10_11);
IkReal x186=(gclwh15_9*rxp0_2);
IkReal x187=((3.60823078949063e-5)*r20);
IkReal x188=((0.00702803935125)*r22);
IkReal x189=(gclwh8_2*r20);
IkReal x190=((0.2183)*gclwh5_15);
IkReal x191=(gclwh10_2*r22);
IkReal x192=(gclwh5_1*r22);
IkReal x193=(gclwh13_9*rxp1_2);
IkReal x194=((2.0)*gclwh5_10);
IkReal x195=((0.020662095)*rxp2_2);
IkReal x196=(gclwh4_8*r22);
IkReal x197=((0.017917245)*r20);
IkReal x198=(gclwh7_0*r21);
IkReal x199=((0.00600991575645741)*r21);
IkReal x200=(gclwh11_0*r22);
IkReal x201=(gclwh6_12*r21);
IkReal x202=((0.2183)*gclwh15_15);
IkReal x203=(gclwh11_0*rxp2_2);
IkReal x204=((0.2183)*gclwh4_14);
IkReal x205=(gclwh4_14*rxp2_2);
IkReal x206=(gclwh6_2*rxp1_2);
IkReal x207=((0.1893)*rxp0_2);
IkReal x208=(gclwh4_8*rxp2_2);
IkReal x209=((0.12699240901125)*rxp1_2);
IkReal x210=(gclwh14_2*rxp0_2);
IkReal x211=(gclwh4_3*r22);
IkReal x212=((0.1893)*pp);
IkReal x213=(gclwh13_15*rxp1_2);
IkReal x214=(gclwh1_2*r20);
IkReal x215=((2.0)*gclwh14_11);
IkReal x216=(gclwh4_11*r22);
IkReal x217=((0.020662095)*x112);
IkReal x218=(gclwh6_5*x78);
IkReal x219=(gclwh8_5*x76);
IkReal x220=(gclwh12_14*x102);
IkReal x221=(gclwh10_5*x127);
IkReal x222=(gclwh4_14*x195);
IkReal x223=((0.0089586225)*x68);
IkReal x224=(gclwh12_11*x166);
IkReal x225=((0.017917245)*x117);
IkReal x226=((0.017917245)*x208);
IkReal x227=(gclwh4_11*x100);
IkReal x228=((0.0089586225)*x72);
IkReal x229=((0.1893)*x154);
IkReal x230=((0.0089586225)*x176);
IkReal x231=((0.017917245)*x99);
IkReal x232=((0.017917245)*x101);
IkReal x233=((0.0089586225)*x108);
IkReal x234=((0.1893)*x115);
IkReal x235=((0.017917245)*x193);
IkReal x236=(gclwh9_10*x128);
IkReal x237=((0.017917245)*x186);
IkReal x238=(gclwh13_10*x166);
IkReal x239=(gclwh7_10*x174);
IkReal x240=(gclwh5_10*x100);
IkReal x241=((0.020662095)*x140);
IkReal x242=(gclwh7_7*x78);
IkReal x243=(gclwh9_7*x76);
IkReal x244=(gclwh13_15*x102);
IkReal x245=((0.020662095)*x120);
IkReal x246=(gclwh11_7*x127);
IkReal x247=(gclwh10_5*x195);
IkReal x248=(gclwh8_5*x155);
IkReal x249=(gclwh14_14*x76);
IkReal x250=(gclwh6_5*x102);
IkReal x251=(gclwh4_14*x127);
IkReal x252=(gclwh12_14*x78);
IkReal x253=(gclwh8_11*x207);
IkReal x254=((0.000847933619625)*x91);
IkReal x255=(gclwh12_11*x174);
IkReal x256=(gclwh10_11*x100);
IkReal x257=((0.0089586225)*x216);
IkReal x258=((0.000847933619625)*x196);
IkReal x259=((0.1893)*x85);
IkReal x260=(gclwh14_11*x128);
IkReal x261=((0.000847933619625)*x116);
IkReal x262=(gclwh9_10*x207);
IkReal x263=(gclwh13_10*x174);
IkReal x264=(gclwh11_10*x100);
IkReal x265=((0.000847933619625)*x132);
IkReal x266=((0.0089586225)*x130);
IkReal x267=((0.000847933619625)*x107);
IkReal x268=(gclwh7_10*x166);
IkReal x269=((0.000847933619625)*x123);
IkReal x270=(gclwh15_10*x128);
IkReal x271=(gclwh5_15*x127);
IkReal x272=(gclwh7_7*x102);
IkReal x273=(gclwh13_15*x78);
IkReal x274=(gclwh15_15*x76);
IkReal x275=(gclwh9_7*x155);
IkReal x276=(gclwh11_7*x195);
IkReal x277=((0.017917245)*x176);
IkReal x278=(gclwh14_11*x111);
IkReal x279=((0.017917245)*x72);
IkReal x280=((0.04132419)*x112);
IkReal x281=((0.04132419)*x180);
IkReal x282=((0.04132419)*x205);
IkReal x283=(gclwh4_11*x161);
IkReal x284=((0.017917245)*x68);
IkReal x285=(gclwh12_11*x86);
IkReal x286=((0.04132419)*x120);
IkReal x287=((0.04132419)*x213);
IkReal x288=((0.04132419)*x140);
IkReal x289=((0.017917245)*x170);
IkReal x290=(gclwh15_10*x111);
IkReal x291=((0.017917245)*x108);
IkReal x292=(gclwh7_10*x84);
IkReal x293=((0.3786)*x145);
IkReal x294=(gclwh13_10*x86);
IkReal x295=((0.3786)*x85);
IkReal x296=(gclwh14_11*x197);
IkReal x297=(gclwh14_14*x134);
IkReal x298=(gclwh4_14*x114);
IkReal x299=(gclwh12_14*x158);
IkReal x300=(gclwh14_8*x113);
IkReal x301=((2.0)*x63);
IkReal x302=((1.0)*x64);
IkReal x303=(r21*x64);
IkReal x304=((0.2183)*gclwh10_5*x77);
IkReal x305=((0.2183)*gclwh8_5*x98);
IkReal x306=((0.10915)*gclwh6_5*x95);
IkReal x307=((0.2183)*gclwh6_5*x73);
IkReal x308=((0.10915)*gclwh8_5*x113);
IkReal x309=((0.10915)*gclwh10_5*x69);
IkReal x310=(gclwh12_3*pp*x166);
IkReal x311=(x129*x77);
IkReal x312=(x105*x189);
IkReal x313=((2.0)*gclwh8_11*x98);
IkReal x314=(gclwh10_2*pz*x69);
IkReal x315=(x210*x65);
IkReal x316=(x189*x93);
IkReal x317=(gclwh4_3*pp*x100);
IkReal x318=(x105*x191);
IkReal x319=(x151*x65);
IkReal x320=((2.0)*gclwh6_11*x73);
IkReal x321=(x148*x65);
IkReal x322=(x212*x75);
IkReal x323=(x105*x167);
IkReal x324=(gclwh13_1*pp*x166);
IkReal x325=(x105*x200);
IkReal x326=(x105*x139);
IkReal x327=(gclwh5_1*pp*x100);
IkReal x328=(x181*x65);
IkReal x329=(gclwh11_0*pz*x69);
IkReal x330=(x137*x73);
IkReal x331=(x139*x93);
IkReal x332=(x77*x90);
IkReal x333=(x172*x212);
IkReal x334=(x118*x98);
IkReal x335=(x105*x198);
IkReal x336=(x165*x65);
IkReal x337=(x152*x65);
IkReal x338=((0.10915)*gclwh7_7*x95);
IkReal x339=((0.2183)*gclwh9_7*x98);
IkReal x340=((0.2183)*gclwh11_7*x77);
IkReal x341=((0.10915)*gclwh9_7*x113);
IkReal x342=((0.2183)*gclwh7_7*x73);
IkReal x343=((0.10915)*gclwh11_7*x69);
IkReal x344=((0.10915)*gclwh14_14*x113);
IkReal x345=(x204*x77);
IkReal x346=(x146*x73);
IkReal x347=((0.10915)*gclwh12_14*x95);
IkReal x348=(x147*x98);
IkReal x349=((0.10915)*gclwh4_14*x69);
IkReal x350=((0.09465)*gclwh4_8*x69);
IkReal x351=(x93*x94);
IkReal x352=(gclwh12_3*x303);
IkReal x353=(x206*x65);
IkReal x354=(gclwh3_3*x303);
IkReal x355=(x133*x64);
IkReal x356=(gclwh3_2*r21*x105);
IkReal x357=(x215*x98);
IkReal x358=(x156*x65);
IkReal x359=(x105*x94);
IkReal x360=((0.09465)*pp*x91);
IkReal x361=(x211*x64);
IkReal x362=(x105*x214);
IkReal x363=(x169*x65);
IkReal x364=(x77*x96);
IkReal x365=(gclwh4_2*r22*x105);
IkReal x366=(gclwh4_8*npz*x65);
IkReal x367=(gclwh12_2*r21*x105);
IkReal x368=(x65*x80);
IkReal x369=((0.09465)*x300);
IkReal x370=(x177*x73);
IkReal x371=(gclwh12_8*npy*x65);
IkReal x372=(x126*x64);
IkReal x373=(x65*x71);
IkReal x374=(gclwh5_0*pz*x69);
IkReal x375=(gclwh13_9*npy*x65);
IkReal x376=(x105*x124);
IkReal x377=(x106*x93);
IkReal x378=((0.09465)*gclwh15_9*x113);
IkReal x379=(x119*x98);
IkReal x380=(x105*x106);
IkReal x381=(x141*x64);
IkReal x382=(gclwh2_0*r21*x105);
IkReal x383=(x144*x65);
IkReal x384=(x203*x65);
IkReal x385=(gclwh0_1*r20*x64);
IkReal x386=(x105*x175);
IkReal x387=((0.09465)*gclwh5_9*x69);
IkReal x388=(x65*x87);
IkReal x389=((0.09465)*gclwh13_9*x95);
IkReal x390=(x105*x138);
IkReal x391=(x65*x67);
IkReal x392=(x194*x77);
IkReal x393=(x121*x73);
IkReal x394=((0.10915)*gclwh13_15*x95);
IkReal x395=((0.10915)*gclwh5_15*x69);
IkReal x396=(x202*x98);
IkReal x397=((0.10915)*gclwh15_15*x113);
IkReal x398=(x190*x77);
IkReal x399=(x136*x73);
IkReal x400=(x131*x72);
IkReal x401=(x129*x69);
IkReal x402=((4.0)*gclwh6_11*x73);
IkReal x403=((4.0)*gclwh8_11*x98);
IkReal x404=(x131*x68);
IkReal x405=(x185*x77);
IkReal x406=(x69*x90);
IkReal x407=(x164*x73);
IkReal x408=(x113*x118);
IkReal x409=(x137*x95);
IkReal x410=(x157*x98);
IkReal x411=(x142*x77);
IkReal x412=(x113*x215);
IkReal x413=((4.0)*gclwh12_11*x73);
IkReal x414=((4.0)*gclwh4_11*x77);
IkReal x415=(x113*x147);
IkReal x416=((0.4366)*gclwh12_14*x73);
IkReal x417=((0.4366)*gclwh4_14*x77);
IkReal x418=(x146*x95);
IkReal x419=((0.4366)*gclwh14_14*x98);
IkReal x420=(x204*x69);
IkReal x421=(gclwh6_2*npy*x301);
IkReal x422=(gclwh6_2*x110*x93);
IkReal x423=(gclwh10_2*npz*x301);
IkReal x424=(gclwh8_2*x182*x63);
IkReal x425=(gclwh7_0*npy*x301);
IkReal x426=(gclwh9_0*x182*x63);
IkReal x427=(gclwh11_0*npz*x301);
IkReal x428=(gclwh7_0*x110*x93);
IkReal x429=(gclwh12_2*npy*x301);
IkReal x430=(gclwh3_2*npy*x301);
IkReal x431=(gclwh1_2*x182*x63);
IkReal x432=(gclwh14_3*x182*x93);
IkReal x433=(gclwh4_2*npz*x301);
IkReal x434=(gclwh4_3*x131*x77);
IkReal x435=(gclwh12_2*x110*x93);
IkReal x436=((1.0)*x214*x93);
IkReal x437=(gclwh3_3*x131*x73);
IkReal x438=((1.0)*gclwh4_2*pz*x69);
IkReal x439=(gclwh1_3*x182*x93);
IkReal x440=(gclwh3_2*x110*x93);
IkReal x441=(gclwh12_3*x131*x73);
IkReal x442=(gclwh14_2*x182*x63);
IkReal x443=(gclwh14_3*r20*x302);
IkReal x444=(gclwh0_0*x182*x63);
IkReal x445=(gclwh2_0*npy*x301);
IkReal x446=(gclwh5_1*x131*x77);
IkReal x447=(gclwh13_1*x131*x73);
IkReal x448=(gclwh15_0*x182*x63);
IkReal x449=(gclwh2_1*x131*x73);
IkReal x450=(gclwh0_1*x182*x93);
IkReal x451=(gclwh5_0*npz*x301);
IkReal x452=(gclwh13_0*npy*x301);
IkReal x453=((1.0)*x175*x93);
IkReal x454=((1.0)*x138*x93);
IkReal x455=(gclwh2_0*x110*x93);
IkReal x456=(gclwh13_1*x110*x64);
IkReal x457=(x192*x302);
IkReal x458=(gclwh15_1*x182*x93);
IkReal x459=(x282+x281);
IkReal x460=(x287+x286);
IkReal x461=(x247+x248);
IkReal x462=(x220+x222);
IkReal x463=(x245+x244);
IkReal x464=(x276+x275);
IkReal x465=(x320+x229+x228+x230);
IkReal x466=(x330+x233+x236+x234);
IkReal x467=(x393+x392+x268+x270);
IkReal x468=(x370+x364+x259+x260);
IkReal x469=(x297+x416+x417+x415);
IkReal x470=(x306+x304+x305+x218);
IkReal x471=(x346+x344+x345+x249);
IkReal x472=(x397+x399+x398+x274);
IkReal x473=(x339+x338+x340+x242);
IkReal x474=(x379+x264+x266+x263+x262);
IkReal x475=(x357+x255+x256+x257+x253);
IkReal x476=(x311+x313+x223+x224+x227);
IkReal x477=(x332+x334+x238+x239+x240);
IkReal x478=(x347+x348+x349+x251+x252);
IkReal x479=(x395+x394+x396+x273+x271);
IkReal x480=(x342+x343+x341+x243+x246);
IkReal x481=(x298+x299+x418+x419+x420);
IkReal x482=(x295+x296+x412+x413+x414);
IkReal x483=(x308+x309+x307+x219+x221);
IkReal x484=(x285+x284+x283+x403+x405+x404);
IkReal x485=(x292+x293+x294+x409+x410+x411);
IkReal x486=(x290+x291+x289+x407+x406+x408);
IkReal x487=(x277+x278+x279+x401+x400+x402);
IkReal x488=(((x177*x95))+((x69*x96))+((gclwh12_11*x84))+(((0.017917245)*x216))+((gclwh10_11*x161))+(((4.0)*gclwh14_11*x98))+((gclwh8_11*x111)));
IkReal x489=(x321+x322+x323+x319+x231+x424+x423+x422);
IkReal x490=(x333+x337+x336+x335+x237+x428+x427+x426);
IkReal x491=(x318+x315+x314+x317+x316+x310+x312+x225+x226+x421);
IkReal x492=(x331+x324+x325+x326+x327+x328+x329+x232+x235+x425);
IkReal x493=(x387+x388+x389+x391+x390+x267+x269+x449+x458+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x494=(x351+x350+x353+x352+x355+x354+x356+x359+x358+x360+x361+x362+x258+x254+x429+x430+x431+x432+x433+x65);
IkReal x495=(x371+x368+x369+x363+x365+x366+x367+x261+x438+x439+x434+x435+x436+x437+x441+x440+x443+x442);
IkReal x496=(x386+x384+x385+x382+x383+x380+x381+x378+x377+x376+x375+x374+x373+x372+x265+x448+x445+x444+x447+x446+x65);
op[0]=((((1.6345)*gclwh10_12*x77))+(((0.154705425)*x99))+(((-1.0)*x483))+((gclwh6_12*x103))+(((-0.007321434238125)*x97))+(((-1.6345)*gclwh6_12*x73))+(((-1.0)*gclwh4_8*x89))+x462+x470+(((-1.0)*x92*x97))+(((-0.81725)*gclwh10_12*x69))+((x201*x92))+(((-1.0)*x217))+(((1.6345)*gclwh8_12*x98))+(((-0.007321434238125)*x79))+(((-1.0)*gclwh12_8*x83)));
op[1]=((((-1.0)*x489))+(((-1.0)*gclwh12_3*x209))+(((-1.0)*x476))+(((-0.12699240901125)*x135))+x491+x465+((pp*x72))+(((0.12699240901125)*x75))+((gclwh10_11*x69))+(((-1.0)*x184*x68)));
op[2]=((-0.17125635)+(((-1.0)*x484))+x487);
op[3]=(((gclwh8_2*x122))+((gclwh10_2*x188))+(((-0.160905)*x99))+(((0.7845)*gclwh8_2*x113))+(((-1.0)*gclwh6_2*x70))+(((-0.7845)*gclwh6_2*x95))+(((0.160905)*x208))+(((-0.14850585)*x148))+(((-0.14850585)*x151))+(((-1.569)*gclwh10_2*x77))+(((0.7845)*gclwh10_2*x69))+(((0.160905)*x117))+(((0.14850585)*x210))+(((-1.0)*x459))+x280+(((-1.569)*gclwh8_2*x98))+(((1.569)*gclwh6_2*x73)));
op[4]=((((-0.000293394886875)*x79))+(((-0.0655)*gclwh6_12*x73))+(((-1.0)*x483))+(((0.03275)*gclwh6_12*x95))+(((-1.0)*x462))+(((-0.03275)*gclwh10_12*x69))+(((-0.000293394886875)*x97))+((gclwh4_8*x179))+x217+x470+(((-1.0)*x149*x97))+(((0.0655)*gclwh10_12*x77))+(((0.0655)*gclwh8_12*x98))+(((0.006199575)*x117))+(((0.000293394886875)*x201))+(((-0.006199575)*x99)));
op[5]=((((-1.0)*x184*x72))+((pp*x68))+(((-1.0)*x489))+(((-1.0)*x465))+x491+x476+(((-1.0)*gclwh12_3*x81))+(((-0.00076243651125)*x135))+(((0.00076243651125)*x75))+(((-1.0)*gclwh10_11*x69)));
op[6]=((((0.12699240901125)*x172))+(((-1.0)*x490))+(((-1.0)*gclwh9_10*x113))+((gclwh7_10*x95))+(((-1.0)*gclwh13_1*x209))+(((-1.0)*gclwh11_10*x69))+(((-1.0)*x466))+x492+x477+(((-0.12699240901125)*x168)));
op[7]=(((gclwh7_13*x103))+(((-1.0)*gclwh13_9*x83))+((x163*x92))+(((-1.0)*x480))+(((0.154705425)*x186))+(((-1.0)*gclwh5_9*x89))+x463+x473+(((1.6345)*gclwh9_13*x98))+(((-1.0)*x173*x92))+(((-0.007321434238125)*x109))+(((-1.0)*x241))+(((-0.007321434238125)*x173))+(((1.6345)*gclwh11_13*x77))+(((-1.6345)*gclwh7_13*x73))+(((-0.81725)*gclwh11_13*x69)));
op[8]=((((-0.160905)*x193))+(((0.160905)*x186))+(((-1.0)*gclwh7_0*x70))+(((-0.160905)*x101))+(((0.14850585)*x181))+(((1.569)*gclwh7_0*x73))+(((0.7845)*gclwh11_0*x69))+(((-0.14850585)*x152))+(((-0.14850585)*x165))+((gclwh9_0*x122))+x460+(((-1.569)*gclwh11_0*x77))+(((-1.569)*gclwh9_0*x98))+(((-1.0)*x288))+(((-0.7845)*gclwh7_0*x95))+((gclwh11_0*x188))+(((0.7845)*gclwh9_0*x113)));
op[9]=((-0.17125635)+(((-1.0)*x485))+x486);
op[10]=((((-1.0)*x490))+(((-1.0)*gclwh7_10*x95))+(((-1.0)*x477))+x492+x466+(((0.00076243651125)*x172))+((gclwh9_10*x113))+(((-0.00076243651125)*x168))+(((-1.0)*gclwh13_1*x81))+((gclwh11_10*x69)));
op[11]=((((0.000293394886875)*x163))+(((-0.03275)*gclwh9_13*x113))+(((0.03275)*gclwh7_13*x95))+(((-0.006199575)*x186))+(((-1.0)*x480))+(((-0.0655)*gclwh7_13*x73))+(((-1.0)*x463))+((gclwh13_9*x150))+(((-0.000293394886875)*x109))+(((0.0655)*gclwh11_13*x77))+(((-0.03275)*gclwh11_13*x69))+x241+x473+(((0.0655)*gclwh9_13*x98))+(((-0.000293394886875)*x173))+(((0.006199575)*x101)));
op[12]=((((1.6345)*gclwh4_8*x77))+(((1.6345)*gclwh12_8*x73))+(((-1.6345)*gclwh14_8*x98))+(((-1.0)*x91*x92))+(((-0.007321434238125)*x91))+(((-1.0)*x471))+(((0.154705425)*x159))+((gclwh10_12*x89))+x461+x478+(((-0.81725)*gclwh4_8*x69))+(((0.007321434238125)*x116))+((x116*x92))+(((-1.0)*x250))+(((-1.0)*gclwh6_12*x83))+(((-0.007321434238125)*x196)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh12_3*x73))+(((-1.0)*x495))+(((1.341705325)*gclwh4_3*x77))+(((-1.0)*gclwh12_3*x199))+(((-0.66189404)*gclwh4_3*x69))+(((-0.66189404)*gclwh12_3*x95))+(((-1.0)*x475))+((gclwh3_3*x199))+(((-0.679811285)*gclwh1_3*x113))+(((-0.679811285)*gclwh3_3*x95))+(((1.341705325)*gclwh3_3*x73))+(((-1.0)*gclwh4_11*x69))+(((1.341705325)*gclwh1_3*x98))+x494+x468+((gclwh1_3*x82))+((gclwh14_3*x82))+(((-1.341705325)*gclwh14_3*x98))+((gclwh14_11*x113))+(((-1.0)*gclwh12_11*x95))+(((-0.00600991575645741)*x211))+(((0.66189404)*gclwh14_3*x113)));
op[14]=((-0.07735732)+(((-1.0)*x488))+x482);
op[15]=((((-1.0)*gclwh4_2*x188))+(((-0.85)*x300))+(((1.569)*gclwh3_2*x73))+(((0.7845)*pp*x94))+(((-1.0)*x481))+(((-0.14850585)*x80))+((gclwh3_2*x70))+(((-0.7845)*gclwh12_2*x95))+(((-0.007614829125)*x116))+(((1.569)*gclwh12_2*x73))+(((-0.14850585)*x169))+(((0.00702803935125)*x94))+(((0.85)*pp*x91))+((x156*x66))+(((0.007614829125)*x91))+x469+(((0.007614829125)*x196))+(((-0.7845)*gclwh1_2*x113))+(((0.85)*gclwh4_8*x69))+(((1.569)*gclwh4_2*x77))+(((-0.7845)*gclwh3_2*x95))+(((-1.569)*gclwh14_2*x98))+(((-1.0)*gclwh12_2*x70))+(((1.569)*gclwh1_2*x98))+(((-1.0)*gclwh12_8*npy*x66))+((gclwh1_2*x122))+(((-1.0)*gclwh4_8*npz*x66))+(((0.14850585)*x206))+(((-0.7845)*gclwh4_2*x69)));
op[16]=((((0.0655)*gclwh14_8*x98))+(((0.03275)*gclwh4_8*x69))+(((-1.0)*gclwh6_12*x150))+(((-0.0655)*gclwh12_8*x73))+(((-0.0655)*gclwh4_8*x77))+(((-0.03275)*x300))+(((-1.0)*x478))+(((-0.000293394886875)*x116))+(((0.000293394886875)*x91))+x461+x471+(((0.006199575)*x159))+((gclwh10_12*x179))+((x149*x91))+(((0.000293394886875)*x196))+(((-1.0)*x250)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x113))+(((-1.0)*gclwh14_11*x113))+(((0.008055325)*gclwh3_3*x73))+(((-1.0)*x495))+((gclwh4_11*x69))+(((0.00493096)*gclwh4_3*x69))+(((-1.0)*x468))+(((-0.012986285)*gclwh3_3*x95))+(((0.008055325)*gclwh12_3*x73))+x494+x475+(((0.008055325)*gclwh4_3*x77))+(((-0.008055325)*gclwh14_3*x98))+((gclwh3_3*x153))+(((0.00493096)*gclwh12_3*x95))+(((3.60823078949063e-5)*x133))+(((-1.0)*gclwh4_3*x74))+(((-0.012986285)*gclwh1_3*x113))+((gclwh12_11*x95))+((gclwh14_3*x187))+(((-1.0)*gclwh12_3*x153))+(((0.008055325)*gclwh1_3*x98)));
op[18]=((0.679811285)+(((0.66189404)*gclwh5_1*x69))+(((-1.0)*x493))+(((1.341705325)*gclwh0_1*x98))+(((0.00600991575645741)*x192))+(((-0.66189404)*gclwh15_1*x113))+(((0.00600991575645741)*x141))+(((-1.0)*gclwh15_1*x82))+(((-0.679811285)*gclwh0_1*x113))+(((-1.341705325)*gclwh5_1*x77))+(((-1.0)*x474))+(((-1.341705325)*gclwh13_1*x73))+(((-1.0)*gclwh13_10*x95))+((gclwh0_1*x82))+((gclwh15_10*x113))+(((-1.0)*gclwh5_10*x69))+x496+x467+(((0.66189404)*gclwh13_1*x95))+(((1.341705325)*gclwh2_1*x73))+(((-0.679811285)*gclwh2_1*x95))+(((1.341705325)*gclwh15_1*x98))+((gclwh13_1*x199)));
op[19]=(((x104*x67))+(((-1.0)*x479))+(((-1.0)*x464))+(((-1.0)*gclwh11_13*x89))+(((-0.154705425)*x183))+x272+x472+(((-0.007321434238125)*x132))+(((-1.6345)*gclwh13_9*x73))+(((0.007321434238125)*x107))+(((-1.0)*x132*x92))+((gclwh7_13*x83))+(((0.81725)*gclwh5_9*x69))+((gclwh13_9*x103))+(((-1.0)*x104*x71))+((x123*x92)));
op[20]=((((-0.7845)*gclwh15_0*x113))+((gclwh15_15*x134))+(((-0.85)*gclwh15_9*x113))+((gclwh0_0*x122))+(((0.007614829125)*x107))+(((-0.007614829125)*x132))+(((-1.0)*x66*x71))+(((-0.14850585)*x87))+(((-0.7845)*gclwh2_0*x95))+(((0.4366)*gclwh13_15*x73))+(((0.007614829125)*x123))+(((-1.569)*gclwh5_0*x77))+(((0.7845)*gclwh5_0*x69))+(((1.569)*gclwh15_0*x98))+(((0.14850585)*x144))+(((-0.7845)*gclwh0_0*x113))+((gclwh2_0*x70))+(((-1.0)*gclwh15_0*x122))+((x113*x202))+((gclwh13_0*x70))+(((1.569)*gclwh2_0*x73))+(((1.569)*gclwh0_0*x98))+(((-1.0)*gclwh5_15*x114))+(((0.85)*gclwh5_9*x69))+(((0.4366)*gclwh5_15*x77))+(((-1.0)*gclwh13_15*x158))+(((0.85)*gclwh13_9*x95))+(((-0.4366)*gclwh15_15*x98))+(((-1.0)*x190*x69))+(((0.00702803935125)*x124))+(((-1.0)*x136*x95))+(((0.14850585)*x203))+(((-1.0)*gclwh13_9*npy*x66))+((x66*x67))+(((0.7845)*gclwh13_0*x95))+(((-1.569)*gclwh13_0*x73)));
op[21]=((-0.07735732)+(((4.0)*gclwh15_10*x98))+((gclwh11_10*x161))+(((-1.0)*x113*x119))+(((-4.0)*gclwh13_10*x73))+((x121*x95))+(((-1.0)*gclwh15_10*x197))+(((0.017917245)*x130))+((x194*x69))+((gclwh9_10*x111))+((gclwh13_10*x84))+(((-4.0)*gclwh5_10*x77))+(((-1.0)*gclwh7_10*x86)));
op[22]=((-0.012986285)+((gclwh5_1*x74))+(((0.008055325)*gclwh2_1*x73))+(((3.60823078949063e-5)*x141))+(((-1.0)*x493))+(((-1.0)*gclwh15_10*x113))+(((-0.00493096)*gclwh5_1*x69))+(((-0.012986285)*gclwh2_1*x95))+(((-0.008055325)*gclwh5_1*x77))+(((0.008055325)*gclwh15_1*x98))+(((-1.0)*x467))+(((-0.012986285)*gclwh0_1*x113))+x496+x474+((gclwh0_1*x187))+(((0.00493096)*gclwh15_1*x113))+(((-0.00493096)*gclwh13_1*x95))+(((0.008055325)*gclwh0_1*x98))+((gclwh13_10*x95))+((gclwh5_10*x69))+(((-3.60823078949063e-5)*x126))+(((-0.008055325)*gclwh13_1*x73))+((gclwh13_1*x153)));
op[23]=((((0.0655)*gclwh13_9*x73))+(((-0.006199575)*x183))+(((0.03275)*gclwh15_9*x113))+(((-0.03275)*gclwh13_9*x95))+(((-0.000293394886875)*x123))+(((-0.03275)*gclwh5_9*x69))+(((-1.0)*x178*x67))+((gclwh7_13*x150))+(((-1.0)*x472))+(((0.000293394886875)*x132))+(((-1.0)*x464))+(((-0.000293394886875)*x107))+x272+x479+((x178*x71))+(((-1.0)*gclwh11_13*x179)));
op[24]=((-0.35681135)+(((-1.0)*x484))+x487);
op[25]=((((-3.269)*gclwh8_2*x98))+((gclwh8_2*x125))+((gclwh10_2*x162))+(((-1.0)*gclwh6_2*x160))+(((3.269)*gclwh6_2*x73))+(((-3.269)*gclwh10_2*x77))+(((-1.0)*x459))+(((-0.30941085)*x151))+x280+((gclwh14_2*x143))+(((-0.30941085)*x148))+(((-1.6345)*gclwh6_2*x95))+(((1.6345)*gclwh8_2*x113))+(((1.6345)*gclwh10_2*x69)));
op[26]=((((1.569)*pp*x97))+(((0.08264838)*x112))+(((1.569)*gclwh10_12*x69))+(((-3.138)*gclwh10_12*x77))+(((0.0140560787025)*x79))+(((-0.0140560787025)*x201))+(((-1.569)*gclwh6_12*x95))+(((-0.08264838)*x180))+(((0.0140560787025)*x97))+(((-0.08264838)*x205))+(((3.138)*gclwh6_12*x73))+(((-3.138)*gclwh8_12*x98)));
op[27]=((((-0.03583449)*x72))+(((-1.0)*x185*x69))+(((0.03583449)*x68))+(((8.0)*gclwh10_11*x77))+(((0.7572)*gclwh4_11*rxp2_2))+((x171*x68))+(((-0.03583449)*x176))+(((8.0)*gclwh8_11*x98))+(((-0.7572)*x154))+(((-1.0)*x171*x72))+((gclwh12_11*x88))+(((-8.0)*gclwh6_11*x73)));
op[28]=((-0.01429865)+(((-1.0)*x487))+x484);
op[29]=((((-0.00058678977375)*x167))+(((-0.131)*gclwh8_2*x98))+(((0.00058678977375)*x191))+(((0.00058678977375)*x189))+(((0.0655)*gclwh8_2*x113))+(((0.01239915)*x210))+x459+(((-0.0655)*gclwh6_2*x95))+(((-1.0)*x280))+(((0.131)*gclwh6_2*x73))+(((-0.131)*gclwh10_2*x77))+(((-0.01239915)*x151))+(((0.0655)*gclwh10_2*x69))+(((-0.01239915)*x148)));
op[30]=((((-3.269)*gclwh9_0*x98))+(((-1.6345)*gclwh7_0*x95))+(((-0.30941085)*x165))+(((3.269)*gclwh7_0*x73))+(((-1.0)*gclwh7_0*x160))+(((-0.30941085)*x152))+(((1.6345)*gclwh9_0*x113))+((gclwh9_0*x125))+x460+(((-3.269)*gclwh11_0*x77))+(((1.6345)*gclwh11_0*x69))+((gclwh15_0*x143))+(((-1.0)*x288))+((gclwh11_0*x162)));
op[31]=((-0.35681135)+(((-1.0)*x485))+x486);
op[32]=(((x113*x157))+(((0.03583449)*x170))+(((-1.0)*gclwh13_10*x88))+(((-0.03583449)*gclwh7_10*r21))+(((-1.0)*x164*x95))+((x142*x69))+(((0.03583449)*x108))+(((-8.0)*gclwh11_10*x77))+(((8.0)*gclwh7_10*x73))+(((-0.7572)*x145))+(((0.7572)*x115))+(((-8.0)*gclwh9_10*x98)));
op[33]=((((-0.0140560787025)*x163))+(((-3.138)*gclwh11_13*x77))+(((1.569)*gclwh9_13*x113))+(((0.0140560787025)*x109))+(((-0.08264838)*x213))+(((1.569)*gclwh11_13*x69))+(((0.08264838)*x140))+(((3.138)*gclwh7_13*x73))+(((0.0140560787025)*x173))+(((-1.569)*gclwh7_13*x95))+(((-0.08264838)*x120))+(((-3.138)*gclwh9_13*x98)));
op[34]=((((-0.0655)*gclwh7_0*x95))+(((-0.00058678977375)*x198))+(((0.131)*gclwh7_0*x73))+(((-1.0)*x460))+(((0.00058678977375)*x139))+x288+(((0.0655)*gclwh11_0*x69))+(((-0.131)*gclwh11_0*x77))+(((0.0655)*gclwh9_0*x113))+(((-0.131)*gclwh9_0*x98))+(((0.00058678977375)*x200))+(((-0.01239915)*x165))+(((-0.01239915)*x152))+(((0.01239915)*x181)));
op[35]=((-0.01429865)+(((-1.0)*x486))+x485);
op[36]=((1.31196768)+(((-1.0)*x488))+x482);
op[37]=((((-1.6345)*gclwh3_2*x95))+(((-1.0)*gclwh12_2*x160))+(((3.269)*gclwh12_2*x73))+(((0.30941085)*x206))+(((-1.0)*x481))+(((-1.0)*gclwh4_2*x162))+(((-3.269)*gclwh14_2*x98))+(((-1.6345)*gclwh1_2*x113))+(((0.01464286847625)*x94))+(((3.269)*gclwh1_2*x98))+x469+(((-1.6345)*gclwh12_2*x95))+(((3.269)*gclwh3_2*x73))+(((-0.30941085)*x80))+((gclwh1_2*x125))+((gclwh3_2*x160))+(((-1.0)*gclwh8_2*x143))+(((-1.6345)*gclwh4_2*x69))+(((1.6345)*pp*x94))+(((3.269)*gclwh4_2*x77)));
IkReal x497=pz*pz;
IkReal x498=pp*pp;
IkReal x499=((0.1893)*pz);
IkReal x500=((1.7)*pz);
IkReal x501=(gclwh15_9*npx);
IkReal x502=(pp*r21);
IkReal x503=(pp*r22);
IkReal x504=((0.00702803935125)*r21);
IkReal x505=(gclwh5_9*npz);
IkReal x506=(pp*r20);
IkReal x507=(npy*pz);
IkReal x508=((4.0)*gclwh12_11);
IkReal x509=((3.60823078949063e-5)*r22);
IkReal x510=(gclwh14_3*rxp0_2);
IkReal x511=((0.000977833645875)*r20);
IkReal x512=(npz*pz);
IkReal x513=((0.000977833645875)*r21);
IkReal x514=(gclwh10_2*rxp2_2);
IkReal x515=((0.00076243651125)*rxp1_2);
IkReal x516=((0.00600991575645741)*r20);
IkReal x517=((0.154705425)*rxp1_2);
IkReal x518=((0.4366)*gclwh5_15);
IkReal x519=(gclwh6_11*rxp1_2);
IkReal x520=(gclwh7_0*rxp1_2);
IkReal x521=((0.154705425)*rxp2_2);
IkReal x522=((2.0)*gclwh11_10);
IkReal x523=((0.2970117)*rxp1_2);
IkReal x524=((0.017917245)*r21);
IkReal x525=(gclwh14_2*pz);
IkReal x526=(gclwh12_8*r21);
IkReal x527=(gclwh14_2*rxp0_2);
IkReal x528=((2.0)*gclwh4_11);
IkReal x529=((0.007321434238125)*r20);
IkReal x530=(npx*pz);
IkReal x531=((0.4366)*gclwh15_15);
IkReal x532=(gclwh10_11*rxp2_2);
IkReal x533=(gclwh5_9*rxp2_2);
IkReal x534=((0.020662095)*rxp1_2);
IkReal x535=((0.007321434238125)*r21);
IkReal x536=(gclwh0_0*r20);
IkReal x537=((0.0089586225)*r21);
IkReal x538=(gclwh13_0*pz);
IkReal x539=((1.6345)*pz);
IkReal x540=((0.007321434238125)*r22);
IkReal x541=((1.0)*pz);
IkReal x542=(gclwh14_14*rxp0_2);
IkReal x543=(gclwh4_14*r22);
IkReal x544=((0.1893)*rxp0_2);
IkReal x545=((0.00058678977375)*r22);
IkReal x546=(gclwh12_8*rxp1_2);
IkReal x547=((2.0)*gclwh9_10);
IkReal x548=((0.1893)*rxp2_2);
IkReal x549=((2.0)*gclwh15_10);
IkReal x550=((4.0)*gclwh14_11);
IkReal x551=(gclwh5_15*rxp2_2);
IkReal x552=((0.020662095)*rxp0_2);
IkReal x553=((2.0)*gclwh13_10);
IkReal x554=((0.3786)*rxp1_2);
IkReal x555=(gclwh9_0*r20);
IkReal x556=(gclwh13_9*r21);
IkReal x557=(gclwh15_1*r20);
IkReal x558=((0.000977833645875)*r22);
IkReal x559=((0.006199575)*rxp0_2);
IkReal x560=(gclwh6_2*rxp1_2);
IkReal x561=((0.0089586225)*r20);
IkReal x562=((2.0)*gclwh10_11);
IkReal x563=((2.0)*pp);
IkReal x564=((0.00058678977375)*r21);
IkReal x565=(gclwh1_3*r20);
IkReal x566=(gclwh14_14*r20);
IkReal x567=(gclwh9_0*rxp0_2);
IkReal x568=(gclwh4_3*rxp2_2);
IkReal x569=(gclwh5_0*r22);
IkReal x570=((0.03583449)*r20);
IkReal x571=((0.00058678977375)*r20);
IkReal x572=((0.2183)*gclwh13_15);
IkReal x573=((2.0)*gclwh7_10);
IkReal x574=(gclwh2_1*r21);
IkReal x575=((4.0)*gclwh15_10);
IkReal x576=((0.0089586225)*pz);
IkReal x577=((0.2183)*gclwh12_14);
IkReal x578=((0.2183)*gclwh14_14);
IkReal x579=(gclwh11_0*rxp2_2);
IkReal x580=(gclwh8_2*rxp0_2);
IkReal x581=((0.3786)*rxp2_2);
IkReal x582=(gclwh12_2*rxp1_2);
IkReal x583=(gclwh5_0*rxp2_2);
IkReal x584=((3.60823078949063e-5)*r21);
IkReal x585=(gclwh15_9*r20);
IkReal x586=((0.3786)*rxp0_2);
IkReal x587=((0.006199575)*rxp1_2);
IkReal x588=(gclwh14_8*npx);
IkReal x589=(gclwh13_15*r21);
IkReal x590=((0.017917245)*r20);
IkReal x591=(gclwh5_15*r22);
IkReal x592=((0.000293394886875)*r21);
IkReal x593=(gclwh13_0*rxp1_2);
IkReal x594=(gclwh7_10*rxp1_2);
IkReal x595=((0.000293394886875)*r22);
IkReal x596=(gclwh5_1*rxp2_2);
IkReal x597=((0.154705425)*rxp0_2);
IkReal x598=((0.4366)*gclwh13_15);
IkReal x599=((0.0089586225)*r22);
IkReal x600=((0.2970117)*rxp2_2);
IkReal x601=(gclwh5_9*r22);
IkReal x602=((0.7572)*rxp0_2);
IkReal x603=((4.0)*gclwh4_11);
IkReal x604=(gclwh15_1*rxp0_2);
IkReal x605=((0.000293394886875)*r20);
IkReal x606=((2.0)*gclwh6_11);
IkReal x607=((0.4366)*gclwh12_14);
IkReal x608=((0.017917245)*r22);
IkReal x609=(gclwh15_0*r20);
IkReal x610=(gclwh15_15*r20);
IkReal x611=((2.0)*gclwh12_11);
IkReal x612=(gclwh14_8*rxp0_2);
IkReal x613=((0.0655)*pz);
IkReal x614=((0.006199575)*rxp2_2);
IkReal x615=((0.04132419)*rxp1_2);
IkReal x616=((0.4366)*gclwh4_14);
IkReal x617=(gclwh15_0*rxp0_2);
IkReal x618=(gclwh14_8*r20);
IkReal x619=((0.03583449)*r22);
IkReal x620=((2.0)*gclwh8_11);
IkReal x621=((4.0)*gclwh13_10);
IkReal x622=(gclwh15_9*rxp0_2);
IkReal x623=((3.60823078949063e-5)*r20);
IkReal x624=((0.00702803935125)*r22);
IkReal x625=((0.2183)*gclwh5_15);
IkReal x626=(gclwh5_1*r22);
IkReal x627=((4.0)*gclwh5_10);
IkReal x628=(gclwh13_9*rxp1_2);
IkReal x629=((2.0)*gclwh5_10);
IkReal x630=((0.4366)*gclwh14_14);
IkReal x631=((0.020662095)*rxp2_2);
IkReal x632=(gclwh4_8*r22);
IkReal x633=(gclwh4_2*rxp2_2);
IkReal x634=((0.00600991575645741)*r21);
IkReal x635=((0.2183)*gclwh15_15);
IkReal x636=((0.2183)*gclwh4_14);
IkReal x637=((0.00702803935125)*r20);
IkReal x638=(gclwh12_14*r21);
IkReal x639=(gclwh4_8*rxp2_2);
IkReal x640=((0.2970117)*rxp0_2);
IkReal x641=(gclwh8_2*pz);
IkReal x642=(gclwh13_1*rxp1_2);
IkReal x643=((0.1893)*pp);
IkReal x644=(gclwh12_3*rxp1_2);
IkReal x645=((0.01464286847625)*r21);
IkReal x646=((0.1893)*rxp1_2);
IkReal x647=(gclwh4_3*r22);
IkReal x648=((2.0)*gclwh14_11);
IkReal x649=((0.03583449)*r21);
IkReal x650=((0.00195566729175)*x589);
IkReal x651=((0.00195566729175)*x591);
IkReal x652=((0.00195566729175)*x610);
IkReal x653=(gclwh15_10*x590);
IkReal x654=(gclwh7_10*x554);
IkReal x655=(gclwh5_10*x608);
IkReal x656=(gclwh9_10*x586);
IkReal x657=(gclwh13_10*x524);
IkReal x658=(gclwh11_10*x581);
IkReal x659=(gclwh12_14*x534);
IkReal x660=(gclwh6_5*x513);
IkReal x661=(gclwh4_14*x631);
IkReal x662=(gclwh8_5*x511);
IkReal x663=((0.020662095)*x542);
IkReal x664=(gclwh10_5*x558);
IkReal x665=((0.017917245)*x546);
IkReal x666=(gclwh8_11*x561);
IkReal x667=(gclwh14_11*x544);
IkReal x668=((0.017917245)*x639);
IkReal x669=(gclwh10_11*x599);
IkReal x670=(gclwh6_11*x537);
IkReal x671=(gclwh12_11*x646);
IkReal x672=(gclwh4_11*x548);
IkReal x673=((0.017917245)*x612);
IkReal x674=((0.017917245)*x533);
IkReal x675=(gclwh13_10*x646);
IkReal x676=(gclwh7_10*x537);
IkReal x677=(gclwh5_10*x548);
IkReal x678=((0.017917245)*x628);
IkReal x679=((0.017917245)*x622);
IkReal x680=(gclwh11_10*x599);
IkReal x681=(gclwh15_10*x544);
IkReal x682=(gclwh9_10*x561);
IkReal x683=(gclwh13_15*x534);
IkReal x684=((0.020662095)*x551);
IkReal x685=(gclwh7_7*x513);
IkReal x686=(gclwh9_7*x511);
IkReal x687=(gclwh15_15*x552);
IkReal x688=(gclwh11_7*x558);
IkReal x689=(gclwh12_11*x524);
IkReal x690=((0.3786)*x532);
IkReal x691=(gclwh4_11*x608);
IkReal x692=(gclwh8_11*x586);
IkReal x693=((0.00195566729175)*x543);
IkReal x694=((0.00195566729175)*x638);
IkReal x695=((0.00195566729175)*x566);
IkReal x696=((0.000977833645875)*x543);
IkReal x697=(gclwh10_5*x631);
IkReal x698=(gclwh12_14*x513);
IkReal x699=(gclwh8_5*x552);
IkReal x700=(gclwh6_5*x534);
IkReal x701=(gclwh14_14*x511);
IkReal x702=((0.000847933619625)*x526);
IkReal x703=((0.1893)*x519);
IkReal x704=(gclwh14_11*x561);
IkReal x705=((0.000847933619625)*x632);
IkReal x706=(gclwh8_11*x544);
IkReal x707=(gclwh12_11*x537);
IkReal x708=((0.1893)*x532);
IkReal x709=(gclwh4_11*x599);
IkReal x710=((0.000847933619625)*x618);
IkReal x711=((0.1893)*x594);
IkReal x712=(gclwh15_10*x561);
IkReal x713=((0.000847933619625)*x585);
IkReal x714=((0.000847933619625)*x601);
IkReal x715=(gclwh9_10*x544);
IkReal x716=(gclwh13_10*x537);
IkReal x717=((0.000847933619625)*x556);
IkReal x718=(gclwh11_10*x548);
IkReal x719=(gclwh5_10*x599);
IkReal x720=(gclwh15_15*x511);
IkReal x721=(gclwh7_7*x534);
IkReal x722=(gclwh5_15*x558);
IkReal x723=(gclwh9_7*x552);
IkReal x724=(gclwh11_7*x631);
IkReal x725=(gclwh13_15*x513);
IkReal x726=((2.0)*x497);
IkReal x727=(r21*x498);
IkReal x728=((1.0)*x498);
IkReal x729=(x502*x572);
IkReal x730=(x530*x531);
IkReal x731=(x503*x625);
IkReal x732=(x507*x598);
IkReal x733=(x506*x635);
IkReal x734=(x512*x518);
IkReal x735=(x506*x549);
IkReal x736=(x512*x627);
IkReal x737=(x507*x621);
IkReal x738=(x502*x553);
IkReal x739=(x530*x575);
IkReal x740=(x503*x629);
IkReal x741=((0.2183)*gclwh10_5*x512);
IkReal x742=((0.2183)*gclwh8_5*x530);
IkReal x743=((0.10915)*gclwh6_5*x502);
IkReal x744=((0.2183)*gclwh6_5*x507);
IkReal x745=((0.10915)*gclwh8_5*x506);
IkReal x746=((0.10915)*gclwh10_5*x503);
IkReal x747=(x643*x644);
IkReal x748=(x507*x606);
IkReal x749=(x561*x641);
IkReal x750=(gclwh10_2*pz*x503);
IkReal x751=(x499*x527);
IkReal x752=(x506*x641);
IkReal x753=(gclwh4_3*pp*x548);
IkReal x754=(gclwh10_2*r22*x576);
IkReal x755=(x499*x582);
IkReal x756=(x512*x562);
IkReal x757=(x499*x633);
IkReal x758=(x510*x643);
IkReal x759=(x530*x620);
IkReal x760=(gclwh6_2*pz*x537);
IkReal x761=(x642*x643);
IkReal x762=(x512*x522);
IkReal x763=(x530*x547);
IkReal x764=(gclwh11_0*r22*x576);
IkReal x765=(x555*x576);
IkReal x766=(gclwh5_1*pp*x548);
IkReal x767=(x499*x617);
IkReal x768=(gclwh11_0*pz*x503);
IkReal x769=(gclwh9_0*pz*x506);
IkReal x770=(gclwh15_1*pp*x544);
IkReal x771=(gclwh7_0*pz*x537);
IkReal x772=(x499*x593);
IkReal x773=(x499*x583);
IkReal x774=(x507*x573);
IkReal x775=((0.10915)*gclwh7_7*x502);
IkReal x776=((0.2183)*gclwh9_7*x530);
IkReal x777=((0.2183)*gclwh11_7*x512);
IkReal x778=((0.10915)*gclwh9_7*x506);
IkReal x779=((0.2183)*gclwh7_7*x507);
IkReal x780=((0.10915)*gclwh11_7*x503);
IkReal x781=(x503*x528);
IkReal x782=(x502*x611);
IkReal x783=(x530*x550);
IkReal x784=(x502*x577);
IkReal x785=(x530*x630);
IkReal x786=(x503*x636);
IkReal x787=(x506*x578);
IkReal x788=(x507*x607);
IkReal x789=(x512*x616);
IkReal x790=((0.10915)*gclwh12_14*x502);
IkReal x791=(x530*x578);
IkReal x792=((0.10915)*gclwh4_14*x503);
IkReal x793=((0.10915)*gclwh14_14*x506);
IkReal x794=(x512*x636);
IkReal x795=(x507*x577);
IkReal x796=((0.09465)*gclwh4_8*x503);
IkReal x797=(x506*x525);
IkReal x798=(gclwh12_3*x727);
IkReal x799=(x512*x528);
IkReal x800=(x499*x560);
IkReal x801=(gclwh3_3*x727);
IkReal x802=(x498*x565);
IkReal x803=(gclwh3_2*pz*x537);
IkReal x804=(x499*x588);
IkReal x805=(x525*x561);
IkReal x806=((0.09465)*gclwh12_8*x502);
IkReal x807=(x498*x647);
IkReal x808=(gclwh1_2*pz*x561);
IkReal x809=(x507*x611);
IkReal x810=(x499*x580);
IkReal x811=(gclwh4_2*r22*x576);
IkReal x812=(gclwh4_8*npz*x499);
IkReal x813=(gclwh12_2*pz*x537);
IkReal x814=(x499*x514);
IkReal x815=(x530*x648);
IkReal x816=((0.09465)*gclwh14_8*x506);
IkReal x817=(gclwh12_8*npy*x499);
IkReal x818=(x498*x557);
IkReal x819=(x499*x505);
IkReal x820=(gclwh5_0*pz*x503);
IkReal x821=(gclwh13_9*npy*x499);
IkReal x822=(x569*x576);
IkReal x823=(x502*x538);
IkReal x824=((0.09465)*gclwh15_9*x506);
IkReal x825=(x537*x538);
IkReal x826=(x498*x574);
IkReal x827=(x512*x629);
IkReal x828=(gclwh2_0*pz*x537);
IkReal x829=(x499*x567);
IkReal x830=(x507*x553);
IkReal x831=(x499*x579);
IkReal x832=(gclwh0_1*r20*x498);
IkReal x833=(x536*x576);
IkReal x834=((0.09465)*gclwh5_9*x503);
IkReal x835=(x499*x520);
IkReal x836=((0.09465)*gclwh13_9*x502);
IkReal x837=(gclwh15_0*pz*x561);
IkReal x838=(x499*x501);
IkReal x839=(x530*x549);
IkReal x840=((0.10915)*gclwh15_15*x506);
IkReal x841=(x512*x625);
IkReal x842=(x507*x572);
IkReal x843=((0.10915)*gclwh13_15*x502);
IkReal x844=((0.10915)*gclwh5_15*x503);
IkReal x845=(x530*x635);
IkReal x846=(gclwh6_2*npy*x726);
IkReal x847=(gclwh6_2*x502*x541);
IkReal x848=(gclwh10_2*npz*x726);
IkReal x849=(gclwh8_2*npx*x726);
IkReal x850=(gclwh7_0*npy*x726);
IkReal x851=(gclwh9_0*npx*x726);
IkReal x852=(gclwh11_0*npz*x726);
IkReal x853=(gclwh7_0*x502*x541);
IkReal x854=(gclwh12_2*npy*x726);
IkReal x855=(gclwh3_2*npy*x726);
IkReal x856=(gclwh1_2*npx*x726);
IkReal x857=(gclwh14_3*x530*x563);
IkReal x858=(gclwh4_2*npz*x726);
IkReal x859=(gclwh4_3*x512*x563);
IkReal x860=(gclwh12_2*x502*x541);
IkReal x861=(gclwh1_2*x506*x541);
IkReal x862=(gclwh3_3*x507*x563);
IkReal x863=(gclwh4_2*x503*x541);
IkReal x864=(gclwh1_3*x530*x563);
IkReal x865=(gclwh3_2*x502*x541);
IkReal x866=(gclwh12_3*x507*x563);
IkReal x867=(gclwh14_2*npx*x726);
IkReal x868=(gclwh14_3*r20*x728);
IkReal x869=(gclwh0_0*npx*x726);
IkReal x870=(gclwh2_0*npy*x726);
IkReal x871=(gclwh5_1*x512*x563);
IkReal x872=(gclwh13_1*x507*x563);
IkReal x873=(gclwh15_0*npx*x726);
IkReal x874=(gclwh2_1*x507*x563);
IkReal x875=(gclwh0_1*x530*x563);
IkReal x876=(gclwh5_0*npz*x726);
IkReal x877=(gclwh13_0*npy*x726);
IkReal x878=(gclwh0_0*x506*x541);
IkReal x879=(gclwh15_0*x506*x541);
IkReal x880=(gclwh2_0*x502*x541);
IkReal x881=((1.0)*gclwh13_1*x727);
IkReal x882=(x626*x728);
IkReal x883=(gclwh15_1*x530*x563);
IkReal x884=(x659+x661);
IkReal x885=(x697+x699);
IkReal x886=(x683+x684);
IkReal x887=(x723+x724);
IkReal x888=(x682+x681+x680+x774);
IkReal x889=(x669+x667+x666+x748);
IkReal x890=(x703+x704+x799+x809);
IkReal x891=(x711+x712+x827+x830);
IkReal x892=(x652+x734+x733+x732);
IkReal x893=(x660+x742+x743+x741);
IkReal x894=(x701+x793+x795+x794);
IkReal x895=(x695+x787+x788+x789);
IkReal x896=(x685+x777+x776+x775);
IkReal x897=(x720+x841+x840+x842);
IkReal x898=(x719+x718+x715+x716+x839);
IkReal x899=(x708+x709+x706+x707+x815);
IkReal x900=(x676+x677+x675+x762+x763);
IkReal x901=(x672+x670+x671+x756+x759);
IkReal x902=(((x512*x603))+(((0.3786)*x519))+((x506*x648))+((x507*x508))+((gclwh14_11*x590)));
IkReal x903=(x694+x693+x786+x784+x785);
IkReal x904=(x653+x654+x737+x736+x735);
IkReal x905=(x696+x698+x791+x790+x792);
IkReal x906=(x722+x725+x843+x845+x844);
IkReal x907=(x662+x664+x746+x744+x745);
IkReal x908=(x650+x651+x731+x730+x729);
IkReal x909=(x688+x686+x779+x778+x780);
IkReal x910=(x655+x656+x657+x658+x739+x738+x740);
IkReal x911=(x689+x690+x691+x692+x782+x783+x781);
IkReal x912=(x679+x773+x772+x771+x770+x852+x853+x851);
IkReal x913=(x673+x755+x757+x758+x760+x847+x849+x848);
IkReal x914=(x678+x674+x768+x769+x764+x765+x766+x767+x761+x850);
IkReal x915=(x668+x665+x754+x751+x750+x753+x752+x747+x749+x846);
IkReal x916=(x714+x717+x878+x879+x874+x875+x876+x877+x881+x880+x883+x882+x834+x835+x836+x837+x838);
IkReal x917=(x499+x702+x705+x797+x796+x798+x856+x857+x854+x855+x858+x808+x805+x804+x807+x806+x801+x800+x803+x802);
IkReal x918=(x710+x859+x868+x867+x866+x865+x864+x863+x862+x861+x860+x816+x817+x814+x812+x813+x810+x811);
IkReal x919=(x499+x713+x869+x870+x871+x872+x873+x818+x819+x829+x828+x823+x822+x821+x820+x826+x825+x824+x831+x832+x833);
op[38]=((((0.8732)*gclwh4_14*x512))+(((-0.0039113345835)*x638))+((x506*x630))+(((-1.0)*gclwh8_12*x640))+(((0.0039113345835)*x566))+(((0.8732)*gclwh12_14*x507))+(((-1.0)*x502*x607))+(((-1.0)*gclwh10_12*x600))+(((-0.0039113345835)*x543))+(((-0.8732)*gclwh14_14*x530))+((gclwh6_12*x523))+(((-1.0)*x503*x616)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x530))+((gclwh8_11*x602))+((x503*x603))+(((-8.0)*gclwh4_11*x512))+(((-1.0)*x506*x550))+(((0.7572)*x532))+(((-0.7572)*x519))+((x502*x508))+((gclwh12_11*x649))+(((-8.0)*gclwh12_11*x507))+(((-1.0)*gclwh14_11*x570))+((gclwh4_11*x619)));
op[40]=((0.02168232)+(((-1.0)*x902))+x911);
op[41]=(((gclwh3_2*x564))+(((-0.131)*npx*x525))+(((-1.0)*gclwh12_2*x564))+((gclwh1_2*x571))+((gclwh14_2*x571))+(((-0.0655)*gclwh1_2*x506))+(((-0.01239915)*x580))+(((-1.0)*x895))+(((0.131)*gclwh4_2*x512))+(((0.0655)*gclwh14_2*x506))+(((-0.0655)*gclwh12_2*x502))+(((0.131)*gclwh12_2*x507))+(((0.131)*gclwh1_2*x530))+(((-0.0655)*gclwh4_2*x503))+x903+(((-0.0655)*gclwh3_2*x502))+(((-0.01239915)*x514))+(((0.131)*gclwh3_2*x507))+(((0.01239915)*x560))+(((-1.0)*gclwh4_2*x545)));
op[42]=((((3.269)*gclwh15_0*x530))+(((-3.269)*gclwh13_0*x507))+(((-0.30941085)*x520))+(((-1.6345)*gclwh15_0*x506))+(((3.269)*gclwh0_0*x530))+(((0.30941085)*x567))+(((1.6345)*gclwh13_0*x502))+(((-1.0)*x908))+(((-1.6345)*gclwh0_0*x506))+(((0.30941085)*x579))+(((0.01464286847625)*x569))+((gclwh13_0*x645))+((gclwh2_0*x645))+(((-0.01464286847625)*x609))+(((0.01464286847625)*x536))+x892+(((3.269)*gclwh2_0*x507))+(((-1.6345)*gclwh2_0*x502))+(((-3.269)*gclwh5_0*x512))+(((1.6345)*gclwh5_0*x503)));
op[43]=((1.31196768)+(((-1.0)*x904))+x910);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-8.0)*gclwh13_10*x507))+(((-0.7572)*x594))+(((8.0)*gclwh15_10*x530))+((x503*x627))+((gclwh13_10*x649))+((x502*x621))+((gclwh5_10*x619))+(((-1.0)*x506*x575))+((gclwh9_10*x602))+(((-8.0)*gclwh5_10*x512))+(((-1.0)*gclwh15_10*x570)));
op[45]=(((gclwh11_13*x600))+((gclwh9_13*x640))+((x503*x518))+(((0.8732)*gclwh15_15*x530))+(((-1.0)*gclwh7_13*x523))+((x502*x598))+(((0.0039113345835)*x591))+(((-0.8732)*gclwh13_15*x507))+(((-1.0)*x506*x531))+(((-0.0039113345835)*x610))+(((0.0039113345835)*x589))+(((-0.8732)*gclwh5_15*x512)));
op[46]=((((0.131)*gclwh2_0*x507))+(((0.131)*gclwh15_0*x530))+(((-1.0)*gclwh15_0*x571))+(((-0.0655)*gclwh15_0*x506))+(((-0.0655)*gclwh0_0*x506))+(((-0.131)*gclwh5_0*x512))+(((0.131)*gclwh0_0*x530))+(((0.00058678977375)*x536))+(((-0.131)*gclwh13_0*x507))+(((-0.01239915)*x520))+((gclwh5_0*x545))+(((-1.0)*x892))+(((0.01239915)*x579))+((gclwh13_0*x564))+((gclwh2_0*x564))+(((-0.0655)*gclwh2_0*x502))+(((0.0655)*gclwh13_0*x502))+x908+(((0.0655)*gclwh5_0*x503))+(((0.01239915)*x567)));
op[47]=((0.02168232)+(((-1.0)*x910))+x904);
op[48]=((((-1.0)*gclwh4_8*x521))+(((-1.0)*gclwh12_8*x517))+((gclwh10_12*x540))+((gclwh8_12*x529))+(((-1.6345)*gclwh10_12*x512))+(((-1.0)*x907))+(((0.81725)*gclwh8_12*x506))+(((-1.0)*x884))+((gclwh14_8*x597))+(((0.81725)*gclwh10_12*x503))+x663+(((-1.6345)*gclwh8_12*x530))+(((1.6345)*gclwh6_12*x507))+(((-1.0)*gclwh6_12*x535))+x893+(((-0.81725)*gclwh6_12*x502)));
op[49]=((((0.12699240901125)*x510))+(((-1.0)*gclwh10_11*x503))+(((-1.0)*x913))+(((-0.12699240901125)*x568))+(((-1.0)*x889))+(((-0.12699240901125)*x644))+((gclwh6_11*x502))+x915+x901+(((-1.0)*gclwh8_11*x506)));
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x512))+((gclwh12_11*x554))+((gclwh6_11*x524))+((x502*x606))+(((4.0)*gclwh8_11*x530))+(((-4.0)*gclwh6_11*x507))+(((-1.0)*gclwh8_11*x590))+(((-1.0)*x506*x620))+(((-1.0)*gclwh14_11*x586))+(((-1.0)*x503*x562))+(((-1.0)*gclwh10_11*x608))+((gclwh4_11*x581)));
op[51]=((((0.14850585)*x582))+(((-0.160905)*x612))+(((-1.0)*gclwh8_2*x637))+(((0.160905)*x639))+(((-0.14850585)*x527))+((gclwh6_2*x504))+(((0.7845)*gclwh6_2*x502))+(((-1.0)*gclwh10_2*x624))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x546))+(((-0.7845)*gclwh8_2*x506))+((gclwh12_14*x615))+(((0.14850585)*x633))+(((1.569)*gclwh10_2*x512))+(((1.569)*gclwh8_2*x530))+(((-1.569)*gclwh6_2*x507))+(((-0.04132419)*x542))+(((-0.7845)*gclwh10_2*x503)));
op[52]=((((-0.0655)*gclwh10_12*x512))+(((-0.0655)*gclwh8_12*x530))+(((0.0655)*gclwh6_12*x507))+(((-0.03275)*gclwh6_12*x502))+(((-1.0)*x907))+((gclwh4_8*x614))+(((0.03275)*gclwh8_12*x506))+((gclwh10_12*x595))+(((-1.0)*gclwh6_12*x592))+(((-1.0)*x663))+(((0.006199575)*x546))+(((0.03275)*gclwh10_12*x503))+(((-1.0)*gclwh14_8*x559))+x884+x893+((gclwh8_12*x605)));
op[53]=(((gclwh8_11*x506))+(((-1.0)*gclwh6_11*x502))+(((-1.0)*x901))+(((-1.0)*x913))+((gclwh10_11*x503))+(((-0.00076243651125)*x568))+x889+x915+(((0.00076243651125)*x510))+(((-1.0)*gclwh12_3*x515)));
op[54]=(((gclwh11_10*x503))+((gclwh9_10*x506))+(((-1.0)*x900))+(((-1.0)*x912))+(((-0.12699240901125)*x596))+(((-1.0)*gclwh7_10*x502))+(((-0.12699240901125)*x642))+(((0.12699240901125)*x604))+x888+x914);
op[55]=((((-1.0)*gclwh13_9*x517))+(((-1.6345)*gclwh9_13*x530))+(((0.81725)*gclwh11_13*x503))+(((0.81725)*gclwh9_13*x506))+(((-1.0)*x909))+(((-1.0)*gclwh5_9*x521))+(((-1.0)*gclwh7_13*x535))+(((-1.6345)*gclwh11_13*x512))+(((-1.0)*x886))+(((-0.81725)*gclwh7_13*x502))+(((1.6345)*gclwh7_13*x507))+x687+((gclwh11_13*x540))+((gclwh15_9*x597))+x896+((gclwh9_13*x529)));
op[56]=((((-1.0)*gclwh13_15*x615))+(((-0.7845)*gclwh11_0*x503))+(((0.14850585)*x583))+(((-0.04132419)*x551))+(((-0.00702803935125)*x555))+(((-1.569)*gclwh7_0*x507))+(((-1.0)*gclwh11_0*x624))+((gclwh7_0*x504))+(((0.160905)*x622))+(((-0.14850585)*x617))+(((1.569)*gclwh9_0*x530))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x628))+(((0.7845)*gclwh7_0*x502))+(((0.14850585)*x593))+(((-0.160905)*x533))+(((-0.7845)*gclwh9_0*x506))+(((1.569)*gclwh11_0*x512)));
op[57]=((0.17125635)+((gclwh5_10*x581))+((gclwh13_10*x554))+(((-1.0)*gclwh11_10*x608))+(((-1.0)*gclwh15_10*x586))+(((-1.0)*x503*x522))+((x502*x573))+(((-1.0)*x506*x547))+(((4.0)*gclwh11_10*x512))+((gclwh7_10*x524))+(((-4.0)*gclwh7_10*x507))+(((4.0)*gclwh9_10*x530))+(((-1.0)*gclwh9_10*x590)));
op[58]=((((-1.0)*gclwh11_10*x503))+((gclwh7_10*x502))+(((-1.0)*x912))+(((-1.0)*x888))+(((-1.0)*gclwh13_1*x515))+(((-1.0)*gclwh9_10*x506))+(((0.00076243651125)*x604))+x914+x900+(((-0.00076243651125)*x596)));
op[59]=((((-0.0655)*gclwh9_13*x530))+(((0.03275)*gclwh9_13*x506))+(((-1.0)*x687))+(((-0.03275)*gclwh7_13*x502))+(((-1.0)*x909))+(((-0.0655)*gclwh11_13*x512))+(((-1.0)*gclwh15_9*x559))+(((0.0655)*gclwh7_13*x507))+(((0.006199575)*x533))+(((-1.0)*gclwh7_13*x592))+x886+x896+((gclwh9_13*x605))+((gclwh13_9*x587))+((gclwh11_13*x595))+(((0.03275)*gclwh11_13*x503)));
op[60]=((((-1.0)*gclwh4_8*x540))+(((1.6345)*gclwh12_8*x507))+(((-1.0)*x905))+((gclwh6_12*x517))+(((-0.81725)*gclwh4_8*x503))+(((-0.007321434238125)*x526))+(((-1.0)*gclwh8_12*x597))+(((-1.0)*x700))+(((-0.81725)*gclwh12_8*x502))+((gclwh14_8*x529))+(((0.81725)*gclwh14_8*x506))+(((1.6345)*gclwh4_8*x512))+x885+x894+(((-1.0)*gclwh10_12*x521))+(((-1.6345)*gclwh14_8*x530)));
op[61]=((0.679811285)+((gclwh3_3*x634))+(((-0.66189404)*gclwh12_3*x502))+(((-1.0)*gclwh14_11*x506))+(((-0.00600991575645741)*x647))+(((1.341705325)*gclwh12_3*x507))+(((-1.0)*x890))+(((-1.0)*x918))+((gclwh14_3*x516))+(((0.66189404)*gclwh14_3*x506))+(((-0.66189404)*gclwh4_3*x503))+(((1.341705325)*gclwh3_3*x507))+((gclwh12_11*x502))+(((1.341705325)*gclwh1_3*x530))+x899+(((-0.679811285)*gclwh3_3*x502))+(((-1.0)*gclwh12_3*x634))+(((1.341705325)*gclwh4_3*x512))+(((-0.679811285)*gclwh1_3*x506))+(((-1.341705325)*gclwh14_3*x530))+x917+((gclwh4_11*x503))+((gclwh1_3*x516)));
op[62]=((0.07735732)+(((-1.0)*x902))+x911);
op[63]=((((-0.14850585)*x560))+(((-1.569)*gclwh12_2*x507))+(((-1.569)*gclwh1_2*x530))+(((-0.85)*gclwh14_8*x506))+(((0.7845)*gclwh12_2*x502))+(((0.14850585)*x580))+(((0.85)*gclwh4_8*x503))+(((-1.569)*gclwh4_2*x512))+(((-1.0)*gclwh12_8*npy*x500))+(((-1.0)*gclwh4_8*npz*x500))+(((-1.0)*gclwh1_2*x637))+(((0.14850585)*x514))+(((-1.0)*x895))+(((0.7845)*gclwh3_2*x502))+(((-0.7845)*gclwh14_2*x506))+((gclwh12_2*x504))+(((0.85)*gclwh12_8*x502))+(((1.569)*npx*x525))+(((0.007614829125)*x526))+(((0.7845)*gclwh1_2*x506))+((x500*x588))+(((-0.007614829125)*x618))+(((0.7845)*gclwh4_2*x503))+x903+(((0.007614829125)*x632))+(((-1.0)*gclwh14_2*x637))+(((-1.0)*gclwh3_2*x504))+((gclwh4_2*x624))+(((-1.569)*gclwh3_2*x507)));
op[64]=((((-1.0)*gclwh14_8*x605))+(((-0.0655)*gclwh4_8*x512))+(((0.0655)*gclwh14_8*x530))+(((0.000293394886875)*x526))+(((-1.0)*x894))+(((0.03275)*gclwh12_8*x502))+((gclwh4_8*x595))+(((-0.0655)*gclwh12_8*x507))+(((-1.0)*gclwh8_12*x559))+(((-1.0)*x700))+((gclwh6_12*x587))+x885+(((-0.03275)*gclwh14_8*x506))+(((-1.0)*gclwh10_12*x614))+x905+(((0.03275)*gclwh4_8*x503)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x507))+(((3.60823078949063e-5)*x565))+(((-1.0)*gclwh12_11*x502))+(((0.00493096)*gclwh12_3*x502))+((gclwh14_11*x506))+(((-1.0)*x899))+((gclwh3_3*x584))+(((-1.0)*x918))+(((-1.0)*gclwh12_3*x584))+(((-1.0)*gclwh4_11*x503))+(((-0.008055325)*gclwh14_3*x530))+(((0.008055325)*gclwh12_3*x507))+(((0.008055325)*gclwh1_3*x530))+(((-0.00493096)*gclwh14_3*x506))+(((0.00493096)*gclwh4_3*x503))+(((-1.0)*gclwh4_3*x509))+x890+(((0.008055325)*gclwh4_3*x512))+(((-0.012986285)*gclwh3_3*x502))+x917+((gclwh14_3*x623))+(((-0.012986285)*gclwh1_3*x506)));
op[66]=((-0.679811285)+((gclwh0_1*x516))+((gclwh13_1*x634))+(((1.341705325)*gclwh15_1*x530))+(((-1.0)*gclwh15_1*x516))+(((1.341705325)*gclwh0_1*x530))+(((-1.0)*x891))+(((-1.0)*gclwh15_10*x506))+(((-1.0)*x916))+(((-0.679811285)*gclwh0_1*x506))+(((0.00600991575645741)*x574))+(((-0.66189404)*gclwh15_1*x506))+(((-1.341705325)*gclwh13_1*x507))+((gclwh5_10*x503))+(((-0.679811285)*gclwh2_1*x502))+(((0.66189404)*gclwh13_1*x502))+(((-1.341705325)*gclwh5_1*x512))+x898+((gclwh13_10*x502))+x919+(((0.66189404)*gclwh5_1*x503))+(((0.00600991575645741)*x626))+(((1.341705325)*gclwh2_1*x507)));
op[67]=((((0.81725)*gclwh13_9*x502))+((gclwh9_13*x597))+(((-1.0)*x897))+(((-1.0)*x887))+((gclwh13_9*x535))+(((-1.0)*x505*x539))+(((0.81725)*gclwh5_9*x503))+(((-1.0)*gclwh15_9*x529))+((gclwh11_13*x521))+((x501*x539))+x721+(((-0.81725)*gclwh15_9*x506))+((gclwh5_9*x540))+x906+(((-1.6345)*gclwh13_9*x507))+(((-1.0)*gclwh7_13*x517)));
op[68]=((((-1.0)*gclwh13_0*x504))+(((0.85)*gclwh13_9*x502))+(((-0.14850585)*x567))+(((-0.85)*gclwh15_9*x506))+((x500*x501))+(((-1.569)*gclwh0_0*x530))+(((-1.569)*gclwh2_0*x507))+(((0.7845)*gclwh2_0*x502))+(((-1.0)*x892))+(((-0.7845)*gclwh5_0*x503))+(((1.569)*gclwh5_0*x512))+(((-1.0)*gclwh13_9*npy*x500))+(((0.007614829125)*x601))+(((0.00702803935125)*x609))+(((-0.00702803935125)*x569))+(((-0.14850585)*x579))+(((0.85)*gclwh5_9*x503))+(((0.14850585)*x520))+(((0.007614829125)*x556))+(((-1.569)*gclwh15_0*x530))+(((-0.7845)*gclwh13_0*x502))+(((0.7845)*gclwh15_0*x506))+(((-0.007614829125)*x585))+(((-1.0)*gclwh2_0*x504))+(((1.569)*gclwh13_0*x507))+(((0.7845)*gclwh0_0*x506))+x908+(((-1.0)*x500*x505))+(((-0.00702803935125)*x536)));
op[69]=((0.07735732)+(((-1.0)*x910))+x904);
op[70]=((0.012986285)+((gclwh5_1*x509))+((gclwh0_1*x623))+((gclwh13_1*x584))+(((-1.0)*gclwh5_10*x503))+(((0.008055325)*gclwh0_1*x530))+(((-1.0)*x898))+(((-1.0)*x916))+(((-0.00493096)*gclwh13_1*x502))+(((3.60823078949063e-5)*x574))+(((0.00493096)*gclwh15_1*x506))+(((-0.012986285)*gclwh0_1*x506))+(((0.008055325)*gclwh2_1*x507))+(((0.008055325)*gclwh15_1*x530))+(((-0.008055325)*gclwh5_1*x512))+(((-3.60823078949063e-5)*x557))+(((-0.00493096)*gclwh5_1*x503))+x891+(((-1.0)*gclwh13_10*x502))+(((-0.012986285)*gclwh2_1*x502))+x919+(((-0.008055325)*gclwh13_1*x507))+((gclwh15_10*x506)));
op[71]=((((-1.0)*gclwh7_13*x587))+((gclwh9_13*x559))+(((0.0655)*gclwh13_9*x507))+((gclwh11_13*x614))+(((-1.0)*x906))+(((-1.0)*x887))+(((-0.03275)*gclwh13_9*x502))+(((0.03275)*gclwh15_9*x506))+(((-1.0)*x501*x613))+(((-1.0)*gclwh5_9*x595))+(((0.000293394886875)*x585))+((x505*x613))+x721+x897+(((-0.000293394886875)*x556))+(((-0.03275)*gclwh5_9*x503)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x920=htj1*htj1;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(((1.0)+x920),-1);
if(!x921.valid){
continue;
}
cj1array[numsolutions]=((x921.value)*(((1.0)+(((-1.0)*x920)))));
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x922.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x922.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x923=htj2*htj2;
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((1.0)+x923),-1);
if(!x924.valid){
continue;
}
cj2array[numsolutions]=((x924.value)*(((1.0)+(((-1.0)*x923)))));
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x925.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x925.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x926=htj3*htj3;
CheckValue<IkReal> x927=IKPowWithIntegerCheck(((1.0)+x926),-1);
if(!x927.valid){
continue;
}
cj3array[numsolutions]=((x927.value)*(((1.0)+(((-1.0)*x926)))));
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x928.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x928.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x929=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x929);
rxp1_0=(pz*r11);
rxp1_1=(r01*x929);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(r22,-1);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932=IKPowWithIntegerCheck(sj3,-1);
if(!x932.valid){
continue;
}
sj4array[0]=((x931.value)*(x932.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x933=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x933);
rxp1_0=(pz*r11);
rxp1_1=(r01*x933);
IkReal x934=((16.0)*sj4);
IkReal x935=(cj1*cj2);
IkReal x936=((4.0)*sj3);
IkReal x937=((8.0)*sj4);
IkReal x938=((4.0)*cj4);
IkReal x939=(sj1*sj2);
IkReal x940=((4.0)*sj4);
IkReal x941=(cj3*r02);
IkReal x942=((16.0)*sj3);
IkReal x943=((8.0)*sj3);
IkReal x944=((12.0)*cj4);
IkReal x945=((12.0)*sj4);
IkReal x946=(cj3*r12);
IkReal x947=(r11*x936);
IkReal x948=(r01*x936);
IkReal x949=(r01*x939);
IkReal x950=(cj3*cj4*r01);
IkReal x951=(cj3*cj4*r11);
IkReal x952=(cj3*r10*x938);
IkReal x953=(x945*x946);
IkReal x954=(cj3*r00*x938);
IkReal x955=(x941*x945);
IkReal x956=(r00*x939*x940);
IkReal x957=(r02*x939*x944);
IkReal x958=(r00*x935*x940);
IkReal x959=(r02*x935*x944);
IkReal x960=(r10*x939*x940);
IkReal x961=(r12*x935*x944);
IkReal x962=(r12*x939*x944);
IkReal x963=(r10*x935*x940);
IkReal x964=(x958+x947);
IkReal x965=(x960+x948);
IkReal x966=(x956+x952);
IkReal x967=(x959+x953);
IkReal x968=(x963+x954);
IkReal x969=(x962+x955);
j5eval[0]=((((0.5)*(IKabs((x964+x957+(((-1.0)*x967))+(((-1.0)*x966)))))))+(IKabs(((((-1.0)*r00*x943))+(((-8.0)*x950))+(((-1.0)*r11*x935*x937))+((r11*x937*x939)))))+(((0.5)*(IKabs(((((-1.0)*r02*x935*x938))+((r02*x938*x939))+x964+(((-1.0)*x966))+(((-1.0)*x940*x946)))))))+(((0.5)*(IKabs((((r01*x934*x935))+(((-16.0)*x951))+(((-1.0)*r10*x942))+(((-1.0)*x934*x949)))))))+(((0.5)*(IKabs((x961+x965+(((-1.0)*x969))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((x961+x968+(((-1.0)*x965))+(((-1.0)*x969)))))))+(((0.5)*(IKabs((x966+x957+(((-1.0)*x964))+(((-1.0)*x967)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x942))+((r11*x934*x939))+(((-16.0)*x950))+(((-1.0)*r11*x934*x935)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x938*x939))+((r12*x935*x938))+x965+(((-1.0)*x968))+(((-1.0)*x940*x941)))))))+(IKabs((((r01*x935*x937))+(((-8.0)*x951))+(((-1.0)*r10*x943))+(((-1.0)*x937*x949))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x970=(r10*sj3);
IkReal x971=(r01*sj4);
IkReal x972=(cj1*cj2);
IkReal x973=(cj3*cj4);
IkReal x974=(sj1*sj2);
IkReal x975=(cj4*r02);
IkReal x976=((4.0)*r11*sj3);
IkReal x977=(cj3*r12*sj4);
IkReal x978=((4.0)*r00*sj4);
IkReal x979=((4.0)*r10*x973);
IkReal x980=((12.0)*x977);
IkReal x981=((4.0)*x977);
IkReal x982=(x972*x978);
IkReal x983=(x974*x978);
IkReal x984=((12.0)*x974*x975);
IkReal x985=((12.0)*x972*x975);
IkReal x986=((4.0)*x974*x975);
IkReal x987=((4.0)*x972*x975);
IkReal x988=(x982+x976);
IkReal x989=(x983+x979);
IkReal x990=(x987+x981);
IkReal x991=(x985+x980);
IkReal x992=((((8.0)*x971*x972))+(((-8.0)*x970))+(((-8.0)*x971*x974))+(((-8.0)*r11*x973)));
op[0]=((((-1.0)*x989))+(((-1.0)*x990))+x988+x986);
op[1]=x992;
op[2]=((((-1.0)*x989))+(((-1.0)*x991))+x988+x984);
op[3]=((((-16.0)*r11*x973))+(((-16.0)*x970))+(((16.0)*x971*x972))+(((-16.0)*x971*x974)));
op[4]=((((-1.0)*x988))+(((-1.0)*x991))+x989+x984);
op[5]=x992;
op[6]=((((-1.0)*x988))+(((-1.0)*x990))+x989+x986);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x993=(cj1*cj2);
IkReal x994=((4.0)*cj4);
IkReal x995=(sj1*sj2);
IkReal x996=((4.0)*sj4);
IkReal x997=(r00*sj3);
IkReal x998=(cj3*r02);
IkReal x999=((4.0)*r01*sj3);
IkReal x1000=((16.0)*r11*sj4);
IkReal x1001=(cj3*cj4*r01);
IkReal x1002=((12.0)*cj4*r12);
IkReal x1003=((8.0)*r11*sj4);
IkReal x1004=(cj3*r00*x994);
IkReal x1005=((12.0)*sj4*x998);
IkReal x1006=(x996*x998);
IkReal x1007=(r10*x993*x996);
IkReal x1008=(r10*x995*x996);
IkReal x1009=(x1002*x993);
IkReal x1010=(x1002*x995);
IkReal x1011=(r12*x993*x994);
IkReal x1012=(r12*x994*x995);
IkReal x1013=(x1008+x999);
IkReal x1014=(x1007+x1004);
IkReal x1015=(x1012+x1006);
IkReal x1016=(x1010+x1005);
IkReal x1017=((((-1.0)*x1003*x993))+((x1003*x995))+(((-8.0)*x1001))+(((-8.0)*x997)));
j5evalpoly[0]=(x1014+x1011+(((-1.0)*x1015))+(((-1.0)*x1013))+(((htj5*htj5)*((x1014+x1009+(((-1.0)*x1016))+(((-1.0)*x1013))))))+(((htj5*htj5*htj5*htj5)*((x1013+x1009+(((-1.0)*x1016))+(((-1.0)*x1014))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1011+x1013+(((-1.0)*x1015))+(((-1.0)*x1014))))))+((x1017*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1017))+(((htj5*htj5*htj5)*((((x1000*x995))+(((-16.0)*x1001))+(((-16.0)*x997))+(((-1.0)*x1000*x993)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1018=(cj5*sj4);
IkReal x1019=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1018))+((r01*x1019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1018))+((cj4*r12))+(((-1.0)*r11*x1019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1018))+((r01*x1019))))+IKsqr((((r10*x1018))+((cj4*r12))+(((-1.0)*r11*x1019))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1018))+((r01*x1019))), (((r10*x1018))+((cj4*r12))+(((-1.0)*r11*x1019))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1020=IKcos(j0);
IkReal x1021=IKsin(j0);
IkReal x1022=(r02*sj4);
IkReal x1023=((1.0)*sj3);
IkReal x1024=(r12*sj4);
IkReal x1025=(cj3*cj4);
IkReal x1026=((1.0)*cj5);
IkReal x1027=(r11*sj5);
IkReal x1028=((1.0)*cj1);
IkReal x1029=((0.39225)*sj1);
IkReal x1030=(cj5*r01);
IkReal x1031=(r01*sj5);
IkReal x1032=(r00*sj5);
IkReal x1033=((1.0)*sj1);
IkReal x1034=((0.39225)*cj2);
IkReal x1035=(cj5*r11);
IkReal x1036=(r10*sj5);
IkReal x1037=((1.0)*cj4);
IkReal x1038=(sj2*x1020);
IkReal x1039=(sj2*x1021);
IkReal x1040=(cj4*cj5*sj3);
IkReal x1041=(cj1*x1020);
IkReal x1042=(cj2*x1020);
IkReal x1043=(cj1*x1021);
IkReal x1044=(cj2*x1021);
evalcond[0]=(x1020+((sj4*x1027))+(((-1.0)*r12*x1037))+(((-1.0)*r10*sj4*x1026)));
evalcond[1]=(((sj4*x1031))+(((-1.0)*r00*sj4*x1026))+(((-1.0)*x1021))+(((-1.0)*r02*x1037)));
evalcond[2]=((((-0.10915)*x1021))+((x1034*x1041))+(((-1.0)*x1029*x1038))+(((-1.0)*px))+(((-0.09465)*x1032))+(((-0.09465)*x1030))+(((0.425)*x1041)));
evalcond[3]=(((x1034*x1043))+(((0.10915)*x1020))+(((-1.0)*x1029*x1039))+(((-1.0)*py))+(((-0.09465)*x1035))+(((-0.09465)*x1036))+(((0.425)*x1043)));
evalcond[4]=((((-1.0)*x1028*x1042))+((sj1*x1038))+(((-1.0)*r00*x1025*x1026))+((sj3*x1032))+((sj3*x1030))+((x1025*x1031))+((cj3*x1022)));
evalcond[5]=((((-1.0)*x1028*x1044))+((sj1*x1039))+(((-1.0)*r10*x1025*x1026))+((sj3*x1036))+((sj3*x1035))+((x1025*x1027))+((cj3*x1024)));
evalcond[6]=((((-1.0)*x1028*x1038))+((cj3*x1032))+((cj3*x1030))+(((-1.0)*x1033*x1042))+(((-1.0)*x1022*x1023))+((r00*x1040))+(((-1.0)*cj4*x1023*x1031)));
evalcond[7]=((((-1.0)*x1028*x1039))+(((-1.0)*x1023*x1024))+((cj3*x1035))+((cj3*x1036))+(((-1.0)*x1033*x1044))+(((-1.0)*cj4*x1023*x1027))+((r10*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(cj3,-1);
if(!x1045.valid){
continue;
}
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(r22,-1);
if(!x1046.valid){
continue;
}
sj4array[0]=((-1.0)*(x1045.value)*(x1046.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1047=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1047);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1047);
IkReal x1048=((16.0)*sj4);
IkReal x1049=(cj1*cj2);
IkReal x1050=((4.0)*sj3);
IkReal x1051=((8.0)*sj4);
IkReal x1052=((4.0)*cj4);
IkReal x1053=(sj1*sj2);
IkReal x1054=((4.0)*sj4);
IkReal x1055=(cj3*r02);
IkReal x1056=((16.0)*sj3);
IkReal x1057=((8.0)*sj3);
IkReal x1058=((12.0)*cj4);
IkReal x1059=((12.0)*sj4);
IkReal x1060=(cj3*r12);
IkReal x1061=(r11*x1050);
IkReal x1062=(r01*x1050);
IkReal x1063=(r01*x1053);
IkReal x1064=(cj3*cj4*r01);
IkReal x1065=(cj3*cj4*r11);
IkReal x1066=(cj3*r10*x1052);
IkReal x1067=(x1059*x1060);
IkReal x1068=(cj3*r00*x1052);
IkReal x1069=(x1055*x1059);
IkReal x1070=(r00*x1053*x1054);
IkReal x1071=(r02*x1053*x1058);
IkReal x1072=(r00*x1049*x1054);
IkReal x1073=(r02*x1049*x1058);
IkReal x1074=(r10*x1053*x1054);
IkReal x1075=(r12*x1049*x1058);
IkReal x1076=(r12*x1053*x1058);
IkReal x1077=(r10*x1049*x1054);
IkReal x1078=(x1072+x1061);
IkReal x1079=(x1074+x1062);
IkReal x1080=(x1070+x1066);
IkReal x1081=(x1073+x1067);
IkReal x1082=(x1077+x1068);
IkReal x1083=(x1076+x1069);
j5eval[0]=((((0.5)*(IKabs((((r02*x1052*x1053))+x1078+(((-1.0)*r02*x1049*x1052))+(((-1.0)*x1054*x1060))+(((-1.0)*x1080)))))))+(((0.5)*(IKabs((x1071+x1080+(((-1.0)*x1081))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1078+x1071+(((-1.0)*x1080))+(((-1.0)*x1081)))))))+(IKabs((((r01*x1049*x1051))+(((-1.0)*r10*x1057))+(((-1.0)*x1051*x1063))+(((-8.0)*x1065)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1056))+(((-1.0)*r11*x1048*x1049))+((r11*x1048*x1053))+(((-16.0)*x1064)))))))+(((0.5)*(IKabs((x1075+x1082+(((-1.0)*x1083))+(((-1.0)*x1079)))))))+(((0.5)*(IKabs((x1079+x1075+(((-1.0)*x1083))+(((-1.0)*x1082)))))))+(IKabs(((((-1.0)*r00*x1057))+(((-1.0)*r11*x1049*x1051))+((r11*x1051*x1053))+(((-8.0)*x1064)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1056))+(((-1.0)*x1048*x1063))+((r01*x1048*x1049))+(((-16.0)*x1065)))))))+(((0.5)*(IKabs((x1079+(((-1.0)*x1054*x1055))+(((-1.0)*r12*x1052*x1053))+(((-1.0)*x1082))+((r12*x1049*x1052))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1084=(r10*sj3);
IkReal x1085=(r01*sj4);
IkReal x1086=(cj1*cj2);
IkReal x1087=(cj3*cj4);
IkReal x1088=(sj1*sj2);
IkReal x1089=(cj4*r02);
IkReal x1090=((4.0)*r11*sj3);
IkReal x1091=(cj3*r12*sj4);
IkReal x1092=((4.0)*r00*sj4);
IkReal x1093=((4.0)*r10*x1087);
IkReal x1094=((12.0)*x1091);
IkReal x1095=((4.0)*x1091);
IkReal x1096=(x1086*x1092);
IkReal x1097=(x1088*x1092);
IkReal x1098=((12.0)*x1088*x1089);
IkReal x1099=((12.0)*x1086*x1089);
IkReal x1100=((4.0)*x1088*x1089);
IkReal x1101=((4.0)*x1086*x1089);
IkReal x1102=(x1096+x1090);
IkReal x1103=(x1097+x1093);
IkReal x1104=(x1101+x1095);
IkReal x1105=(x1094+x1099);
IkReal x1106=((((-8.0)*x1085*x1088))+(((-8.0)*r11*x1087))+(((8.0)*x1085*x1086))+(((-8.0)*x1084)));
op[0]=(x1102+x1100+(((-1.0)*x1103))+(((-1.0)*x1104)));
op[1]=x1106;
op[2]=(x1102+x1098+(((-1.0)*x1103))+(((-1.0)*x1105)));
op[3]=((((-16.0)*x1084))+(((16.0)*x1085*x1086))+(((-16.0)*x1085*x1088))+(((-16.0)*r11*x1087)));
op[4]=(x1103+x1098+(((-1.0)*x1102))+(((-1.0)*x1105)));
op[5]=x1106;
op[6]=(x1103+x1100+(((-1.0)*x1102))+(((-1.0)*x1104)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1107=(cj1*cj2);
IkReal x1108=((4.0)*cj4);
IkReal x1109=(sj1*sj2);
IkReal x1110=((4.0)*sj4);
IkReal x1111=(r00*sj3);
IkReal x1112=(cj3*r02);
IkReal x1113=((4.0)*r01*sj3);
IkReal x1114=((16.0)*r11*sj4);
IkReal x1115=(cj3*cj4*r01);
IkReal x1116=((12.0)*cj4*r12);
IkReal x1117=((8.0)*r11*sj4);
IkReal x1118=(cj3*r00*x1108);
IkReal x1119=((12.0)*sj4*x1112);
IkReal x1120=(x1110*x1112);
IkReal x1121=(r10*x1107*x1110);
IkReal x1122=(r10*x1109*x1110);
IkReal x1123=(x1107*x1116);
IkReal x1124=(x1109*x1116);
IkReal x1125=(r12*x1107*x1108);
IkReal x1126=(r12*x1108*x1109);
IkReal x1127=(x1113+x1122);
IkReal x1128=(x1118+x1121);
IkReal x1129=(x1120+x1126);
IkReal x1130=(x1119+x1124);
IkReal x1131=(((x1109*x1117))+(((-1.0)*x1107*x1117))+(((-8.0)*x1115))+(((-8.0)*x1111)));
j5evalpoly[0]=(x1128+x1125+(((htj5*htj5*htj5)*((((x1109*x1114))+(((-16.0)*x1115))+(((-16.0)*x1111))+(((-1.0)*x1107*x1114))))))+(((htj5*htj5)*((x1128+x1123+(((-1.0)*x1130))+(((-1.0)*x1127))))))+(((-1.0)*x1127))+(((-1.0)*x1129))+((x1131*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1125+x1127+(((-1.0)*x1128))+(((-1.0)*x1129))))))+((htj5*x1131))+(((htj5*htj5*htj5*htj5)*((x1123+x1127+(((-1.0)*x1130))+(((-1.0)*x1128)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1132=(cj5*sj4);
IkReal x1133=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1133))+(((-1.0)*r00*x1132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1133))+((r10*x1132))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1133))+(((-1.0)*r00*x1132))))+IKsqr(((((-1.0)*r11*x1133))+((r10*x1132))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1133))+(((-1.0)*r00*x1132))), ((((-1.0)*r11*x1133))+((r10*x1132))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1134=IKcos(j0);
IkReal x1135=IKsin(j0);
IkReal x1136=(r02*sj4);
IkReal x1137=((1.0)*sj3);
IkReal x1138=(r12*sj4);
IkReal x1139=(cj3*cj4);
IkReal x1140=((1.0)*cj5);
IkReal x1141=(r11*sj5);
IkReal x1142=((1.0)*cj1);
IkReal x1143=((0.39225)*sj1);
IkReal x1144=(cj5*r01);
IkReal x1145=(r01*sj5);
IkReal x1146=(r00*sj5);
IkReal x1147=((1.0)*sj1);
IkReal x1148=((0.39225)*cj2);
IkReal x1149=(cj5*r11);
IkReal x1150=(r10*sj5);
IkReal x1151=((1.0)*cj4);
IkReal x1152=(sj2*x1134);
IkReal x1153=(sj2*x1135);
IkReal x1154=(cj4*cj5*sj3);
IkReal x1155=(cj1*x1134);
IkReal x1156=(cj2*x1134);
IkReal x1157=(cj1*x1135);
IkReal x1158=(cj2*x1135);
evalcond[0]=(((sj4*x1141))+x1134+(((-1.0)*r10*sj4*x1140))+(((-1.0)*r12*x1151)));
evalcond[1]=(((sj4*x1145))+(((-1.0)*r02*x1151))+(((-1.0)*r00*sj4*x1140))+(((-1.0)*x1135)));
evalcond[2]=((((0.425)*x1155))+(((-1.0)*x1143*x1152))+(((-1.0)*px))+(((-0.10915)*x1135))+((x1148*x1155))+(((-0.09465)*x1146))+(((-0.09465)*x1144)));
evalcond[3]=((((0.425)*x1157))+(((0.10915)*x1134))+(((-1.0)*x1143*x1153))+(((-1.0)*py))+((x1148*x1157))+(((-0.09465)*x1149))+(((-0.09465)*x1150)));
evalcond[4]=(((cj3*x1136))+((sj3*x1146))+((sj3*x1144))+((x1139*x1145))+((sj1*x1152))+(((-1.0)*r00*x1139*x1140))+(((-1.0)*x1142*x1156)));
evalcond[5]=(((cj3*x1138))+((sj3*x1150))+((sj3*x1149))+(((-1.0)*r10*x1139*x1140))+((x1139*x1141))+((sj1*x1153))+(((-1.0)*x1142*x1158)));
evalcond[6]=(((r00*x1154))+((cj3*x1146))+((cj3*x1144))+(((-1.0)*x1147*x1156))+(((-1.0)*x1136*x1137))+(((-1.0)*cj4*x1137*x1145))+(((-1.0)*x1142*x1152)));
evalcond[7]=(((cj3*x1150))+((cj3*x1149))+(((-1.0)*x1147*x1158))+(((-1.0)*x1137*x1138))+(((-1.0)*cj4*x1137*x1141))+(((-1.0)*x1142*x1153))+((r10*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1159=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1159);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1159);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1160=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1161=IKPowWithIntegerCheck(r22,-1);
if(!x1161.valid){
continue;
}
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(sj3,-1);
if(!x1162.valid){
continue;
}
sj4array[0]=((x1161.value)*(x1162.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1164=((4.0)*r01);
IkReal x1165=((16.0)*r00);
IkReal x1166=(cj3*sj2);
IkReal x1167=((8.0)*r00);
IkReal x1168=(cj2*cj3);
IkReal x1169=(cj4*r01);
IkReal x1170=((16.0)*cj1);
IkReal x1171=((8.0)*sj1);
IkReal x1172=((16.0)*sj1);
IkReal x1173=((8.0)*cj1);
IkReal x1174=(sj2*sj3);
IkReal x1175=(cj2*sj3);
IkReal x1176=(sj1*x1175);
IkReal x1177=((4.0)*cj4*r00);
IkReal x1178=(((x1164*x1176))+((sj1*x1174*x1177))+((sj1*x1164*x1166))+((cj1*x1164*x1174)));
IkReal x1179=(((cj1*x1164*x1168))+((cj1*x1175*x1177))+((sj1*x1168*x1177))+((cj1*x1166*x1177)));
IkReal x1180=(x1179+(((-1.0)*x1178)));
IkReal x1181=(((cj1*x1167*x1174))+((sj1*x1166*x1167))+(((-1.0)*x1169*x1171*x1174))+(((-1.0)*cj1*x1167*x1168))+((x1166*x1169*x1173))+((x1167*x1176))+((x1168*x1169*x1171))+((x1169*x1173*x1175)));
IkReal x1182=(x1178+(((-1.0)*x1179)));
op[0]=x1180;
op[1]=x1181;
op[2]=x1180;
op[3]=(((cj1*x1165*x1174))+((x1169*x1170*x1175))+((x1165*x1176))+((sj1*x1165*x1166))+(((-1.0)*x1169*x1172*x1174))+((x1166*x1169*x1170))+((x1168*x1169*x1172))+(((-1.0)*cj1*x1165*x1168)));
op[4]=x1182;
op[5]=x1181;
op[6]=x1182;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1183=(cj5*sj4);
IkReal x1184=(sj4*sj5);
if( IKabs((((r01*x1184))+(((-1.0)*r00*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1183))+(((-1.0)*r11*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1184))+(((-1.0)*r00*x1183))))+IKsqr((((r10*x1183))+(((-1.0)*r11*x1184))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1184))+(((-1.0)*r00*x1183))), (((r10*x1183))+(((-1.0)*r11*x1184))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1185=IKcos(j0);
IkReal x1186=IKsin(j0);
IkReal x1187=((0.39225)*sj1);
IkReal x1188=((1.0)*cj3);
IkReal x1189=((1.0)*cj1);
IkReal x1190=(r11*sj5);
IkReal x1191=(cj5*r01);
IkReal x1192=(cj5*r11);
IkReal x1193=(r01*sj5);
IkReal x1194=(cj3*cj4);
IkReal x1195=(r00*sj5);
IkReal x1196=((0.39225)*cj2);
IkReal x1197=((1.0)*sj1);
IkReal x1198=(r10*sj5);
IkReal x1199=(sj2*x1185);
IkReal x1200=(cj4*cj5*r00);
IkReal x1201=(cj1*x1186);
IkReal x1202=(sj2*x1186);
IkReal x1203=(cj4*cj5*r10);
IkReal x1204=((1.0)*cj4*sj3);
IkReal x1205=(cj1*x1185);
IkReal x1206=(cj2*x1185);
IkReal x1207=((1.0)*cj5*sj4);
evalcond[0]=(x1185+(((-1.0)*r10*x1207))+((sj4*x1190)));
evalcond[1]=(((sj4*x1193))+(((-1.0)*r00*x1207))+(((-1.0)*x1186)));
evalcond[2]=((((-1.0)*x1189*x1206))+(((-1.0)*x1188*x1200))+((sj1*x1199))+((sj3*x1191))+((sj3*x1195))+((x1193*x1194)));
evalcond[3]=((((-1.0)*cj2*x1186*x1189))+(((-1.0)*x1188*x1203))+((sj1*x1202))+((sj3*x1192))+((sj3*x1198))+((x1190*x1194)));
evalcond[4]=((((-1.0)*x1189*x1199))+((sj3*x1200))+(((-1.0)*x1197*x1206))+((cj3*x1195))+((cj3*x1191))+(((-1.0)*x1193*x1204)));
evalcond[5]=((((-1.0)*x1190*x1204))+(((-1.0)*cj2*x1186*x1197))+(((-1.0)*x1189*x1202))+((sj3*x1203))+((cj3*x1198))+((cj3*x1192)));
evalcond[6]=((((0.425)*x1205))+(((-0.09465)*x1191))+(((-0.09465)*x1195))+(((-0.10915)*x1186))+(((-1.0)*px))+(((-1.0)*x1187*x1199))+((x1196*x1205)));
evalcond[7]=((((0.425)*x1201))+(((-0.09465)*x1192))+(((-0.09465)*x1198))+(((0.10915)*x1185))+(((-1.0)*py))+(((-1.0)*x1187*x1202))+((x1196*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1208=IKPowWithIntegerCheck(cj3,-1);
if(!x1208.valid){
continue;
}
CheckValue<IkReal> x1209=IKPowWithIntegerCheck(r22,-1);
if(!x1209.valid){
continue;
}
sj4array[0]=((-1.0)*(x1208.value)*(x1209.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1210=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1210);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1210);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1211=((4.0)*r01);
IkReal x1212=((16.0)*r00);
IkReal x1213=(cj3*sj2);
IkReal x1214=((8.0)*r00);
IkReal x1215=(cj2*cj3);
IkReal x1216=(cj4*r01);
IkReal x1217=((16.0)*cj1);
IkReal x1218=((8.0)*sj1);
IkReal x1219=((16.0)*sj1);
IkReal x1220=((8.0)*cj1);
IkReal x1221=(sj2*sj3);
IkReal x1222=(cj2*sj3);
IkReal x1223=(sj1*x1222);
IkReal x1224=((4.0)*cj4*r00);
IkReal x1225=(((x1211*x1223))+((sj1*x1211*x1213))+((sj1*x1221*x1224))+((cj1*x1211*x1221)));
IkReal x1226=(((cj1*x1211*x1215))+((cj1*x1222*x1224))+((sj1*x1215*x1224))+((cj1*x1213*x1224)));
IkReal x1227=(x1226+(((-1.0)*x1225)));
IkReal x1228=(((x1214*x1223))+((x1213*x1216*x1220))+((x1215*x1216*x1218))+((cj1*x1214*x1221))+((sj1*x1213*x1214))+((x1216*x1220*x1222))+(((-1.0)*x1216*x1218*x1221))+(((-1.0)*cj1*x1214*x1215)));
IkReal x1229=(x1225+(((-1.0)*x1226)));
op[0]=x1227;
op[1]=x1228;
op[2]=x1227;
op[3]=((((-1.0)*cj1*x1212*x1215))+(((-1.0)*x1216*x1219*x1221))+((x1215*x1216*x1219))+((x1213*x1216*x1217))+((cj1*x1212*x1221))+((sj1*x1212*x1213))+((x1216*x1217*x1222))+((x1212*x1223)));
op[4]=x1229;
op[5]=x1228;
op[6]=x1229;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1230=(cj5*sj4);
IkReal x1231=(sj4*sj5);
if( IKabs((((r01*x1231))+(((-1.0)*r00*x1230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1231))+((r10*x1230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1231))+(((-1.0)*r00*x1230))))+IKsqr(((((-1.0)*r11*x1231))+((r10*x1230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1231))+(((-1.0)*r00*x1230))), ((((-1.0)*r11*x1231))+((r10*x1230))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1232=IKcos(j0);
IkReal x1233=IKsin(j0);
IkReal x1234=((0.39225)*sj1);
IkReal x1235=((1.0)*cj3);
IkReal x1236=((1.0)*cj1);
IkReal x1237=(r11*sj5);
IkReal x1238=(cj5*r01);
IkReal x1239=(cj5*r11);
IkReal x1240=(r01*sj5);
IkReal x1241=(cj3*cj4);
IkReal x1242=(r00*sj5);
IkReal x1243=((0.39225)*cj2);
IkReal x1244=((1.0)*sj1);
IkReal x1245=(r10*sj5);
IkReal x1246=(sj2*x1232);
IkReal x1247=(cj4*cj5*r00);
IkReal x1248=(cj1*x1233);
IkReal x1249=(sj2*x1233);
IkReal x1250=(cj4*cj5*r10);
IkReal x1251=((1.0)*cj4*sj3);
IkReal x1252=(cj1*x1232);
IkReal x1253=(cj2*x1232);
IkReal x1254=((1.0)*cj5*sj4);
evalcond[0]=(x1232+((sj4*x1237))+(((-1.0)*r10*x1254)));
evalcond[1]=((((-1.0)*x1233))+(((-1.0)*r00*x1254))+((sj4*x1240)));
evalcond[2]=(((sj3*x1238))+((x1240*x1241))+((sj3*x1242))+(((-1.0)*x1235*x1247))+((sj1*x1246))+(((-1.0)*x1236*x1253)));
evalcond[3]=(((sj3*x1239))+((sj3*x1245))+(((-1.0)*cj2*x1233*x1236))+((sj1*x1249))+(((-1.0)*x1235*x1250))+((x1237*x1241)));
evalcond[4]=(((cj3*x1238))+(((-1.0)*x1236*x1246))+((sj3*x1247))+(((-1.0)*x1244*x1253))+((cj3*x1242))+(((-1.0)*x1240*x1251)));
evalcond[5]=(((cj3*x1239))+(((-1.0)*x1237*x1251))+(((-1.0)*x1236*x1249))+(((-1.0)*cj2*x1233*x1244))+((sj3*x1250))+((cj3*x1245)));
evalcond[6]=(((x1243*x1252))+(((0.425)*x1252))+(((-1.0)*px))+(((-0.09465)*x1238))+(((-0.09465)*x1242))+(((-0.10915)*x1233))+(((-1.0)*x1234*x1246)));
evalcond[7]=((((-1.0)*py))+(((-0.09465)*x1239))+(((0.10915)*x1232))+(((-0.09465)*x1245))+((x1243*x1248))+(((0.425)*x1248))+(((-1.0)*x1234*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
IkReal x1255=((1.0)*(x1257.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1258.valid){
continue;
}
if( (((-1.0)*(x1258.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1258.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1256=((-1.0)*(IKasin(((-1.0)*(x1258.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1255))+(((-1.0)*x1256)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1255))+(((1.0)*x1256)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1259=cj5*cj5;
IkReal x1260=r21*r21;
IkReal x1261=(sj3*x1259);
IkReal x1262=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1260*x1261))+((x1261*(r20*r20)))+((sj3*x1260)));
j4eval[0]=x1262;
j4eval[1]=IKsign(x1262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1263=cj5*cj5;
IkReal x1264=r21*r21;
IkReal x1265=((1.0)*cj3);
IkReal x1266=(cj3*x1263);
IkReal x1267=((((-1.0)*x1264*x1265))+(((-1.0)*x1265*(r22*r22)))+((x1264*x1266))+(((-1.0)*x1263*x1265*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1267;
j4eval[1]=IKsign(x1267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1268=cj1*cj1;
IkReal x1269=cj2*cj2;
IkReal x1270=(cj1*sj1*sj2);
IkReal x1271=(cj2*x1268);
IkReal x1272=(x1268*x1269);
j0eval[0]=((6.19369221392727)+(((-12.4570625281677)*x1270))+x1268+(((-11.4971359451148)*cj2*x1270))+(((11.4971359451148)*x1272))+(((12.4570625281677)*x1271))+(((-5.74856797255738)*x1269)));
j0eval[1]=IKsign(((66309514.0)+(((-133365000.0)*x1270))+(((123088050.0)*x1272))+(((133365000.0)*x1271))+(((10705975.0)*x1268))+(((-61544025.0)*x1269))+(((-123088050.0)*cj2*x1270))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1273=((1.0)*cj5);
IkReal x1274=((1.0)*sj5);
IkReal x1275=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1275;
j0eval[1]=((IKabs(((((-1.0)*r00*x1274))+(((-1.0)*r01*x1273)))))+(IKabs(((((-1.0)*r11*x1273))+(((-1.0)*r10*x1274))))));
j0eval[2]=IKsign(x1275);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1276=cj5*cj5;
IkReal x1277=r21*r21;
IkReal x1278=(sj1*sj2);
IkReal x1279=(r21*sj5);
IkReal x1280=(cj5*r20);
IkReal x1281=(cj1*cj2);
IkReal x1282=(x1277+((x1276*(r20*r20)))+(r22*r22)+(((-2.0)*x1279*x1280))+(((-1.0)*x1276*x1277)));
j4eval[0]=x1282;
j4eval[1]=IKsign(x1282);
j4eval[2]=((IKabs((((r22*x1278))+(((-1.0)*r22*x1281)))))+(IKabs((((x1278*x1279))+(((-1.0)*x1279*x1281))+(((-1.0)*x1278*x1280))+((x1280*x1281))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1283=(sj1*sj2);
IkReal x1284=(cj5*r01);
IkReal x1285=(cj1*cj2);
IkReal x1286=(r00*sj5);
IkReal x1287=((20000.0)*px);
IkReal x1288=((8500.0)*cj1);
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(((((2183.0)*x1283))+(((-2183.0)*x1285))),-1);
if(!x1289.valid){
continue;
}
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(((((-1.0)*x1285))+x1283),-1);
if(!x1290.valid){
continue;
}
if( IKabs(((x1289.value)*((((x1285*x1287))+(((-1.0)*x1284*x1288))+(((-5952.0)*x1285*x1286))+(((5952.0)*x1283*x1284))+(((5952.0)*x1283*x1286))+(((-1.0)*x1286*x1288))+(((-1.0)*x1283*x1287))+(((-5952.0)*x1284*x1285)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1290.value)*(((((-1.0)*x1286))+(((-1.0)*x1284)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1289.value)*((((x1285*x1287))+(((-1.0)*x1284*x1288))+(((-5952.0)*x1285*x1286))+(((5952.0)*x1283*x1284))+(((5952.0)*x1283*x1286))+(((-1.0)*x1286*x1288))+(((-1.0)*x1283*x1287))+(((-5952.0)*x1284*x1285))))))+IKsqr(((x1290.value)*(((((-1.0)*x1286))+(((-1.0)*x1284))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1289.value)*((((x1285*x1287))+(((-1.0)*x1284*x1288))+(((-5952.0)*x1285*x1286))+(((5952.0)*x1283*x1284))+(((5952.0)*x1283*x1286))+(((-1.0)*x1286*x1288))+(((-1.0)*x1283*x1287))+(((-5952.0)*x1284*x1285))))), ((x1290.value)*(((((-1.0)*x1286))+(((-1.0)*x1284))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1291=IKcos(j0);
IkReal x1292=IKsin(j0);
IkReal x1293=(cj5*r01);
IkReal x1294=(cj5*r11);
IkReal x1295=(r00*sj5);
IkReal x1296=(sj1*sj2);
IkReal x1297=((0.39225)*cj2);
IkReal x1298=((1.0)*cj2);
IkReal x1299=(r10*sj5);
IkReal x1300=((0.39225)*x1296);
IkReal x1301=(cj1*x1291);
IkReal x1302=(cj1*x1292);
evalcond[0]=(x1293+x1295+((x1291*x1296))+(((-1.0)*x1298*x1301)));
evalcond[1]=(x1299+x1294+(((-1.0)*x1298*x1302))+((x1292*x1296)));
evalcond[2]=((((0.425)*x1301))+(((-1.0)*x1291*x1300))+(((-1.0)*px))+(((-0.10915)*x1292))+((x1297*x1301))+(((-0.09465)*x1293))+(((-0.09465)*x1295)));
evalcond[3]=((((0.425)*x1302))+(((0.10915)*x1291))+(((-1.0)*py))+(((-1.0)*x1292*x1300))+((x1297*x1302))+(((-0.09465)*x1299))+(((-0.09465)*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1303=((1.0)*cj5);
IkReal x1304=((((-1.0)*r01*x1303))+(((-1.0)*r00*sj5)));
j4eval[0]=x1304;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1303))))));
j4eval[2]=IKsign(x1304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1305=((1.0)*cj5);
IkReal x1306=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1305)));
j4eval[0]=x1306;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1305))))));
j4eval[2]=IKsign(x1306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1307=((1.0)*sj0);
IkReal x1308=((1.0)*cj0);
IkReal x1309=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1309;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1308))+(((-1.0)*r11*sj5*x1307)))))+(IKabs(((((-1.0)*r02*x1308))+(((-1.0)*r12*x1307))))));
j4eval[2]=IKsign(x1309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1310=((1.0)*sj0);
IkReal x1311=((1.0)*cj0);
CheckValue<IkReal> x1312 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1310))+(((-1.0)*r02*x1311)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1311))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1312.valid){
continue;
}
CheckValue<IkReal> x1313=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1312.value)+(((1.5707963267949)*(x1313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1314=IKsin(j4);
IkReal x1315=IKcos(j4);
IkReal x1316=(cj5*r10);
IkReal x1317=(r01*sj5);
IkReal x1318=((1.0)*cj2);
IkReal x1319=(cj5*r00);
IkReal x1320=((1.0)*sj0);
IkReal x1321=(cj5*r20);
IkReal x1322=(cj1*sj2);
IkReal x1323=((1.0)*x1315);
IkReal x1324=((1.0)*x1314);
IkReal x1325=(sj5*x1314);
evalcond[0]=((((-1.0)*r22*x1323))+(((-1.0)*x1321*x1324))+((r21*x1325)));
evalcond[1]=(cj0+((r11*x1325))+(((-1.0)*r12*x1323))+(((-1.0)*x1316*x1324)));
evalcond[2]=((((-1.0)*x1319*x1324))+((x1314*x1317))+(((-1.0)*x1320))+(((-1.0)*r02*x1323)));
evalcond[3]=((((-1.0)*r22*x1324))+((sj1*sj2))+(((-1.0)*r21*sj5*x1323))+(((-1.0)*cj1*x1318))+((x1315*x1321)));
evalcond[4]=((((-1.0)*cj0*x1322))+(((-1.0)*r02*x1324))+((x1315*x1319))+(((-1.0)*cj0*sj1*x1318))+(((-1.0)*x1317*x1323)));
evalcond[5]=((((-1.0)*sj0*sj1*x1318))+(((-1.0)*r12*x1324))+(((-1.0)*r11*sj5*x1323))+((x1315*x1316))+(((-1.0)*x1320*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1326=((1.0)*cj5);
CheckValue<IkReal> x1327 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1326))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1327.valid){
continue;
}
CheckValue<IkReal> x1328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1326)))),-1);
if(!x1328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1327.value)+(((1.5707963267949)*(x1328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1329=IKsin(j4);
IkReal x1330=IKcos(j4);
IkReal x1331=(cj5*r10);
IkReal x1332=(r01*sj5);
IkReal x1333=((1.0)*cj2);
IkReal x1334=(cj5*r00);
IkReal x1335=((1.0)*sj0);
IkReal x1336=(cj5*r20);
IkReal x1337=(cj1*sj2);
IkReal x1338=((1.0)*x1330);
IkReal x1339=((1.0)*x1329);
IkReal x1340=(sj5*x1329);
evalcond[0]=((((-1.0)*r22*x1338))+(((-1.0)*x1336*x1339))+((r21*x1340)));
evalcond[1]=(cj0+(((-1.0)*x1331*x1339))+((r11*x1340))+(((-1.0)*r12*x1338)));
evalcond[2]=(((x1329*x1332))+(((-1.0)*x1334*x1339))+(((-1.0)*r02*x1338))+(((-1.0)*x1335)));
evalcond[3]=((((-1.0)*cj1*x1333))+(((-1.0)*r22*x1339))+(((-1.0)*r21*sj5*x1338))+((sj1*sj2))+((x1330*x1336)));
evalcond[4]=((((-1.0)*cj0*sj1*x1333))+(((-1.0)*x1332*x1338))+(((-1.0)*r02*x1339))+(((-1.0)*cj0*x1337))+((x1330*x1334)));
evalcond[5]=((((-1.0)*x1335*x1337))+((x1330*x1331))+(((-1.0)*r11*sj5*x1338))+(((-1.0)*r12*x1339))+(((-1.0)*sj0*sj1*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1341=((1.0)*cj5);
CheckValue<IkReal> x1342 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1341)))),-1);
if(!x1343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1342.value)+(((1.5707963267949)*(x1343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1344=IKsin(j4);
IkReal x1345=IKcos(j4);
IkReal x1346=(cj5*r10);
IkReal x1347=(r01*sj5);
IkReal x1348=((1.0)*cj2);
IkReal x1349=(cj5*r00);
IkReal x1350=((1.0)*sj0);
IkReal x1351=(cj5*r20);
IkReal x1352=(cj1*sj2);
IkReal x1353=((1.0)*x1345);
IkReal x1354=((1.0)*x1344);
IkReal x1355=(sj5*x1344);
evalcond[0]=((((-1.0)*r22*x1353))+(((-1.0)*x1351*x1354))+((r21*x1355)));
evalcond[1]=((((-1.0)*r12*x1353))+cj0+(((-1.0)*x1346*x1354))+((r11*x1355)));
evalcond[2]=((((-1.0)*x1350))+((x1344*x1347))+(((-1.0)*r02*x1353))+(((-1.0)*x1349*x1354)));
evalcond[3]=(((x1345*x1351))+((sj1*sj2))+(((-1.0)*cj1*x1348))+(((-1.0)*r21*sj5*x1353))+(((-1.0)*r22*x1354)));
evalcond[4]=((((-1.0)*cj0*x1352))+(((-1.0)*r02*x1354))+((x1345*x1349))+(((-1.0)*x1347*x1353))+(((-1.0)*cj0*sj1*x1348)));
evalcond[5]=((((-1.0)*r12*x1354))+(((-1.0)*sj0*sj1*x1348))+((x1345*x1346))+(((-1.0)*x1350*x1352))+(((-1.0)*r11*sj5*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1356=cj5*cj5;
IkReal x1357=r21*r21;
IkReal x1358=(sj1*sj2);
IkReal x1359=(r21*sj5);
IkReal x1360=(cj1*cj2);
IkReal x1361=(cj5*r20);
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign((x1357+(r22*r22)+(((-1.0)*x1356*x1357))+(((-2.0)*x1359*x1361))+((x1356*(r20*r20))))),-1);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal((((r22*x1358))+(((-1.0)*r22*x1360)))),IkReal((((x1360*x1361))+((x1358*x1359))+(((-1.0)*x1359*x1360))+(((-1.0)*x1358*x1361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1362.value)))+(x1363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1364=IKsin(j4);
IkReal x1365=IKcos(j4);
IkReal x1366=(r21*sj5);
IkReal x1367=(cj5*r20);
IkReal x1368=((1.0)*x1365);
IkReal x1369=((1.0)*x1364);
evalcond[0]=((((-1.0)*r22*x1368))+((x1364*x1366))+(((-1.0)*x1367*x1369)));
evalcond[1]=((((-1.0)*x1366*x1368))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1369))+((x1365*x1367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1370=(cj5*sj4);
IkReal x1371=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1370))+((r01*x1371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1370))+(((-1.0)*r11*x1371))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1370))+((r01*x1371))))+IKsqr((((r10*x1370))+(((-1.0)*r11*x1371))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1370))+((r01*x1371))), (((r10*x1370))+(((-1.0)*r11*x1371))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1372=IKcos(j0);
IkReal x1373=IKsin(j0);
IkReal x1374=(cj4*cj5);
IkReal x1375=(cj5*r01);
IkReal x1376=((1.0)*cj1);
IkReal x1377=((0.39225)*sj1);
IkReal x1378=(r11*sj5);
IkReal x1379=((1.0)*sj4);
IkReal x1380=((0.39225)*cj2);
IkReal x1381=((1.0)*sj1);
IkReal x1382=(r00*sj5);
IkReal x1383=(cj5*r11);
IkReal x1384=((1.0)*cj4);
IkReal x1385=(r01*sj5);
IkReal x1386=(r10*sj5);
IkReal x1387=(sj2*x1372);
IkReal x1388=(sj2*x1373);
IkReal x1389=(cj1*x1372);
IkReal x1390=(cj1*x1373);
IkReal x1391=(cj2*x1372);
IkReal x1392=(cj2*x1373);
evalcond[0]=((((-1.0)*r12*x1384))+x1372+(((-1.0)*cj5*r10*x1379))+((sj4*x1378)));
evalcond[1]=(((sj4*x1385))+(((-1.0)*r02*x1384))+(((-1.0)*x1373))+(((-1.0)*cj5*r00*x1379)));
evalcond[2]=(x1375+x1382+(((-1.0)*x1376*x1391))+((sj1*x1387)));
evalcond[3]=(x1386+x1383+(((-1.0)*x1376*x1392))+((sj1*x1388)));
evalcond[4]=((((-1.0)*x1384*x1385))+(((-1.0)*x1376*x1387))+(((-1.0)*r02*x1379))+(((-1.0)*x1381*x1391))+((r00*x1374)));
evalcond[5]=(((r10*x1374))+(((-1.0)*x1376*x1388))+(((-1.0)*r12*x1379))+(((-1.0)*x1381*x1392))+(((-1.0)*x1378*x1384)));
evalcond[6]=(((x1380*x1389))+(((-0.09465)*x1382))+(((-1.0)*x1377*x1387))+(((-0.10915)*x1373))+(((-1.0)*px))+(((-0.09465)*x1375))+(((0.425)*x1389)));
evalcond[7]=((((0.10915)*x1372))+(((-0.09465)*x1386))+(((-0.09465)*x1383))+(((-1.0)*x1377*x1388))+(((-1.0)*py))+(((0.425)*x1390))+((x1380*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1393=((1.0)*cj5);
IkReal x1394=((1.0)*sj5);
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1395.valid){
continue;
}
CheckValue<IkReal> x1396 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1394))+(((-1.0)*r11*x1393)))),IkReal(((((-1.0)*r01*x1393))+(((-1.0)*r00*x1394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1396.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1395.value)))+(x1396.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1397=IKcos(j0);
IkReal x1398=IKsin(j0);
IkReal x1399=(cj5*r01);
IkReal x1400=(cj5*r11);
IkReal x1401=(r00*sj5);
IkReal x1402=(sj1*sj2);
IkReal x1403=((0.39225)*cj2);
IkReal x1404=((1.0)*cj2);
IkReal x1405=(r10*sj5);
IkReal x1406=((0.39225)*x1402);
IkReal x1407=(cj1*x1397);
IkReal x1408=(cj1*x1398);
evalcond[0]=(x1399+((x1397*x1402))+(((-1.0)*x1404*x1407))+x1401);
evalcond[1]=((((-1.0)*x1404*x1408))+x1400+x1405+((x1398*x1402)));
evalcond[2]=((((-0.09465)*x1399))+(((-1.0)*px))+((x1403*x1407))+(((-0.10915)*x1398))+(((0.425)*x1407))+(((-1.0)*x1397*x1406))+(((-0.09465)*x1401)));
evalcond[3]=((((-1.0)*x1398*x1406))+(((-1.0)*py))+((x1403*x1408))+(((0.425)*x1408))+(((0.10915)*x1397))+(((-0.09465)*x1400))+(((-0.09465)*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1409=((1.0)*cj5);
IkReal x1410=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1409)));
j4eval[0]=x1410;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1409))))));
j4eval[2]=IKsign(x1410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1411=((1.0)*cj5);
IkReal x1412=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1411)));
j4eval[0]=x1412;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1411))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1413=((1.0)*sj0);
IkReal x1414=((1.0)*cj0);
IkReal x1415=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1415;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x1414))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1413)))))+(IKabs(((((-1.0)*r02*x1414))+(((-1.0)*r12*x1413))))));
j4eval[2]=IKsign(x1415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1416=((1.0)*sj0);
IkReal x1417=((1.0)*cj0);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1417))+(((-1.0)*r12*x1416)))),IkReal(((((-1.0)*r01*sj5*x1417))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1418.value)))+(x1419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKsin(j4);
IkReal x1421=IKcos(j4);
IkReal x1422=(cj5*r10);
IkReal x1423=(r01*sj5);
IkReal x1424=((1.0)*cj2);
IkReal x1425=(cj5*r00);
IkReal x1426=((1.0)*sj0);
IkReal x1427=(cj5*r20);
IkReal x1428=(cj1*sj2);
IkReal x1429=((1.0)*x1421);
IkReal x1430=((1.0)*x1420);
IkReal x1431=(sj5*x1420);
evalcond[0]=(((r21*x1431))+(((-1.0)*r22*x1429))+(((-1.0)*x1427*x1430)));
evalcond[1]=(cj0+(((-1.0)*x1422*x1430))+(((-1.0)*r12*x1429))+((r11*x1431)));
evalcond[2]=(((x1420*x1423))+(((-1.0)*x1425*x1430))+(((-1.0)*r02*x1429))+(((-1.0)*x1426)));
evalcond[3]=((((-1.0)*r21*sj5*x1429))+(((-1.0)*r22*x1430))+((sj1*sj2))+(((-1.0)*cj1*x1424))+((x1421*x1427)));
evalcond[4]=((((-1.0)*cj0*x1428))+(((-1.0)*x1423*x1429))+(((-1.0)*cj0*sj1*x1424))+(((-1.0)*r02*x1430))+((x1421*x1425)));
evalcond[5]=((((-1.0)*r11*sj5*x1429))+(((-1.0)*x1426*x1428))+(((-1.0)*r12*x1430))+((x1421*x1422))+(((-1.0)*sj0*sj1*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1432=((1.0)*cj5);
CheckValue<IkReal> x1433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1432))+(((-1.0)*r10*sj5)))),-1);
if(!x1433.valid){
continue;
}
CheckValue<IkReal> x1434 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1433.value)))+(x1434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1435=IKsin(j4);
IkReal x1436=IKcos(j4);
IkReal x1437=(cj5*r10);
IkReal x1438=(r01*sj5);
IkReal x1439=((1.0)*cj2);
IkReal x1440=(cj5*r00);
IkReal x1441=((1.0)*sj0);
IkReal x1442=(cj5*r20);
IkReal x1443=(cj1*sj2);
IkReal x1444=((1.0)*x1436);
IkReal x1445=((1.0)*x1435);
IkReal x1446=(sj5*x1435);
evalcond[0]=((((-1.0)*r22*x1444))+((r21*x1446))+(((-1.0)*x1442*x1445)));
evalcond[1]=(((r11*x1446))+cj0+(((-1.0)*r12*x1444))+(((-1.0)*x1437*x1445)));
evalcond[2]=(((x1435*x1438))+(((-1.0)*x1441))+(((-1.0)*r02*x1444))+(((-1.0)*x1440*x1445)));
evalcond[3]=((((-1.0)*r22*x1445))+(((-1.0)*r21*sj5*x1444))+(((-1.0)*cj1*x1439))+((sj1*sj2))+((x1436*x1442)));
evalcond[4]=((((-1.0)*cj0*sj1*x1439))+(((-1.0)*x1438*x1444))+((x1436*x1440))+(((-1.0)*r02*x1445))+(((-1.0)*cj0*x1443)));
evalcond[5]=(((x1436*x1437))+(((-1.0)*r12*x1445))+(((-1.0)*x1441*x1443))+(((-1.0)*sj0*sj1*x1439))+(((-1.0)*r11*sj5*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1447=((1.0)*cj5);
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1447))+(((-1.0)*r00*sj5)))),-1);
if(!x1449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1448.value)+(((1.5707963267949)*(x1449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1450=IKsin(j4);
IkReal x1451=IKcos(j4);
IkReal x1452=(cj5*r10);
IkReal x1453=(r01*sj5);
IkReal x1454=((1.0)*cj2);
IkReal x1455=(cj5*r00);
IkReal x1456=((1.0)*sj0);
IkReal x1457=(cj5*r20);
IkReal x1458=(cj1*sj2);
IkReal x1459=((1.0)*x1451);
IkReal x1460=((1.0)*x1450);
IkReal x1461=(sj5*x1450);
evalcond[0]=((((-1.0)*r22*x1459))+(((-1.0)*x1457*x1460))+((r21*x1461)));
evalcond[1]=(cj0+((r11*x1461))+(((-1.0)*x1452*x1460))+(((-1.0)*r12*x1459)));
evalcond[2]=((((-1.0)*x1456))+((x1450*x1453))+(((-1.0)*x1455*x1460))+(((-1.0)*r02*x1459)));
evalcond[3]=((((-1.0)*r22*x1460))+((sj1*sj2))+(((-1.0)*cj1*x1454))+(((-1.0)*r21*sj5*x1459))+((x1451*x1457)));
evalcond[4]=((((-1.0)*r02*x1460))+(((-1.0)*cj0*x1458))+(((-1.0)*x1453*x1459))+(((-1.0)*cj0*sj1*x1454))+((x1451*x1455)));
evalcond[5]=((((-1.0)*r11*sj5*x1459))+(((-1.0)*sj0*sj1*x1454))+(((-1.0)*r12*x1460))+(((-1.0)*x1456*x1458))+((x1451*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1462=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1462;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x1462);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1463=r21*r21;
IkReal x1464=cj5*cj5;
IkReal x1465=(sj1*sj2);
IkReal x1466=(r21*sj5);
IkReal x1467=(cj5*r20);
IkReal x1468=(cj1*cj2);
IkReal x1469=(((x1463*x1464))+(((-1.0)*(r22*r22)))+(((2.0)*x1466*x1467))+(((-1.0)*x1464*(r20*r20)))+(((-1.0)*x1463)));
j4eval[0]=x1469;
j4eval[1]=((IKabs((((x1465*x1466))+(((-1.0)*x1466*x1468))+(((-1.0)*x1465*x1467))+((x1467*x1468)))))+(IKabs(((((-1.0)*r22*x1468))+((r22*x1465))))));
j4eval[2]=IKsign(x1469);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1470=(r00*sj5);
IkReal x1471=(cj5*r01);
IkReal x1472=(sj1*sj2);
IkReal x1473=(cj1*cj2);
IkReal x1474=((20000.0)*px);
IkReal x1475=((8500.0)*cj1);
IkReal x1476=((9738.0)*x1473);
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(((((2183.0)*x1472))+(((-2183.0)*x1473))),-1);
if(!x1477.valid){
continue;
}
CheckValue<IkReal> x1478=IKPowWithIntegerCheck(((((-1.0)*x1473))+x1472),-1);
if(!x1478.valid){
continue;
}
if( IKabs(((x1477.value)*((((x1471*x1475))+((x1471*x1476))+(((-9738.0)*x1470*x1472))+((x1470*x1475))+((x1470*x1476))+((x1473*x1474))+(((-1.0)*x1472*x1474))+(((-9738.0)*x1471*x1472)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1478.value)*((x1470+x1471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1477.value)*((((x1471*x1475))+((x1471*x1476))+(((-9738.0)*x1470*x1472))+((x1470*x1475))+((x1470*x1476))+((x1473*x1474))+(((-1.0)*x1472*x1474))+(((-9738.0)*x1471*x1472))))))+IKsqr(((x1478.value)*((x1470+x1471))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1477.value)*((((x1471*x1475))+((x1471*x1476))+(((-9738.0)*x1470*x1472))+((x1470*x1475))+((x1470*x1476))+((x1473*x1474))+(((-1.0)*x1472*x1474))+(((-9738.0)*x1471*x1472))))), ((x1478.value)*((x1470+x1471))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1479=IKcos(j0);
IkReal x1480=IKsin(j0);
IkReal x1481=(cj5*r11);
IkReal x1482=(cj5*r01);
IkReal x1483=((1.0)*sj5);
IkReal x1484=((0.09465)*sj5);
IkReal x1485=(sj1*sj2);
IkReal x1486=((0.39225)*cj2);
IkReal x1487=((1.0)*cj2);
IkReal x1488=((0.39225)*x1485);
IkReal x1489=(cj1*x1479);
IkReal x1490=(cj1*x1480);
evalcond[0]=((((-1.0)*x1487*x1489))+(((-1.0)*r00*x1483))+(((-1.0)*x1482))+((x1479*x1485)));
evalcond[1]=((((-1.0)*x1487*x1490))+((x1480*x1485))+(((-1.0)*x1481))+(((-1.0)*r10*x1483)));
evalcond[2]=((((-1.0)*x1479*x1488))+(((0.425)*x1489))+(((-0.10915)*x1480))+(((-1.0)*r00*x1484))+((x1486*x1489))+(((-1.0)*px))+(((-0.09465)*x1482)));
evalcond[3]=((((0.425)*x1490))+(((-1.0)*x1480*x1488))+((x1486*x1490))+(((-1.0)*py))+(((0.10915)*x1479))+(((-1.0)*r10*x1484))+(((-0.09465)*x1481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1491=((1.0)*cj5);
IkReal x1492=((((-1.0)*r01*x1491))+(((-1.0)*r00*sj5)));
j4eval[0]=x1492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1493=((1.0)*cj5);
IkReal x1494=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1493)));
j4eval[0]=x1494;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1493))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1495=((1.0)*sj0);
IkReal x1496=((1.0)*cj0);
IkReal x1497=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1497;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1495))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1496)))))+(IKabs(((((-1.0)*r12*x1495))+(((-1.0)*r02*x1496))))));
j4eval[2]=IKsign(x1497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1498=((1.0)*sj0);
IkReal x1499=((1.0)*cj0);
CheckValue<IkReal> x1500 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1498))+(((-1.0)*r02*x1499)))),IkReal(((((-1.0)*r11*sj5*x1498))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1500.value)+(((1.5707963267949)*(x1501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1502=IKsin(j4);
IkReal x1503=IKcos(j4);
IkReal x1504=(cj5*r00);
IkReal x1505=(cj5*r10);
IkReal x1506=(r21*sj5);
IkReal x1507=((1.0)*cj2);
IkReal x1508=((1.0)*sj0);
IkReal x1509=(cj1*sj2);
IkReal x1510=(cj5*r20);
IkReal x1511=((1.0)*x1503);
IkReal x1512=((1.0)*x1502);
IkReal x1513=(sj5*x1502);
IkReal x1514=(sj5*x1503);
evalcond[0]=((((-1.0)*r22*x1511))+(((-1.0)*x1510*x1512))+((x1502*x1506)));
evalcond[1]=(((r11*x1513))+cj0+(((-1.0)*x1505*x1512))+(((-1.0)*r12*x1511)));
evalcond[2]=((((-1.0)*x1508))+(((-1.0)*x1504*x1512))+((r01*x1513))+(((-1.0)*r02*x1511)));
evalcond[3]=((((-1.0)*cj1*x1507))+(((-1.0)*x1510*x1511))+((sj1*sj2))+((r22*x1502))+((x1503*x1506)));
evalcond[4]=((((-1.0)*x1504*x1511))+((r01*x1514))+(((-1.0)*cj0*x1509))+((r02*x1502))+(((-1.0)*cj0*sj1*x1507)));
evalcond[5]=((((-1.0)*sj0*sj1*x1507))+((r11*x1514))+((r12*x1502))+(((-1.0)*x1508*x1509))+(((-1.0)*x1505*x1511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1515=((1.0)*cj5);
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1515)))),-1);
if(!x1517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1516.value)+(((1.5707963267949)*(x1517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1518=IKsin(j4);
IkReal x1519=IKcos(j4);
IkReal x1520=(cj5*r00);
IkReal x1521=(cj5*r10);
IkReal x1522=(r21*sj5);
IkReal x1523=((1.0)*cj2);
IkReal x1524=((1.0)*sj0);
IkReal x1525=(cj1*sj2);
IkReal x1526=(cj5*r20);
IkReal x1527=((1.0)*x1519);
IkReal x1528=((1.0)*x1518);
IkReal x1529=(sj5*x1518);
IkReal x1530=(sj5*x1519);
evalcond[0]=(((x1518*x1522))+(((-1.0)*r22*x1527))+(((-1.0)*x1526*x1528)));
evalcond[1]=((((-1.0)*r12*x1527))+cj0+((r11*x1529))+(((-1.0)*x1521*x1528)));
evalcond[2]=((((-1.0)*x1524))+((r01*x1529))+(((-1.0)*r02*x1527))+(((-1.0)*x1520*x1528)));
evalcond[3]=(((x1519*x1522))+((sj1*sj2))+((r22*x1518))+(((-1.0)*x1526*x1527))+(((-1.0)*cj1*x1523)));
evalcond[4]=(((r01*x1530))+(((-1.0)*cj0*x1525))+((r02*x1518))+(((-1.0)*x1520*x1527))+(((-1.0)*cj0*sj1*x1523)));
evalcond[5]=((((-1.0)*x1524*x1525))+((r12*x1518))+((r11*x1530))+(((-1.0)*sj0*sj1*x1523))+(((-1.0)*x1521*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1531=((1.0)*cj5);
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1531))+(((-1.0)*r00*sj5)))),-1);
if(!x1533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1532.value)+(((1.5707963267949)*(x1533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1534=IKsin(j4);
IkReal x1535=IKcos(j4);
IkReal x1536=(cj5*r00);
IkReal x1537=(cj5*r10);
IkReal x1538=(r21*sj5);
IkReal x1539=((1.0)*cj2);
IkReal x1540=((1.0)*sj0);
IkReal x1541=(cj1*sj2);
IkReal x1542=(cj5*r20);
IkReal x1543=((1.0)*x1535);
IkReal x1544=((1.0)*x1534);
IkReal x1545=(sj5*x1534);
IkReal x1546=(sj5*x1535);
evalcond[0]=((((-1.0)*r22*x1543))+(((-1.0)*x1542*x1544))+((x1534*x1538)));
evalcond[1]=(cj0+((r11*x1545))+(((-1.0)*x1537*x1544))+(((-1.0)*r12*x1543)));
evalcond[2]=((((-1.0)*r02*x1543))+(((-1.0)*x1536*x1544))+(((-1.0)*x1540))+((r01*x1545)));
evalcond[3]=(((sj1*sj2))+((x1535*x1538))+(((-1.0)*x1542*x1543))+((r22*x1534))+(((-1.0)*cj1*x1539)));
evalcond[4]=((((-1.0)*cj0*x1541))+(((-1.0)*cj0*sj1*x1539))+(((-1.0)*x1536*x1543))+((r02*x1534))+((r01*x1546)));
evalcond[5]=(((r12*x1534))+(((-1.0)*x1540*x1541))+(((-1.0)*sj0*sj1*x1539))+((r11*x1546))+(((-1.0)*x1537*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1547=r21*r21;
IkReal x1548=cj5*cj5;
IkReal x1549=(sj1*sj2);
IkReal x1550=(r21*sj5);
IkReal x1551=(cj1*cj2);
IkReal x1552=(cj5*r20);
CheckValue<IkReal> x1553 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1551))+((r22*x1549)))),IkReal((((x1551*x1552))+(((-1.0)*x1550*x1551))+(((-1.0)*x1549*x1552))+((x1549*x1550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1547))+((x1547*x1548))+(((-1.0)*x1548*(r20*r20)))+(((2.0)*x1550*x1552))+(((-1.0)*(r22*r22))))),-1);
if(!x1554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1553.value)+(((1.5707963267949)*(x1554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1555=IKsin(j4);
IkReal x1556=IKcos(j4);
IkReal x1557=(r21*sj5);
IkReal x1558=(cj5*r20);
IkReal x1559=((1.0)*x1556);
evalcond[0]=(((x1555*x1557))+(((-1.0)*x1555*x1558))+(((-1.0)*r22*x1559)));
evalcond[1]=((((-1.0)*x1558*x1559))+((x1556*x1557))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1560=(cj5*sj4);
IkReal x1561=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1560))+((r01*x1561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1560))+(((-1.0)*r11*x1561))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1560))+((r01*x1561))))+IKsqr((((r10*x1560))+(((-1.0)*r11*x1561))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1560))+((r01*x1561))), (((r10*x1560))+(((-1.0)*r11*x1561))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1562=IKcos(j0);
IkReal x1563=IKsin(j0);
IkReal x1564=((1.0)*cj1);
IkReal x1565=((0.39225)*sj1);
IkReal x1566=(r11*sj5);
IkReal x1567=(cj5*r11);
IkReal x1568=((1.0)*sj5);
IkReal x1569=((1.0)*sj1);
IkReal x1570=((0.09465)*sj5);
IkReal x1571=((1.0)*cj5);
IkReal x1572=((0.425)*cj1);
IkReal x1573=((1.0)*cj4);
IkReal x1574=(r01*sj5);
IkReal x1575=(sj2*x1562);
IkReal x1576=(sj2*x1563);
IkReal x1577=(cj4*x1571);
IkReal x1578=((0.39225)*cj1*cj2);
IkReal x1579=(cj2*x1562);
IkReal x1580=(cj2*x1563);
evalcond[0]=((((-1.0)*r10*sj4*x1571))+((sj4*x1566))+x1562+(((-1.0)*r12*x1573)));
evalcond[1]=((((-1.0)*r02*x1573))+((sj4*x1574))+(((-1.0)*r00*sj4*x1571))+(((-1.0)*x1563)));
evalcond[2]=((((-1.0)*x1564*x1579))+((sj1*x1575))+(((-1.0)*r00*x1568))+(((-1.0)*r01*x1571)));
evalcond[3]=((((-1.0)*x1564*x1580))+((sj1*x1576))+(((-1.0)*r10*x1568))+(((-1.0)*x1567)));
evalcond[4]=(((cj4*x1574))+((r02*sj4))+(((-1.0)*x1564*x1575))+(((-1.0)*x1569*x1579))+(((-1.0)*r00*x1577)));
evalcond[5]=(((cj4*x1566))+(((-1.0)*x1564*x1576))+((r12*sj4))+(((-1.0)*r10*x1577))+(((-1.0)*x1569*x1580)));
evalcond[6]=((((-1.0)*x1565*x1575))+(((-0.09465)*cj5*r01))+(((-1.0)*px))+(((-1.0)*r00*x1570))+((x1562*x1572))+((x1562*x1578))+(((-0.10915)*x1563)));
evalcond[7]=((((-1.0)*x1565*x1576))+(((-0.09465)*x1567))+(((-1.0)*py))+(((0.10915)*x1562))+(((-1.0)*r10*x1570))+((x1563*x1578))+((x1563*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1581 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1581.valid){
continue;
}
CheckValue<IkReal> x1582=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1582.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1581.value)+(((1.5707963267949)*(x1582.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1583=IKcos(j0);
IkReal x1584=IKsin(j0);
IkReal x1585=(cj5*r11);
IkReal x1586=(cj5*r01);
IkReal x1587=((1.0)*sj5);
IkReal x1588=((0.09465)*sj5);
IkReal x1589=(sj1*sj2);
IkReal x1590=((0.39225)*cj2);
IkReal x1591=((1.0)*cj2);
IkReal x1592=((0.39225)*x1589);
IkReal x1593=(cj1*x1583);
IkReal x1594=(cj1*x1584);
evalcond[0]=((((-1.0)*r00*x1587))+((x1583*x1589))+(((-1.0)*x1591*x1593))+(((-1.0)*x1586)));
evalcond[1]=(((x1584*x1589))+(((-1.0)*x1591*x1594))+(((-1.0)*x1585))+(((-1.0)*r10*x1587)));
evalcond[2]=((((-1.0)*x1583*x1592))+((x1590*x1593))+(((0.425)*x1593))+(((-1.0)*r00*x1588))+(((-1.0)*px))+(((-0.09465)*x1586))+(((-0.10915)*x1584)));
evalcond[3]=(((x1590*x1594))+(((0.425)*x1594))+(((-1.0)*x1584*x1592))+(((-1.0)*py))+(((0.10915)*x1583))+(((-0.09465)*x1585))+(((-1.0)*r10*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1595=((1.0)*cj5);
IkReal x1596=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1595)));
j4eval[0]=x1596;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1595))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1597=((1.0)*cj5);
IkReal x1598=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1597)));
j4eval[0]=x1598;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1597))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1599=((1.0)*sj0);
IkReal x1600=((1.0)*cj0);
IkReal x1601=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1601;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1600))+(((-1.0)*r11*sj5*x1599)))))+(IKabs(((((-1.0)*r02*x1600))+(((-1.0)*r12*x1599))))));
j4eval[2]=IKsign(x1601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=((1.0)*sj0);
IkReal x1603=((1.0)*cj0);
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1603))+(((-1.0)*r12*x1602)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1602))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1604.value)+(((1.5707963267949)*(x1605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1606=IKsin(j4);
IkReal x1607=IKcos(j4);
IkReal x1608=(cj5*r00);
IkReal x1609=(cj5*r10);
IkReal x1610=(r21*sj5);
IkReal x1611=((1.0)*cj2);
IkReal x1612=((1.0)*sj0);
IkReal x1613=(cj1*sj2);
IkReal x1614=(cj5*r20);
IkReal x1615=((1.0)*x1607);
IkReal x1616=((1.0)*x1606);
IkReal x1617=(sj5*x1606);
IkReal x1618=(sj5*x1607);
evalcond[0]=((((-1.0)*r22*x1615))+(((-1.0)*x1614*x1616))+((x1606*x1610)));
evalcond[1]=((((-1.0)*r12*x1615))+cj0+((r11*x1617))+(((-1.0)*x1609*x1616)));
evalcond[2]=(((r01*x1617))+(((-1.0)*x1612))+(((-1.0)*r02*x1615))+(((-1.0)*x1608*x1616)));
evalcond[3]=(((sj1*sj2))+((r22*x1606))+((x1607*x1610))+(((-1.0)*x1614*x1615))+(((-1.0)*cj1*x1611)));
evalcond[4]=(((r01*x1618))+(((-1.0)*cj0*sj1*x1611))+(((-1.0)*cj0*x1613))+(((-1.0)*x1608*x1615))+((r02*x1606)));
evalcond[5]=(((r11*x1618))+((r12*x1606))+(((-1.0)*sj0*sj1*x1611))+(((-1.0)*x1609*x1615))+(((-1.0)*x1612*x1613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1619=((1.0)*cj5);
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
CheckValue<IkReal> x1621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1619))+(((-1.0)*r10*sj5)))),-1);
if(!x1621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1620.value)+(((1.5707963267949)*(x1621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1622=IKsin(j4);
IkReal x1623=IKcos(j4);
IkReal x1624=(cj5*r00);
IkReal x1625=(cj5*r10);
IkReal x1626=(r21*sj5);
IkReal x1627=((1.0)*cj2);
IkReal x1628=((1.0)*sj0);
IkReal x1629=(cj1*sj2);
IkReal x1630=(cj5*r20);
IkReal x1631=((1.0)*x1623);
IkReal x1632=((1.0)*x1622);
IkReal x1633=(sj5*x1622);
IkReal x1634=(sj5*x1623);
evalcond[0]=((((-1.0)*r22*x1631))+((x1622*x1626))+(((-1.0)*x1630*x1632)));
evalcond[1]=(cj0+((r11*x1633))+(((-1.0)*r12*x1631))+(((-1.0)*x1625*x1632)));
evalcond[2]=((((-1.0)*x1624*x1632))+(((-1.0)*x1628))+((r01*x1633))+(((-1.0)*r02*x1631)));
evalcond[3]=(((x1623*x1626))+((sj1*sj2))+((r22*x1622))+(((-1.0)*x1630*x1631))+(((-1.0)*cj1*x1627)));
evalcond[4]=(((r02*x1622))+(((-1.0)*x1624*x1631))+(((-1.0)*cj0*sj1*x1627))+((r01*x1634))+(((-1.0)*cj0*x1629)));
evalcond[5]=(((r11*x1634))+(((-1.0)*x1625*x1631))+((r12*x1622))+(((-1.0)*x1628*x1629))+(((-1.0)*sj0*sj1*x1627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1635=((1.0)*cj5);
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1635))+(((-1.0)*r00*sj5)))),-1);
if(!x1636.valid){
continue;
}
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1636.value)))+(x1637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1638=IKsin(j4);
IkReal x1639=IKcos(j4);
IkReal x1640=(cj5*r00);
IkReal x1641=(cj5*r10);
IkReal x1642=(r21*sj5);
IkReal x1643=((1.0)*cj2);
IkReal x1644=((1.0)*sj0);
IkReal x1645=(cj1*sj2);
IkReal x1646=(cj5*r20);
IkReal x1647=((1.0)*x1639);
IkReal x1648=((1.0)*x1638);
IkReal x1649=(sj5*x1638);
IkReal x1650=(sj5*x1639);
evalcond[0]=((((-1.0)*x1646*x1648))+(((-1.0)*r22*x1647))+((x1638*x1642)));
evalcond[1]=(((r11*x1649))+(((-1.0)*x1641*x1648))+cj0+(((-1.0)*r12*x1647)));
evalcond[2]=((((-1.0)*x1640*x1648))+(((-1.0)*x1644))+((r01*x1649))+(((-1.0)*r02*x1647)));
evalcond[3]=((((-1.0)*x1646*x1647))+(((-1.0)*cj1*x1643))+((sj1*sj2))+((x1639*x1642))+((r22*x1638)));
evalcond[4]=(((r02*x1638))+(((-1.0)*cj0*x1645))+((r01*x1650))+(((-1.0)*x1640*x1647))+(((-1.0)*cj0*sj1*x1643)));
evalcond[5]=((((-1.0)*x1641*x1647))+(((-1.0)*x1644*x1645))+((r12*x1638))+((r11*x1650))+(((-1.0)*sj0*sj1*x1643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1651=((1.0)*cj5);
IkReal x1652=((1.0)*sj5);
IkReal x1653=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1653;
j0eval[1]=((IKabs(((((-1.0)*r10*x1652))+(((-1.0)*r11*x1651)))))+(IKabs(((((-1.0)*r01*x1651))+(((-1.0)*r00*x1652))))));
j0eval[2]=IKsign(x1653);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1654=r21*r21;
IkReal x1655=cj5*cj5;
IkReal x1656=(cj2*sj1);
IkReal x1657=(cj1*sj2);
IkReal x1658=(r21*sj5);
IkReal x1659=((1.0)*cj5*r20);
IkReal x1660=(((x1654*x1655))+(((-1.0)*x1655*(r20*r20)))+(((-1.0)*x1654))+(((2.0)*cj5*r20*x1658))+(((-1.0)*(r22*r22))));
j4eval[0]=x1660;
j4eval[1]=((IKabs((((r22*x1656))+((r22*x1657)))))+(IKabs((((x1656*x1658))+(((-1.0)*x1656*x1659))+(((-1.0)*x1657*x1659))+((x1657*x1658))))));
j4eval[2]=IKsign(x1660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1661=cj1*cj1;
IkReal x1662=(cj2*sj2);
IkReal x1663=(cj2*sj1);
IkReal x1664=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x1663))+x1664+x1662+(((-2.0)*x1661*x1662))+(((-1.08349267049076)*cj1*x1663))+(((-1.08349267049076)*sj2*x1661)));
j0eval[1]=((((-1.0)*x1663))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1665=cj1*cj1;
IkReal x1666=(cj1*sj1);
IkReal x1667=(cj5*r01);
IkReal x1668=(r00*sj5);
IkReal x1669=(r10*sj5);
IkReal x1670=(cj5*r11);
IkReal x1671=(cj1*sj2);
IkReal x1672=((20000.0)*py);
IkReal x1673=(cj2*sj1);
IkReal x1674=((1893.0)*x1673);
IkReal x1675=(sj2*x1665);
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(((((-15690.0)*cj2*x1675))+(((-8500.0)*cj2*x1666))+(((7845.0)*cj2*sj2))+(((7845.0)*x1666))+(((-8500.0)*x1675))+(((-15690.0)*x1666*(cj2*cj2)))),-1);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(((((-1.0)*x1673))+(((-1.0)*x1671))),-1);
if(!x1677.valid){
continue;
}
if( IKabs(((x1676.value)*(((((-1893.0)*x1670*x1671))+(((-1.0)*x1672*x1673))+(((-1.0)*x1669*x1674))+(((-1893.0)*x1669*x1671))+(((2183.0)*x1667))+(((2183.0)*x1668))+(((-1.0)*x1671*x1672))+(((-1.0)*x1670*x1674)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1677.value)*(((((-1.0)*x1668))+(((-1.0)*x1667)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1676.value)*(((((-1893.0)*x1670*x1671))+(((-1.0)*x1672*x1673))+(((-1.0)*x1669*x1674))+(((-1893.0)*x1669*x1671))+(((2183.0)*x1667))+(((2183.0)*x1668))+(((-1.0)*x1671*x1672))+(((-1.0)*x1670*x1674))))))+IKsqr(((x1677.value)*(((((-1.0)*x1668))+(((-1.0)*x1667))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1676.value)*(((((-1893.0)*x1670*x1671))+(((-1.0)*x1672*x1673))+(((-1.0)*x1669*x1674))+(((-1893.0)*x1669*x1671))+(((2183.0)*x1667))+(((2183.0)*x1668))+(((-1.0)*x1671*x1672))+(((-1.0)*x1670*x1674))))), ((x1677.value)*(((((-1.0)*x1668))+(((-1.0)*x1667))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1678=IKcos(j0);
IkReal x1679=IKsin(j0);
IkReal x1680=(cj5*r01);
IkReal x1681=((1.0)*cj1);
IkReal x1682=((0.39225)*sj1);
IkReal x1683=(cj5*r11);
IkReal x1684=(r00*sj5);
IkReal x1685=((0.39225)*cj2);
IkReal x1686=(r10*sj5);
IkReal x1687=(sj2*x1678);
IkReal x1688=(sj2*x1679);
IkReal x1689=(cj1*x1678);
IkReal x1690=((1.0)*cj2*sj1);
IkReal x1691=(cj1*x1679);
evalcond[0]=((((-1.0)*x1681*x1687))+x1680+x1684+(((-1.0)*x1678*x1690)));
evalcond[1]=((((-1.0)*x1681*x1688))+(((-1.0)*x1679*x1690))+x1683+x1686);
evalcond[2]=((((0.425)*x1689))+(((-1.0)*x1682*x1687))+(((-1.0)*px))+(((-0.10915)*x1679))+((x1685*x1689))+(((-0.09465)*x1680))+(((-0.09465)*x1684)));
evalcond[3]=((((0.425)*x1691))+(((-1.0)*x1682*x1688))+(((-1.0)*py))+((x1685*x1691))+(((0.10915)*x1678))+(((-0.09465)*x1686))+(((-0.09465)*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1692=((1.0)*cj5);
IkReal x1693=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1692)));
j4eval[0]=x1693;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1692))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1694=((1.0)*cj5);
IkReal x1695=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1694)));
j4eval[0]=x1695;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1694))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1696=((1.0)*sj0);
IkReal x1697=((1.0)*cj0);
IkReal x1698=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1698;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1696))+(((-1.0)*r01*sj5*x1697)))))+(IKabs(((((-1.0)*r12*x1696))+(((-1.0)*r02*x1697))))));
j4eval[2]=IKsign(x1698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1699=((1.0)*sj0);
IkReal x1700=((1.0)*cj0);
CheckValue<IkReal> x1701 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1699))+(((-1.0)*r02*x1700)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1700))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1701.valid){
continue;
}
CheckValue<IkReal> x1702=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1701.value)+(((1.5707963267949)*(x1702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1703=IKsin(j4);
IkReal x1704=IKcos(j4);
IkReal x1705=(cj5*r00);
IkReal x1706=(cj5*r10);
IkReal x1707=(r21*sj5);
IkReal x1708=(sj1*sj2);
IkReal x1709=(cj5*r20);
IkReal x1710=((1.0)*x1704);
IkReal x1711=((1.0)*cj1*cj2);
IkReal x1712=((1.0)*x1703);
IkReal x1713=(sj5*x1703);
IkReal x1714=(sj5*x1704);
evalcond[0]=((((-1.0)*x1709*x1712))+((x1703*x1707))+(((-1.0)*r22*x1710)));
evalcond[1]=(cj0+((r11*x1713))+(((-1.0)*x1706*x1712))+(((-1.0)*r12*x1710)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1713))+(((-1.0)*r02*x1710))+(((-1.0)*x1705*x1712)));
evalcond[3]=(((cj2*sj1))+((r22*x1703))+(((-1.0)*x1709*x1710))+((cj1*sj2))+((x1704*x1707)));
evalcond[4]=(((r02*x1703))+((cj0*x1708))+((r01*x1714))+(((-1.0)*x1705*x1710))+(((-1.0)*cj0*x1711)));
evalcond[5]=(((r12*x1703))+((r11*x1714))+(((-1.0)*x1706*x1710))+(((-1.0)*sj0*x1711))+((sj0*x1708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1715=((1.0)*cj5);
CheckValue<IkReal> x1716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1715)))),-1);
if(!x1716.valid){
continue;
}
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1715))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1716.value)))+(x1717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1718=IKsin(j4);
IkReal x1719=IKcos(j4);
IkReal x1720=(cj5*r00);
IkReal x1721=(cj5*r10);
IkReal x1722=(r21*sj5);
IkReal x1723=(sj1*sj2);
IkReal x1724=(cj5*r20);
IkReal x1725=((1.0)*x1719);
IkReal x1726=((1.0)*cj1*cj2);
IkReal x1727=((1.0)*x1718);
IkReal x1728=(sj5*x1718);
IkReal x1729=(sj5*x1719);
evalcond[0]=((((-1.0)*r22*x1725))+((x1718*x1722))+(((-1.0)*x1724*x1727)));
evalcond[1]=(cj0+(((-1.0)*r12*x1725))+((r11*x1728))+(((-1.0)*x1721*x1727)));
evalcond[2]=(((r01*x1728))+(((-1.0)*sj0))+(((-1.0)*x1720*x1727))+(((-1.0)*r02*x1725)));
evalcond[3]=(((cj2*sj1))+((r22*x1718))+((cj1*sj2))+(((-1.0)*x1724*x1725))+((x1719*x1722)));
evalcond[4]=(((cj0*x1723))+((r02*x1718))+((r01*x1729))+(((-1.0)*cj0*x1726))+(((-1.0)*x1720*x1725)));
evalcond[5]=((((-1.0)*sj0*x1726))+((r12*x1718))+((sj0*x1723))+((r11*x1729))+(((-1.0)*x1721*x1725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1730=((1.0)*cj5);
CheckValue<IkReal> x1731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1730))+(((-1.0)*r00*sj5)))),-1);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1731.value)))+(x1732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1733=IKsin(j4);
IkReal x1734=IKcos(j4);
IkReal x1735=(cj5*r00);
IkReal x1736=(cj5*r10);
IkReal x1737=(r21*sj5);
IkReal x1738=(sj1*sj2);
IkReal x1739=(cj5*r20);
IkReal x1740=((1.0)*x1734);
IkReal x1741=((1.0)*cj1*cj2);
IkReal x1742=((1.0)*x1733);
IkReal x1743=(sj5*x1733);
IkReal x1744=(sj5*x1734);
evalcond[0]=((((-1.0)*r22*x1740))+(((-1.0)*x1739*x1742))+((x1733*x1737)));
evalcond[1]=((((-1.0)*r12*x1740))+cj0+(((-1.0)*x1736*x1742))+((r11*x1743)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1735*x1742))+((r01*x1743))+(((-1.0)*r02*x1740)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1739*x1740))+((x1734*x1737))+((r22*x1733)));
evalcond[4]=(((cj0*x1738))+(((-1.0)*cj0*x1741))+(((-1.0)*x1735*x1740))+((r02*x1733))+((r01*x1744)));
evalcond[5]=((((-1.0)*x1736*x1740))+((sj0*x1738))+(((-1.0)*sj0*x1741))+((r12*x1733))+((r11*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1745=r21*r21;
IkReal x1746=cj5*cj5;
IkReal x1747=(cj2*sj1);
IkReal x1748=(cj1*sj2);
IkReal x1749=(r21*sj5);
IkReal x1750=((1.0)*cj5*r20);
CheckValue<IkReal> x1751=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*r20*x1749))+((x1745*x1746))+(((-1.0)*x1745))+(((-1.0)*(r22*r22)))+(((-1.0)*x1746*(r20*r20))))),-1);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752 = IKatan2WithCheck(IkReal((((r22*x1748))+((r22*x1747)))),IkReal(((((-1.0)*x1748*x1750))+((x1747*x1749))+(((-1.0)*x1747*x1750))+((x1748*x1749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1751.value)))+(x1752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1753=IKsin(j4);
IkReal x1754=IKcos(j4);
IkReal x1755=(r21*sj5);
IkReal x1756=(cj5*r20);
IkReal x1757=((1.0)*x1754);
evalcond[0]=(((x1753*x1755))+(((-1.0)*r22*x1757))+(((-1.0)*x1753*x1756)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x1756*x1757))+((x1754*x1755))+((cj1*sj2))+((r22*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1758=(cj5*sj4);
IkReal x1759=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1758))+((r01*x1759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1759))+((cj4*r12))+((r10*x1758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1758))+((r01*x1759))))+IKsqr(((((-1.0)*r11*x1759))+((cj4*r12))+((r10*x1758))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1758))+((r01*x1759))), ((((-1.0)*r11*x1759))+((cj4*r12))+((r10*x1758))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1760=IKcos(j0);
IkReal x1761=IKsin(j0);
IkReal x1762=(cj5*r01);
IkReal x1763=((1.0)*cj1);
IkReal x1764=((0.39225)*sj1);
IkReal x1765=(r11*sj5);
IkReal x1766=((0.39225)*cj2);
IkReal x1767=((1.0)*sj1);
IkReal x1768=(r00*sj5);
IkReal x1769=(cj5*r11);
IkReal x1770=((1.0)*cj4);
IkReal x1771=(r01*sj5);
IkReal x1772=(r10*sj5);
IkReal x1773=(sj2*x1760);
IkReal x1774=(sj2*x1761);
IkReal x1775=(cj5*x1770);
IkReal x1776=(cj1*x1760);
IkReal x1777=(cj1*x1761);
IkReal x1778=(cj2*x1760);
IkReal x1779=((1.0)*cj5*sj4);
IkReal x1780=(cj2*x1761);
evalcond[0]=(x1760+(((-1.0)*r10*x1779))+((sj4*x1765))+(((-1.0)*r12*x1770)));
evalcond[1]=(((sj4*x1771))+(((-1.0)*x1761))+(((-1.0)*r02*x1770))+(((-1.0)*r00*x1779)));
evalcond[2]=(x1768+x1762+(((-1.0)*x1767*x1778))+(((-1.0)*x1763*x1773)));
evalcond[3]=(x1769+x1772+(((-1.0)*x1763*x1774))+(((-1.0)*x1767*x1780)));
evalcond[4]=((((-1.0)*x1763*x1778))+((r02*sj4))+((cj4*x1771))+(((-1.0)*r00*x1775))+((sj1*x1773)));
evalcond[5]=(((cj4*x1765))+(((-1.0)*r10*x1775))+((r12*sj4))+((sj1*x1774))+(((-1.0)*x1763*x1780)));
evalcond[6]=((((-0.09465)*x1762))+(((-0.09465)*x1768))+((x1766*x1776))+(((-0.10915)*x1761))+(((0.425)*x1776))+(((-1.0)*px))+(((-1.0)*x1764*x1773)));
evalcond[7]=((((-0.09465)*x1769))+(((-0.09465)*x1772))+((x1766*x1777))+(((0.425)*x1777))+(((-1.0)*py))+(((-1.0)*x1764*x1774))+(((0.10915)*x1760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1781=((1.0)*cj5);
IkReal x1782=((1.0)*sj5);
CheckValue<IkReal> x1783 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1782))+(((-1.0)*r11*x1781)))),IkReal(((((-1.0)*r00*x1782))+(((-1.0)*r01*x1781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1783.valid){
continue;
}
CheckValue<IkReal> x1784=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1784.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1783.value)+(((1.5707963267949)*(x1784.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1785=IKcos(j0);
IkReal x1786=IKsin(j0);
IkReal x1787=(cj5*r01);
IkReal x1788=((1.0)*cj1);
IkReal x1789=((0.39225)*sj1);
IkReal x1790=(cj5*r11);
IkReal x1791=(r00*sj5);
IkReal x1792=((0.39225)*cj2);
IkReal x1793=(r10*sj5);
IkReal x1794=(sj2*x1785);
IkReal x1795=(sj2*x1786);
IkReal x1796=(cj1*x1785);
IkReal x1797=((1.0)*cj2*sj1);
IkReal x1798=(cj1*x1786);
evalcond[0]=(x1787+x1791+(((-1.0)*x1785*x1797))+(((-1.0)*x1788*x1794)));
evalcond[1]=(x1793+x1790+(((-1.0)*x1788*x1795))+(((-1.0)*x1786*x1797)));
evalcond[2]=((((-1.0)*x1789*x1794))+(((-1.0)*px))+((x1792*x1796))+(((-0.09465)*x1787))+(((-0.09465)*x1791))+(((-0.10915)*x1786))+(((0.425)*x1796)));
evalcond[3]=((((0.10915)*x1785))+(((-1.0)*x1789*x1795))+(((-1.0)*py))+((x1792*x1798))+(((-0.09465)*x1793))+(((-0.09465)*x1790))+(((0.425)*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1799=((1.0)*cj5);
IkReal x1800=((((-1.0)*r01*x1799))+(((-1.0)*r00*sj5)));
j4eval[0]=x1800;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1799))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1801=((1.0)*cj5);
IkReal x1802=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1801)));
j4eval[0]=x1802;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1801))))));
j4eval[2]=IKsign(x1802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1803=((1.0)*sj0);
IkReal x1804=((1.0)*cj0);
IkReal x1805=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1805;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1803))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1804)))))+(IKabs(((((-1.0)*r02*x1804))+(((-1.0)*r12*x1803))))));
j4eval[2]=IKsign(x1805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1806=((1.0)*sj0);
IkReal x1807=((1.0)*cj0);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1807))+(((-1.0)*r12*x1806)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1806))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1808.value)+(((1.5707963267949)*(x1809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1810=IKsin(j4);
IkReal x1811=IKcos(j4);
IkReal x1812=(cj5*r00);
IkReal x1813=(cj5*r10);
IkReal x1814=(r21*sj5);
IkReal x1815=(sj1*sj2);
IkReal x1816=(cj5*r20);
IkReal x1817=((1.0)*x1811);
IkReal x1818=((1.0)*cj1*cj2);
IkReal x1819=((1.0)*x1810);
IkReal x1820=(sj5*x1810);
IkReal x1821=(sj5*x1811);
evalcond[0]=((((-1.0)*x1816*x1819))+((x1810*x1814))+(((-1.0)*r22*x1817)));
evalcond[1]=(cj0+(((-1.0)*x1813*x1819))+(((-1.0)*r12*x1817))+((r11*x1820)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1812*x1819))+(((-1.0)*r02*x1817))+((r01*x1820)));
evalcond[3]=(((r22*x1810))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1816*x1817))+((x1811*x1814)));
evalcond[4]=((((-1.0)*cj0*x1818))+((r02*x1810))+((cj0*x1815))+(((-1.0)*x1812*x1817))+((r01*x1821)));
evalcond[5]=((((-1.0)*x1813*x1817))+((sj0*x1815))+(((-1.0)*sj0*x1818))+((r11*x1821))+((r12*x1810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1822=((1.0)*cj5);
CheckValue<IkReal> x1823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1822)))),-1);
if(!x1823.valid){
continue;
}
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1823.value)))+(x1824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1825=IKsin(j4);
IkReal x1826=IKcos(j4);
IkReal x1827=(cj5*r00);
IkReal x1828=(cj5*r10);
IkReal x1829=(r21*sj5);
IkReal x1830=(sj1*sj2);
IkReal x1831=(cj5*r20);
IkReal x1832=((1.0)*x1826);
IkReal x1833=((1.0)*cj1*cj2);
IkReal x1834=((1.0)*x1825);
IkReal x1835=(sj5*x1825);
IkReal x1836=(sj5*x1826);
evalcond[0]=(((x1825*x1829))+(((-1.0)*x1831*x1834))+(((-1.0)*r22*x1832)));
evalcond[1]=(cj0+(((-1.0)*x1828*x1834))+((r11*x1835))+(((-1.0)*r12*x1832)));
evalcond[2]=(((r01*x1835))+(((-1.0)*sj0))+(((-1.0)*x1827*x1834))+(((-1.0)*r02*x1832)));
evalcond[3]=(((cj2*sj1))+((x1826*x1829))+((cj1*sj2))+((r22*x1825))+(((-1.0)*x1831*x1832)));
evalcond[4]=(((r01*x1836))+(((-1.0)*cj0*x1833))+((cj0*x1830))+(((-1.0)*x1827*x1832))+((r02*x1825)));
evalcond[5]=(((sj0*x1830))+(((-1.0)*x1828*x1832))+(((-1.0)*sj0*x1833))+((r11*x1836))+((r12*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1837=((1.0)*cj5);
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1837))+(((-1.0)*r00*sj5)))),-1);
if(!x1839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1838.value)+(((1.5707963267949)*(x1839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1840=IKsin(j4);
IkReal x1841=IKcos(j4);
IkReal x1842=(cj5*r00);
IkReal x1843=(cj5*r10);
IkReal x1844=(r21*sj5);
IkReal x1845=(sj1*sj2);
IkReal x1846=(cj5*r20);
IkReal x1847=((1.0)*x1841);
IkReal x1848=((1.0)*cj1*cj2);
IkReal x1849=((1.0)*x1840);
IkReal x1850=(sj5*x1840);
IkReal x1851=(sj5*x1841);
evalcond[0]=((((-1.0)*r22*x1847))+((x1840*x1844))+(((-1.0)*x1846*x1849)));
evalcond[1]=((((-1.0)*x1843*x1849))+cj0+(((-1.0)*r12*x1847))+((r11*x1850)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1842*x1849))+((r01*x1850))+(((-1.0)*r02*x1847)));
evalcond[3]=(((cj2*sj1))+((r22*x1840))+((cj1*sj2))+(((-1.0)*x1846*x1847))+((x1841*x1844)));
evalcond[4]=(((cj0*x1845))+(((-1.0)*x1842*x1847))+((r01*x1851))+((r02*x1840))+(((-1.0)*cj0*x1848)));
evalcond[5]=((((-1.0)*x1843*x1847))+((sj0*x1845))+(((-1.0)*sj0*x1848))+((r11*x1851))+((r12*x1840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1852=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1852;
j0eval[1]=IKsign(x1852);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1853=cj5*cj5;
IkReal x1854=r21*r21;
IkReal x1855=(cj2*sj1);
IkReal x1856=(cj1*sj2);
IkReal x1857=(r21*sj5);
IkReal x1858=((1.0)*cj5*r20);
IkReal x1859=((((-1.0)*x1853*x1854))+(r22*r22)+(((-2.0)*cj5*r20*x1857))+x1854+((x1853*(r20*r20))));
j4eval[0]=x1859;
j4eval[1]=IKsign(x1859);
j4eval[2]=((IKabs((((x1856*x1857))+(((-1.0)*x1856*x1858))+((x1855*x1857))+(((-1.0)*x1855*x1858)))))+(IKabs((((r22*x1855))+((r22*x1856))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1860=cj1*cj1;
IkReal x1861=(cj2*sj2);
IkReal x1862=(cj2*sj1);
IkReal x1863=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*sj2*x1860))+(((-2.0)*x1860*x1861))+x1861+x1863+(((-1.08349267049076)*cj1*x1862))+(((-2.0)*cj1*cj2*x1862)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x1862)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1864=cj1*cj1;
IkReal x1865=(cj1*sj1);
IkReal x1866=(cj1*sj2);
IkReal x1867=(r00*sj5);
IkReal x1868=(cj2*sj1);
IkReal x1869=(cj5*r01);
IkReal x1870=((20000.0)*py);
IkReal x1871=((1893.0)*r10*sj5);
IkReal x1872=((1893.0)*cj5*r11);
IkReal x1873=(sj2*x1864);
CheckValue<IkReal> x1874=IKPowWithIntegerCheck(((((-8500.0)*cj2*x1865))+(((-8500.0)*x1873))+(((-15690.0)*cj2*x1873))+(((7845.0)*cj2*sj2))+(((-15690.0)*x1865*(cj2*cj2)))+(((7845.0)*x1865))),-1);
if(!x1874.valid){
continue;
}
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(((((-1.0)*x1868))+(((-1.0)*x1866))),-1);
if(!x1875.valid){
continue;
}
if( IKabs(((x1874.value)*(((((-1.0)*x1868*x1872))+(((-1.0)*x1868*x1870))+(((-1.0)*x1868*x1871))+(((-1.0)*x1866*x1871))+(((-1.0)*x1866*x1872))+(((-1.0)*x1866*x1870))+(((-2183.0)*x1869))+(((-2183.0)*x1867)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1875.value)*((x1867+x1869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1874.value)*(((((-1.0)*x1868*x1872))+(((-1.0)*x1868*x1870))+(((-1.0)*x1868*x1871))+(((-1.0)*x1866*x1871))+(((-1.0)*x1866*x1872))+(((-1.0)*x1866*x1870))+(((-2183.0)*x1869))+(((-2183.0)*x1867))))))+IKsqr(((x1875.value)*((x1867+x1869))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1874.value)*(((((-1.0)*x1868*x1872))+(((-1.0)*x1868*x1870))+(((-1.0)*x1868*x1871))+(((-1.0)*x1866*x1871))+(((-1.0)*x1866*x1872))+(((-1.0)*x1866*x1870))+(((-2183.0)*x1869))+(((-2183.0)*x1867))))), ((x1875.value)*((x1867+x1869))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1876=IKcos(j0);
IkReal x1877=IKsin(j0);
IkReal x1878=((1.0)*cj1);
IkReal x1879=((0.39225)*sj1);
IkReal x1880=(cj5*r11);
IkReal x1881=((1.0)*sj5);
IkReal x1882=(cj5*r01);
IkReal x1883=((1.0)*sj1);
IkReal x1884=((0.09465)*sj5);
IkReal x1885=((0.39225)*cj1);
IkReal x1886=((0.425)*cj1);
IkReal x1887=(sj2*x1876);
IkReal x1888=(sj2*x1877);
IkReal x1889=(cj2*x1876);
IkReal x1890=(cj2*x1877);
evalcond[0]=((((-1.0)*x1883*x1889))+(((-1.0)*x1878*x1887))+(((-1.0)*x1882))+(((-1.0)*r00*x1881)));
evalcond[1]=((((-1.0)*x1883*x1890))+(((-1.0)*x1878*x1888))+(((-1.0)*r10*x1881))+(((-1.0)*x1880)));
evalcond[2]=((((-1.0)*x1879*x1887))+((x1876*x1886))+(((-0.09465)*x1882))+(((-1.0)*px))+(((-1.0)*r00*x1884))+(((-0.10915)*x1877))+((x1885*x1889)));
evalcond[3]=(((x1877*x1886))+(((-1.0)*x1879*x1888))+((x1885*x1890))+(((-0.09465)*x1880))+(((-1.0)*py))+(((0.10915)*x1876))+(((-1.0)*r10*x1884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1891=((1.0)*cj5);
IkReal x1892=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1891)));
j4eval[0]=x1892;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1891)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1893=((1.0)*cj5);
IkReal x1894=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1893)));
j4eval[0]=x1894;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1893))))));
j4eval[2]=IKsign(x1894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1895=((1.0)*sj0);
IkReal x1896=((1.0)*cj0);
IkReal x1897=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1897;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1896))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1895)))))+(IKabs(((((-1.0)*r02*x1896))+(((-1.0)*r12*x1895))))));
j4eval[2]=IKsign(x1897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1898=((1.0)*sj0);
IkReal x1899=((1.0)*cj0);
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1899))+(((-1.0)*r12*x1898)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1899))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
CheckValue<IkReal> x1901=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1900.value)+(((1.5707963267949)*(x1901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1902=IKsin(j4);
IkReal x1903=IKcos(j4);
IkReal x1904=(cj5*r10);
IkReal x1905=(sj1*sj2);
IkReal x1906=(r01*sj5);
IkReal x1907=(cj5*r00);
IkReal x1908=(cj5*r20);
IkReal x1909=((1.0)*x1903);
IkReal x1910=((1.0)*cj1*cj2);
IkReal x1911=((1.0)*x1902);
IkReal x1912=(sj5*x1902);
evalcond[0]=((((-1.0)*r22*x1909))+((r21*x1912))+(((-1.0)*x1908*x1911)));
evalcond[1]=(cj0+(((-1.0)*x1904*x1911))+((r11*x1912))+(((-1.0)*r12*x1909)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1907*x1911))+((x1902*x1906))+(((-1.0)*r02*x1909)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1911))+((cj1*sj2))+((x1903*x1908))+(((-1.0)*r21*sj5*x1909)));
evalcond[4]=((((-1.0)*cj0*x1910))+(((-1.0)*r02*x1911))+((x1903*x1907))+((cj0*x1905))+(((-1.0)*x1906*x1909)));
evalcond[5]=(((x1903*x1904))+(((-1.0)*r12*x1911))+(((-1.0)*r11*sj5*x1909))+((sj0*x1905))+(((-1.0)*sj0*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1913=((1.0)*cj5);
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1913)))),-1);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1914.value)))+(x1915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKsin(j4);
IkReal x1917=IKcos(j4);
IkReal x1918=(cj5*r10);
IkReal x1919=(sj1*sj2);
IkReal x1920=(r01*sj5);
IkReal x1921=(cj5*r00);
IkReal x1922=(cj5*r20);
IkReal x1923=((1.0)*x1917);
IkReal x1924=((1.0)*cj1*cj2);
IkReal x1925=((1.0)*x1916);
IkReal x1926=(sj5*x1916);
evalcond[0]=((((-1.0)*x1922*x1925))+(((-1.0)*r22*x1923))+((r21*x1926)));
evalcond[1]=((((-1.0)*r12*x1923))+cj0+(((-1.0)*x1918*x1925))+((r11*x1926)));
evalcond[2]=((((-1.0)*sj0))+((x1916*x1920))+(((-1.0)*r02*x1923))+(((-1.0)*x1921*x1925)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1923))+(((-1.0)*r22*x1925))+((x1917*x1922)));
evalcond[4]=(((x1917*x1921))+(((-1.0)*cj0*x1924))+(((-1.0)*r02*x1925))+((cj0*x1919))+(((-1.0)*x1920*x1923)));
evalcond[5]=((((-1.0)*r12*x1925))+(((-1.0)*sj0*x1924))+((x1917*x1918))+(((-1.0)*r11*sj5*x1923))+((sj0*x1919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1927=((1.0)*cj5);
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
CheckValue<IkReal> x1929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1927)))),-1);
if(!x1929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1928.value)+(((1.5707963267949)*(x1929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1930=IKsin(j4);
IkReal x1931=IKcos(j4);
IkReal x1932=(cj5*r10);
IkReal x1933=(sj1*sj2);
IkReal x1934=(r01*sj5);
IkReal x1935=(cj5*r00);
IkReal x1936=(cj5*r20);
IkReal x1937=((1.0)*x1931);
IkReal x1938=((1.0)*cj1*cj2);
IkReal x1939=((1.0)*x1930);
IkReal x1940=(sj5*x1930);
evalcond[0]=((((-1.0)*r22*x1937))+((r21*x1940))+(((-1.0)*x1936*x1939)));
evalcond[1]=(cj0+((r11*x1940))+(((-1.0)*r12*x1937))+(((-1.0)*x1932*x1939)));
evalcond[2]=((((-1.0)*sj0))+((x1930*x1934))+(((-1.0)*x1935*x1939))+(((-1.0)*r02*x1937)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1931*x1936))+(((-1.0)*r22*x1939))+(((-1.0)*r21*sj5*x1937)));
evalcond[4]=(((x1931*x1935))+(((-1.0)*x1934*x1937))+((cj0*x1933))+(((-1.0)*cj0*x1938))+(((-1.0)*r02*x1939)));
evalcond[5]=((((-1.0)*r11*sj5*x1937))+((x1931*x1932))+(((-1.0)*r12*x1939))+((sj0*x1933))+(((-1.0)*sj0*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1941=cj5*cj5;
IkReal x1942=r21*r21;
IkReal x1943=(cj2*sj1);
IkReal x1944=(cj1*sj2);
IkReal x1945=(r21*sj5);
IkReal x1946=((1.0)*cj5*r20);
CheckValue<IkReal> x1947=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x1945))+((x1941*(r20*r20)))+x1942+(((-1.0)*x1941*x1942)))),-1);
if(!x1947.valid){
continue;
}
CheckValue<IkReal> x1948 = IKatan2WithCheck(IkReal((((r22*x1943))+((r22*x1944)))),IkReal((((x1943*x1945))+(((-1.0)*x1943*x1946))+((x1944*x1945))+(((-1.0)*x1944*x1946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1947.value)))+(x1948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1949=IKsin(j4);
IkReal x1950=IKcos(j4);
IkReal x1951=(r21*sj5);
IkReal x1952=(cj5*r20);
IkReal x1953=((1.0)*x1950);
IkReal x1954=((1.0)*x1949);
evalcond[0]=((((-1.0)*r22*x1953))+(((-1.0)*x1952*x1954))+((x1949*x1951)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x1954))+((cj1*sj2))+((x1950*x1952))+(((-1.0)*x1951*x1953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1955=(cj5*sj4);
IkReal x1956=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1955))+((r01*x1956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1955))+(((-1.0)*r11*x1956))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1955))+((r01*x1956))))+IKsqr((((r10*x1955))+(((-1.0)*r11*x1956))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1955))+((r01*x1956))), (((r10*x1955))+(((-1.0)*r11*x1956))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1957=IKcos(j0);
IkReal x1958=IKsin(j0);
IkReal x1959=(cj4*cj5);
IkReal x1960=((1.0)*cj1);
IkReal x1961=((0.39225)*sj1);
IkReal x1962=(r11*sj5);
IkReal x1963=(cj5*r11);
IkReal x1964=((1.0)*sj5);
IkReal x1965=((1.0)*sj4);
IkReal x1966=((1.0)*sj1);
IkReal x1967=((0.09465)*sj5);
IkReal x1968=(cj5*r01);
IkReal x1969=((0.425)*cj1);
IkReal x1970=((1.0)*cj4);
IkReal x1971=(sj2*x1957);
IkReal x1972=(sj2*x1958);
IkReal x1973=((0.39225)*cj1*cj2);
IkReal x1974=(cj2*x1957);
IkReal x1975=(cj2*x1958);
evalcond[0]=((((-1.0)*cj5*r10*x1965))+x1957+(((-1.0)*r12*x1970))+((sj4*x1962)));
evalcond[1]=((((-1.0)*cj5*r00*x1965))+(((-1.0)*r02*x1970))+((r01*sj4*sj5))+(((-1.0)*x1958)));
evalcond[2]=((((-1.0)*x1968))+(((-1.0)*x1966*x1974))+(((-1.0)*r00*x1964))+(((-1.0)*x1960*x1971)));
evalcond[3]=((((-1.0)*x1963))+(((-1.0)*x1966*x1975))+(((-1.0)*x1960*x1972))+(((-1.0)*r10*x1964)));
evalcond[4]=((((-1.0)*cj4*r01*x1964))+(((-1.0)*r02*x1965))+((sj1*x1971))+(((-1.0)*x1960*x1974))+((r00*x1959)));
evalcond[5]=(((sj1*x1972))+((r10*x1959))+(((-1.0)*x1960*x1975))+(((-1.0)*r12*x1965))+(((-1.0)*x1962*x1970)));
evalcond[6]=((((-0.09465)*x1968))+(((-1.0)*r00*x1967))+(((-0.10915)*x1958))+((x1957*x1969))+(((-1.0)*px))+((x1957*x1973))+(((-1.0)*x1961*x1971)));
evalcond[7]=(((x1958*x1973))+((x1958*x1969))+(((-0.09465)*x1963))+(((-1.0)*py))+(((-1.0)*x1961*x1972))+(((0.10915)*x1957))+(((-1.0)*r10*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1977.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1976.value)+(((1.5707963267949)*(x1977.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1978=IKcos(j0);
IkReal x1979=IKsin(j0);
IkReal x1980=((1.0)*cj1);
IkReal x1981=((0.39225)*sj1);
IkReal x1982=(cj5*r11);
IkReal x1983=((1.0)*sj5);
IkReal x1984=(cj5*r01);
IkReal x1985=((1.0)*sj1);
IkReal x1986=((0.09465)*sj5);
IkReal x1987=((0.39225)*cj1);
IkReal x1988=((0.425)*cj1);
IkReal x1989=(sj2*x1978);
IkReal x1990=(sj2*x1979);
IkReal x1991=(cj2*x1978);
IkReal x1992=(cj2*x1979);
evalcond[0]=((((-1.0)*x1980*x1989))+(((-1.0)*x1984))+(((-1.0)*x1985*x1991))+(((-1.0)*r00*x1983)));
evalcond[1]=((((-1.0)*x1980*x1990))+(((-1.0)*r10*x1983))+(((-1.0)*x1982))+(((-1.0)*x1985*x1992)));
evalcond[2]=((((-1.0)*x1981*x1989))+(((-0.09465)*x1984))+((x1978*x1988))+(((-0.10915)*x1979))+(((-1.0)*px))+((x1987*x1991))+(((-1.0)*r00*x1986)));
evalcond[3]=((((-0.09465)*x1982))+(((0.10915)*x1978))+(((-1.0)*x1981*x1990))+(((-1.0)*r10*x1986))+(((-1.0)*py))+((x1979*x1988))+((x1987*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1993=((1.0)*cj5);
IkReal x1994=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1993)));
j4eval[0]=x1994;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1993)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1995=((1.0)*cj5);
IkReal x1996=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1995)));
j4eval[0]=x1996;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1995))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1997=((1.0)*sj0);
IkReal x1998=((1.0)*cj0);
IkReal x1999=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1999;
j4eval[1]=((IKabs(((((-1.0)*r02*x1998))+(((-1.0)*r12*x1997)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1998))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1997))))));
j4eval[2]=IKsign(x1999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2000=((1.0)*sj0);
IkReal x2001=((1.0)*cj0);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2000))+(((-1.0)*r02*x2001)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2000))+(((-1.0)*r01*sj5*x2001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2002.value)+(((1.5707963267949)*(x2003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2004=IKsin(j4);
IkReal x2005=IKcos(j4);
IkReal x2006=(cj5*r10);
IkReal x2007=(sj1*sj2);
IkReal x2008=(r01*sj5);
IkReal x2009=(cj5*r00);
IkReal x2010=(cj5*r20);
IkReal x2011=((1.0)*x2005);
IkReal x2012=((1.0)*cj1*cj2);
IkReal x2013=((1.0)*x2004);
IkReal x2014=(sj5*x2004);
evalcond[0]=((((-1.0)*x2010*x2013))+((r21*x2014))+(((-1.0)*r22*x2011)));
evalcond[1]=(cj0+(((-1.0)*x2006*x2013))+(((-1.0)*r12*x2011))+((r11*x2014)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2009*x2013))+(((-1.0)*r02*x2011))+((x2004*x2008)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2011))+((x2005*x2010))+(((-1.0)*r22*x2013)));
evalcond[4]=((((-1.0)*x2008*x2011))+((cj0*x2007))+((x2005*x2009))+(((-1.0)*r02*x2013))+(((-1.0)*cj0*x2012)));
evalcond[5]=((((-1.0)*r11*sj5*x2011))+(((-1.0)*sj0*x2012))+((sj0*x2007))+(((-1.0)*r12*x2013))+((x2005*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2015=((1.0)*cj5);
CheckValue<IkReal> x2016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2015)))),-1);
if(!x2016.valid){
continue;
}
CheckValue<IkReal> x2017 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2016.value)))+(x2017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2018=IKsin(j4);
IkReal x2019=IKcos(j4);
IkReal x2020=(cj5*r10);
IkReal x2021=(sj1*sj2);
IkReal x2022=(r01*sj5);
IkReal x2023=(cj5*r00);
IkReal x2024=(cj5*r20);
IkReal x2025=((1.0)*x2019);
IkReal x2026=((1.0)*cj1*cj2);
IkReal x2027=((1.0)*x2018);
IkReal x2028=(sj5*x2018);
evalcond[0]=((((-1.0)*r22*x2025))+(((-1.0)*x2024*x2027))+((r21*x2028)));
evalcond[1]=(cj0+((r11*x2028))+(((-1.0)*r12*x2025))+(((-1.0)*x2020*x2027)));
evalcond[2]=((((-1.0)*x2023*x2027))+(((-1.0)*sj0))+((x2018*x2022))+(((-1.0)*r02*x2025)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x2025))+((x2019*x2024))+(((-1.0)*r22*x2027))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x2022*x2025))+((x2019*x2023))+(((-1.0)*r02*x2027))+((cj0*x2021))+(((-1.0)*cj0*x2026)));
evalcond[5]=(((x2019*x2020))+((sj0*x2021))+(((-1.0)*r12*x2027))+(((-1.0)*r11*sj5*x2025))+(((-1.0)*sj0*x2026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2029=((1.0)*cj5);
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2029))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
CheckValue<IkReal> x2031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2029))+(((-1.0)*r00*sj5)))),-1);
if(!x2031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2030.value)+(((1.5707963267949)*(x2031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2032=IKsin(j4);
IkReal x2033=IKcos(j4);
IkReal x2034=(cj5*r10);
IkReal x2035=(sj1*sj2);
IkReal x2036=(r01*sj5);
IkReal x2037=(cj5*r00);
IkReal x2038=(cj5*r20);
IkReal x2039=((1.0)*x2033);
IkReal x2040=((1.0)*cj1*cj2);
IkReal x2041=((1.0)*x2032);
IkReal x2042=(sj5*x2032);
evalcond[0]=(((r21*x2042))+(((-1.0)*r22*x2039))+(((-1.0)*x2038*x2041)));
evalcond[1]=(cj0+(((-1.0)*r12*x2039))+((r11*x2042))+(((-1.0)*x2034*x2041)));
evalcond[2]=((((-1.0)*sj0))+((x2032*x2036))+(((-1.0)*r02*x2039))+(((-1.0)*x2037*x2041)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2041))+((x2033*x2038))+((cj1*sj2))+(((-1.0)*r21*sj5*x2039)));
evalcond[4]=((((-1.0)*x2036*x2039))+((x2033*x2037))+(((-1.0)*r02*x2041))+(((-1.0)*cj0*x2040))+((cj0*x2035)));
evalcond[5]=((((-1.0)*sj0*x2040))+(((-1.0)*r11*sj5*x2039))+((x2033*x2034))+((sj0*x2035))+(((-1.0)*r12*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2043=cj1*cj1;
IkReal x2044=cj2*cj2;
IkReal x2045=(sj1*sj2);
IkReal x2046=((156900000.0)*py);
IkReal x2047=(cj1*cj5);
IkReal x2048=((14850585.0)*cj2);
IkReal x2049=(r00*sj5);
IkReal x2050=((16090500.0)*cj1);
IkReal x2051=((4132419.0)*cj5);
IkReal x2052=(r10*sj5);
IkReal x2053=((170000000.0)*cj1);
IkReal x2054=((156900000.0)*px);
IkReal x2055=(cj1*cj2);
IkReal x2056=((14850585.0)*cj5);
CheckValue<IkReal> x2057=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((133365000.0)*cj2*x2043))+(((123088050.0)*x2043*x2044))+(((-133365000.0)*cj1*x2045))+(((10705975.0)*x2043))+(((-123088050.0)*x2045*x2055))+(((-61544025.0)*x2044)))),-1);
if(!x2057.valid){
continue;
}
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-1.0)*r01*x2051))+(((-1.0)*x2045*x2046))+(((-14850585.0)*x2045*x2052))+(((-4132419.0)*x2049))+((r11*x2047*x2048))+((cj1*x2048*x2052))+(((-1.0)*r11*x2045*x2056))+((x2046*x2055))+((py*x2053))+(((16090500.0)*r11*x2047))+((x2050*x2052)))),IkReal((((r11*x2051))+(((-1.0)*x2045*x2054))+((x2049*x2050))+(((43660000.0)*py))+((x2054*x2055))+((px*x2053))+(((16090500.0)*r01*x2047))+((r01*x2047*x2048))+((cj1*x2048*x2049))+(((-14850585.0)*x2045*x2049))+(((4132419.0)*x2052))+(((-1.0)*r01*x2045*x2056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2057.value)))+(x2058.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2059=IKcos(j0);
IkReal x2060=IKsin(j0);
IkReal x2061=((0.425)*cj1);
IkReal x2062=(cj1*cj2);
IkReal x2063=(sj1*sj2);
IkReal x2064=((0.09465)*cj5);
IkReal x2065=((0.09465)*sj5);
IkReal x2066=((0.39225)*x2060);
IkReal x2067=((0.39225)*x2059);
evalcond[0]=((((-1.0)*x2063*x2067))+((x2059*x2061))+(((-1.0)*px))+(((-1.0)*r00*x2065))+(((-1.0)*r01*x2064))+((x2062*x2067))+(((-0.10915)*x2060)));
evalcond[1]=((((-1.0)*r10*x2065))+(((-1.0)*r11*x2064))+(((-1.0)*x2063*x2066))+(((0.10915)*x2059))+(((-1.0)*py))+((x2060*x2061))+((x2062*x2066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2068=((1.0)*cj5);
IkReal x2069=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2068)));
j4eval[0]=x2069;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2068)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2070=((1.0)*cj5);
IkReal x2071=((((-1.0)*r11*x2070))+(((-1.0)*r10*sj5)));
j4eval[0]=x2071;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2070))))));
j4eval[2]=IKsign(x2071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2072=((1.0)*sj0);
IkReal x2073=((1.0)*cj0);
IkReal x2074=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2074;
j4eval[1]=((IKabs(((((-1.0)*r02*x2073))+(((-1.0)*r12*x2072)))))+(IKabs(((((-1.0)*r01*sj5*x2073))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2072))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x2074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2075=((-1.0)*r20);
IkReal x2077 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2077)==0){
continue;
}
IkReal x2076=pow(x2077,-0.5);
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2075),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
IkReal gconst0=((-1.0)*(x2078.value));
IkReal gconst1=(r21*x2076);
IkReal gconst2=(x2075*x2076);
CheckValue<IkReal> x2079 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2079.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2079.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2080=((-1.0)*r20);
IkReal x2081=x2076;
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2080),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
IkReal x2082=((-1.0)*(x2083.value));
sj5=gconst1;
cj5=gconst2;
j5=x2082;
IkReal gconst0=x2082;
IkReal gconst1=(r21*x2081);
IkReal gconst2=(x2080*x2081);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2084=((-1.0)*r20);
IkReal x2085=x2076;
CheckValue<IkReal> x2087 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2084),IKFAST_ATAN2_MAGTHRESH);
if(!x2087.valid){
continue;
}
IkReal x2086=((-1.0)*(x2087.value));
sj5=gconst1;
cj5=gconst2;
j5=x2086;
IkReal gconst0=x2086;
IkReal gconst1=(r21*x2085);
IkReal gconst2=(x2084*x2085);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2088=((-1.0)*r20);
IkReal x2089=x2076;
CheckValue<IkReal> x2091 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2088),IKFAST_ATAN2_MAGTHRESH);
if(!x2091.valid){
continue;
}
IkReal x2090=((-1.0)*(x2091.value));
sj5=gconst1;
cj5=gconst2;
j5=x2090;
IkReal gconst0=x2090;
IkReal gconst1=(r21*x2089);
IkReal gconst2=(x2088*x2089);
IkReal x2092=r22*r22;
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2092))),-1);
if(!x2096.valid){
continue;
}
IkReal x2093=x2096.value;
IkReal x2094=(sj3*x2093);
IkReal x2095=((((2.0)*x2094*(r20*r20)*(r21*r21)))+((x2094*(r20*r20*r20*r20)))+((sj3*x2092))+((x2094*(r21*r21*r21*r21))));
j4eval[0]=x2095;
j4eval[1]=IKsign(x2095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2097=gconst1*gconst1;
IkReal x2098=r21*r21;
IkReal x2099=gconst2*gconst2;
IkReal x2100=r20*r20;
IkReal x2101=(gconst2*r20);
IkReal x2102=(cj1*cj2);
IkReal x2103=(sj1*sj2);
IkReal x2104=(gconst1*r21);
IkReal x2105=(cj3*gconst2);
IkReal x2106=(cj3*r20);
CheckValue<IkReal> x2107=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x2097*x2098))+((sj3*x2099*x2100))+(((-2.0)*sj3*x2101*x2104)))),-1);
if(!x2107.valid){
continue;
}
CheckValue<IkReal> x2108 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2102))+((gconst1*r22*x2106))+((r22*x2103))+((r21*r22*x2105)))),IkReal(((((-1.0)*x2102*x2104))+((x2103*x2104))+(((-1.0)*r21*x2099*x2106))+((x2101*x2102))+((gconst1*x2098*x2105))+((r21*x2097*x2106))+(((-1.0)*x2101*x2103))+(((-1.0)*gconst1*x2100*x2105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2107.value)))+(x2108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2109=IKsin(j4);
IkReal x2110=IKcos(j4);
IkReal x2111=(cj3*gconst1);
IkReal x2112=(gconst1*r01);
IkReal x2113=(gconst1*r11);
IkReal x2114=(sj1*sj2);
IkReal x2115=(cj3*gconst2);
IkReal x2116=(gconst1*sj3);
IkReal x2117=(gconst2*sj3);
IkReal x2118=((1.0)*sj0);
IkReal x2119=(cj1*sj2);
IkReal x2120=((1.0)*x2110);
IkReal x2121=((1.0)*x2109);
IkReal x2122=((1.0)*cj1*cj2);
IkReal x2123=(cj3*x2109);
IkReal x2124=((1.0)*cj2*sj1);
IkReal x2125=(x2110*x2117);
evalcond[0]=((((-1.0)*r22*x2120))+(((-1.0)*gconst2*r20*x2121))+((gconst1*r21*x2109)));
evalcond[1]=(((x2109*x2113))+cj0+(((-1.0)*gconst2*r10*x2121))+(((-1.0)*r12*x2120)));
evalcond[2]=((((-1.0)*gconst2*r00*x2121))+((x2109*x2112))+(((-1.0)*r02*x2120))+(((-1.0)*x2118)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x2115*x2120))+((r21*x2110*x2111))+((r21*x2117))+x2119+((r20*x2116))+((r22*x2123)));
evalcond[4]=((((-1.0)*r21*x2116*x2120))+((r21*x2115))+((r20*x2125))+x2114+((r20*x2111))+(((-1.0)*r22*sj3*x2121))+(((-1.0)*x2122)));
evalcond[5]=(((r01*x2117))+((r00*x2116))+((cj0*x2114))+((r02*x2123))+(((-1.0)*r00*x2115*x2120))+((r01*x2110*x2111))+(((-1.0)*cj0*x2122)));
evalcond[6]=(((sj0*x2114))+((r12*x2123))+(((-1.0)*cj1*cj2*x2118))+((r10*x2116))+((r11*x2110*x2111))+(((-1.0)*r10*x2115*x2120))+((r11*x2117)));
evalcond[7]=(((r01*x2115))+((r00*x2111))+(((-1.0)*r02*sj3*x2121))+(((-1.0)*sj3*x2112*x2120))+((r00*x2125))+(((-1.0)*cj0*x2119))+(((-1.0)*cj0*x2124)));
evalcond[8]=((((-1.0)*r12*sj3*x2121))+((r10*x2125))+(((-1.0)*x2118*x2119))+(((-1.0)*cj2*sj1*x2118))+((r10*x2111))+(((-1.0)*sj3*x2113*x2120))+((r11*x2115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2126=((1.0)*gconst2);
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2126))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
CheckValue<IkReal> x2128=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x2126)))),-1);
if(!x2128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2127.value)+(((1.5707963267949)*(x2128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2129=IKsin(j4);
IkReal x2130=IKcos(j4);
IkReal x2131=(cj3*gconst1);
IkReal x2132=(gconst1*r01);
IkReal x2133=(gconst1*r11);
IkReal x2134=(sj1*sj2);
IkReal x2135=(cj3*gconst2);
IkReal x2136=(gconst1*sj3);
IkReal x2137=(gconst2*sj3);
IkReal x2138=((1.0)*sj0);
IkReal x2139=(cj1*sj2);
IkReal x2140=((1.0)*x2130);
IkReal x2141=((1.0)*x2129);
IkReal x2142=((1.0)*cj1*cj2);
IkReal x2143=(cj3*x2129);
IkReal x2144=((1.0)*cj2*sj1);
IkReal x2145=(x2130*x2137);
evalcond[0]=((((-1.0)*gconst2*r20*x2141))+((gconst1*r21*x2129))+(((-1.0)*r22*x2140)));
evalcond[1]=(cj0+(((-1.0)*r12*x2140))+(((-1.0)*gconst2*r10*x2141))+((x2129*x2133)));
evalcond[2]=((((-1.0)*x2138))+(((-1.0)*r02*x2140))+(((-1.0)*gconst2*r00*x2141))+((x2129*x2132)));
evalcond[3]=((((-1.0)*r20*x2135*x2140))+((cj2*sj1))+((r21*x2137))+((r21*x2130*x2131))+x2139+((r22*x2143))+((r20*x2136)));
evalcond[4]=(((r21*x2135))+((r20*x2145))+(((-1.0)*r21*x2136*x2140))+x2134+(((-1.0)*x2142))+(((-1.0)*r22*sj3*x2141))+((r20*x2131)));
evalcond[5]=((((-1.0)*cj0*x2142))+((cj0*x2134))+((r02*x2143))+((r01*x2137))+((r00*x2136))+(((-1.0)*r00*x2135*x2140))+((r01*x2130*x2131)));
evalcond[6]=((((-1.0)*cj1*cj2*x2138))+(((-1.0)*r10*x2135*x2140))+((r11*x2137))+((r10*x2136))+((sj0*x2134))+((r12*x2143))+((r11*x2130*x2131)));
evalcond[7]=((((-1.0)*cj0*x2144))+(((-1.0)*cj0*x2139))+(((-1.0)*sj3*x2132*x2140))+((r01*x2135))+((r00*x2131))+(((-1.0)*r02*sj3*x2141))+((r00*x2145)));
evalcond[8]=((((-1.0)*sj3*x2133*x2140))+(((-1.0)*r12*sj3*x2141))+((r11*x2135))+((r10*x2131))+(((-1.0)*x2138*x2139))+((r10*x2145))+(((-1.0)*cj2*sj1*x2138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2146=((1.0)*gconst2);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2146))+(((-1.0)*gconst1*r00)))),-1);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x2146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2147.value)))+(x2148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2149=IKsin(j4);
IkReal x2150=IKcos(j4);
IkReal x2151=(cj3*gconst1);
IkReal x2152=(gconst1*r01);
IkReal x2153=(gconst1*r11);
IkReal x2154=(sj1*sj2);
IkReal x2155=(cj3*gconst2);
IkReal x2156=(gconst1*sj3);
IkReal x2157=(gconst2*sj3);
IkReal x2158=((1.0)*sj0);
IkReal x2159=(cj1*sj2);
IkReal x2160=((1.0)*x2150);
IkReal x2161=((1.0)*x2149);
IkReal x2162=((1.0)*cj1*cj2);
IkReal x2163=(cj3*x2149);
IkReal x2164=((1.0)*cj2*sj1);
IkReal x2165=(x2150*x2157);
evalcond[0]=((((-1.0)*gconst2*r20*x2161))+((gconst1*r21*x2149))+(((-1.0)*r22*x2160)));
evalcond[1]=(((x2149*x2153))+(((-1.0)*gconst2*r10*x2161))+cj0+(((-1.0)*r12*x2160)));
evalcond[2]=(((x2149*x2152))+(((-1.0)*gconst2*r00*x2161))+(((-1.0)*x2158))+(((-1.0)*r02*x2160)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x2155*x2160))+((r20*x2156))+x2159+((r21*x2150*x2151))+((r22*x2163))+((r21*x2157)));
evalcond[4]=((((-1.0)*r21*x2156*x2160))+(((-1.0)*r22*sj3*x2161))+((r20*x2151))+x2154+((r20*x2165))+(((-1.0)*x2162))+((r21*x2155)));
evalcond[5]=((((-1.0)*cj0*x2162))+(((-1.0)*r00*x2155*x2160))+((cj0*x2154))+((r02*x2163))+((r01*x2150*x2151))+((r00*x2156))+((r01*x2157)));
evalcond[6]=(((r12*x2163))+(((-1.0)*r10*x2155*x2160))+(((-1.0)*cj1*cj2*x2158))+((r11*x2150*x2151))+((sj0*x2154))+((r10*x2156))+((r11*x2157)));
evalcond[7]=((((-1.0)*r02*sj3*x2161))+((r00*x2165))+(((-1.0)*cj0*x2164))+(((-1.0)*cj0*x2159))+((r00*x2151))+(((-1.0)*sj3*x2152*x2160))+((r01*x2155)));
evalcond[8]=((((-1.0)*r12*sj3*x2161))+(((-1.0)*cj2*sj1*x2158))+(((-1.0)*x2158*x2159))+((r10*x2165))+((r10*x2151))+(((-1.0)*sj3*x2153*x2160))+((r11*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2166=((-1.0)*r21);
IkReal x2168 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2168)==0){
continue;
}
IkReal x2167=pow(x2168,-0.5);
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(x2166),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2169.value))));
IkReal gconst4=(x2166*x2167);
IkReal gconst5=((1.0)*r20*x2167);
CheckValue<IkReal> x2170 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2170.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2170.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2171=((-1.0)*r21);
CheckValue<IkReal> x2174 = IKatan2WithCheck(IkReal(x2171),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2174.valid){
continue;
}
IkReal x2172=((1.0)*(x2174.value));
IkReal x2173=x2167;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2172)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2172)));
IkReal gconst4=(x2171*x2173);
IkReal gconst5=((1.0)*r20*x2173);
IkReal x2175=r22*r22;
IkReal x2176=((1.0)*x2175);
CheckValue<IkReal> x2180=IKPowWithIntegerCheck(((-1.0)+x2175),-1);
if(!x2180.valid){
continue;
}
IkReal x2177=x2180.value;
if((((1.0)+(((-1.0)*x2176)))) < -0.00001)
continue;
IkReal x2178=IKsqrt(((1.0)+(((-1.0)*x2176))));
IkReal x2179=(cj0*x2177*x2178);
j4eval[0]=((IKabs(((((-1.0)*x2176*x2179))+x2179)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2181=((-1.0)*r21);
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(x2181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
IkReal x2182=((1.0)*(x2184.value));
IkReal x2183=x2167;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2182)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2182)));
IkReal gconst4=(x2181*x2183);
IkReal gconst5=((1.0)*r20*x2183);
IkReal x2185=r22*r22;
IkReal x2186=((1.0)*x2185);
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(((-1.0)+x2185),-1);
if(!x2190.valid){
continue;
}
IkReal x2187=x2190.value;
if((((1.0)+(((-1.0)*x2186)))) < -0.00001)
continue;
IkReal x2188=IKsqrt(((1.0)+(((-1.0)*x2186))));
IkReal x2189=(sj0*x2187*x2188);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2189+(((-1.0)*x2186*x2189))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2191=((-1.0)*r21);
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal(x2191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
IkReal x2192=((1.0)*(x2194.value));
IkReal x2193=x2167;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2192)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2192)));
IkReal gconst4=(x2191*x2193);
IkReal gconst5=((1.0)*r20*x2193);
IkReal x2195=r22*r22;
IkReal x2196=(r12*sj0);
IkReal x2197=(cj0*r02);
CheckValue<IkReal> x2201=IKPowWithIntegerCheck(((-1.0)+x2195),-1);
if(!x2201.valid){
continue;
}
IkReal x2198=x2201.value;
if((((1.0)+(((-1.0)*x2195)))) < -0.00001)
continue;
IkReal x2199=IKsqrt(((1.0)+(((-1.0)*x2195))));
IkReal x2200=(r22*x2198*x2199);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2196))+(((-1.0)*x2197)))))+(IKabs((((x2197*x2200))+((x2196*x2200))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2202=((1.0)*sj0);
IkReal x2203=((1.0)*gconst4);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2202))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2203))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x2202))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2203))+(((-1.0)*gconst5*r21)))),-1);
if(!x2205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2204.value)+(((1.5707963267949)*(x2205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2206=IKsin(j4);
IkReal x2207=IKcos(j4);
IkReal x2208=(gconst5*sj3);
IkReal x2209=(cj3*gconst5);
IkReal x2210=(gconst4*r11);
IkReal x2211=(sj1*sj2);
IkReal x2212=(cj2*sj1);
IkReal x2213=((1.0)*sj0);
IkReal x2214=(gconst4*r01);
IkReal x2215=(gconst4*r21);
IkReal x2216=((1.0)*cj0);
IkReal x2217=(cj1*sj2);
IkReal x2218=(gconst4*sj3);
IkReal x2219=(cj3*gconst4);
IkReal x2220=((1.0)*x2207);
IkReal x2221=((1.0)*cj1*cj2);
IkReal x2222=(cj3*x2206);
IkReal x2223=(cj3*x2207);
IkReal x2224=((1.0)*gconst5*x2206);
IkReal x2225=((1.0)*sj3*x2206);
evalcond[0]=((((-1.0)*r20*x2224))+((x2206*x2215))+(((-1.0)*r22*x2220)));
evalcond[1]=((((-1.0)*r10*x2224))+cj0+((x2206*x2210))+(((-1.0)*r12*x2220)));
evalcond[2]=((((-1.0)*x2213))+((x2206*x2214))+(((-1.0)*r00*x2224))+(((-1.0)*r02*x2220)));
evalcond[3]=((((-1.0)*r20*x2209*x2220))+((r22*x2222))+((r20*x2218))+x2212+x2217+((x2215*x2223))+((r21*x2208)));
evalcond[4]=((((-1.0)*sj3*x2215*x2220))+((r20*x2219))+x2211+((r20*x2207*x2208))+(((-1.0)*x2221))+(((-1.0)*r22*x2225))+((r21*x2209)));
evalcond[5]=(((x2214*x2223))+((r01*x2208))+(((-1.0)*cj1*cj2*x2216))+((r00*x2218))+((r02*x2222))+((cj0*x2211))+(((-1.0)*r00*x2209*x2220)));
evalcond[6]=(((r12*x2222))+(((-1.0)*cj1*cj2*x2213))+((r11*x2208))+((sj0*x2211))+((r10*x2218))+(((-1.0)*r10*x2209*x2220))+((x2210*x2223)));
evalcond[7]=((((-1.0)*sj3*x2214*x2220))+((r01*x2209))+((r00*x2219))+(((-1.0)*r02*x2225))+(((-1.0)*x2216*x2217))+((r00*x2207*x2208))+(((-1.0)*x2212*x2216)));
evalcond[8]=(((r10*x2207*x2208))+((r11*x2209))+(((-1.0)*r12*x2225))+(((-1.0)*x2213*x2217))+((r10*x2219))+(((-1.0)*sj3*x2210*x2220))+(((-1.0)*x2212*x2213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2226=((1.0)*gconst5);
CheckValue<IkReal> x2227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2226))+(((-1.0)*gconst4*r10)))),-1);
if(!x2227.valid){
continue;
}
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2226))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2227.value)))+(x2228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2229=IKsin(j4);
IkReal x2230=IKcos(j4);
IkReal x2231=(gconst5*sj3);
IkReal x2232=(cj3*gconst5);
IkReal x2233=(gconst4*r11);
IkReal x2234=(sj1*sj2);
IkReal x2235=(cj2*sj1);
IkReal x2236=((1.0)*sj0);
IkReal x2237=(gconst4*r01);
IkReal x2238=(gconst4*r21);
IkReal x2239=((1.0)*cj0);
IkReal x2240=(cj1*sj2);
IkReal x2241=(gconst4*sj3);
IkReal x2242=(cj3*gconst4);
IkReal x2243=((1.0)*x2230);
IkReal x2244=((1.0)*cj1*cj2);
IkReal x2245=(cj3*x2229);
IkReal x2246=(cj3*x2230);
IkReal x2247=((1.0)*gconst5*x2229);
IkReal x2248=((1.0)*sj3*x2229);
evalcond[0]=(((x2229*x2238))+(((-1.0)*r22*x2243))+(((-1.0)*r20*x2247)));
evalcond[1]=(cj0+((x2229*x2233))+(((-1.0)*r10*x2247))+(((-1.0)*r12*x2243)));
evalcond[2]=((((-1.0)*r02*x2243))+((x2229*x2237))+(((-1.0)*r00*x2247))+(((-1.0)*x2236)));
evalcond[3]=(x2235+x2240+((r21*x2231))+((r20*x2241))+(((-1.0)*r20*x2232*x2243))+((x2238*x2246))+((r22*x2245)));
evalcond[4]=(x2234+(((-1.0)*r22*x2248))+((r20*x2230*x2231))+((r21*x2232))+((r20*x2242))+(((-1.0)*x2244))+(((-1.0)*sj3*x2238*x2243)));
evalcond[5]=((((-1.0)*cj1*cj2*x2239))+((cj0*x2234))+((r00*x2241))+(((-1.0)*r00*x2232*x2243))+((x2237*x2246))+((r01*x2231))+((r02*x2245)));
evalcond[6]=((((-1.0)*cj1*cj2*x2236))+((r10*x2241))+((sj0*x2234))+((x2233*x2246))+(((-1.0)*r10*x2232*x2243))+((r11*x2231))+((r12*x2245)));
evalcond[7]=((((-1.0)*r02*x2248))+(((-1.0)*x2235*x2239))+((r00*x2242))+(((-1.0)*sj3*x2237*x2243))+(((-1.0)*x2239*x2240))+((r00*x2230*x2231))+((r01*x2232)));
evalcond[8]=(((r10*x2242))+(((-1.0)*x2235*x2236))+(((-1.0)*sj3*x2233*x2243))+(((-1.0)*x2236*x2240))+(((-1.0)*r12*x2248))+((r11*x2232))+((r10*x2230*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2249=((1.0)*gconst5);
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2249))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x2249)))),-1);
if(!x2251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2250.value)+(((1.5707963267949)*(x2251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2252=IKsin(j4);
IkReal x2253=IKcos(j4);
IkReal x2254=(gconst5*sj3);
IkReal x2255=(cj3*gconst5);
IkReal x2256=(gconst4*r11);
IkReal x2257=(sj1*sj2);
IkReal x2258=(cj2*sj1);
IkReal x2259=((1.0)*sj0);
IkReal x2260=(gconst4*r01);
IkReal x2261=(gconst4*r21);
IkReal x2262=((1.0)*cj0);
IkReal x2263=(cj1*sj2);
IkReal x2264=(gconst4*sj3);
IkReal x2265=(cj3*gconst4);
IkReal x2266=((1.0)*x2253);
IkReal x2267=((1.0)*cj1*cj2);
IkReal x2268=(cj3*x2252);
IkReal x2269=(cj3*x2253);
IkReal x2270=((1.0)*gconst5*x2252);
IkReal x2271=((1.0)*sj3*x2252);
evalcond[0]=(((x2252*x2261))+(((-1.0)*r20*x2270))+(((-1.0)*r22*x2266)));
evalcond[1]=(cj0+((x2252*x2256))+(((-1.0)*r10*x2270))+(((-1.0)*r12*x2266)));
evalcond[2]=(((x2252*x2260))+(((-1.0)*r00*x2270))+(((-1.0)*x2259))+(((-1.0)*r02*x2266)));
evalcond[3]=(x2263+x2258+((r22*x2268))+((x2261*x2269))+((r20*x2264))+((r21*x2254))+(((-1.0)*r20*x2255*x2266)));
evalcond[4]=(x2257+((r20*x2253*x2254))+(((-1.0)*sj3*x2261*x2266))+(((-1.0)*r22*x2271))+((r20*x2265))+(((-1.0)*x2267))+((r21*x2255)));
evalcond[5]=(((r00*x2264))+((x2260*x2269))+(((-1.0)*cj1*cj2*x2262))+((cj0*x2257))+((r02*x2268))+((r01*x2254))+(((-1.0)*r00*x2255*x2266)));
evalcond[6]=(((x2256*x2269))+(((-1.0)*cj1*cj2*x2259))+(((-1.0)*r10*x2255*x2266))+((r10*x2264))+((r12*x2268))+((sj0*x2257))+((r11*x2254)));
evalcond[7]=(((r00*x2265))+((r00*x2253*x2254))+(((-1.0)*x2258*x2262))+(((-1.0)*sj3*x2260*x2266))+(((-1.0)*r02*x2271))+((r01*x2255))+(((-1.0)*x2262*x2263)));
evalcond[8]=((((-1.0)*x2258*x2259))+(((-1.0)*sj3*x2256*x2266))+(((-1.0)*x2259*x2263))+((r10*x2265))+((r10*x2253*x2254))+(((-1.0)*r12*x2271))+((r11*x2255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2272=((-1.0)*r10);
IkReal x2274 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2274)==0){
continue;
}
IkReal x2273=pow(x2274,-0.5);
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2272),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2275.value));
IkReal gconst7=(r11*x2273);
IkReal gconst8=(x2272*x2273);
CheckValue<IkReal> x2276 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2276.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2276.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2277=((-1.0)*r10);
IkReal x2278=x2273;
CheckValue<IkReal> x2280 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2277),IKFAST_ATAN2_MAGTHRESH);
if(!x2280.valid){
continue;
}
IkReal x2279=((-1.0)*(x2280.value));
sj5=gconst7;
cj5=gconst8;
j5=x2279;
IkReal gconst6=x2279;
IkReal gconst7=(r11*x2278);
IkReal gconst8=(x2277*x2278);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2281=((1.0)*sj0);
IkReal x2282=((1.0)*gconst7);
CheckValue<IkReal> x2283=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2282))+(((-1.0)*gconst8*r21)))),-1);
if(!x2283.valid){
continue;
}
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2281))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x2281))+(((-1.0)*cj0*r01*x2282))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2283.value)))+(x2284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2285=IKsin(j4);
IkReal x2286=IKcos(j4);
IkReal x2287=(gconst7*sj3);
IkReal x2288=(cj3*gconst8);
IkReal x2289=(cj3*gconst7);
IkReal x2290=(sj1*sj2);
IkReal x2291=(cj2*sj1);
IkReal x2292=((1.0)*sj0);
IkReal x2293=((1.0)*cj0);
IkReal x2294=(gconst8*sj3);
IkReal x2295=(cj1*sj2);
IkReal x2296=((1.0)*x2286);
IkReal x2297=((1.0)*x2285);
IkReal x2298=((1.0)*cj1*cj2);
IkReal x2299=(cj3*x2285);
IkReal x2300=(gconst7*x2285);
IkReal x2301=(x2286*x2294);
evalcond[0]=((((-1.0)*gconst8*r20*x2297))+((r21*x2300))+(((-1.0)*r22*x2296)));
evalcond[1]=(((r11*x2300))+cj0+(((-1.0)*gconst8*r10*x2297))+(((-1.0)*r12*x2296)));
evalcond[2]=((((-1.0)*r02*x2296))+(((-1.0)*gconst8*r00*x2297))+(((-1.0)*x2292))+((r01*x2300)));
evalcond[3]=(x2291+x2295+((r22*x2299))+((r20*x2287))+((r21*x2286*x2289))+((r21*x2294))+(((-1.0)*r20*x2288*x2296)));
evalcond[4]=(x2290+((r20*x2301))+(((-1.0)*r22*sj3*x2297))+((r20*x2289))+((r21*x2288))+(((-1.0)*r21*x2287*x2296))+(((-1.0)*x2298)));
evalcond[5]=(((cj0*x2290))+((r01*x2286*x2289))+((r02*x2299))+((r00*x2287))+(((-1.0)*r00*x2288*x2296))+((r01*x2294))+(((-1.0)*cj1*cj2*x2293)));
evalcond[6]=(((r10*x2287))+(((-1.0)*r10*x2288*x2296))+((sj0*x2290))+((r11*x2286*x2289))+((r12*x2299))+(((-1.0)*cj1*cj2*x2292))+((r11*x2294)));
evalcond[7]=((((-1.0)*r01*x2287*x2296))+(((-1.0)*x2293*x2295))+(((-1.0)*r02*sj3*x2297))+((r01*x2288))+((r00*x2289))+(((-1.0)*x2291*x2293))+((r00*x2301)));
evalcond[8]=(((r10*x2289))+((r11*x2288))+((r10*x2301))+(((-1.0)*r12*sj3*x2297))+(((-1.0)*x2292*x2295))+(((-1.0)*r11*x2287*x2296))+(((-1.0)*x2291*x2292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2302=((1.0)*gconst8);
CheckValue<IkReal> x2303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2302))+(((-1.0)*gconst7*r00)))),-1);
if(!x2303.valid){
continue;
}
CheckValue<IkReal> x2304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x2302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2303.value)))+(x2304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2305=IKsin(j4);
IkReal x2306=IKcos(j4);
IkReal x2307=(gconst7*sj3);
IkReal x2308=(cj3*gconst8);
IkReal x2309=(cj3*gconst7);
IkReal x2310=(sj1*sj2);
IkReal x2311=(cj2*sj1);
IkReal x2312=((1.0)*sj0);
IkReal x2313=((1.0)*cj0);
IkReal x2314=(gconst8*sj3);
IkReal x2315=(cj1*sj2);
IkReal x2316=((1.0)*x2306);
IkReal x2317=((1.0)*x2305);
IkReal x2318=((1.0)*cj1*cj2);
IkReal x2319=(cj3*x2305);
IkReal x2320=(gconst7*x2305);
IkReal x2321=(x2306*x2314);
evalcond[0]=((((-1.0)*r22*x2316))+((r21*x2320))+(((-1.0)*gconst8*r20*x2317)));
evalcond[1]=(cj0+((r11*x2320))+(((-1.0)*r12*x2316))+(((-1.0)*gconst8*r10*x2317)));
evalcond[2]=((((-1.0)*gconst8*r00*x2317))+(((-1.0)*r02*x2316))+((r01*x2320))+(((-1.0)*x2312)));
evalcond[3]=(((r21*x2314))+x2315+x2311+((r20*x2307))+((r22*x2319))+(((-1.0)*r20*x2308*x2316))+((r21*x2306*x2309)));
evalcond[4]=(x2310+((r20*x2309))+(((-1.0)*r22*sj3*x2317))+((r21*x2308))+((r20*x2321))+(((-1.0)*r21*x2307*x2316))+(((-1.0)*x2318)));
evalcond[5]=(((r01*x2306*x2309))+(((-1.0)*cj1*cj2*x2313))+((r01*x2314))+((r00*x2307))+((r02*x2319))+(((-1.0)*r00*x2308*x2316))+((cj0*x2310)));
evalcond[6]=(((r10*x2307))+(((-1.0)*cj1*cj2*x2312))+((r11*x2314))+((sj0*x2310))+((r12*x2319))+((r11*x2306*x2309))+(((-1.0)*r10*x2308*x2316)));
evalcond[7]=((((-1.0)*x2311*x2313))+((r00*x2321))+(((-1.0)*x2313*x2315))+((r00*x2309))+((r01*x2308))+(((-1.0)*r01*x2307*x2316))+(((-1.0)*r02*sj3*x2317)));
evalcond[8]=(((r10*x2321))+(((-1.0)*r12*sj3*x2317))+((r11*x2308))+((r10*x2309))+(((-1.0)*x2311*x2312))+(((-1.0)*r11*x2307*x2316))+(((-1.0)*x2312*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2322=((-1.0)*r11);
IkReal x2324 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2324)==0){
continue;
}
IkReal x2323=pow(x2324,-0.5);
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(x2322),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2325.value))));
IkReal gconst10=(x2322*x2323);
IkReal gconst11=((1.0)*r10*x2323);
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2326.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2327=((-1.0)*r11);
CheckValue<IkReal> x2330 = IKatan2WithCheck(IkReal(x2327),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2330.valid){
continue;
}
IkReal x2328=((1.0)*(x2330.value));
IkReal x2329=x2323;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2328)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2328)));
IkReal gconst10=(x2327*x2329);
IkReal gconst11=((1.0)*r10*x2329);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2331=((-1.0)*r11);
CheckValue<IkReal> x2334 = IKatan2WithCheck(IkReal(x2331),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2334.valid){
continue;
}
IkReal x2332=((1.0)*(x2334.value));
IkReal x2333=x2323;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2332)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2332)));
IkReal gconst10=(x2331*x2333);
IkReal gconst11=((1.0)*r10*x2333);
IkReal x2335=r12*r12;
IkReal x2336=((1.0)*sj0);
IkReal x2337=(cj0*r02);
IkReal x2338=x2323;
j4eval[0]=((IKabs((((r12*x2337*x2338))+((sj0*x2335*x2338))+(((-1.0)*x2336*x2338)))))+(IKabs(((((-1.0)*r12*x2336))+(((-1.0)*x2337))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2339=((-1.0)*r11);
CheckValue<IkReal> x2342 = IKatan2WithCheck(IkReal(x2339),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2342.valid){
continue;
}
IkReal x2340=((1.0)*(x2342.value));
IkReal x2341=x2323;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2340)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2340)));
IkReal gconst10=(x2339*x2341);
IkReal gconst11=((1.0)*r10*x2341);
IkReal x2343=((1.0)*cj3);
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2348.valid){
continue;
}
IkReal x2344=x2348.value;
IkReal x2345=(cj3*x2344);
IkReal x2346=(x2343*x2344);
IkReal x2347=((((-1.0)*x2346*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x2345))+(((-1.0)*x2346*(r11*r11)*(r21*r21)))+(((-1.0)*x2343*(r22*r22))));
j4eval[0]=x2347;
j4eval[1]=IKsign(x2347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2349=gconst10*gconst10;
IkReal x2350=r21*r21;
IkReal x2351=gconst11*gconst11;
IkReal x2352=r20*r20;
IkReal x2353=((1.0)*cj3);
IkReal x2354=(r20*sj3);
IkReal x2355=(gconst10*gconst11);
IkReal x2356=(cj2*sj1);
IkReal x2357=(gconst10*r21);
IkReal x2358=(cj1*sj2);
IkReal x2359=((1.0)*gconst11*r20);
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x2358))+((r22*x2356))+((gconst10*r22*x2354)))),IkReal(((((-1.0)*x2356*x2359))+(((-1.0)*x2358*x2359))+((x2356*x2357))+((x2357*x2358))+((r21*x2349*x2354))+(((-1.0)*sj3*x2352*x2355))+((sj3*x2350*x2355))+(((-1.0)*r21*x2351*x2354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
CheckValue<IkReal> x2361=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2351*x2352*x2353))+(((-1.0)*x2349*x2350*x2353))+(((2.0)*cj3*r20*r21*x2355))+(((-1.0)*x2353*(r22*r22))))),-1);
if(!x2361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2360.value)+(((1.5707963267949)*(x2361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2362=IKsin(j4);
IkReal x2363=IKcos(j4);
IkReal x2364=(cj3*r10);
IkReal x2365=(gconst11*r20);
IkReal x2366=(gconst11*sj3);
IkReal x2367=(sj1*sj2);
IkReal x2368=(gconst11*r00);
IkReal x2369=(cj3*r11);
IkReal x2370=(gconst10*sj3);
IkReal x2371=(cj2*sj1);
IkReal x2372=(cj3*r01);
IkReal x2373=((1.0)*sj0);
IkReal x2374=(cj1*sj2);
IkReal x2375=(cj3*r21);
IkReal x2376=(cj3*gconst10);
IkReal x2377=((1.0)*cj0);
IkReal x2378=((1.0)*x2363);
IkReal x2379=((1.0)*x2362);
IkReal x2380=((1.0)*cj1*cj2);
IkReal x2381=(cj3*x2362);
IkReal x2382=(gconst10*x2362);
IkReal x2383=(gconst10*x2363);
evalcond[0]=((((-1.0)*x2365*x2379))+((r21*x2382))+(((-1.0)*r22*x2378)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x2379))+(((-1.0)*r12*x2378))+((r11*x2382)));
evalcond[2]=((((-1.0)*r02*x2378))+((r01*x2382))+(((-1.0)*x2373))+(((-1.0)*x2368*x2379)));
evalcond[3]=(((r20*x2370))+x2374+x2371+((x2375*x2383))+((r22*x2381))+((r21*x2366))+(((-1.0)*cj3*x2365*x2378)));
evalcond[4]=(((r20*x2376))+((sj3*x2363*x2365))+(((-1.0)*r22*sj3*x2379))+x2367+(((-1.0)*x2380))+(((-1.0)*r21*x2370*x2378))+((gconst11*x2375)));
evalcond[5]=(((cj0*x2367))+(((-1.0)*cj3*x2368*x2378))+((r02*x2381))+(((-1.0)*cj1*cj2*x2377))+((x2372*x2383))+((r01*x2366))+((r00*x2370)));
evalcond[6]=(((r11*x2366))+((sj0*x2367))+((r10*x2370))+(((-1.0)*cj1*cj2*x2373))+(((-1.0)*gconst11*x2364*x2378))+((x2369*x2383))+((r12*x2381)));
evalcond[7]=((((-1.0)*r02*sj3*x2379))+(((-1.0)*x2374*x2377))+(((-1.0)*r01*x2370*x2378))+(((-1.0)*x2371*x2377))+((r00*x2363*x2366))+((r00*x2376))+((gconst11*x2372)));
evalcond[8]=(((gconst11*x2369))+((gconst10*x2364))+((r10*x2363*x2366))+(((-1.0)*r11*x2370*x2378))+(((-1.0)*r12*sj3*x2379))+(((-1.0)*x2373*x2374))+(((-1.0)*x2371*x2373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2384=((1.0)*sj0);
IkReal x2385=((1.0)*gconst10);
CheckValue<IkReal> x2386 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2384))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2385))+(((-1.0)*gconst10*r11*x2384))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2385))+(((-1.0)*gconst11*r21)))),-1);
if(!x2387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2386.value)+(((1.5707963267949)*(x2387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2388=IKsin(j4);
IkReal x2389=IKcos(j4);
IkReal x2390=(cj3*r10);
IkReal x2391=(gconst11*r20);
IkReal x2392=(gconst11*sj3);
IkReal x2393=(sj1*sj2);
IkReal x2394=(gconst11*r00);
IkReal x2395=(cj3*r11);
IkReal x2396=(gconst10*sj3);
IkReal x2397=(cj2*sj1);
IkReal x2398=(cj3*r01);
IkReal x2399=((1.0)*sj0);
IkReal x2400=(cj1*sj2);
IkReal x2401=(cj3*r21);
IkReal x2402=(cj3*gconst10);
IkReal x2403=((1.0)*cj0);
IkReal x2404=((1.0)*x2389);
IkReal x2405=((1.0)*x2388);
IkReal x2406=((1.0)*cj1*cj2);
IkReal x2407=(cj3*x2388);
IkReal x2408=(gconst10*x2388);
IkReal x2409=(gconst10*x2389);
evalcond[0]=((((-1.0)*x2391*x2405))+((r21*x2408))+(((-1.0)*r22*x2404)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x2405))+((r11*x2408))+(((-1.0)*r12*x2404)));
evalcond[2]=(((r01*x2408))+(((-1.0)*x2394*x2405))+(((-1.0)*r02*x2404))+(((-1.0)*x2399)));
evalcond[3]=((((-1.0)*cj3*x2391*x2404))+x2400+x2397+((r20*x2396))+((x2401*x2409))+((r22*x2407))+((r21*x2392)));
evalcond[4]=(((r20*x2402))+(((-1.0)*x2406))+x2393+((sj3*x2389*x2391))+(((-1.0)*r22*sj3*x2405))+(((-1.0)*r21*x2396*x2404))+((gconst11*x2401)));
evalcond[5]=((((-1.0)*cj3*x2394*x2404))+(((-1.0)*cj1*cj2*x2403))+((r00*x2396))+((r01*x2392))+((r02*x2407))+((x2398*x2409))+((cj0*x2393)));
evalcond[6]=(((r12*x2407))+(((-1.0)*gconst11*x2390*x2404))+((r10*x2396))+((r11*x2392))+(((-1.0)*cj1*cj2*x2399))+((x2395*x2409))+((sj0*x2393)));
evalcond[7]=((((-1.0)*r02*sj3*x2405))+((gconst11*x2398))+(((-1.0)*x2400*x2403))+((r00*x2402))+(((-1.0)*x2397*x2403))+(((-1.0)*r01*x2396*x2404))+((r00*x2389*x2392)));
evalcond[8]=(((gconst10*x2390))+(((-1.0)*x2399*x2400))+((gconst11*x2395))+(((-1.0)*r12*sj3*x2405))+(((-1.0)*r11*x2396*x2404))+(((-1.0)*x2397*x2399))+((r10*x2389*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2410=((1.0)*gconst11);
CheckValue<IkReal> x2411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2410))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2411.valid){
continue;
}
CheckValue<IkReal> x2412=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x2410)))),-1);
if(!x2412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2411.value)+(((1.5707963267949)*(x2412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2413=IKsin(j4);
IkReal x2414=IKcos(j4);
IkReal x2415=(cj3*r10);
IkReal x2416=(gconst11*r20);
IkReal x2417=(gconst11*sj3);
IkReal x2418=(sj1*sj2);
IkReal x2419=(gconst11*r00);
IkReal x2420=(cj3*r11);
IkReal x2421=(gconst10*sj3);
IkReal x2422=(cj2*sj1);
IkReal x2423=(cj3*r01);
IkReal x2424=((1.0)*sj0);
IkReal x2425=(cj1*sj2);
IkReal x2426=(cj3*r21);
IkReal x2427=(cj3*gconst10);
IkReal x2428=((1.0)*cj0);
IkReal x2429=((1.0)*x2414);
IkReal x2430=((1.0)*x2413);
IkReal x2431=((1.0)*cj1*cj2);
IkReal x2432=(cj3*x2413);
IkReal x2433=(gconst10*x2413);
IkReal x2434=(gconst10*x2414);
evalcond[0]=((((-1.0)*x2416*x2430))+(((-1.0)*r22*x2429))+((r21*x2433)));
evalcond[1]=((((-1.0)*gconst11*r10*x2430))+((r11*x2433))+cj0+(((-1.0)*r12*x2429)));
evalcond[2]=((((-1.0)*r02*x2429))+((r01*x2433))+(((-1.0)*x2419*x2430))+(((-1.0)*x2424)));
evalcond[3]=(x2422+x2425+((r21*x2417))+((r22*x2432))+(((-1.0)*cj3*x2416*x2429))+((x2426*x2434))+((r20*x2421)));
evalcond[4]=(x2418+(((-1.0)*x2431))+((gconst11*x2426))+(((-1.0)*r21*x2421*x2429))+((r20*x2427))+((sj3*x2414*x2416))+(((-1.0)*r22*sj3*x2430)));
evalcond[5]=(((r01*x2417))+((r02*x2432))+((cj0*x2418))+(((-1.0)*cj1*cj2*x2428))+((r00*x2421))+((x2423*x2434))+(((-1.0)*cj3*x2419*x2429)));
evalcond[6]=(((r11*x2417))+(((-1.0)*gconst11*x2415*x2429))+((sj0*x2418))+((r12*x2432))+((r10*x2421))+(((-1.0)*cj1*cj2*x2424))+((x2420*x2434)));
evalcond[7]=(((r00*x2414*x2417))+(((-1.0)*x2422*x2428))+(((-1.0)*x2425*x2428))+((gconst11*x2423))+((r00*x2427))+(((-1.0)*r02*sj3*x2430))+(((-1.0)*r01*x2421*x2429)));
evalcond[8]=((((-1.0)*r12*sj3*x2430))+(((-1.0)*x2424*x2425))+((r10*x2414*x2417))+(((-1.0)*x2422*x2424))+(((-1.0)*r11*x2421*x2429))+((gconst11*x2420))+((gconst10*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2435=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2435;
j4eval[1]=IKsign(x2435);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2436=((1.0)*cj5);
IkReal x2437=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2436)));
j4eval[0]=x2437;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2436))))));
j4eval[2]=IKsign(x2437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2438=cj5*cj5;
IkReal x2439=(cj3*r21);
IkReal x2440=(cj5*sj5);
IkReal x2441=((1.0)*cj3);
IkReal x2442=(((r11*x2438*x2439))+((r10*x2439*x2440))+(((-1.0)*r10*r20*x2438*x2441))+(((-1.0)*r11*x2439))+((cj3*r11*r20*x2440))+(((-1.0)*r12*r22*x2441)));
j4eval[0]=x2442;
j4eval[1]=IKsign(x2442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2443=cj5*cj5;
IkReal x2444=((1.0)*cj3);
IkReal x2445=(r10*r21);
IkReal x2446=(cj5*sj5);
IkReal x2447=(r11*r21);
IkReal x2448=(r11*r20);
IkReal x2449=(r22*sj3);
IkReal x2450=(r10*r20);
IkReal x2451=((1.0)*sj3*x2443);
CheckValue<IkReal> x2452 = IKatan2WithCheck(IkReal((((r10*sj5*x2449))+((cj5*r11*x2449)))),IkReal((((sj3*x2445))+((sj3*x2446*x2447))+(((-1.0)*x2448*x2451))+(((-1.0)*x2445*x2451))+(((-1.0)*sj3*x2446*x2450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2452.valid){
continue;
}
CheckValue<IkReal> x2453=IKPowWithIntegerCheck(IKsign((((cj3*x2443*x2447))+(((-1.0)*x2443*x2444*x2450))+(((-1.0)*x2444*x2447))+((cj3*x2445*x2446))+((cj3*x2446*x2448))+(((-1.0)*r12*r22*x2444)))),-1);
if(!x2453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2452.value)+(((1.5707963267949)*(x2453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2454=IKsin(j4);
IkReal x2455=IKcos(j4);
IkReal x2456=(sj1*sj2);
IkReal x2457=(cj5*sj3);
IkReal x2458=(cj5*r10);
IkReal x2459=(r00*sj5);
IkReal x2460=(r11*sj5);
IkReal x2461=(cj3*cj5);
IkReal x2462=((1.0)*cj1);
IkReal x2463=(cj3*sj5);
IkReal x2464=(r21*sj5);
IkReal x2465=(cj2*sj1);
IkReal x2466=(sj3*sj5);
IkReal x2467=(r01*sj5);
IkReal x2468=(cj2*x2462);
IkReal x2469=((1.0)*x2455);
IkReal x2470=((1.0)*x2454);
IkReal x2471=(cj3*x2454);
IkReal x2472=(cj3*x2455);
evalcond[0]=((((-1.0)*r22*x2469))+((x2454*x2464))+(((-1.0)*cj5*r20*x2470)));
evalcond[1]=((((-1.0)*cj5*r00*x2470))+((x2454*x2467))+(((-1.0)*r02*x2469)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2469))+((x2454*x2460))+(((-1.0)*x2458*x2470)));
evalcond[3]=(((r12*x2471))+((x2460*x2472))+(((-1.0)*cj3*x2458*x2469))+((r11*x2457))+((r10*x2466)));
evalcond[4]=(((r11*x2461))+(((-1.0)*r12*sj3*x2470))+((r10*x2455*x2457))+(((-1.0)*sj3*x2460*x2469))+((r10*x2463)));
evalcond[5]=(x2465+((r20*x2466))+((cj1*sj2))+(((-1.0)*r20*x2461*x2469))+((r21*x2455*x2463))+((r22*x2471))+((r21*x2457)));
evalcond[6]=(x2456+((sj3*x2459))+((r01*x2457))+(((-1.0)*r00*x2461*x2469))+((r02*x2471))+(((-1.0)*x2468))+((r01*x2455*x2463)));
evalcond[7]=(((r20*x2455*x2457))+(((-1.0)*r22*sj3*x2470))+x2456+((r20*x2463))+((r21*x2461))+(((-1.0)*x2468))+(((-1.0)*sj3*x2464*x2469)));
evalcond[8]=(((r01*x2461))+(((-1.0)*r01*x2466*x2469))+((cj3*x2459))+((r00*x2455*x2457))+(((-1.0)*x2465))+(((-1.0)*sj2*x2462))+(((-1.0)*r02*sj3*x2470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2473=((1.0)*cj5);
CheckValue<IkReal> x2474 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2473))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2474.valid){
continue;
}
CheckValue<IkReal> x2475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2473))+(((-1.0)*r00*sj5)))),-1);
if(!x2475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2474.value)+(((1.5707963267949)*(x2475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2476=IKsin(j4);
IkReal x2477=IKcos(j4);
IkReal x2478=(sj1*sj2);
IkReal x2479=(cj5*sj3);
IkReal x2480=(cj5*r10);
IkReal x2481=(r00*sj5);
IkReal x2482=(r11*sj5);
IkReal x2483=(cj3*cj5);
IkReal x2484=((1.0)*cj1);
IkReal x2485=(cj3*sj5);
IkReal x2486=(r21*sj5);
IkReal x2487=(cj2*sj1);
IkReal x2488=(sj3*sj5);
IkReal x2489=(r01*sj5);
IkReal x2490=(cj2*x2484);
IkReal x2491=((1.0)*x2477);
IkReal x2492=((1.0)*x2476);
IkReal x2493=(cj3*x2476);
IkReal x2494=(cj3*x2477);
evalcond[0]=(((x2476*x2486))+(((-1.0)*cj5*r20*x2492))+(((-1.0)*r22*x2491)));
evalcond[1]=(((x2476*x2489))+(((-1.0)*cj5*r00*x2492))+(((-1.0)*r02*x2491)));
evalcond[2]=((1.0)+((x2476*x2482))+(((-1.0)*x2480*x2492))+(((-1.0)*r12*x2491)));
evalcond[3]=(((x2482*x2494))+(((-1.0)*cj3*x2480*x2491))+((r12*x2493))+((r10*x2488))+((r11*x2479)));
evalcond[4]=(((r10*x2477*x2479))+(((-1.0)*r12*sj3*x2492))+((r11*x2483))+(((-1.0)*sj3*x2482*x2491))+((r10*x2485)));
evalcond[5]=(x2487+((cj1*sj2))+((r22*x2493))+((r21*x2479))+(((-1.0)*r20*x2483*x2491))+((r21*x2477*x2485))+((r20*x2488)));
evalcond[6]=(((sj3*x2481))+x2478+((r01*x2477*x2485))+((r02*x2493))+(((-1.0)*x2490))+(((-1.0)*r00*x2483*x2491))+((r01*x2479)));
evalcond[7]=(x2478+((r20*x2477*x2479))+(((-1.0)*x2490))+(((-1.0)*r22*sj3*x2492))+((r21*x2483))+(((-1.0)*sj3*x2486*x2491))+((r20*x2485)));
evalcond[8]=(((r01*x2483))+(((-1.0)*x2487))+(((-1.0)*r01*x2488*x2491))+(((-1.0)*r02*sj3*x2492))+((cj3*x2481))+(((-1.0)*sj2*x2484))+((r00*x2477*x2479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2495=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2495.valid){
continue;
}
CheckValue<IkReal> x2496 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2495.value)))+(x2496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2497=IKsin(j4);
IkReal x2498=IKcos(j4);
IkReal x2499=(sj1*sj2);
IkReal x2500=(cj5*sj3);
IkReal x2501=(cj5*r10);
IkReal x2502=(r00*sj5);
IkReal x2503=(r11*sj5);
IkReal x2504=(cj3*cj5);
IkReal x2505=((1.0)*cj1);
IkReal x2506=(cj3*sj5);
IkReal x2507=(r21*sj5);
IkReal x2508=(cj2*sj1);
IkReal x2509=(sj3*sj5);
IkReal x2510=(r01*sj5);
IkReal x2511=(cj2*x2505);
IkReal x2512=((1.0)*x2498);
IkReal x2513=((1.0)*x2497);
IkReal x2514=(cj3*x2497);
IkReal x2515=(cj3*x2498);
evalcond[0]=(((x2497*x2507))+(((-1.0)*cj5*r20*x2513))+(((-1.0)*r22*x2512)));
evalcond[1]=(((x2497*x2510))+(((-1.0)*cj5*r00*x2513))+(((-1.0)*r02*x2512)));
evalcond[2]=((1.0)+((x2497*x2503))+(((-1.0)*r12*x2512))+(((-1.0)*x2501*x2513)));
evalcond[3]=(((r10*x2509))+(((-1.0)*cj3*x2501*x2512))+((x2503*x2515))+((r11*x2500))+((r12*x2514)));
evalcond[4]=((((-1.0)*sj3*x2503*x2512))+((r10*x2506))+((r10*x2498*x2500))+((r11*x2504))+(((-1.0)*r12*sj3*x2513)));
evalcond[5]=(x2508+((cj1*sj2))+((r22*x2514))+((r21*x2498*x2506))+(((-1.0)*r20*x2504*x2512))+((r21*x2500))+((r20*x2509)));
evalcond[6]=(x2499+(((-1.0)*x2511))+((r02*x2514))+((sj3*x2502))+((r01*x2498*x2506))+(((-1.0)*r00*x2504*x2512))+((r01*x2500)));
evalcond[7]=(x2499+(((-1.0)*x2511))+(((-1.0)*sj3*x2507*x2512))+((r21*x2504))+(((-1.0)*r22*sj3*x2513))+((r20*x2506))+((r20*x2498*x2500)));
evalcond[8]=((((-1.0)*r02*sj3*x2513))+((r00*x2498*x2500))+(((-1.0)*x2508))+((cj3*x2502))+(((-1.0)*r01*x2509*x2512))+(((-1.0)*sj2*x2505))+((r01*x2504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2516=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2516;
j4eval[1]=IKsign(x2516);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2517=((1.0)*cj5);
IkReal x2518=((((-1.0)*r21*x2517))+(((-1.0)*r20*sj5)));
j4eval[0]=x2518;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2517))))));
j4eval[2]=IKsign(x2518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2519=cj5*cj5;
IkReal x2520=(cj3*r21);
IkReal x2521=(cj5*sj5);
IkReal x2522=((1.0)*cj3);
IkReal x2523=((((-1.0)*r10*r20*x2519*x2522))+(((-1.0)*r11*x2520))+((r10*x2520*x2521))+(((-1.0)*r12*r22*x2522))+((r11*x2519*x2520))+((cj3*r11*r20*x2521)));
j4eval[0]=x2523;
j4eval[1]=IKsign(x2523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2524=cj5*cj5;
IkReal x2525=((1.0)*cj3);
IkReal x2526=(r10*r21);
IkReal x2527=(cj5*sj5);
IkReal x2528=(r11*r21);
IkReal x2529=(r11*r20);
IkReal x2530=(r22*sj3);
IkReal x2531=(r10*r20);
IkReal x2532=((1.0)*sj3*x2524);
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal((((cj5*r11*x2530))+((r10*sj5*x2530)))),IkReal(((((-1.0)*x2526*x2532))+((sj3*x2526))+((sj3*x2527*x2528))+(((-1.0)*sj3*x2527*x2531))+(((-1.0)*x2529*x2532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x2525))+((cj3*x2526*x2527))+(((-1.0)*x2525*x2528))+((cj3*x2524*x2528))+((cj3*x2527*x2529))+(((-1.0)*x2524*x2525*x2531)))),-1);
if(!x2534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2533.value)+(((1.5707963267949)*(x2534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2535=IKsin(j4);
IkReal x2536=IKcos(j4);
IkReal x2537=(cj2*sj1);
IkReal x2538=(cj1*sj2);
IkReal x2539=(cj5*sj3);
IkReal x2540=(cj5*r10);
IkReal x2541=(r00*sj5);
IkReal x2542=(sj1*sj2);
IkReal x2543=(r11*sj5);
IkReal x2544=(cj3*cj5);
IkReal x2545=(cj3*sj5);
IkReal x2546=(r21*sj5);
IkReal x2547=(cj1*cj2);
IkReal x2548=(sj3*sj5);
IkReal x2549=(r01*sj5);
IkReal x2550=((1.0)*x2536);
IkReal x2551=((1.0)*x2535);
IkReal x2552=(cj3*x2535);
IkReal x2553=(cj3*x2536);
IkReal x2554=(x2538+x2537);
evalcond[0]=(((x2535*x2546))+(((-1.0)*cj5*r20*x2551))+(((-1.0)*r22*x2550)));
evalcond[1]=((((-1.0)*cj5*r00*x2551))+((x2535*x2549))+(((-1.0)*r02*x2550)));
evalcond[2]=((-1.0)+(((-1.0)*x2540*x2551))+(((-1.0)*r12*x2550))+((x2535*x2543)));
evalcond[3]=(((r12*x2552))+((x2543*x2553))+(((-1.0)*cj3*x2540*x2550))+((r11*x2539))+((r10*x2548)));
evalcond[4]=(((r11*x2544))+(((-1.0)*sj3*x2543*x2550))+(((-1.0)*r12*sj3*x2551))+((r10*x2536*x2539))+((r10*x2545)));
evalcond[5]=(x2554+((r22*x2552))+(((-1.0)*r20*x2544*x2550))+((r21*x2539))+((r21*x2536*x2545))+((r20*x2548)));
evalcond[6]=(((r01*x2539))+x2547+((r01*x2536*x2545))+((sj3*x2541))+(((-1.0)*x2542))+(((-1.0)*r00*x2544*x2550))+((r02*x2552)));
evalcond[7]=(((cj3*x2541))+((r00*x2536*x2539))+x2554+(((-1.0)*r01*x2548*x2550))+((r01*x2544))+(((-1.0)*r02*sj3*x2551)));
evalcond[8]=(x2542+((r21*x2544))+(((-1.0)*sj3*x2546*x2550))+(((-1.0)*x2547))+(((-1.0)*r22*sj3*x2551))+((r20*x2545))+((r20*x2536*x2539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2555=((1.0)*cj5);
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
CheckValue<IkReal> x2557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2555))+(((-1.0)*r20*sj5)))),-1);
if(!x2557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2556.value)+(((1.5707963267949)*(x2557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2558=IKsin(j4);
IkReal x2559=IKcos(j4);
IkReal x2560=(cj2*sj1);
IkReal x2561=(cj1*sj2);
IkReal x2562=(cj5*sj3);
IkReal x2563=(cj5*r10);
IkReal x2564=(r00*sj5);
IkReal x2565=(sj1*sj2);
IkReal x2566=(r11*sj5);
IkReal x2567=(cj3*cj5);
IkReal x2568=(cj3*sj5);
IkReal x2569=(r21*sj5);
IkReal x2570=(cj1*cj2);
IkReal x2571=(sj3*sj5);
IkReal x2572=(r01*sj5);
IkReal x2573=((1.0)*x2559);
IkReal x2574=((1.0)*x2558);
IkReal x2575=(cj3*x2558);
IkReal x2576=(cj3*x2559);
IkReal x2577=(x2561+x2560);
evalcond[0]=(((x2558*x2569))+(((-1.0)*r22*x2573))+(((-1.0)*cj5*r20*x2574)));
evalcond[1]=(((x2558*x2572))+(((-1.0)*cj5*r00*x2574))+(((-1.0)*r02*x2573)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2573))+(((-1.0)*x2563*x2574))+((x2558*x2566)));
evalcond[3]=(((r10*x2571))+((r12*x2575))+(((-1.0)*cj3*x2563*x2573))+((x2566*x2576))+((r11*x2562)));
evalcond[4]=(((r10*x2559*x2562))+((r10*x2568))+((r11*x2567))+(((-1.0)*r12*sj3*x2574))+(((-1.0)*sj3*x2566*x2573)));
evalcond[5]=(x2577+(((-1.0)*r20*x2567*x2573))+((r21*x2559*x2568))+((r20*x2571))+((r21*x2562))+((r22*x2575)));
evalcond[6]=(x2570+((r01*x2562))+(((-1.0)*x2565))+((sj3*x2564))+((r02*x2575))+(((-1.0)*r00*x2567*x2573))+((r01*x2559*x2568)));
evalcond[7]=(x2577+(((-1.0)*r02*sj3*x2574))+((r01*x2567))+((cj3*x2564))+(((-1.0)*r01*x2571*x2573))+((r00*x2559*x2562)));
evalcond[8]=(x2565+((r20*x2559*x2562))+((r20*x2568))+(((-1.0)*x2570))+(((-1.0)*sj3*x2569*x2573))+(((-1.0)*r22*sj3*x2574))+((r21*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
CheckValue<IkReal> x2579=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2578.value)+(((1.5707963267949)*(x2579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2580=IKsin(j4);
IkReal x2581=IKcos(j4);
IkReal x2582=(cj2*sj1);
IkReal x2583=(cj1*sj2);
IkReal x2584=(cj5*sj3);
IkReal x2585=(cj5*r10);
IkReal x2586=(r00*sj5);
IkReal x2587=(sj1*sj2);
IkReal x2588=(r11*sj5);
IkReal x2589=(cj3*cj5);
IkReal x2590=(cj3*sj5);
IkReal x2591=(r21*sj5);
IkReal x2592=(cj1*cj2);
IkReal x2593=(sj3*sj5);
IkReal x2594=(r01*sj5);
IkReal x2595=((1.0)*x2581);
IkReal x2596=((1.0)*x2580);
IkReal x2597=(cj3*x2580);
IkReal x2598=(cj3*x2581);
IkReal x2599=(x2583+x2582);
evalcond[0]=((((-1.0)*r22*x2595))+((x2580*x2591))+(((-1.0)*cj5*r20*x2596)));
evalcond[1]=((((-1.0)*r02*x2595))+((x2580*x2594))+(((-1.0)*cj5*r00*x2596)));
evalcond[2]=((-1.0)+(((-1.0)*x2585*x2596))+((x2580*x2588))+(((-1.0)*r12*x2595)));
evalcond[3]=((((-1.0)*cj3*x2585*x2595))+((r10*x2593))+((r12*x2597))+((r11*x2584))+((x2588*x2598)));
evalcond[4]=((((-1.0)*sj3*x2588*x2595))+((r10*x2590))+((r10*x2581*x2584))+((r11*x2589))+(((-1.0)*r12*sj3*x2596)));
evalcond[5]=(((r22*x2597))+x2599+((r20*x2593))+(((-1.0)*r20*x2589*x2595))+((r21*x2581*x2590))+((r21*x2584)));
evalcond[6]=(((r01*x2581*x2590))+((r01*x2584))+x2592+((sj3*x2586))+(((-1.0)*x2587))+(((-1.0)*r00*x2589*x2595))+((r02*x2597)));
evalcond[7]=(((r01*x2589))+x2599+(((-1.0)*r02*sj3*x2596))+(((-1.0)*r01*x2593*x2595))+((cj3*x2586))+((r00*x2581*x2584)));
evalcond[8]=(x2587+(((-1.0)*x2592))+(((-1.0)*sj3*x2591*x2595))+((r20*x2590))+(((-1.0)*r22*sj3*x2596))+((r20*x2581*x2584))+((r21*x2589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2600=((-1.0)*r00);
IkReal x2602 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2602)==0){
continue;
}
IkReal x2601=pow(x2602,-0.5);
CheckValue<IkReal> x2603 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2600),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2603.value));
IkReal gconst13=(r01*x2601);
IkReal gconst14=(x2600*x2601);
CheckValue<IkReal> x2604 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2605=((-1.0)*r00);
IkReal x2606=x2601;
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2605),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
IkReal x2607=((-1.0)*(x2608.value));
sj5=gconst13;
cj5=gconst14;
j5=x2607;
IkReal gconst12=x2607;
IkReal gconst13=(r01*x2606);
IkReal gconst14=(x2605*x2606);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2609=((1.0)*sj0);
IkReal x2610=((1.0)*cj0);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2609))+(((-1.0)*r02*x2610)))),IkReal(((((-1.0)*gconst13*r11*x2609))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x2610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x2612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2611.value)+(((1.5707963267949)*(x2612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2613=IKsin(j4);
IkReal x2614=IKcos(j4);
IkReal x2615=((1.0)*r22);
IkReal x2616=((1.0)*r12);
IkReal x2617=(gconst13*sj3);
IkReal x2618=(gconst13*r01);
IkReal x2619=(sj1*sj2);
IkReal x2620=(gconst14*sj3);
IkReal x2621=(cj2*sj1);
IkReal x2622=((1.0)*sj0);
IkReal x2623=(cj3*gconst13);
IkReal x2624=(cj3*gconst14);
IkReal x2625=((1.0)*cj0);
IkReal x2626=((1.0)*gconst14);
IkReal x2627=(cj1*sj2);
IkReal x2628=(sj3*x2613);
IkReal x2629=((1.0)*cj1*cj2);
IkReal x2630=(cj3*x2614);
IkReal x2631=(cj3*x2613);
IkReal x2632=(gconst13*x2613);
IkReal x2633=((1.0)*x2614);
IkReal x2634=(x2613*x2626);
evalcond[0]=((((-1.0)*r20*x2634))+((r21*x2632))+(((-1.0)*x2614*x2615)));
evalcond[1]=(cj0+(((-1.0)*r10*x2634))+((r11*x2632))+(((-1.0)*x2614*x2616)));
evalcond[2]=(((x2613*x2618))+(((-1.0)*r02*x2633))+(((-1.0)*r00*x2634))+(((-1.0)*x2622)));
evalcond[3]=((((-1.0)*r20*x2624*x2633))+((r20*x2617))+((r22*x2631))+((r21*x2614*x2623))+((r21*x2620))+x2621+x2627);
evalcond[4]=(((r20*x2623))+((r20*x2614*x2620))+(((-1.0)*x2629))+(((-1.0)*x2615*x2628))+((r21*x2624))+(((-1.0)*r21*x2617*x2633))+x2619);
evalcond[5]=(((r00*x2617))+((r01*x2620))+(((-1.0)*cj1*cj2*x2625))+((x2618*x2630))+(((-1.0)*r00*x2624*x2633))+((cj0*x2619))+((r02*x2631)));
evalcond[6]=((((-1.0)*cj1*cj2*x2622))+(((-1.0)*r10*x2624*x2633))+((r11*x2614*x2623))+((r12*x2631))+((r10*x2617))+((r11*x2620))+((sj0*x2619)));
evalcond[7]=(((r01*x2624))+(((-1.0)*r02*x2628))+((r00*x2623))+(((-1.0)*x2625*x2627))+((r00*x2614*x2620))+(((-1.0)*r01*x2617*x2633))+(((-1.0)*x2621*x2625)));
evalcond[8]=((((-1.0)*x2622*x2627))+((r11*x2624))+((r10*x2623))+((r10*x2614*x2620))+(((-1.0)*x2616*x2628))+(((-1.0)*x2621*x2622))+(((-1.0)*r11*x2617*x2633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2635=((1.0)*gconst14);
CheckValue<IkReal> x2636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x2635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x2635)))),-1);
if(!x2637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2636.value)+(((1.5707963267949)*(x2637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2638=IKsin(j4);
IkReal x2639=IKcos(j4);
IkReal x2640=((1.0)*r22);
IkReal x2641=((1.0)*r12);
IkReal x2642=(gconst13*sj3);
IkReal x2643=(gconst13*r01);
IkReal x2644=(sj1*sj2);
IkReal x2645=(gconst14*sj3);
IkReal x2646=(cj2*sj1);
IkReal x2647=((1.0)*sj0);
IkReal x2648=(cj3*gconst13);
IkReal x2649=(cj3*gconst14);
IkReal x2650=((1.0)*cj0);
IkReal x2651=((1.0)*gconst14);
IkReal x2652=(cj1*sj2);
IkReal x2653=(sj3*x2638);
IkReal x2654=((1.0)*cj1*cj2);
IkReal x2655=(cj3*x2639);
IkReal x2656=(cj3*x2638);
IkReal x2657=(gconst13*x2638);
IkReal x2658=((1.0)*x2639);
IkReal x2659=(x2638*x2651);
evalcond[0]=(((r21*x2657))+(((-1.0)*r20*x2659))+(((-1.0)*x2639*x2640)));
evalcond[1]=(((r11*x2657))+cj0+(((-1.0)*r10*x2659))+(((-1.0)*x2639*x2641)));
evalcond[2]=((((-1.0)*r00*x2659))+((x2638*x2643))+(((-1.0)*r02*x2658))+(((-1.0)*x2647)));
evalcond[3]=((((-1.0)*r20*x2649*x2658))+((r21*x2639*x2648))+((r21*x2645))+((r22*x2656))+x2646+x2652+((r20*x2642)));
evalcond[4]=(((r21*x2649))+(((-1.0)*x2640*x2653))+(((-1.0)*r21*x2642*x2658))+((r20*x2639*x2645))+(((-1.0)*x2654))+x2644+((r20*x2648)));
evalcond[5]=(((r02*x2656))+((cj0*x2644))+((r00*x2642))+(((-1.0)*cj1*cj2*x2650))+((r01*x2645))+(((-1.0)*r00*x2649*x2658))+((x2643*x2655)));
evalcond[6]=(((r12*x2656))+((sj0*x2644))+((r11*x2645))+((r10*x2642))+(((-1.0)*r10*x2649*x2658))+(((-1.0)*cj1*cj2*x2647))+((r11*x2639*x2648)));
evalcond[7]=((((-1.0)*x2650*x2652))+(((-1.0)*x2646*x2650))+(((-1.0)*r01*x2642*x2658))+((r00*x2639*x2645))+((r00*x2648))+((r01*x2649))+(((-1.0)*r02*x2653)));
evalcond[8]=(((r11*x2649))+(((-1.0)*x2646*x2647))+(((-1.0)*x2647*x2652))+((r10*x2648))+(((-1.0)*x2641*x2653))+((r10*x2639*x2645))+(((-1.0)*r11*x2642*x2658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2660=((-1.0)*r01);
IkReal x2662 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2662)==0){
continue;
}
IkReal x2661=pow(x2662,-0.5);
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(x2660),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2663.value))));
IkReal gconst16=(x2660*x2661);
IkReal gconst17=((1.0)*r00*x2661);
CheckValue<IkReal> x2664 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2664.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2664.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2665=((-1.0)*r01);
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(x2665),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
IkReal x2666=((1.0)*(x2668.value));
IkReal x2667=x2661;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2666)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2666)));
IkReal gconst16=(x2665*x2667);
IkReal gconst17=((1.0)*r00*x2667);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2669=((-1.0)*r01);
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal(x2669),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
IkReal x2670=((1.0)*(x2672.value));
IkReal x2671=x2661;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2670)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2670)));
IkReal gconst16=(x2669*x2671);
IkReal gconst17=((1.0)*r00*x2671);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2673=((-1.0)*r01);
CheckValue<IkReal> x2676 = IKatan2WithCheck(IkReal(x2673),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2676.valid){
continue;
}
IkReal x2674=((1.0)*(x2676.value));
IkReal x2675=x2661;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2674)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2674)));
IkReal gconst16=(x2673*x2675);
IkReal gconst17=((1.0)*r00*x2675);
IkReal x2677=r02*r02;
IkReal x2678=(r12*sj0);
IkReal x2679=((1.0)*cj0);
IkReal x2680=x2661;
j4eval[0]=((IKabs((((cj0*x2677*x2680))+(((-1.0)*x2679*x2680))+((r02*x2678*x2680)))))+(IKabs(((((-1.0)*x2678))+(((-1.0)*r02*x2679))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2681=((1.0)*sj0);
IkReal x2682=((1.0)*cj0);
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x2683.valid){
continue;
}
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2681))+(((-1.0)*r02*x2682)))),IkReal(((((-1.0)*gconst16*r01*x2682))+(((-1.0)*gconst16*r11*x2681))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2683.value)))+(x2684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2685=IKsin(j4);
IkReal x2686=IKcos(j4);
IkReal x2687=(cj3*gconst17);
IkReal x2688=(gconst16*r21);
IkReal x2689=(gconst17*sj3);
IkReal x2690=(gconst16*r20);
IkReal x2691=(sj1*sj2);
IkReal x2692=(gconst16*r10);
IkReal x2693=(cj2*sj1);
IkReal x2694=(gconst16*sj3);
IkReal x2695=((1.0)*cj0);
IkReal x2696=((1.0)*sj0);
IkReal x2697=(cj1*sj2);
IkReal x2698=((1.0)*x2686);
IkReal x2699=(gconst16*x2685);
IkReal x2700=(cj3*x2686);
IkReal x2701=(cj3*x2685);
IkReal x2702=((1.0)*cj1*cj2);
IkReal x2703=((1.0)*gconst17*x2685);
IkReal x2704=((1.0)*sj3*x2685);
evalcond[0]=((((-1.0)*r22*x2698))+(((-1.0)*r20*x2703))+((x2685*x2688)));
evalcond[1]=((((-1.0)*r10*x2703))+cj0+(((-1.0)*r12*x2698))+((r11*x2699)));
evalcond[2]=((((-1.0)*r00*x2703))+(((-1.0)*r02*x2698))+(((-1.0)*x2696))+((r01*x2699)));
evalcond[3]=(((r22*x2701))+((x2688*x2700))+(((-1.0)*r20*x2687*x2698))+((r21*x2689))+((sj3*x2690))+x2697+x2693);
evalcond[4]=((((-1.0)*r22*x2704))+((r21*x2687))+(((-1.0)*sj3*x2688*x2698))+(((-1.0)*x2702))+((r20*x2686*x2689))+((cj3*x2690))+x2691);
evalcond[5]=(((cj0*x2691))+((r01*x2689))+(((-1.0)*cj1*cj2*x2695))+(((-1.0)*r00*x2687*x2698))+((r00*x2694))+((r02*x2701))+((gconst16*r01*x2700)));
evalcond[6]=(((r12*x2701))+((r11*x2689))+(((-1.0)*r10*x2687*x2698))+(((-1.0)*cj1*cj2*x2696))+((sj0*x2691))+((sj3*x2692))+((gconst16*r11*x2700)));
evalcond[7]=(((r00*x2686*x2689))+(((-1.0)*r02*x2704))+((r01*x2687))+(((-1.0)*r01*x2694*x2698))+(((-1.0)*x2693*x2695))+((cj3*gconst16*r00))+(((-1.0)*x2695*x2697)));
evalcond[8]=(((r11*x2687))+(((-1.0)*x2696*x2697))+(((-1.0)*r12*x2704))+((r10*x2686*x2689))+(((-1.0)*x2693*x2696))+((cj3*x2692))+(((-1.0)*r11*x2694*x2698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2705=((1.0)*gconst17);
CheckValue<IkReal> x2706 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x2705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x2705)))),-1);
if(!x2707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2706.value)+(((1.5707963267949)*(x2707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2708=IKsin(j4);
IkReal x2709=IKcos(j4);
IkReal x2710=(cj3*gconst17);
IkReal x2711=(gconst16*r21);
IkReal x2712=(gconst17*sj3);
IkReal x2713=(gconst16*r20);
IkReal x2714=(sj1*sj2);
IkReal x2715=(gconst16*r10);
IkReal x2716=(cj2*sj1);
IkReal x2717=(gconst16*sj3);
IkReal x2718=((1.0)*cj0);
IkReal x2719=((1.0)*sj0);
IkReal x2720=(cj1*sj2);
IkReal x2721=((1.0)*x2709);
IkReal x2722=(gconst16*x2708);
IkReal x2723=(cj3*x2709);
IkReal x2724=(cj3*x2708);
IkReal x2725=((1.0)*cj1*cj2);
IkReal x2726=((1.0)*gconst17*x2708);
IkReal x2727=((1.0)*sj3*x2708);
evalcond[0]=(((x2708*x2711))+(((-1.0)*r22*x2721))+(((-1.0)*r20*x2726)));
evalcond[1]=(cj0+(((-1.0)*r12*x2721))+((r11*x2722))+(((-1.0)*r10*x2726)));
evalcond[2]=((((-1.0)*r00*x2726))+(((-1.0)*x2719))+((r01*x2722))+(((-1.0)*r02*x2721)));
evalcond[3]=(x2716+x2720+((r22*x2724))+(((-1.0)*r20*x2710*x2721))+((sj3*x2713))+((r21*x2712))+((x2711*x2723)));
evalcond[4]=(x2714+((cj3*x2713))+((r20*x2709*x2712))+(((-1.0)*r22*x2727))+(((-1.0)*x2725))+((r21*x2710))+(((-1.0)*sj3*x2711*x2721)));
evalcond[5]=(((r02*x2724))+((gconst16*r01*x2723))+((cj0*x2714))+(((-1.0)*cj1*cj2*x2718))+((r00*x2717))+(((-1.0)*r00*x2710*x2721))+((r01*x2712)));
evalcond[6]=(((gconst16*r11*x2723))+((sj0*x2714))+((sj3*x2715))+(((-1.0)*r10*x2710*x2721))+((r11*x2712))+(((-1.0)*cj1*cj2*x2719))+((r12*x2724)));
evalcond[7]=((((-1.0)*x2718*x2720))+(((-1.0)*r01*x2717*x2721))+((r00*x2709*x2712))+(((-1.0)*x2716*x2718))+(((-1.0)*r02*x2727))+((cj3*gconst16*r00))+((r01*x2710)));
evalcond[8]=(((cj3*x2715))+(((-1.0)*x2719*x2720))+(((-1.0)*r12*x2727))+(((-1.0)*r11*x2717*x2721))+((r10*x2709*x2712))+((r11*x2710))+(((-1.0)*x2716*x2719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2728=((1.0)*gconst17);
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2728))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x2728)))),-1);
if(!x2730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2729.value)+(((1.5707963267949)*(x2730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2731=IKsin(j4);
IkReal x2732=IKcos(j4);
IkReal x2733=(cj3*gconst17);
IkReal x2734=(gconst16*r21);
IkReal x2735=(gconst17*sj3);
IkReal x2736=(gconst16*r20);
IkReal x2737=(sj1*sj2);
IkReal x2738=(gconst16*r10);
IkReal x2739=(cj2*sj1);
IkReal x2740=(gconst16*sj3);
IkReal x2741=((1.0)*cj0);
IkReal x2742=((1.0)*sj0);
IkReal x2743=(cj1*sj2);
IkReal x2744=((1.0)*x2732);
IkReal x2745=(gconst16*x2731);
IkReal x2746=(cj3*x2732);
IkReal x2747=(cj3*x2731);
IkReal x2748=((1.0)*cj1*cj2);
IkReal x2749=((1.0)*gconst17*x2731);
IkReal x2750=((1.0)*sj3*x2731);
evalcond[0]=(((x2731*x2734))+(((-1.0)*r20*x2749))+(((-1.0)*r22*x2744)));
evalcond[1]=(((r11*x2745))+cj0+(((-1.0)*r10*x2749))+(((-1.0)*r12*x2744)));
evalcond[2]=((((-1.0)*r00*x2749))+((r01*x2745))+(((-1.0)*x2742))+(((-1.0)*r02*x2744)));
evalcond[3]=(((x2734*x2746))+x2743+x2739+((r22*x2747))+((sj3*x2736))+(((-1.0)*r20*x2733*x2744))+((r21*x2735)));
evalcond[4]=(x2737+(((-1.0)*r22*x2750))+(((-1.0)*sj3*x2734*x2744))+((r20*x2732*x2735))+((r21*x2733))+((cj3*x2736))+(((-1.0)*x2748)));
evalcond[5]=((((-1.0)*r00*x2733*x2744))+((gconst16*r01*x2746))+((r01*x2735))+(((-1.0)*cj1*cj2*x2741))+((cj0*x2737))+((r00*x2740))+((r02*x2747)));
evalcond[6]=(((sj3*x2738))+((r12*x2747))+(((-1.0)*r10*x2733*x2744))+(((-1.0)*cj1*cj2*x2742))+((sj0*x2737))+((gconst16*r11*x2746))+((r11*x2735)));
evalcond[7]=(((r00*x2732*x2735))+(((-1.0)*x2739*x2741))+(((-1.0)*r01*x2740*x2744))+((r01*x2733))+(((-1.0)*x2741*x2743))+((cj3*gconst16*r00))+(((-1.0)*r02*x2750)));
evalcond[8]=((((-1.0)*r11*x2740*x2744))+(((-1.0)*x2739*x2742))+(((-1.0)*r12*x2750))+((cj3*x2738))+((r10*x2732*x2735))+((r11*x2733))+(((-1.0)*x2742*x2743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2751=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2751;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2752=((1.0)*cj5);
IkReal x2753=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2752)));
j4eval[0]=x2753;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2752)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2753);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2754=cj5*cj5;
IkReal x2755=(cj3*r01);
IkReal x2756=(cj5*sj5);
IkReal x2757=((1.0)*cj3);
IkReal x2758=(((r21*x2754*x2755))+(((-1.0)*r21*x2755))+((cj3*r00*r21*x2756))+((r20*x2755*x2756))+(((-1.0)*r02*r22*x2757))+(((-1.0)*r00*r20*x2754*x2757)));
j4eval[0]=x2758;
j4eval[1]=IKsign(x2758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2759=cj5*cj5;
IkReal x2760=(cj3*r20);
IkReal x2761=(r21*sj3);
IkReal x2762=((1.0)*cj3);
IkReal x2763=(r01*r21);
IkReal x2764=(r01*sj3);
IkReal x2765=(r00*sj5);
IkReal x2766=(cj5*r01*sj5);
IkReal x2767=((1.0)*x2759);
CheckValue<IkReal> x2768 = IKatan2WithCheck(IkReal((((r22*sj3*x2765))+((cj5*r22*x2764)))),IkReal(((((-1.0)*r20*x2764*x2767))+((r00*x2761))+((x2761*x2766))+(((-1.0)*cj5*r20*sj3*x2765))+(((-1.0)*r00*x2761*x2767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2768.valid){
continue;
}
CheckValue<IkReal> x2769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x2762))+((cj3*x2759*x2763))+(((-1.0)*x2762*x2763))+((x2760*x2766))+(((-1.0)*r00*x2760*x2767))+((cj3*cj5*r21*x2765)))),-1);
if(!x2769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2768.value)+(((1.5707963267949)*(x2769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2770=IKsin(j4);
IkReal x2771=IKcos(j4);
IkReal x2772=(sj1*sj2);
IkReal x2773=(r11*sj5);
IkReal x2774=(cj5*r10);
IkReal x2775=(cj5*r01);
IkReal x2776=(cj5*r00);
IkReal x2777=((1.0)*cj1);
IkReal x2778=(cj3*sj5);
IkReal x2779=(r21*sj5);
IkReal x2780=(cj5*sj3);
IkReal x2781=(sj3*sj5);
IkReal x2782=(cj2*sj1);
IkReal x2783=(r01*sj5);
IkReal x2784=(cj3*cj5);
IkReal x2785=(cj5*r20);
IkReal x2786=(cj2*x2777);
IkReal x2787=((1.0)*x2771);
IkReal x2788=((1.0)*x2770);
IkReal x2789=(cj3*x2771);
IkReal x2790=(sj3*x2771);
IkReal x2791=(cj3*x2770);
evalcond[0]=(((x2770*x2779))+(((-1.0)*x2785*x2788))+(((-1.0)*r22*x2787)));
evalcond[1]=((((-1.0)*r12*x2787))+((x2770*x2773))+(((-1.0)*x2774*x2788)));
evalcond[2]=((-1.0)+((x2770*x2783))+(((-1.0)*x2776*x2788))+(((-1.0)*r02*x2787)));
evalcond[3]=(((r02*x2791))+(((-1.0)*cj3*x2776*x2787))+((r00*x2781))+((r01*x2771*x2778))+((sj3*x2775)));
evalcond[4]=((((-1.0)*r02*sj3*x2788))+((x2776*x2790))+((r00*x2778))+((cj3*x2775))+(((-1.0)*r01*x2781*x2787)));
evalcond[5]=(x2782+((r21*x2771*x2778))+((r21*x2780))+((cj1*sj2))+((r22*x2791))+(((-1.0)*r20*x2784*x2787))+((r20*x2781)));
evalcond[6]=((((-1.0)*x2786))+x2772+(((-1.0)*cj3*x2774*x2787))+((x2773*x2789))+((r12*x2791))+((r11*x2780))+((r10*x2781)));
evalcond[7]=((((-1.0)*x2786))+x2772+((r21*x2784))+(((-1.0)*r22*sj3*x2788))+((r20*x2778))+((r20*x2771*x2780))+(((-1.0)*sj3*x2779*x2787)));
evalcond[8]=((((-1.0)*sj3*x2773*x2787))+((r10*x2778))+((r11*x2784))+(((-1.0)*x2782))+((x2774*x2790))+(((-1.0)*r12*sj3*x2788))+(((-1.0)*sj2*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2792=((1.0)*cj5);
CheckValue<IkReal> x2793 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2792))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2793.valid){
continue;
}
CheckValue<IkReal> x2794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2792)))),-1);
if(!x2794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2793.value)+(((1.5707963267949)*(x2794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2795=IKsin(j4);
IkReal x2796=IKcos(j4);
IkReal x2797=(sj1*sj2);
IkReal x2798=(r11*sj5);
IkReal x2799=(cj5*r10);
IkReal x2800=(cj5*r01);
IkReal x2801=(cj5*r00);
IkReal x2802=((1.0)*cj1);
IkReal x2803=(cj3*sj5);
IkReal x2804=(r21*sj5);
IkReal x2805=(cj5*sj3);
IkReal x2806=(sj3*sj5);
IkReal x2807=(cj2*sj1);
IkReal x2808=(r01*sj5);
IkReal x2809=(cj3*cj5);
IkReal x2810=(cj5*r20);
IkReal x2811=(cj2*x2802);
IkReal x2812=((1.0)*x2796);
IkReal x2813=((1.0)*x2795);
IkReal x2814=(cj3*x2796);
IkReal x2815=(sj3*x2796);
IkReal x2816=(cj3*x2795);
evalcond[0]=((((-1.0)*x2810*x2813))+(((-1.0)*r22*x2812))+((x2795*x2804)));
evalcond[1]=((((-1.0)*r12*x2812))+(((-1.0)*x2799*x2813))+((x2795*x2798)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2812))+(((-1.0)*x2801*x2813))+((x2795*x2808)));
evalcond[3]=((((-1.0)*cj3*x2801*x2812))+((r01*x2796*x2803))+((r02*x2816))+((sj3*x2800))+((r00*x2806)));
evalcond[4]=((((-1.0)*r01*x2806*x2812))+(((-1.0)*r02*sj3*x2813))+((x2801*x2815))+((cj3*x2800))+((r00*x2803)));
evalcond[5]=(((r22*x2816))+((cj1*sj2))+((r20*x2806))+((r21*x2805))+((r21*x2796*x2803))+x2807+(((-1.0)*r20*x2809*x2812)));
evalcond[6]=(x2797+((r10*x2806))+((x2798*x2814))+(((-1.0)*cj3*x2799*x2812))+(((-1.0)*x2811))+((r12*x2816))+((r11*x2805)));
evalcond[7]=(x2797+(((-1.0)*r22*sj3*x2813))+((r20*x2803))+(((-1.0)*x2811))+((r21*x2809))+(((-1.0)*sj3*x2804*x2812))+((r20*x2796*x2805)));
evalcond[8]=((((-1.0)*x2807))+((r10*x2803))+(((-1.0)*sj3*x2798*x2812))+(((-1.0)*sj2*x2802))+((x2799*x2815))+(((-1.0)*r12*sj3*x2813))+((r11*x2809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2817.valid){
continue;
}
CheckValue<IkReal> x2818 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2817.value)))+(x2818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2819=IKsin(j4);
IkReal x2820=IKcos(j4);
IkReal x2821=(sj1*sj2);
IkReal x2822=(r11*sj5);
IkReal x2823=(cj5*r10);
IkReal x2824=(cj5*r01);
IkReal x2825=(cj5*r00);
IkReal x2826=((1.0)*cj1);
IkReal x2827=(cj3*sj5);
IkReal x2828=(r21*sj5);
IkReal x2829=(cj5*sj3);
IkReal x2830=(sj3*sj5);
IkReal x2831=(cj2*sj1);
IkReal x2832=(r01*sj5);
IkReal x2833=(cj3*cj5);
IkReal x2834=(cj5*r20);
IkReal x2835=(cj2*x2826);
IkReal x2836=((1.0)*x2820);
IkReal x2837=((1.0)*x2819);
IkReal x2838=(cj3*x2820);
IkReal x2839=(sj3*x2820);
IkReal x2840=(cj3*x2819);
evalcond[0]=(((x2819*x2828))+(((-1.0)*x2834*x2837))+(((-1.0)*r22*x2836)));
evalcond[1]=(((x2819*x2822))+(((-1.0)*r12*x2836))+(((-1.0)*x2823*x2837)));
evalcond[2]=((-1.0)+(((-1.0)*x2825*x2837))+((x2819*x2832))+(((-1.0)*r02*x2836)));
evalcond[3]=(((sj3*x2824))+(((-1.0)*cj3*x2825*x2836))+((r01*x2820*x2827))+((r00*x2830))+((r02*x2840)));
evalcond[4]=(((cj3*x2824))+(((-1.0)*r01*x2830*x2836))+((x2825*x2839))+((r00*x2827))+(((-1.0)*r02*sj3*x2837)));
evalcond[5]=(((cj1*sj2))+((r20*x2830))+((r21*x2820*x2827))+((r21*x2829))+((r22*x2840))+(((-1.0)*r20*x2833*x2836))+x2831);
evalcond[6]=(((r10*x2830))+(((-1.0)*cj3*x2823*x2836))+(((-1.0)*x2835))+((x2822*x2838))+((r12*x2840))+((r11*x2829))+x2821);
evalcond[7]=(((r20*x2827))+(((-1.0)*sj3*x2828*x2836))+(((-1.0)*r22*sj3*x2837))+(((-1.0)*x2835))+((r20*x2820*x2829))+x2821+((r21*x2833)));
evalcond[8]=((((-1.0)*x2831))+(((-1.0)*sj2*x2826))+((r10*x2827))+((x2823*x2839))+(((-1.0)*r12*sj3*x2837))+((r11*x2833))+(((-1.0)*sj3*x2822*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2841=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2841;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2842=((1.0)*cj5);
IkReal x2843=((((-1.0)*r21*x2842))+(((-1.0)*r20*sj5)));
j4eval[0]=x2843;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2842))))));
j4eval[2]=IKsign(x2843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2844=cj5*cj5;
IkReal x2845=(cj3*r01);
IkReal x2846=(cj5*sj5);
IkReal x2847=((1.0)*cj3);
IkReal x2848=((((-1.0)*r21*x2845))+(((-1.0)*r02*r22*x2847))+((r21*x2844*x2845))+((cj3*r00*r21*x2846))+((r20*x2845*x2846))+(((-1.0)*r00*r20*x2844*x2847)));
j4eval[0]=x2848;
j4eval[1]=IKsign(x2848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2849=cj5*cj5;
IkReal x2850=(cj3*r20);
IkReal x2851=(r21*sj3);
IkReal x2852=((1.0)*cj3);
IkReal x2853=(r01*r21);
IkReal x2854=(r01*sj3);
IkReal x2855=(r00*sj5);
IkReal x2856=(cj5*r01*sj5);
IkReal x2857=((1.0)*x2849);
CheckValue<IkReal> x2858 = IKatan2WithCheck(IkReal((((cj5*r22*x2854))+((r22*sj3*x2855)))),IkReal(((((-1.0)*cj5*r20*sj3*x2855))+(((-1.0)*r20*x2854*x2857))+((x2851*x2856))+((r00*x2851))+(((-1.0)*r00*x2851*x2857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(IKsign((((cj3*x2849*x2853))+(((-1.0)*r00*x2850*x2857))+(((-1.0)*r02*r22*x2852))+((x2850*x2856))+((cj3*cj5*r21*x2855))+(((-1.0)*x2852*x2853)))),-1);
if(!x2859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2858.value)+(((1.5707963267949)*(x2859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2860=IKsin(j4);
IkReal x2861=IKcos(j4);
IkReal x2862=(cj2*sj1);
IkReal x2863=(cj1*sj2);
IkReal x2864=(r11*sj5);
IkReal x2865=(cj5*r10);
IkReal x2866=(sj1*sj2);
IkReal x2867=(cj5*r01);
IkReal x2868=(cj5*r00);
IkReal x2869=(cj3*sj5);
IkReal x2870=(r21*sj5);
IkReal x2871=(cj1*cj2);
IkReal x2872=(cj5*sj3);
IkReal x2873=(sj3*sj5);
IkReal x2874=(r01*sj5);
IkReal x2875=(cj3*cj5);
IkReal x2876=(cj5*r20);
IkReal x2877=((1.0)*x2861);
IkReal x2878=((1.0)*x2860);
IkReal x2879=(cj3*x2861);
IkReal x2880=(sj3*x2861);
IkReal x2881=(cj3*x2860);
IkReal x2882=(x2862+x2863);
evalcond[0]=((((-1.0)*x2876*x2878))+(((-1.0)*r22*x2877))+((x2860*x2870)));
evalcond[1]=((((-1.0)*x2865*x2878))+(((-1.0)*r12*x2877))+((x2860*x2864)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2877))+(((-1.0)*x2868*x2878))+((x2860*x2874)));
evalcond[3]=(((sj3*x2867))+((r00*x2873))+((r01*x2861*x2869))+((r02*x2881))+(((-1.0)*cj3*x2868*x2877)));
evalcond[4]=(((r00*x2869))+(((-1.0)*r01*x2873*x2877))+(((-1.0)*r02*sj3*x2878))+((x2868*x2880))+((cj3*x2867)));
evalcond[5]=(((r21*x2861*x2869))+(((-1.0)*r20*x2875*x2877))+((r22*x2881))+((r21*x2872))+((r20*x2873))+x2882);
evalcond[6]=(((x2864*x2879))+(((-1.0)*x2866))+((r10*x2873))+((r11*x2872))+((r12*x2881))+x2871+(((-1.0)*cj3*x2865*x2877)));
evalcond[7]=((((-1.0)*sj3*x2864*x2877))+((r10*x2869))+((r11*x2875))+((x2865*x2880))+x2882+(((-1.0)*r12*sj3*x2878)));
evalcond[8]=((((-1.0)*sj3*x2870*x2877))+(((-1.0)*x2871))+(((-1.0)*r22*sj3*x2878))+((r21*x2875))+((r20*x2869))+x2866+((r20*x2861*x2872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2883=((1.0)*cj5);
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2883))+(((-1.0)*r20*sj5)))),-1);
if(!x2884.valid){
continue;
}
CheckValue<IkReal> x2885 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2883))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2884.value)))+(x2885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2886=IKsin(j4);
IkReal x2887=IKcos(j4);
IkReal x2888=(cj2*sj1);
IkReal x2889=(cj1*sj2);
IkReal x2890=(r11*sj5);
IkReal x2891=(cj5*r10);
IkReal x2892=(sj1*sj2);
IkReal x2893=(cj5*r01);
IkReal x2894=(cj5*r00);
IkReal x2895=(cj3*sj5);
IkReal x2896=(r21*sj5);
IkReal x2897=(cj1*cj2);
IkReal x2898=(cj5*sj3);
IkReal x2899=(sj3*sj5);
IkReal x2900=(r01*sj5);
IkReal x2901=(cj3*cj5);
IkReal x2902=(cj5*r20);
IkReal x2903=((1.0)*x2887);
IkReal x2904=((1.0)*x2886);
IkReal x2905=(cj3*x2887);
IkReal x2906=(sj3*x2887);
IkReal x2907=(cj3*x2886);
IkReal x2908=(x2888+x2889);
evalcond[0]=((((-1.0)*x2902*x2904))+((x2886*x2896))+(((-1.0)*r22*x2903)));
evalcond[1]=(((x2886*x2890))+(((-1.0)*r12*x2903))+(((-1.0)*x2891*x2904)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2903))+(((-1.0)*x2894*x2904))+((x2886*x2900)));
evalcond[3]=(((r02*x2907))+((sj3*x2893))+((r01*x2887*x2895))+((r00*x2899))+(((-1.0)*cj3*x2894*x2903)));
evalcond[4]=((((-1.0)*r02*sj3*x2904))+((cj3*x2893))+((r00*x2895))+((x2894*x2906))+(((-1.0)*r01*x2899*x2903)));
evalcond[5]=(((r22*x2907))+((r21*x2898))+((r21*x2887*x2895))+(((-1.0)*r20*x2901*x2903))+x2908+((r20*x2899)));
evalcond[6]=(((x2890*x2905))+((r11*x2898))+(((-1.0)*x2892))+((r10*x2899))+((r12*x2907))+x2897+(((-1.0)*cj3*x2891*x2903)));
evalcond[7]=(((x2891*x2906))+(((-1.0)*r12*sj3*x2904))+((r10*x2895))+((r11*x2901))+x2908+(((-1.0)*sj3*x2890*x2903)));
evalcond[8]=(((r21*x2901))+(((-1.0)*sj3*x2896*x2903))+(((-1.0)*x2897))+(((-1.0)*r22*sj3*x2904))+((r20*x2887*x2898))+x2892+((r20*x2895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2909 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2909.valid){
continue;
}
CheckValue<IkReal> x2910=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2909.value)+(((1.5707963267949)*(x2910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2911=IKsin(j4);
IkReal x2912=IKcos(j4);
IkReal x2913=(cj2*sj1);
IkReal x2914=(cj1*sj2);
IkReal x2915=(r11*sj5);
IkReal x2916=(cj5*r10);
IkReal x2917=(sj1*sj2);
IkReal x2918=(cj5*r01);
IkReal x2919=(cj5*r00);
IkReal x2920=(cj3*sj5);
IkReal x2921=(r21*sj5);
IkReal x2922=(cj1*cj2);
IkReal x2923=(cj5*sj3);
IkReal x2924=(sj3*sj5);
IkReal x2925=(r01*sj5);
IkReal x2926=(cj3*cj5);
IkReal x2927=(cj5*r20);
IkReal x2928=((1.0)*x2912);
IkReal x2929=((1.0)*x2911);
IkReal x2930=(cj3*x2912);
IkReal x2931=(sj3*x2912);
IkReal x2932=(cj3*x2911);
IkReal x2933=(x2913+x2914);
evalcond[0]=((((-1.0)*x2927*x2929))+(((-1.0)*r22*x2928))+((x2911*x2921)));
evalcond[1]=((((-1.0)*x2916*x2929))+(((-1.0)*r12*x2928))+((x2911*x2915)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2928))+(((-1.0)*x2919*x2929))+((x2911*x2925)));
evalcond[3]=(((r02*x2932))+((sj3*x2918))+(((-1.0)*cj3*x2919*x2928))+((r00*x2924))+((r01*x2912*x2920)));
evalcond[4]=((((-1.0)*r01*x2924*x2928))+((cj3*x2918))+(((-1.0)*r02*sj3*x2929))+((r00*x2920))+((x2919*x2931)));
evalcond[5]=((((-1.0)*r20*x2926*x2928))+((r22*x2932))+((r21*x2923))+((r20*x2924))+((r21*x2912*x2920))+x2933);
evalcond[6]=(((x2915*x2930))+((r10*x2924))+(((-1.0)*cj3*x2916*x2928))+((r11*x2923))+((r12*x2932))+(((-1.0)*x2917))+x2922);
evalcond[7]=(((r10*x2920))+((x2916*x2931))+(((-1.0)*sj3*x2915*x2928))+(((-1.0)*r12*sj3*x2929))+((r11*x2926))+x2933);
evalcond[8]=(((r20*x2912*x2923))+((r21*x2926))+(((-1.0)*sj3*x2921*x2928))+((r20*x2920))+(((-1.0)*r22*sj3*x2929))+x2917+(((-1.0)*x2922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2934=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2934);
rxp1_1=(px*r21);
rxp1_2=(r11*x2934);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2935=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2935);
rxp1_1=(px*r21);
rxp1_2=(r11*x2935);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2936=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x2936)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2936)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2937=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2937);
rxp1_1=(px*r21);
rxp1_2=(r11*x2937);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2939=IKPowWithIntegerCheck(r02,-1);
if(!x2939.valid){
continue;
}
IkReal x2938=x2939.value;
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(cj3,-1);
if(!x2940.valid){
continue;
}
if( IKabs((x2938*(x2940.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x2938)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2938*(x2940.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x2938))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2938*(x2940.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x2938));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2941=IKsin(j4);
IkReal x2942=IKcos(j4);
IkReal x2943=(cj5*r10);
IkReal x2944=(sj1*sj2);
IkReal x2945=(cj5*sj3);
IkReal x2946=(r11*sj5);
IkReal x2947=(cj3*cj5);
IkReal x2948=(cj3*sj5);
IkReal x2949=(r21*sj5);
IkReal x2950=(cj2*sj1);
IkReal x2951=((1.0)*sj0);
IkReal x2952=((1.0)*cj0);
IkReal x2953=(sj3*sj5);
IkReal x2954=(cj1*sj2);
IkReal x2955=((1.0)*cj1*cj2);
IkReal x2956=((1.0)*x2941);
IkReal x2957=(r20*x2942);
IkReal x2958=(cj3*x2942);
IkReal x2959=(sj3*x2942);
evalcond[0]=((((-1.0)*x2951))+(((-1.0)*r02*x2942)));
evalcond[1]=(((x2941*x2949))+(((-1.0)*cj5*r20*x2956)));
evalcond[2]=(cj0+(((-1.0)*x2943*x2956))+((x2941*x2946)));
evalcond[3]=(((cj3*r02*x2941))+(((-1.0)*cj1*cj2*x2952))+((cj0*x2944)));
evalcond[4]=((((-1.0)*x2952*x2954))+(((-1.0)*r02*sj3*x2956))+(((-1.0)*x2950*x2952)));
evalcond[5]=(((r21*x2945))+(((-1.0)*x2947*x2957))+((r21*x2942*x2948))+((r20*x2953))+x2954+x2950);
evalcond[6]=(((r21*x2947))+((x2945*x2957))+(((-1.0)*x2955))+(((-1.0)*x2949*x2959))+x2944+((r20*x2948)));
evalcond[7]=(((x2946*x2958))+(((-1.0)*cj1*cj2*x2951))+((r10*x2953))+(((-1.0)*x2943*x2958))+((r11*x2945))+((sj0*x2944)));
evalcond[8]=(((r10*x2948))+((x2943*x2959))+(((-1.0)*x2946*x2959))+((r11*x2947))+(((-1.0)*x2951*x2954))+(((-1.0)*x2950*x2951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2960=((1.0)*sj3);
IkReal x2961=((1.0)*cj5);
CheckValue<IkReal> x2962=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x2961))),-1);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2961))),-1);
if(!x2963.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2962.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2963.value)*(((((-1.0)*r20*sj5*x2960))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2960)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2962.value)))+IKsqr(((x2963.value)*(((((-1.0)*r20*sj5*x2960))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2960))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2962.value)), ((x2963.value)*(((((-1.0)*r20*sj5*x2960))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2960))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2964=IKsin(j4);
IkReal x2965=IKcos(j4);
IkReal x2966=(cj5*r10);
IkReal x2967=(sj1*sj2);
IkReal x2968=(cj5*sj3);
IkReal x2969=(r11*sj5);
IkReal x2970=(cj3*cj5);
IkReal x2971=(cj3*sj5);
IkReal x2972=(r21*sj5);
IkReal x2973=(cj2*sj1);
IkReal x2974=((1.0)*sj0);
IkReal x2975=((1.0)*cj0);
IkReal x2976=(sj3*sj5);
IkReal x2977=(cj1*sj2);
IkReal x2978=((1.0)*cj1*cj2);
IkReal x2979=((1.0)*x2964);
IkReal x2980=(r20*x2965);
IkReal x2981=(cj3*x2965);
IkReal x2982=(sj3*x2965);
evalcond[0]=((((-1.0)*r02*x2965))+(((-1.0)*x2974)));
evalcond[1]=(((x2964*x2972))+(((-1.0)*cj5*r20*x2979)));
evalcond[2]=(cj0+((x2964*x2969))+(((-1.0)*x2966*x2979)));
evalcond[3]=((((-1.0)*cj1*cj2*x2975))+((cj3*r02*x2964))+((cj0*x2967)));
evalcond[4]=((((-1.0)*x2975*x2977))+(((-1.0)*r02*sj3*x2979))+(((-1.0)*x2973*x2975)));
evalcond[5]=(((r21*x2968))+((r20*x2976))+x2973+x2977+((r21*x2965*x2971))+(((-1.0)*x2970*x2980)));
evalcond[6]=(((x2968*x2980))+(((-1.0)*x2978))+(((-1.0)*x2972*x2982))+((r20*x2971))+x2967+((r21*x2970)));
evalcond[7]=(((sj0*x2967))+(((-1.0)*cj1*cj2*x2974))+((x2969*x2981))+((r10*x2976))+((r11*x2968))+(((-1.0)*x2966*x2981)));
evalcond[8]=(((r10*x2971))+((x2966*x2982))+(((-1.0)*x2974*x2977))+((r11*x2970))+(((-1.0)*x2973*x2974))+(((-1.0)*x2969*x2982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(r02,-1);
if(!x2984.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2983.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x2984.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2983.value)))+IKsqr(((-1.0)*sj0*(x2984.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2983.value)), ((-1.0)*sj0*(x2984.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2985=IKsin(j4);
IkReal x2986=IKcos(j4);
IkReal x2987=(cj5*r10);
IkReal x2988=(sj1*sj2);
IkReal x2989=(cj5*sj3);
IkReal x2990=(r11*sj5);
IkReal x2991=(cj3*cj5);
IkReal x2992=(cj3*sj5);
IkReal x2993=(r21*sj5);
IkReal x2994=(cj2*sj1);
IkReal x2995=((1.0)*sj0);
IkReal x2996=((1.0)*cj0);
IkReal x2997=(sj3*sj5);
IkReal x2998=(cj1*sj2);
IkReal x2999=((1.0)*cj1*cj2);
IkReal x3000=((1.0)*x2985);
IkReal x3001=(r20*x2986);
IkReal x3002=(cj3*x2986);
IkReal x3003=(sj3*x2986);
evalcond[0]=((((-1.0)*x2995))+(((-1.0)*r02*x2986)));
evalcond[1]=(((x2985*x2993))+(((-1.0)*cj5*r20*x3000)));
evalcond[2]=(cj0+((x2985*x2990))+(((-1.0)*x2987*x3000)));
evalcond[3]=(((cj0*x2988))+((cj3*r02*x2985))+(((-1.0)*cj1*cj2*x2996)));
evalcond[4]=((((-1.0)*x2996*x2998))+(((-1.0)*r02*sj3*x3000))+(((-1.0)*x2994*x2996)));
evalcond[5]=(((r20*x2997))+((r21*x2986*x2992))+x2998+x2994+(((-1.0)*x2991*x3001))+((r21*x2989)));
evalcond[6]=((((-1.0)*x2999))+(((-1.0)*x2993*x3003))+((x2989*x3001))+((r20*x2992))+((r21*x2991))+x2988);
evalcond[7]=(((r11*x2989))+((x2990*x3002))+((sj0*x2988))+(((-1.0)*x2987*x3002))+((r10*x2997))+(((-1.0)*cj1*cj2*x2995)));
evalcond[8]=((((-1.0)*x2995*x2998))+((x2987*x3003))+(((-1.0)*x2994*x2995))+(((-1.0)*x2990*x3003))+((r10*x2992))+((r11*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3004=((1.0)*sj0);
IkReal x3005=((1.0)*cj0);
CheckValue<IkReal> x3006 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3005))+(((-1.0)*r12*x3004)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3004))+(((-1.0)*r01*sj5*x3005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3006.valid){
continue;
}
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3006.value)+(((1.5707963267949)*(x3007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3008=IKsin(j4);
IkReal x3009=IKcos(j4);
IkReal x3010=(r11*sj5);
IkReal x3011=(cj5*r10);
IkReal x3012=(sj1*sj2);
IkReal x3013=(cj5*sj3);
IkReal x3014=((1.0)*sj0);
IkReal x3015=(cj3*cj5);
IkReal x3016=(cj3*sj5);
IkReal x3017=(r21*sj5);
IkReal x3018=(cj2*sj1);
IkReal x3019=(sj3*sj5);
IkReal x3020=(r01*sj5);
IkReal x3021=((1.0)*cj0);
IkReal x3022=(cj1*sj2);
IkReal x3023=((1.0)*x3009);
IkReal x3024=((1.0)*x3008);
IkReal x3025=(cj3*x3009);
IkReal x3026=((1.0)*cj1*cj2);
IkReal x3027=(cj3*x3008);
evalcond[0]=(((x3008*x3017))+(((-1.0)*cj5*r20*x3024))+(((-1.0)*r22*x3023)));
evalcond[1]=((((-1.0)*r12*x3023))+cj0+((x3008*x3010))+(((-1.0)*x3011*x3024)));
evalcond[2]=((((-1.0)*cj5*r00*x3024))+(((-1.0)*x3014))+((x3008*x3020))+(((-1.0)*r02*x3023)));
evalcond[3]=(x3018+x3022+((r21*x3009*x3016))+((r22*x3027))+(((-1.0)*r20*x3015*x3023))+((r20*x3019))+((r21*x3013)));
evalcond[4]=(((r20*x3009*x3013))+(((-1.0)*r22*sj3*x3024))+x3012+(((-1.0)*x3026))+(((-1.0)*sj3*x3017*x3023))+((r20*x3016))+((r21*x3015)));
evalcond[5]=(((r00*x3019))+((r01*x3013))+((cj0*x3012))+((r02*x3027))+(((-1.0)*cj1*cj2*x3021))+((r01*x3009*x3016))+(((-1.0)*r00*x3015*x3023)));
evalcond[6]=(((r12*x3027))+((r10*x3019))+((x3010*x3025))+(((-1.0)*cj3*x3011*x3023))+(((-1.0)*cj1*cj2*x3014))+((sj0*x3012))+((r11*x3013)));
evalcond[7]=(((r00*x3016))+(((-1.0)*x3018*x3021))+((r01*x3015))+(((-1.0)*x3021*x3022))+(((-1.0)*r02*sj3*x3024))+(((-1.0)*r01*x3019*x3023))+((r00*x3009*x3013)));
evalcond[8]=(((sj3*x3009*x3011))+(((-1.0)*sj3*x3010*x3023))+((r10*x3016))+((r11*x3015))+(((-1.0)*x3014*x3018))+(((-1.0)*x3014*x3022))+(((-1.0)*r12*sj3*x3024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3028=((1.0)*cj5);
CheckValue<IkReal> x3029 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3028))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3029.valid){
continue;
}
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3028))+(((-1.0)*r10*sj5)))),-1);
if(!x3030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3029.value)+(((1.5707963267949)*(x3030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3031=IKsin(j4);
IkReal x3032=IKcos(j4);
IkReal x3033=(r11*sj5);
IkReal x3034=(cj5*r10);
IkReal x3035=(sj1*sj2);
IkReal x3036=(cj5*sj3);
IkReal x3037=((1.0)*sj0);
IkReal x3038=(cj3*cj5);
IkReal x3039=(cj3*sj5);
IkReal x3040=(r21*sj5);
IkReal x3041=(cj2*sj1);
IkReal x3042=(sj3*sj5);
IkReal x3043=(r01*sj5);
IkReal x3044=((1.0)*cj0);
IkReal x3045=(cj1*sj2);
IkReal x3046=((1.0)*x3032);
IkReal x3047=((1.0)*x3031);
IkReal x3048=(cj3*x3032);
IkReal x3049=((1.0)*cj1*cj2);
IkReal x3050=(cj3*x3031);
evalcond[0]=((((-1.0)*r22*x3046))+(((-1.0)*cj5*r20*x3047))+((x3031*x3040)));
evalcond[1]=(cj0+(((-1.0)*r12*x3046))+(((-1.0)*x3034*x3047))+((x3031*x3033)));
evalcond[2]=((((-1.0)*cj5*r00*x3047))+(((-1.0)*x3037))+(((-1.0)*r02*x3046))+((x3031*x3043)));
evalcond[3]=(x3041+x3045+((r21*x3032*x3039))+(((-1.0)*r20*x3038*x3046))+((r20*x3042))+((r22*x3050))+((r21*x3036)));
evalcond[4]=(((r20*x3032*x3036))+x3035+(((-1.0)*sj3*x3040*x3046))+(((-1.0)*x3049))+((r21*x3038))+(((-1.0)*r22*sj3*x3047))+((r20*x3039)));
evalcond[5]=(((r02*x3050))+((cj0*x3035))+((r01*x3036))+(((-1.0)*cj1*cj2*x3044))+((r01*x3032*x3039))+(((-1.0)*r00*x3038*x3046))+((r00*x3042)));
evalcond[6]=((((-1.0)*cj3*x3034*x3046))+((x3033*x3048))+((r10*x3042))+((r11*x3036))+((r12*x3050))+((sj0*x3035))+(((-1.0)*cj1*cj2*x3037)));
evalcond[7]=((((-1.0)*r01*x3042*x3046))+((r01*x3038))+(((-1.0)*r02*sj3*x3047))+((r00*x3039))+(((-1.0)*x3041*x3044))+(((-1.0)*x3044*x3045))+((r00*x3032*x3036)));
evalcond[8]=(((sj3*x3032*x3034))+((r11*x3038))+(((-1.0)*sj3*x3033*x3046))+((r10*x3039))+(((-1.0)*x3037*x3045))+(((-1.0)*x3037*x3041))+(((-1.0)*r12*sj3*x3047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3051=((1.0)*cj5);
CheckValue<IkReal> x3052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3051))+(((-1.0)*r00*sj5)))),-1);
if(!x3052.valid){
continue;
}
CheckValue<IkReal> x3053 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3052.value)))+(x3053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3054=IKsin(j4);
IkReal x3055=IKcos(j4);
IkReal x3056=(r11*sj5);
IkReal x3057=(cj5*r10);
IkReal x3058=(sj1*sj2);
IkReal x3059=(cj5*sj3);
IkReal x3060=((1.0)*sj0);
IkReal x3061=(cj3*cj5);
IkReal x3062=(cj3*sj5);
IkReal x3063=(r21*sj5);
IkReal x3064=(cj2*sj1);
IkReal x3065=(sj3*sj5);
IkReal x3066=(r01*sj5);
IkReal x3067=((1.0)*cj0);
IkReal x3068=(cj1*sj2);
IkReal x3069=((1.0)*x3055);
IkReal x3070=((1.0)*x3054);
IkReal x3071=(cj3*x3055);
IkReal x3072=((1.0)*cj1*cj2);
IkReal x3073=(cj3*x3054);
evalcond[0]=((((-1.0)*r22*x3069))+((x3054*x3063))+(((-1.0)*cj5*r20*x3070)));
evalcond[1]=((((-1.0)*x3057*x3070))+cj0+(((-1.0)*r12*x3069))+((x3054*x3056)));
evalcond[2]=((((-1.0)*cj5*r00*x3070))+(((-1.0)*x3060))+(((-1.0)*r02*x3069))+((x3054*x3066)));
evalcond[3]=(x3064+x3068+((r22*x3073))+(((-1.0)*r20*x3061*x3069))+((r21*x3055*x3062))+((r20*x3065))+((r21*x3059)));
evalcond[4]=(x3058+((r20*x3055*x3059))+(((-1.0)*x3072))+((r20*x3062))+(((-1.0)*sj3*x3063*x3069))+(((-1.0)*r22*sj3*x3070))+((r21*x3061)));
evalcond[5]=((((-1.0)*r00*x3061*x3069))+((r00*x3065))+((cj0*x3058))+((r01*x3059))+(((-1.0)*cj1*cj2*x3067))+((r01*x3055*x3062))+((r02*x3073)));
evalcond[6]=((((-1.0)*cj3*x3057*x3069))+((sj0*x3058))+((r11*x3059))+((x3056*x3071))+((r10*x3065))+((r12*x3073))+(((-1.0)*cj1*cj2*x3060)));
evalcond[7]=(((r00*x3055*x3059))+(((-1.0)*x3067*x3068))+((r00*x3062))+(((-1.0)*r02*sj3*x3070))+(((-1.0)*r01*x3065*x3069))+((r01*x3061))+(((-1.0)*x3064*x3067)));
evalcond[8]=((((-1.0)*x3060*x3064))+(((-1.0)*x3060*x3068))+(((-1.0)*r12*sj3*x3070))+((sj3*x3055*x3057))+(((-1.0)*sj3*x3056*x3069))+((r11*x3061))+((r10*x3062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3074=cj5*cj5;
IkReal x3075=r21*r21;
IkReal x3076=r20*r20;
IkReal x3077=(r20*r21);
IkReal x3078=((1.0)*cj3);
IkReal x3079=((1.0)*cj5);
IkReal x3080=(cj1*sj2);
IkReal x3081=(cj5*sj5);
IkReal x3082=(sj3*sj5);
IkReal x3083=(cj2*sj1);
IkReal x3084=(r21*sj5);
CheckValue<IkReal> x3085 = IKatan2WithCheck(IkReal((((r20*r22*x3082))+((cj5*r21*r22*sj3))+((r22*x3080))+((r22*x3083)))),IkReal((((x3080*x3084))+((x3083*x3084))+((sj3*x3075*x3081))+(((-1.0)*r20*x3079*x3083))+(((-1.0)*r20*x3079*x3080))+((sj3*x3077))+(((-1.0)*x3076*x3079*x3082))+(((-2.0)*sj3*x3074*x3077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3085.valid){
continue;
}
CheckValue<IkReal> x3086=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3078*(r22*r22)))+((cj3*x3074*x3075))+(((-1.0)*x3074*x3076*x3078))+(((2.0)*cj3*x3077*x3081))+(((-1.0)*x3075*x3078)))),-1);
if(!x3086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3085.value)+(((1.5707963267949)*(x3086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3087=IKsin(j4);
IkReal x3088=IKcos(j4);
IkReal x3089=(cj3*r21);
IkReal x3090=(r21*sj5);
IkReal x3091=(r20*sj5);
IkReal x3092=(cj5*r20);
IkReal x3093=((1.0)*x3088);
IkReal x3094=((1.0)*x3087);
evalcond[0]=((((-1.0)*r22*x3093))+((x3087*x3090))+(((-1.0)*x3092*x3094)));
evalcond[1]=(((cj3*r22*x3087))+((cj2*sj1))+((sj3*x3091))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x3092*x3093))+((sj5*x3088*x3089)));
evalcond[2]=((((-1.0)*sj3*x3090*x3093))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x3088*x3092))+((cj5*x3089))+((cj3*x3091))+(((-1.0)*r22*sj3*x3094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3095=(cj5*sj4);
IkReal x3096=(sj4*sj5);
if( IKabs((((r01*x3096))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x3095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3096))+((r10*x3095))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3096))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x3095))))+IKsqr(((((-1.0)*r11*x3096))+((r10*x3095))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x3096))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x3095))), ((((-1.0)*r11*x3096))+((r10*x3095))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3097=IKcos(j0);
IkReal x3098=IKsin(j0);
IkReal x3099=(r02*sj4);
IkReal x3100=((1.0)*sj3);
IkReal x3101=(r12*sj4);
IkReal x3102=(cj3*cj4);
IkReal x3103=((1.0)*cj5);
IkReal x3104=(r11*sj5);
IkReal x3105=((1.0)*cj1);
IkReal x3106=((0.39225)*sj1);
IkReal x3107=(cj5*r01);
IkReal x3108=(r01*sj5);
IkReal x3109=(r00*sj5);
IkReal x3110=((1.0)*sj1);
IkReal x3111=((0.39225)*cj2);
IkReal x3112=(cj5*r11);
IkReal x3113=(r10*sj5);
IkReal x3114=((1.0)*cj4);
IkReal x3115=(sj2*x3097);
IkReal x3116=(sj2*x3098);
IkReal x3117=(cj4*cj5*sj3);
IkReal x3118=(cj1*x3097);
IkReal x3119=(cj2*x3097);
IkReal x3120=(cj1*x3098);
IkReal x3121=(cj2*x3098);
evalcond[0]=(x3097+(((-1.0)*r12*x3114))+(((-1.0)*r10*sj4*x3103))+((sj4*x3104)));
evalcond[1]=((((-1.0)*r02*x3114))+(((-1.0)*r00*sj4*x3103))+(((-1.0)*x3098))+((sj4*x3108)));
evalcond[2]=((((0.425)*x3118))+((x3111*x3118))+(((-1.0)*px))+(((-0.09465)*x3107))+(((-0.09465)*x3109))+(((-0.10915)*x3098))+(((-1.0)*x3106*x3115)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x3113))+(((-0.09465)*x3112))+(((0.425)*x3120))+(((-1.0)*x3106*x3116))+((x3111*x3120))+(((0.10915)*x3097)));
evalcond[4]=(((sj1*x3115))+((sj3*x3107))+((sj3*x3109))+(((-1.0)*x3105*x3119))+((x3102*x3108))+((cj3*x3099))+(((-1.0)*r00*x3102*x3103)));
evalcond[5]=(((sj1*x3116))+((sj3*x3112))+((sj3*x3113))+(((-1.0)*x3105*x3121))+((cj3*x3101))+((x3102*x3104))+(((-1.0)*r10*x3102*x3103)));
evalcond[6]=((((-1.0)*x3110*x3119))+((cj3*x3109))+((cj3*x3107))+(((-1.0)*x3099*x3100))+(((-1.0)*x3105*x3115))+(((-1.0)*cj4*x3100*x3108))+((r00*x3117)));
evalcond[7]=(((cj3*x3113))+((cj3*x3112))+((r10*x3117))+(((-1.0)*x3105*x3116))+(((-1.0)*cj4*x3100*x3104))+(((-1.0)*x3100*x3101))+(((-1.0)*x3110*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3122=cj5*cj5;
IkReal x3123=r21*r21;
IkReal x3124=r20*r20;
IkReal x3125=(r20*r21);
IkReal x3126=(sj1*sj2);
IkReal x3127=(r21*sj5);
IkReal x3128=(cj1*cj2);
IkReal x3129=(cj5*r20);
IkReal x3130=(cj5*sj5);
IkReal x3131=(cj3*r22);
IkReal x3132=(sj3*x3123);
CheckValue<IkReal> x3133=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x3132+((sj3*x3122*x3124))+(((-1.0)*x3122*x3132))+(((-2.0)*sj3*x3125*x3130)))),-1);
if(!x3133.valid){
continue;
}
CheckValue<IkReal> x3134 = IKatan2WithCheck(IkReal((((r20*sj5*x3131))+((r22*x3126))+((cj5*r21*x3131))+(((-1.0)*r22*x3128)))),IkReal((((cj3*x3123*x3130))+((cj3*x3125))+(((-2.0)*cj3*x3122*x3125))+(((-1.0)*cj3*x3124*x3130))+((x3126*x3127))+(((-1.0)*x3127*x3128))+((x3128*x3129))+(((-1.0)*x3126*x3129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3133.value)))+(x3134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3135=IKsin(j4);
IkReal x3136=IKcos(j4);
IkReal x3137=(cj3*r21);
IkReal x3138=(r21*sj5);
IkReal x3139=(r20*sj5);
IkReal x3140=(cj5*r20);
IkReal x3141=((1.0)*x3136);
IkReal x3142=((1.0)*x3135);
evalcond[0]=((((-1.0)*r22*x3141))+(((-1.0)*x3140*x3142))+((x3135*x3138)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x3135))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x3136*x3137))+((sj3*x3139))+(((-1.0)*cj3*x3140*x3141)));
evalcond[2]=(((cj3*x3139))+(((-1.0)*sj3*x3138*x3141))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x3137))+((sj3*x3136*x3140))+(((-1.0)*r22*sj3*x3142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3143=(cj5*sj4);
IkReal x3144=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x3144))+(((-1.0)*r00*x3143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3143))+(((-1.0)*r11*x3144))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x3144))+(((-1.0)*r00*x3143))))+IKsqr((((r10*x3143))+(((-1.0)*r11*x3144))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x3144))+(((-1.0)*r00*x3143))), (((r10*x3143))+(((-1.0)*r11*x3144))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3145=IKcos(j0);
IkReal x3146=IKsin(j0);
IkReal x3147=(r02*sj4);
IkReal x3148=((1.0)*sj3);
IkReal x3149=(r12*sj4);
IkReal x3150=(cj3*cj4);
IkReal x3151=((1.0)*cj5);
IkReal x3152=(r11*sj5);
IkReal x3153=((1.0)*cj1);
IkReal x3154=((0.39225)*sj1);
IkReal x3155=(cj5*r01);
IkReal x3156=(r01*sj5);
IkReal x3157=(r00*sj5);
IkReal x3158=((1.0)*sj1);
IkReal x3159=((0.39225)*cj2);
IkReal x3160=(cj5*r11);
IkReal x3161=(r10*sj5);
IkReal x3162=((1.0)*cj4);
IkReal x3163=(sj2*x3145);
IkReal x3164=(sj2*x3146);
IkReal x3165=(cj4*cj5*sj3);
IkReal x3166=(cj1*x3145);
IkReal x3167=(cj2*x3145);
IkReal x3168=(cj1*x3146);
IkReal x3169=(cj2*x3146);
evalcond[0]=((((-1.0)*r12*x3162))+x3145+((sj4*x3152))+(((-1.0)*r10*sj4*x3151)));
evalcond[1]=((((-1.0)*x3146))+(((-1.0)*r00*sj4*x3151))+((sj4*x3156))+(((-1.0)*r02*x3162)));
evalcond[2]=((((-0.10915)*x3146))+(((-0.09465)*x3157))+(((-0.09465)*x3155))+(((-1.0)*px))+((x3159*x3166))+(((-1.0)*x3154*x3163))+(((0.425)*x3166)));
evalcond[3]=((((0.10915)*x3145))+(((-0.09465)*x3160))+(((-0.09465)*x3161))+(((-1.0)*py))+((x3159*x3168))+(((-1.0)*x3154*x3164))+(((0.425)*x3168)));
evalcond[4]=(((sj3*x3157))+((sj3*x3155))+(((-1.0)*x3153*x3167))+((x3150*x3156))+((sj1*x3163))+(((-1.0)*r00*x3150*x3151))+((cj3*x3147)));
evalcond[5]=(((sj3*x3161))+((sj3*x3160))+(((-1.0)*x3153*x3169))+(((-1.0)*r10*x3150*x3151))+((x3150*x3152))+((sj1*x3164))+((cj3*x3149)));
evalcond[6]=((((-1.0)*x3153*x3163))+(((-1.0)*x3147*x3148))+(((-1.0)*x3158*x3167))+(((-1.0)*cj4*x3148*x3156))+((cj3*x3157))+((cj3*x3155))+((r00*x3165)));
evalcond[7]=((((-1.0)*x3153*x3164))+(((-1.0)*x3148*x3149))+((r10*x3165))+(((-1.0)*x3158*x3169))+(((-1.0)*cj4*x3148*x3152))+((cj3*x3161))+((cj3*x3160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (6d17a4740bd4b5b633f1411e7a830fc0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
