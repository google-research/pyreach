/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-08-30 17:36:51.849612
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=IKsin(j[2]);
x7=IKsin(j[1]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((0.076)*x0);
x13=((0.3425)*x1);
x14=((0.2845)*x7);
x15=((0.0535)*x4);
x16=((1.0)*x2);
x17=((0.0775)*x1);
x18=((1.0)*x1);
x19=((1.0)*x9);
x20=((1.0)*x10);
x21=((0.076)*x3);
x22=((1.0)*x0);
x23=((0.097)*x1);
x24=((1.0)*x3);
x25=((0.0775)*x0);
x26=((0.097)*x0);
x27=((0.3425)*x0);
x28=(x10*x3);
x29=(x5*x7);
x30=(x4*x5);
x31=(x4*x6);
x32=(x6*x7);
x33=(x0*x2);
x34=(x1*x2);
x35=(x3*x9);
x36=(x0*x16);
x37=((0.076)*x31);
x38=(x22*x32);
x39=(x18*x32);
x40=((((-1.0)*x30))+x32);
x41=((((1.0)*x29))+(((1.0)*x31)));
x42=((-1.0)*x41);
x43=((((-1.0)*x38))+((x0*x30)));
x44=((((-1.0)*x39))+((x1*x30)));
x45=(x3*x42);
x46=(x2*x41);
x47=(x22*(((((-1.0)*x31))+(((-1.0)*x29)))));
x48=(x18*(((((-1.0)*x31))+(((-1.0)*x29)))));
x49=(x3*x43);
x50=(x3*x44);
x51=(x10*x47);
x52=(x10*x48);
x53=(x34+x49);
x54=((((-1.0)*x36))+x50);
x55=(((x1*x3))+((x2*(((((-1.0)*x22*x30))+x38)))));
x56=(((x2*(((((-1.0)*x18*x30))+x39))))+(((-1.0)*x22*x3)));
x57=(x54*x9);
eerot[0]=(((x11*((((x53*x9))+x51))))+((x55*x8)));
eerot[1]=(((x8*(((((-1.0)*x20*x47))+(((-1.0)*x19*x53))))))+((x11*x55)));
eerot[2]=(((x47*x9))+((x10*(((((-1.0)*x1*x16))+(((-1.0)*x24*x43)))))));
IkReal x58=((1.0)*x26);
IkReal x59=((1.0)*x27);
IkReal x60=((1.0)*x12);
eetrans[0]=(((x0*x14))+((x0*x15))+(((-1.0)*x25*x32))+(((-1.0)*x31*x59))+((x10*(((((-0.097)*x49))+(((-0.097)*x34))))))+((x10*(((((-1.0)*x31*x60))+(((-1.0)*x29*x60))))))+(((-1.0)*x29*x59))+((x25*x30))+((x9*((((x21*x43))+(((0.076)*x34))))))+((x9*(((((-1.0)*x31*x58))+(((-1.0)*x29*x58)))))));
eerot[3]=(((x56*x8))+((x11*((x57+x52)))));
eerot[4]=(((x11*x56))+((x8*(((((-1.0)*x20*x48))+(((-1.0)*x19*x54)))))));
eerot[5]=(((x10*(((((-1.0)*x24*x44))+x36))))+((x48*x9)));
IkReal x61=((1.0)*x29);
IkReal x62=((1.0)*x31);
eetrans[1]=((((-1.0)*x13*x62))+(((-1.0)*x13*x61))+((x1*x15))+((x1*x14))+((x17*x30))+((x10*(((((-1.0)*x1*x37))+(((-0.076)*x1*x29))))))+((x10*(((((-0.097)*x50))+((x2*x26))))))+((x9*((((x21*x44))+(((-0.076)*x33))))))+(((-1.0)*x17*x32))+((x9*(((((-1.0)*x23*x61))+(((-1.0)*x23*x62)))))));
eerot[6]=(((x11*((((x35*x42))+((x10*x40))))))+((x46*x8)));
eerot[7]=(((x8*(((((-1.0)*x20*x40))+(((-1.0)*x19*x45))))))+((x11*x46)));
eerot[8]=(((x28*x41))+((x40*x9)));
eetrans[2]=((0.267)+(((-0.0535)*x7))+((x9*(((((-0.097)*x30))+(((0.097)*x32))))))+(((-0.0775)*x31))+((x10*(((((0.076)*x32))+(((-0.076)*x30))))))+((x35*(((((-1.0)*x37))+(((-0.076)*x29))))))+(((0.3425)*x32))+(((0.2845)*x4))+(((-0.0775)*x29))+(((-0.3425)*x30))+((x28*(((((0.097)*x29))+(((0.097)*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.097)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.097)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.267)+(((-0.097)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x63=((1.0)*px);
IkReal x64=((1.0)*pz);
IkReal x65=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x65))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x64)));
rxp0_2=((((-1.0)*r10*x63))+((py*r00)));
rxp1_0=((((-1.0)*r21*x65))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x64)));
rxp1_2=((((-1.0)*r11*x63))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x65)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x64)));
rxp2_2=((((-1.0)*r12*x63))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=((0.152)*r20);
IkReal x67=((0.076)*r21);
IkReal x68=((1.0)*rxp2_2);
IkReal x69=((0.685)*npz);
IkReal x70=((1.0)*pp);
IkReal x71=((0.307)*npx);
IkReal x72=((0.155)*npy);
IkReal x73=((0.003)*npx);
IkReal x74=((4.0)*rxp1_2);
IkReal x75=((2.0)*rxp0_2);
IkReal x76=((0.31)*npz);
IkReal x77=((1.37)*npx);
IkReal x78=(rxp2_2+(((-1.0)*x67)));
IkReal x79=((0.006)*npy);
IkReal x80=(x67+(((-1.0)*x68)));
IkReal x81=((-0.155)*npy);
IkReal x82=((-0.31)*npx);
IkReal x83=((-2.0)*rxp0_2);
IkReal x84=((-2.74)*npy);
IkReal x85=((-0.152)*r20);
IkReal x86=(rxp2_2+x67);
IkReal x87=((-0.614)*npy);
IkReal x88=((-0.033506)+x69);
IkReal x89=((-0.057066)+x69);
IkReal x90=((((-1.0)*x68))+(((-1.0)*x67)));
IkReal x91=(x70+x69);
IkReal x92=(x77+x76);
IkReal x93=(x73+x70);
op[0]=x80;
op[1]=x80;
op[2]=x66;
op[3]=x66;
op[4]=x90;
op[5]=x90;
op[6]=((((-1.0)*x70))+x71+x89);
op[7]=x81;
op[8]=x87;
op[9]=x82;
op[10]=((((-1.0)*x71))+(((-1.0)*x70))+x89);
op[11]=x72;
op[12]=x81;
op[13]=(x88+(((-1.0)*x93)));
op[14]=x82;
op[15]=x79;
op[16]=x72;
op[17]=((((-1.0)*x70))+x73+x88);
op[18]=0;
op[19]=x80;
op[20]=0;
op[21]=x66;
op[22]=0;
op[23]=x90;
op[24]=x83;
op[25]=x83;
op[26]=x74;
op[27]=x74;
op[28]=x75;
op[29]=x75;
op[30]=((-0.10412)+(((-1.0)*x76))+x77);
op[31]=0;
op[32]=x84;
op[33]=0;
op[34]=((-0.10412)+(((-1.0)*x92)));
op[35]=0;
op[36]=0;
op[37]=((-0.10412)+x92);
op[38]=0;
op[39]=x84;
op[40]=0;
op[41]=((-0.10412)+(((-1.0)*x77))+x76);
op[42]=0;
op[43]=x83;
op[44]=0;
op[45]=x74;
op[46]=0;
op[47]=x75;
op[48]=x78;
op[49]=x78;
op[50]=x85;
op[51]=x85;
op[52]=x86;
op[53]=x86;
op[54]=((-0.033506)+(((-1.0)*x73))+(((-1.0)*x91)));
op[55]=x81;
op[56]=x79;
op[57]=x82;
op[58]=((-0.033506)+x73+(((-1.0)*x91)));
op[59]=x72;
op[60]=x81;
op[61]=((-0.057066)+x71+(((-1.0)*x91)));
op[62]=x82;
op[63]=x87;
op[64]=x72;
op[65]=((-0.057066)+(((-1.0)*x71))+(((-1.0)*x91)));
op[66]=0;
op[67]=x78;
op[68]=0;
op[69]=x85;
op[70]=0;
op[71]=x86;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x94=htj4*htj4;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+x94),-1);
if(!x95.valid){
continue;
}
cj4array[numsolutions]=((x95.value)*(((1.0)+(((-1.0)*x94)))));
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x96.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x96.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x97=htj5*htj5;
CheckValue<IkReal> x98=IKPowWithIntegerCheck(((1.0)+x97),-1);
if(!x98.valid){
continue;
}
cj5array[numsolutions]=((x98.value)*(((1.0)+(((-1.0)*x97)))));
CheckValue<IkReal> x99=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x99.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x99.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x100=htj3*htj3;
CheckValue<IkReal> x101=IKPowWithIntegerCheck(((1.0)+x100),-1);
if(!x101.valid){
continue;
}
cj3array[numsolutions]=((x101.value)*(((1.0)+(((-1.0)*x100)))));
CheckValue<IkReal> x102=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x102.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x102.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x103=(rxp0_2*sj5);
IkReal x104=(cj5*rxp1_2);
IkReal x105=((250.0)*cj3);
IkReal x106=((19.0)*cj3*sj5);
IkReal x107=((19.0)*cj3*cj5);
j0eval[0]=((((-1.0)*r22))+(((-13.1578947368421)*x104))+(((-13.1578947368421)*x103)));
j0eval[1]=IKsign(((((-0.076)*r22))+(((-1.0)*x103))+(((-1.0)*x104))));
j0eval[2]=((IKabs(((((-1.0)*r11*x106))+((r10*x107))+(((-1.0)*py*x105)))))+(IKabs(((((-1.0)*r01*x106))+(((-1.0)*px*x105))+((r00*x107))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x108=((1.0)*cj3);
IkReal x109=(cj5*sj4);
IkReal x110=(cj3*sj4*sj5);
IkReal x111=(((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*cj5*r20)));
j0eval[0]=x111;
j0eval[1]=IKsign(x111);
j0eval[2]=((IKabs(((((-1.0)*cj4*r02*x108))+((r01*x110))+(((-1.0)*r00*x108*x109)))))+(IKabs((((r11*x110))+(((-1.0)*r10*x108*x109))+(((-1.0)*cj4*r12*x108))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x112=(rxp2_2*sj4);
IkReal x113=((13.1578947368421)*cj4);
IkReal x114=(rxp1_2*sj5);
IkReal x115=((250.0)*sj3);
IkReal x116=((1.0)*sj4);
IkReal x117=(cj5*r21);
IkReal x118=((19.0)*sj3);
IkReal x119=(cj5*rxp0_2);
IkReal x120=(r20*sj5);
IkReal x121=((0.076)*sj4);
j0eval[0]=((((-1.0)*x116*x117))+(((-1.0)*x113*x119))+(((-1.0)*x116*x120))+((x113*x114))+(((13.1578947368421)*x112)));
j0eval[1]=IKsign(((((-1.0)*x120*x121))+(((-1.0)*x117*x121))+x112+((cj4*x114))+(((-1.0)*cj4*x119))));
j0eval[2]=((IKabs(((((-1.0)*px*x115))+((cj5*r00*x118))+(((-1.0)*r01*sj5*x118)))))+(IKabs((((cj5*r10*x118))+(((-1.0)*r11*sj5*x118))+(((-1.0)*py*x115))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x122=((0.076)*sj5);
IkReal x123=(rxp0_2*sj5);
IkReal x124=((0.076)*cj5);
IkReal x125=(cj5*rxp1_2);
j0eval[0]=((((-1.0)*r22))+(((-13.1578947368421)*x125))+(((-13.1578947368421)*x123)));
j0eval[1]=IKsign(((((-0.076)*r22))+(((-1.0)*x125))+(((-1.0)*x123))));
j0eval[2]=((IKabs((((r00*x124))+(((-1.0)*px))+(((-1.0)*r01*x122)))))+(IKabs(((((-1.0)*r11*x122))+(((-1.0)*py))+((r10*x124))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x126=(cj4*sj5);
IkReal x127=((1.0)*cj4*cj5);
IkReal x128=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)));
j0eval[0]=x128;
j0eval[1]=((IKabs(((((-1.0)*r10*x127))+((r12*sj4))+((r11*x126)))))+(IKabs(((((-1.0)*r00*x127))+((r01*x126))+((r02*sj4))))));
j0eval[2]=IKsign(x128);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x129=r20*r20;
IkReal x130=cj5*cj5;
IkReal x131=((1.0)+((x129*x130))+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x129))+(((-1.0)*x130*(r21*r21))));
j0eval[0]=x131;
j0eval[1]=IKsign(x131);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x132=cj5*cj5;
CheckValue<IkReal> x133 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x133.valid){
continue;
}
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x132*(r21*r21)))+(((r20*r20)*(((-1.0)+x132))))+(((-2.0)*cj5*r20*r21*sj5)))),-1);
if(!x134.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x133.value)+(((1.5707963267949)*(x134.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x135=IKcos(j0);
IkReal x136=IKsin(j0);
IkReal x137=((1.0)*r01);
IkReal x138=((1.0)*r10);
IkReal x139=(cj5*x136);
IkReal x140=(sj5*x135);
IkReal x141=(sj4*x136);
IkReal x142=(cj5*x135);
IkReal x143=(sj5*x136);
IkReal x144=(r12*x135);
evalcond[0]=(((r01*x142))+((r00*x140))+((r11*x139))+((r10*x143)));
evalcond[1]=((1.0)+(((-1.0)*x137*x139))+(((-1.0)*r00*x143))+((r11*x142))+((r10*x140)));
evalcond[2]=((((-0.076)*r00*x139))+(((0.076)*r10*x142))+((px*x136))+(((-0.076)*r11*x140))+(((-1.0)*py*x135))+(((0.076)*r01*x143)));
evalcond[3]=((((-1.0)*sj4*x138*x142))+(((-1.0)*cj4*x144))+((r11*sj4*x140))+(((-1.0)*sj5*x137*x141))+((cj4*r02*x136))+((r00*sj4*x139)));
evalcond[4]=((((-1.0)*r02*x141))+((sj4*x144))+((cj4*r00*x139))+((cj4*r11*x140))+(((-1.0)*cj4*x137*x143))+(((-1.0)*cj4*x138*x142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x145=((4.11)*pz);
IkReal x146=(cj5*r20);
IkReal x147=((4.11)*sj4);
IkReal x148=((0.31)*cj4);
IkReal x149=((0.07068)*sj5);
IkReal x150=(cj0*r01);
IkReal x151=(r21*sj5);
IkReal x152=(r22*sj4);
IkReal x153=((0.93)*cj4);
IkReal x154=((1.37)*sj4);
IkReal x155=((0.07068)*cj5);
IkReal x156=(r10*sj0);
IkReal x157=(cj0*r00);
IkReal x158=((0.02356)*cj5);
IkReal x159=(cj0*px);
IkReal x160=((0.49325)*sj4);
IkReal x161=(cj4*r22);
IkReal x162=(r11*sj0);
IkReal x163=((0.02356)*sj5);
IkReal x164=(py*sj0);
IkReal x165=((1.47975)*sj4);
IkReal x166=((0.31236)*x151);
IkReal x167=((4.11)*x161);
IkReal x168=((0.912)*x146);
IkReal x169=(x155*x156);
IkReal x170=(x155*x157);
IkReal x171=(x151*x165);
IkReal x172=(x146*x153);
IkReal x173=(x146*x147);
IkReal x174=(x173+x172+x168+x167);
IkReal x175=((((12.0)*pz))+((x151*x153))+(((0.93)*x152))+((x147*x151))+(((0.912)*x151)));
IkReal x176=(x171+x170+x169+x166+x145);
IkReal x177=(((x149*x150))+((x149*x162))+(((0.93)*x164))+(((0.31236)*x146))+((x146*x165))+(((0.93)*x159))+(((1.47975)*x161)));
j1eval[0]=((3.00392)+(IKabs(((-1.138)+(((-1.0)*x175))+x174)))+(IKabs(((0.37318)+(((1.37)*pz))+(((-0.10412)*x146))+((x157*x158))+((x151*x160))+(((-1.0)*x150*x163))+(((-1.0)*x146*x160))+(((-1.0)*x162*x163))+((x156*x158))+(((0.10412)*x151))+(((-0.31)*x164))+(((-0.49325)*x161))+(((-0.31)*x159)))))+(IKabs(((1.138)+(((-1.0)*x175))+x174)))+(IKabs(((0.37318)+(((-1.0)*x177))+x176)))+(IKabs(((-0.37318)+(((-1.0)*x177))+x176)))+(IKabs(((-1.138)+(((-0.304)*x151))+(((-1.0)*x151*x154))+((x146*x154))+(((-1.0)*x148*x151))+((x146*x148))+(((0.304)*x146))+(((-4.0)*pz))+(((-0.31)*x152))+(((1.37)*x161))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x178=(cj5*r20);
IkReal x179=((4.11)*sj4);
IkReal x180=(r21*sj5);
IkReal x181=((0.31)*cj4);
IkReal x182=((0.93)*cj4);
IkReal x183=(r22*sj4);
IkReal x184=(cj4*r22);
IkReal x185=((1.37)*sj4);
IkReal x186=((4.11)*x184);
IkReal x187=((0.912)*x178);
IkReal x188=((1.37)*x184);
IkReal x189=((0.304)*x178);
IkReal x190=(x178*x182);
IkReal x191=(x178*x179);
IkReal x192=(x178*x185);
IkReal x193=(x178*x181);
IkReal x194=(x193+x192+x188+x189);
IkReal x195=(x191+x190+x186+x187);
IkReal x196=(((x180*x182))+(((12.0)*pz))+((x179*x180))+(((0.93)*x183))+(((0.912)*x180)));
IkReal x197=(((x180*x185))+((x180*x181))+(((4.0)*pz))+(((0.31)*x183))+(((0.304)*x180)));
op[0]=((-1.138)+(((-1.0)*x197))+x194);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x196))+x195);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x196))+x195);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x197))+x194);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x198=((1.37)*pz);
IkReal x199=((4.11)*pz);
IkReal x200=((0.07068)*sj5);
IkReal x201=(cj0*r01);
IkReal x202=(cj5*r20);
IkReal x203=(r21*sj5);
IkReal x204=((0.07068)*cj5);
IkReal x205=(r10*sj0);
IkReal x206=(cj0*px);
IkReal x207=((0.49325)*sj4);
IkReal x208=(cj4*r22);
IkReal x209=(r11*sj0);
IkReal x210=(cj0*r00);
IkReal x211=((0.02356)*sj5);
IkReal x212=((0.02356)*cj5);
IkReal x213=(py*sj0);
IkReal x214=((1.47975)*sj4);
IkReal x215=((0.10412)*x203);
IkReal x216=((0.31236)*x203);
IkReal x217=(x205*x212);
IkReal x218=(x204*x205);
IkReal x219=(x204*x210);
IkReal x220=(x203*x214);
IkReal x221=(x210*x212);
IkReal x222=(x203*x207);
IkReal x223=(x199+x216+x218+x219+x220);
IkReal x224=(x198+x215+x217+x221+x222);
IkReal x225=(((x200*x201))+((x200*x209))+(((1.47975)*x208))+((x202*x214))+(((0.93)*x206))+(((0.31236)*x202))+(((0.93)*x213)));
IkReal x226=((((0.31)*x206))+(((0.49325)*x208))+(((0.31)*x213))+((x209*x211))+((x202*x207))+(((0.10412)*x202))+((x201*x211)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+x224+(((0.32298)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x223+(((-1.0)*x225))))))+(((htj1*htj1)*(((-0.37318)+x223+(((-1.0)*x225))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x224+(((-1.0)*x226))))))+(((-1.0)*x226)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x227=(cj4*r22);
IkReal x228=((1.0)*cj1);
IkReal x229=(sj1*sj4);
IkReal x230=(cj5*r20);
IkReal x231=(r21*sj5);
IkReal x232=(cj4*sj1);
IkReal x233=(cj1*x231);
if( IKabs((((x229*x230))+((sj1*x227))+(((-1.0)*x229*x231))+((cj4*x233))+((cj1*r22*sj4))+(((-1.0)*cj4*x228*x230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x227*x228))+(((-1.0)*x230*x232))+(((-1.0)*sj4*x228*x230))+((sj4*x233))+((r22*x229))+((x231*x232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x229*x230))+((sj1*x227))+(((-1.0)*x229*x231))+((cj4*x233))+((cj1*r22*sj4))+(((-1.0)*cj4*x228*x230))))+IKsqr(((((-1.0)*x227*x228))+(((-1.0)*x230*x232))+(((-1.0)*sj4*x228*x230))+((sj4*x233))+((r22*x229))+((x231*x232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x229*x230))+((sj1*x227))+(((-1.0)*x229*x231))+((cj4*x233))+((cj1*r22*sj4))+(((-1.0)*cj4*x228*x230))), ((((-1.0)*x227*x228))+(((-1.0)*x230*x232))+(((-1.0)*sj4*x228*x230))+((sj4*x233))+((r22*x229))+((x231*x232))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x234=IKcos(j2);
IkReal x235=IKsin(j2);
IkReal x236=((1.0)*sj4);
IkReal x237=((0.076)*sj5);
IkReal x238=(r11*sj0);
IkReal x239=((1.0)*cj4);
IkReal x240=(cj0*r02);
IkReal x241=(cj0*r01);
IkReal x242=(cj5*r20);
IkReal x243=((1.0)*sj1);
IkReal x244=(sj4*sj5);
IkReal x245=(r21*sj5);
IkReal x246=(cj4*sj5);
IkReal x247=(r12*sj0);
IkReal x248=(cj1*x234);
IkReal x249=(cj5*r10*sj0);
IkReal x250=(cj0*cj5*r00);
IkReal x251=(cj1*x235);
IkReal x252=(sj1*x235);
IkReal x253=(sj1*x234);
IkReal x254=(x235*x243);
evalcond[0]=(((cj4*r22))+(((-1.0)*x236*x245))+x248+((sj4*x242))+(((-1.0)*x254)));
evalcond[1]=((((-1.0)*r22*x236))+((cj4*x242))+x251+x253+(((-1.0)*x239*x245)));
evalcond[2]=((((-0.076)*x242))+(((0.0775)*x251))+(((0.0775)*x253))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-0.3425)*x252))+((r21*x237))+(((0.3425)*x248)));
evalcond[3]=(((x238*x246))+(((-1.0)*x239*x250))+x248+((x241*x246))+(((-1.0)*x239*x249))+((sj4*x247))+((sj4*x240))+(((-1.0)*x254)));
evalcond[4]=(((x238*x244))+(((-1.0)*x234*x243))+(((-1.0)*x236*x249))+((x241*x244))+(((-1.0)*x236*x250))+(((-1.0)*x239*x247))+(((-1.0)*x239*x240))+(((-1.0)*x251)));
evalcond[5]=((((-0.0775)*x252))+(((0.2845)*sj1))+(((0.076)*x249))+(((0.0775)*x248))+(((-1.0)*x237*x241))+(((0.076)*x250))+(((0.0535)*cj1))+(((-0.3425)*x251))+(((-0.3425)*x253))+(((-1.0)*py*sj0))+(((-1.0)*x237*x238))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x255=(cj4*sj5);
IkReal x256=((1.0)*cj4*cj5);
CheckValue<IkReal> x257 = IKatan2WithCheck(IkReal((((r11*x255))+((r12*sj4))+(((-1.0)*r10*x256)))),IkReal((((r01*x255))+((r02*sj4))+(((-1.0)*r00*x256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x257.valid){
continue;
}
CheckValue<IkReal> x258=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)))),-1);
if(!x258.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x257.value)+(((1.5707963267949)*(x258.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x259=IKcos(j0);
IkReal x260=IKsin(j0);
IkReal x261=((1.0)*r01);
IkReal x262=((1.0)*r10);
IkReal x263=(cj5*x260);
IkReal x264=(sj5*x259);
IkReal x265=(sj4*x260);
IkReal x266=(cj5*x259);
IkReal x267=(sj5*x260);
IkReal x268=(r12*x259);
evalcond[0]=(((r00*x264))+((r10*x267))+((r11*x263))+((r01*x266)));
evalcond[1]=((1.0)+(((-1.0)*x261*x263))+(((-1.0)*r00*x267))+((r10*x264))+((r11*x266)));
evalcond[2]=((((0.076)*r10*x266))+(((-0.076)*r00*x263))+(((0.076)*r01*x267))+(((-0.076)*r11*x264))+(((-1.0)*py*x259))+((px*x260)));
evalcond[3]=((((-1.0)*sj5*x261*x265))+(((-1.0)*cj4*x268))+((cj4*r02*x260))+((r00*sj4*x263))+(((-1.0)*sj4*x262*x266))+((r11*sj4*x264)));
evalcond[4]=(((cj4*r00*x263))+(((-1.0)*cj4*x261*x267))+((sj4*x268))+(((-1.0)*cj4*x262*x266))+(((-1.0)*r02*x265))+((cj4*r11*x264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x269=((4.11)*pz);
IkReal x270=(cj5*r20);
IkReal x271=((4.11)*sj4);
IkReal x272=((0.31)*cj4);
IkReal x273=((0.07068)*sj5);
IkReal x274=(cj0*r01);
IkReal x275=(r21*sj5);
IkReal x276=(r22*sj4);
IkReal x277=((0.93)*cj4);
IkReal x278=((1.37)*sj4);
IkReal x279=((0.07068)*cj5);
IkReal x280=(r10*sj0);
IkReal x281=(cj0*r00);
IkReal x282=((0.02356)*cj5);
IkReal x283=(cj0*px);
IkReal x284=((0.49325)*sj4);
IkReal x285=(cj4*r22);
IkReal x286=(r11*sj0);
IkReal x287=((0.02356)*sj5);
IkReal x288=(py*sj0);
IkReal x289=((1.47975)*sj4);
IkReal x290=((0.31236)*x275);
IkReal x291=((4.11)*x285);
IkReal x292=((0.912)*x270);
IkReal x293=(x279*x280);
IkReal x294=(x279*x281);
IkReal x295=(x275*x289);
IkReal x296=(x270*x277);
IkReal x297=(x270*x271);
IkReal x298=(x291+x292+x296+x297);
IkReal x299=(((x275*x277))+((x271*x275))+(((12.0)*pz))+(((0.93)*x276))+(((0.912)*x275)));
IkReal x300=(x290+x293+x294+x295+x269);
IkReal x301=(((x273*x274))+(((0.93)*x283))+(((0.93)*x288))+(((1.47975)*x285))+((x273*x286))+(((0.31236)*x270))+((x270*x289)));
j1eval[0]=((3.00392)+(IKabs(((1.138)+(((-1.0)*x299))+x298)))+(IKabs(((-0.37318)+x300+(((-1.0)*x301)))))+(IKabs(((-1.138)+(((-1.0)*x272*x275))+(((0.304)*x270))+(((-0.304)*x275))+((x270*x278))+((x270*x272))+(((1.37)*x285))+(((-0.31)*x276))+(((-1.0)*x275*x278))+(((-4.0)*pz)))))+(IKabs(((-1.138)+(((-1.0)*x299))+x298)))+(IKabs(((0.37318)+(((-1.0)*x270*x284))+(((1.37)*pz))+(((0.10412)*x275))+(((-0.10412)*x270))+((x275*x284))+(((-0.31)*x283))+(((-0.31)*x288))+((x280*x282))+(((-1.0)*x286*x287))+((x281*x282))+(((-0.49325)*x285))+(((-1.0)*x274*x287)))))+(IKabs(((0.37318)+x300+(((-1.0)*x301))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x302=(cj5*r20);
IkReal x303=((4.11)*sj4);
IkReal x304=(r21*sj5);
IkReal x305=((0.31)*cj4);
IkReal x306=((0.93)*cj4);
IkReal x307=(r22*sj4);
IkReal x308=(cj4*r22);
IkReal x309=((1.37)*sj4);
IkReal x310=((4.11)*x308);
IkReal x311=((0.912)*x302);
IkReal x312=((1.37)*x308);
IkReal x313=((0.304)*x302);
IkReal x314=(x302*x306);
IkReal x315=(x302*x303);
IkReal x316=(x302*x309);
IkReal x317=(x302*x305);
IkReal x318=(x317+x316+x313+x312);
IkReal x319=(x315+x314+x311+x310);
IkReal x320=((((12.0)*pz))+((x303*x304))+(((0.93)*x307))+((x304*x306))+(((0.912)*x304)));
IkReal x321=((((4.0)*pz))+(((0.31)*x307))+(((0.304)*x304))+((x304*x309))+((x304*x305)));
op[0]=((-1.138)+(((-1.0)*x321))+x318);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x320))+x319);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x320))+x319);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x321))+x318);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x322=((1.37)*pz);
IkReal x323=((4.11)*pz);
IkReal x324=((0.07068)*sj5);
IkReal x325=(cj0*r01);
IkReal x326=(cj5*r20);
IkReal x327=(r21*sj5);
IkReal x328=((0.07068)*cj5);
IkReal x329=(r10*sj0);
IkReal x330=(cj0*px);
IkReal x331=((0.49325)*sj4);
IkReal x332=(cj4*r22);
IkReal x333=(r11*sj0);
IkReal x334=(cj0*r00);
IkReal x335=((0.02356)*sj5);
IkReal x336=((0.02356)*cj5);
IkReal x337=(py*sj0);
IkReal x338=((1.47975)*sj4);
IkReal x339=((0.10412)*x327);
IkReal x340=((0.31236)*x327);
IkReal x341=(x329*x336);
IkReal x342=(x328*x329);
IkReal x343=(x328*x334);
IkReal x344=(x327*x338);
IkReal x345=(x334*x336);
IkReal x346=(x327*x331);
IkReal x347=(x323+x342+x343+x340+x344);
IkReal x348=(x339+x322+x341+x346+x345);
IkReal x349=((((1.47975)*x332))+((x324*x333))+((x324*x325))+(((0.93)*x330))+(((0.93)*x337))+((x326*x338))+(((0.31236)*x326)));
IkReal x350=((((0.10412)*x326))+(((0.31)*x330))+(((0.31)*x337))+((x333*x335))+((x325*x335))+((x326*x331))+(((0.49325)*x332)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((-1.0)*x350))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x350))+x348))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x347+(((-1.0)*x349))))))+x348+(((0.32298)*htj1))+(((htj1*htj1)*(((-0.37318)+x347+(((-1.0)*x349)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x351=(cj4*r22);
IkReal x352=((1.0)*cj1);
IkReal x353=(sj1*sj4);
IkReal x354=(cj5*r20);
IkReal x355=(r21*sj5);
IkReal x356=(cj4*sj1);
IkReal x357=(cj1*x355);
if( IKabs(((((-1.0)*x353*x355))+((x353*x354))+((cj4*x357))+((sj1*x351))+(((-1.0)*cj4*x352*x354))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x357))+(((-1.0)*sj4*x352*x354))+((x355*x356))+((r22*x353))+(((-1.0)*x351*x352))+(((-1.0)*x354*x356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x353*x355))+((x353*x354))+((cj4*x357))+((sj1*x351))+(((-1.0)*cj4*x352*x354))+((cj1*r22*sj4))))+IKsqr((((sj4*x357))+(((-1.0)*sj4*x352*x354))+((x355*x356))+((r22*x353))+(((-1.0)*x351*x352))+(((-1.0)*x354*x356))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x353*x355))+((x353*x354))+((cj4*x357))+((sj1*x351))+(((-1.0)*cj4*x352*x354))+((cj1*r22*sj4))), (((sj4*x357))+(((-1.0)*sj4*x352*x354))+((x355*x356))+((r22*x353))+(((-1.0)*x351*x352))+(((-1.0)*x354*x356))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x358=IKcos(j2);
IkReal x359=IKsin(j2);
IkReal x360=((1.0)*sj4);
IkReal x361=((0.076)*sj5);
IkReal x362=(r11*sj0);
IkReal x363=((1.0)*cj4);
IkReal x364=(cj0*r02);
IkReal x365=(cj0*r01);
IkReal x366=(cj5*r20);
IkReal x367=((1.0)*sj1);
IkReal x368=(sj4*sj5);
IkReal x369=(r21*sj5);
IkReal x370=(cj4*sj5);
IkReal x371=(r12*sj0);
IkReal x372=(cj1*x358);
IkReal x373=(cj5*r10*sj0);
IkReal x374=(cj0*cj5*r00);
IkReal x375=(cj1*x359);
IkReal x376=(sj1*x359);
IkReal x377=(sj1*x358);
IkReal x378=(x359*x367);
evalcond[0]=(((cj4*r22))+((sj4*x366))+(((-1.0)*x360*x369))+(((-1.0)*x378))+x372);
evalcond[1]=((((-1.0)*x363*x369))+((cj4*x366))+x377+x375+(((-1.0)*r22*x360)));
evalcond[2]=((((-0.3425)*x376))+(((-0.076)*x366))+(((0.0535)*sj1))+(((0.3425)*x372))+(((-0.2845)*cj1))+pz+((r21*x361))+(((0.0775)*x377))+(((0.0775)*x375)));
evalcond[3]=((((-1.0)*x363*x373))+(((-1.0)*x363*x374))+((sj4*x371))+((sj4*x364))+(((-1.0)*x378))+((x365*x370))+x372+((x362*x370)));
evalcond[4]=((((-1.0)*x375))+(((-1.0)*x363*x371))+(((-1.0)*x363*x364))+(((-1.0)*x360*x374))+(((-1.0)*x360*x373))+(((-1.0)*x358*x367))+((x365*x368))+((x362*x368)));
evalcond[5]=((((-0.3425)*x377))+(((-0.3425)*x375))+(((-1.0)*x361*x362))+(((-1.0)*x361*x365))+(((0.2845)*sj1))+(((0.076)*x374))+(((0.076)*x373))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.0775)*x372))+(((-0.0775)*x376))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x379=((0.076)*sj5);
IkReal x380=((0.076)*cj5);
CheckValue<IkReal> x381=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.076)*r22)))),-1);
if(!x381.valid){
continue;
}
CheckValue<IkReal> x382 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x379))+((r10*x380)))),IkReal(((((-1.0)*r01*x379))+(((-1.0)*px))+((r00*x380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x382.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x381.value)))+(x382.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x383=IKcos(j0);
IkReal x384=IKsin(j0);
IkReal x385=((1.0)*r01);
IkReal x386=((1.0)*r10);
IkReal x387=(cj5*x384);
IkReal x388=(sj5*x383);
IkReal x389=(sj4*x384);
IkReal x390=(cj5*x383);
IkReal x391=(sj5*x384);
IkReal x392=(r12*x383);
evalcond[0]=(((r10*x391))+((r11*x387))+((r01*x390))+((r00*x388)));
evalcond[1]=((1.0)+(((-1.0)*r00*x391))+((r11*x390))+((r10*x388))+(((-1.0)*x385*x387)));
evalcond[2]=((((-0.076)*r00*x387))+(((0.076)*r01*x391))+((px*x384))+(((0.076)*r10*x390))+(((-0.076)*r11*x388))+(((-1.0)*py*x383)));
evalcond[3]=((((-1.0)*sj5*x385*x389))+(((-1.0)*sj4*x386*x390))+(((-1.0)*cj4*x392))+((r00*sj4*x387))+((cj4*r02*x384))+((r11*sj4*x388)));
evalcond[4]=((((-1.0)*r02*x389))+(((-1.0)*cj4*x386*x390))+(((-1.0)*cj4*x385*x391))+((cj4*r00*x387))+((cj4*r11*x388))+((sj4*x392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x393=((4.11)*pz);
IkReal x394=(cj5*r20);
IkReal x395=((4.11)*sj4);
IkReal x396=((0.31)*cj4);
IkReal x397=((0.07068)*sj5);
IkReal x398=(cj0*r01);
IkReal x399=(r21*sj5);
IkReal x400=(r22*sj4);
IkReal x401=((0.93)*cj4);
IkReal x402=((1.37)*sj4);
IkReal x403=((0.07068)*cj5);
IkReal x404=(r10*sj0);
IkReal x405=(cj0*r00);
IkReal x406=((0.02356)*cj5);
IkReal x407=(cj0*px);
IkReal x408=((0.49325)*sj4);
IkReal x409=(cj4*r22);
IkReal x410=(r11*sj0);
IkReal x411=((0.02356)*sj5);
IkReal x412=(py*sj0);
IkReal x413=((1.47975)*sj4);
IkReal x414=((0.31236)*x399);
IkReal x415=((4.11)*x409);
IkReal x416=((0.912)*x394);
IkReal x417=(x403*x404);
IkReal x418=(x403*x405);
IkReal x419=(x399*x413);
IkReal x420=(x394*x401);
IkReal x421=(x394*x395);
IkReal x422=(x416+x415+x421+x420);
IkReal x423=((((12.0)*pz))+((x395*x399))+(((0.93)*x400))+(((0.912)*x399))+((x399*x401)));
IkReal x424=(x393+x417+x414+x418+x419);
IkReal x425=((((1.47975)*x409))+(((0.93)*x412))+(((0.93)*x407))+(((0.31236)*x394))+((x397*x398))+((x394*x413))+((x397*x410)));
j1eval[0]=((3.00392)+(IKabs(((-1.138)+(((-1.0)*x423))+x422)))+(IKabs(((-1.138)+((x394*x396))+(((0.304)*x394))+(((1.37)*x409))+(((-1.0)*x399*x402))+(((-0.31)*x400))+(((-1.0)*x396*x399))+(((-0.304)*x399))+((x394*x402))+(((-4.0)*pz)))))+(IKabs(((-0.37318)+(((-1.0)*x425))+x424)))+(IKabs(((0.37318)+(((1.37)*pz))+((x405*x406))+((x404*x406))+(((-1.0)*x394*x408))+(((-0.49325)*x409))+(((-0.31)*x412))+(((-1.0)*x398*x411))+(((-0.31)*x407))+((x399*x408))+(((-0.10412)*x394))+(((-1.0)*x410*x411))+(((0.10412)*x399)))))+(IKabs(((0.37318)+(((-1.0)*x425))+x424)))+(IKabs(((1.138)+(((-1.0)*x423))+x422))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x426=(cj5*r20);
IkReal x427=((4.11)*sj4);
IkReal x428=(r21*sj5);
IkReal x429=((0.31)*cj4);
IkReal x430=((0.93)*cj4);
IkReal x431=(r22*sj4);
IkReal x432=(cj4*r22);
IkReal x433=((1.37)*sj4);
IkReal x434=((4.11)*x432);
IkReal x435=((0.912)*x426);
IkReal x436=((1.37)*x432);
IkReal x437=((0.304)*x426);
IkReal x438=(x426*x430);
IkReal x439=(x426*x427);
IkReal x440=(x426*x433);
IkReal x441=(x426*x429);
IkReal x442=(x436+x437+x441+x440);
IkReal x443=(x438+x439+x434+x435);
IkReal x444=(((x427*x428))+(((12.0)*pz))+((x428*x430))+(((0.93)*x431))+(((0.912)*x428)));
IkReal x445=(((x428*x433))+(((4.0)*pz))+((x428*x429))+(((0.304)*x428))+(((0.31)*x431)));
op[0]=((-1.138)+(((-1.0)*x445))+x442);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x444))+x443);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x444))+x443);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x445))+x442);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x446=((1.37)*pz);
IkReal x447=((4.11)*pz);
IkReal x448=((0.07068)*sj5);
IkReal x449=(cj0*r01);
IkReal x450=(cj5*r20);
IkReal x451=(r21*sj5);
IkReal x452=((0.07068)*cj5);
IkReal x453=(r10*sj0);
IkReal x454=(cj0*px);
IkReal x455=((0.49325)*sj4);
IkReal x456=(cj4*r22);
IkReal x457=(r11*sj0);
IkReal x458=(cj0*r00);
IkReal x459=((0.02356)*sj5);
IkReal x460=((0.02356)*cj5);
IkReal x461=(py*sj0);
IkReal x462=((1.47975)*sj4);
IkReal x463=((0.10412)*x451);
IkReal x464=((0.31236)*x451);
IkReal x465=(x453*x460);
IkReal x466=(x452*x453);
IkReal x467=(x452*x458);
IkReal x468=(x451*x462);
IkReal x469=(x458*x460);
IkReal x470=(x451*x455);
IkReal x471=(x447+x468+x467+x466+x464);
IkReal x472=(x446+x469+x463+x465+x470);
IkReal x473=((((0.31236)*x450))+((x448*x457))+((x450*x462))+(((0.93)*x461))+((x448*x449))+(((0.93)*x454))+(((1.47975)*x456)));
IkReal x474=((((0.49325)*x456))+((x449*x459))+(((0.31)*x461))+(((0.31)*x454))+((x450*x455))+(((0.10412)*x450))+((x457*x459)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((-1.0)*x474))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((0.32298)*htj1))+x472+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x474))+x472))))+(((htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x473))+x471))))+(((htj1*htj1)*(((-0.37318)+(((-1.0)*x473))+x471)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x475=(cj4*r22);
IkReal x476=((1.0)*cj1);
IkReal x477=(sj1*sj4);
IkReal x478=(cj5*r20);
IkReal x479=(r21*sj5);
IkReal x480=(cj4*sj1);
IkReal x481=(cj1*x479);
if( IKabs(((((-1.0)*x477*x479))+(((-1.0)*cj4*x476*x478))+((cj4*x481))+((sj1*x475))+((x477*x478))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x475*x476))+((sj4*x481))+(((-1.0)*x478*x480))+(((-1.0)*sj4*x476*x478))+((r22*x477))+((x479*x480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x477*x479))+(((-1.0)*cj4*x476*x478))+((cj4*x481))+((sj1*x475))+((x477*x478))+((cj1*r22*sj4))))+IKsqr(((((-1.0)*x475*x476))+((sj4*x481))+(((-1.0)*x478*x480))+(((-1.0)*sj4*x476*x478))+((r22*x477))+((x479*x480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x477*x479))+(((-1.0)*cj4*x476*x478))+((cj4*x481))+((sj1*x475))+((x477*x478))+((cj1*r22*sj4))), ((((-1.0)*x475*x476))+((sj4*x481))+(((-1.0)*x478*x480))+(((-1.0)*sj4*x476*x478))+((r22*x477))+((x479*x480))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x482=IKcos(j2);
IkReal x483=IKsin(j2);
IkReal x484=((1.0)*sj4);
IkReal x485=((0.076)*sj5);
IkReal x486=(r11*sj0);
IkReal x487=((1.0)*cj4);
IkReal x488=(cj0*r02);
IkReal x489=(cj0*r01);
IkReal x490=(cj5*r20);
IkReal x491=((1.0)*sj1);
IkReal x492=(sj4*sj5);
IkReal x493=(r21*sj5);
IkReal x494=(cj4*sj5);
IkReal x495=(r12*sj0);
IkReal x496=(cj1*x482);
IkReal x497=(cj5*r10*sj0);
IkReal x498=(cj0*cj5*r00);
IkReal x499=(cj1*x483);
IkReal x500=(sj1*x483);
IkReal x501=(sj1*x482);
IkReal x502=(x483*x491);
evalcond[0]=(((sj4*x490))+((cj4*r22))+(((-1.0)*x502))+x496+(((-1.0)*x484*x493)));
evalcond[1]=(((cj4*x490))+x499+(((-1.0)*x487*x493))+x501+(((-1.0)*r22*x484)));
evalcond[2]=((((0.0775)*x501))+(((-0.3425)*x500))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.076)*x490))+pz+((r21*x485))+(((0.3425)*x496))+(((0.0775)*x499)));
evalcond[3]=(((sj4*x495))+(((-1.0)*x502))+((x489*x494))+((sj4*x488))+x496+(((-1.0)*x487*x497))+(((-1.0)*x487*x498))+((x486*x494)));
evalcond[4]=((((-1.0)*x482*x491))+((x489*x492))+(((-1.0)*x487*x488))+(((-1.0)*x499))+(((-1.0)*x487*x495))+(((-1.0)*x484*x497))+(((-1.0)*x484*x498))+((x486*x492)));
evalcond[5]=((((-0.0775)*x500))+(((-0.3425)*x501))+(((0.2845)*sj1))+(((-0.3425)*x499))+(((0.076)*x497))+(((0.076)*x498))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.0775)*x496))+(((-1.0)*cj0*px))+(((-1.0)*x485*x486))+(((-1.0)*x485*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x503=((0.076)*sj5);
IkReal x504=(rxp0_2*sj5);
IkReal x505=(cj5*rxp1_2);
IkReal x506=((0.076)*cj5);
j0eval[0]=((((13.1578947368421)*x504))+(((13.1578947368421)*x505))+r22);
j0eval[1]=IKsign((x504+x505+(((0.076)*r22))));
j0eval[2]=((IKabs((((r10*x506))+(((-1.0)*py))+(((-1.0)*r11*x503)))))+(IKabs(((((-1.0)*px))+(((-1.0)*r01*x503))+((r00*x506))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x507=((1.0)*cj5);
IkReal x508=(cj4*sj5);
IkReal x509=(((r21*sj4*sj5))+(((-1.0)*r20*sj4*x507))+(((-1.0)*cj4*r22)));
j0eval[0]=x509;
j0eval[1]=((IKabs((((r02*sj4))+((r01*x508))+(((-1.0)*cj4*r00*x507)))))+(IKabs(((((-1.0)*cj4*r10*x507))+((r12*sj4))+((r11*x508))))));
j0eval[2]=IKsign(x509);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x510=cj5*cj5;
IkReal x511=r20*r20;
IkReal x512=((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x510*(r21*r21)))+(((-1.0)*x510*x511))+x511);
j0eval[0]=x512;
j0eval[1]=IKsign(x512);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x513=cj5*cj5;
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj5*r20*r21*sj5))+(((r20*r20)*(((1.0)+(((-1.0)*x513))))))+((x513*(r21*r21))))),-1);
if(!x515.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x514.value)+(((1.5707963267949)*(x515.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x516=IKcos(j0);
IkReal x517=IKsin(j0);
IkReal x518=((1.0)*r01);
IkReal x519=((1.0)*r10);
IkReal x520=(cj5*x517);
IkReal x521=(sj5*x516);
IkReal x522=(sj4*x517);
IkReal x523=(cj5*x516);
IkReal x524=(sj5*x517);
IkReal x525=(r12*x516);
evalcond[0]=(((r11*x520))+((r10*x524))+((r01*x523))+((r00*x521)));
evalcond[1]=((-1.0)+((r11*x523))+(((-1.0)*x518*x520))+((r10*x521))+(((-1.0)*r00*x524)));
evalcond[2]=(((px*x517))+(((-1.0)*py*x516))+(((-0.076)*r00*x520))+(((0.076)*r10*x523))+(((0.076)*r01*x524))+(((-0.076)*r11*x521)));
evalcond[3]=((((-1.0)*sj5*x518*x522))+((cj4*r02*x517))+((r11*sj4*x521))+(((-1.0)*sj4*x519*x523))+(((-1.0)*cj4*x525))+((r00*sj4*x520)));
evalcond[4]=((((-1.0)*r02*x522))+(((-1.0)*cj4*x518*x524))+((cj4*r11*x521))+((cj4*r00*x520))+(((-1.0)*cj4*x519*x523))+((sj4*x525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x526=((4.11)*pz);
IkReal x527=((12.0)*pz);
IkReal x528=(cj5*r20);
IkReal x529=((4.11)*sj4);
IkReal x530=((0.31)*cj4);
IkReal x531=((0.07068)*sj5);
IkReal x532=(cj0*r01);
IkReal x533=(r21*sj5);
IkReal x534=(r22*sj4);
IkReal x535=((0.93)*cj4);
IkReal x536=((1.37)*sj4);
IkReal x537=((0.07068)*cj5);
IkReal x538=(r10*sj0);
IkReal x539=(cj0*r00);
IkReal x540=((0.02356)*cj5);
IkReal x541=(cj0*px);
IkReal x542=((0.49325)*sj4);
IkReal x543=(cj4*r22);
IkReal x544=(r11*sj0);
IkReal x545=((0.02356)*sj5);
IkReal x546=(py*sj0);
IkReal x547=((1.47975)*sj4);
IkReal x548=((0.31236)*x533);
IkReal x549=((0.912)*x533);
IkReal x550=(x537*x538);
IkReal x551=(x537*x539);
IkReal x552=(x533*x547);
IkReal x553=(x529*x533);
IkReal x554=(x528*x535);
IkReal x555=(x553+x554+x549+x527);
IkReal x556=((((4.11)*x543))+(((0.93)*x534))+(((0.912)*x528))+((x528*x529))+((x533*x535)));
IkReal x557=(x552+x551+x550+x548+x526);
IkReal x558=((((1.47975)*x543))+((x531*x532))+((x531*x544))+(((0.93)*x541))+(((0.93)*x546))+((x528*x547))+(((0.31236)*x528)));
j1eval[0]=((3.00392)+(IKabs(((0.37318)+((x539*x540))+(((-1.0)*x544*x545))+(((-1.0)*x532*x545))+(((1.37)*pz))+(((-0.49325)*x543))+(((0.10412)*x533))+(((-0.31)*x541))+(((-0.31)*x546))+(((-0.10412)*x528))+(((-1.0)*x528*x542))+((x538*x540))+((x533*x542)))))+(IKabs(((0.37318)+(((-1.0)*x558))+x557)))+(IKabs(((1.138)+(((0.304)*x533))+(((-1.37)*x543))+(((4.0)*pz))+(((-1.0)*x530*x533))+(((-0.31)*x534))+(((-1.0)*x528*x536))+(((-0.304)*x528))+((x528*x530))+((x533*x536)))))+(IKabs(((-0.37318)+(((-1.0)*x558))+x557)))+(IKabs(((-1.138)+(((-1.0)*x556))+x555)))+(IKabs(((1.138)+(((-1.0)*x556))+x555))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x559=((12.0)*pz);
IkReal x560=((4.0)*pz);
IkReal x561=(cj5*r20);
IkReal x562=((4.11)*sj4);
IkReal x563=(r21*sj5);
IkReal x564=((0.31)*cj4);
IkReal x565=((0.93)*cj4);
IkReal x566=(r22*sj4);
IkReal x567=(cj4*r22);
IkReal x568=((1.37)*sj4);
IkReal x569=((0.912)*x563);
IkReal x570=((0.304)*x563);
IkReal x571=(x562*x563);
IkReal x572=(x561*x565);
IkReal x573=(x561*x564);
IkReal x574=(x563*x568);
IkReal x575=(x559+x571+x572+x569);
IkReal x576=(x574+x570+x573+x560);
IkReal x577=((((0.912)*x561))+((x563*x565))+((x561*x562))+(((4.11)*x567))+(((0.93)*x566)));
IkReal x578=(((x563*x564))+((x561*x568))+(((0.304)*x561))+(((1.37)*x567))+(((0.31)*x566)));
op[0]=((1.138)+(((-1.0)*x578))+x576);
op[1]=0.428;
op[2]=((1.138)+(((-1.0)*x577))+x575);
op[3]=0.856;
op[4]=((-1.138)+(((-1.0)*x577))+x575);
op[5]=0.428;
op[6]=((-1.138)+(((-1.0)*x578))+x576);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x579=((1.37)*pz);
IkReal x580=((4.11)*pz);
IkReal x581=((0.07068)*sj5);
IkReal x582=(cj0*r01);
IkReal x583=(cj5*r20);
IkReal x584=(r21*sj5);
IkReal x585=((0.07068)*cj5);
IkReal x586=(r10*sj0);
IkReal x587=(cj0*px);
IkReal x588=((0.49325)*sj4);
IkReal x589=(cj4*r22);
IkReal x590=(r11*sj0);
IkReal x591=(cj0*r00);
IkReal x592=((0.02356)*sj5);
IkReal x593=((0.02356)*cj5);
IkReal x594=(py*sj0);
IkReal x595=((1.47975)*sj4);
IkReal x596=((0.10412)*x584);
IkReal x597=((0.31236)*x584);
IkReal x598=(x586*x593);
IkReal x599=(x585*x586);
IkReal x600=(x585*x591);
IkReal x601=(x584*x595);
IkReal x602=(x591*x593);
IkReal x603=(x584*x588);
IkReal x604=(x580+x597+x599+x601+x600);
IkReal x605=(x579+x596+x598+x603+x602);
IkReal x606=(((x581*x582))+(((0.31236)*x583))+(((1.47975)*x589))+(((0.93)*x594))+((x581*x590))+((x583*x595))+(((0.93)*x587)));
IkReal x607=((((0.31)*x594))+((x583*x588))+(((0.31)*x587))+((x582*x592))+((x590*x592))+(((0.10412)*x583))+(((0.49325)*x589)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x605+(((-1.0)*x607))))))+(((htj1*htj1)*(((-0.37318)+x604+(((-1.0)*x606))))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x604+(((-1.0)*x606))))))+(((0.32298)*htj1))+x605+(((-1.0)*x607)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x608=((1.0)*cj4);
IkReal x609=(r22*sj1);
IkReal x610=((1.0)*sj4);
IkReal x611=(cj1*r22);
IkReal x612=(cj1*r21*sj5);
IkReal x613=(cj5*r20*sj1);
IkReal x614=(r21*sj1*sj5);
IkReal x615=(cj1*cj5*r20);
if( IKabs((((sj4*x613))+(((-1.0)*x610*x611))+(((-1.0)*x610*x614))+((cj4*x615))+((cj4*x609))+(((-1.0)*x608*x612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x612))+(((-1.0)*x610*x615))+(((-1.0)*x609*x610))+((cj4*x613))+(((-1.0)*x608*x614))+(((-1.0)*x608*x611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x613))+(((-1.0)*x610*x611))+(((-1.0)*x610*x614))+((cj4*x615))+((cj4*x609))+(((-1.0)*x608*x612))))+IKsqr((((sj4*x612))+(((-1.0)*x610*x615))+(((-1.0)*x609*x610))+((cj4*x613))+(((-1.0)*x608*x614))+(((-1.0)*x608*x611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x613))+(((-1.0)*x610*x611))+(((-1.0)*x610*x614))+((cj4*x615))+((cj4*x609))+(((-1.0)*x608*x612))), (((sj4*x612))+(((-1.0)*x610*x615))+(((-1.0)*x609*x610))+((cj4*x613))+(((-1.0)*x608*x614))+(((-1.0)*x608*x611))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x616=IKcos(j2);
IkReal x617=IKsin(j2);
IkReal x618=(sj0*sj4);
IkReal x619=(cj5*r10);
IkReal x620=((0.076)*sj0);
IkReal x621=((1.0)*sj4);
IkReal x622=(r11*sj5);
IkReal x623=((0.076)*sj5);
IkReal x624=((1.0)*cj4);
IkReal x625=(cj0*r02);
IkReal x626=(cj0*r01);
IkReal x627=((1.0)*sj1);
IkReal x628=(r21*sj5);
IkReal x629=(cj5*r20);
IkReal x630=(cj1*x616);
IkReal x631=(cj0*cj5*r00);
IkReal x632=(cj1*x617);
IkReal x633=(sj1*x617);
IkReal x634=(sj1*x616);
IkReal x635=(x616*x627);
IkReal x636=((1.0)*x632);
IkReal x637=(x636+x635);
evalcond[0]=(((sj4*x629))+(((-1.0)*x621*x628))+((cj4*r22))+(((-1.0)*x617*x627))+x630);
evalcond[1]=(((cj4*x629))+(((-1.0)*x637))+(((-1.0)*x624*x628))+(((-1.0)*r22*x621)));
evalcond[2]=((((-0.3425)*x633))+((r21*x623))+(((0.0775)*x634))+(((0.0775)*x632))+(((-0.076)*x629))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x630))+pz);
evalcond[3]=(((sj4*x625))+(((-1.0)*sj0*x619*x624))+(((-1.0)*x624*x631))+((cj4*sj5*x626))+((r12*x618))+x633+(((-1.0)*x630))+((cj4*sj0*x622)));
evalcond[4]=((((-1.0)*x621*x631))+(((-1.0)*x637))+((x618*x622))+(((-1.0)*x624*x625))+((sj4*sj5*x626))+(((-1.0)*x618*x619))+(((-1.0)*r12*sj0*x624)));
evalcond[5]=((((-0.3425)*x634))+(((-0.3425)*x632))+(((0.076)*x631))+(((0.0775)*x630))+(((0.2845)*sj1))+(((-1.0)*x623*x626))+((x619*x620))+(((-1.0)*x620*x622))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.0775)*x633))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x638=((1.0)*cj5);
IkReal x639=(cj4*sj5);
CheckValue<IkReal> x640=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*r20*sj4*x638))+(((-1.0)*cj4*r22)))),-1);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641 = IKatan2WithCheck(IkReal((((r12*sj4))+(((-1.0)*cj4*r10*x638))+((r11*x639)))),IkReal((((r02*sj4))+((r01*x639))+(((-1.0)*cj4*r00*x638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x641.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x640.value)))+(x641.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x642=IKcos(j0);
IkReal x643=IKsin(j0);
IkReal x644=((1.0)*r01);
IkReal x645=((1.0)*r10);
IkReal x646=(cj5*x643);
IkReal x647=(sj5*x642);
IkReal x648=(sj4*x643);
IkReal x649=(cj5*x642);
IkReal x650=(sj5*x643);
IkReal x651=(r12*x642);
evalcond[0]=(((r10*x650))+((r01*x649))+((r00*x647))+((r11*x646)));
evalcond[1]=((-1.0)+(((-1.0)*x644*x646))+((r10*x647))+((r11*x649))+(((-1.0)*r00*x650)));
evalcond[2]=((((-1.0)*py*x642))+(((-0.076)*r00*x646))+(((-0.076)*r11*x647))+(((0.076)*r01*x650))+((px*x643))+(((0.076)*r10*x649)));
evalcond[3]=(((cj4*r02*x643))+(((-1.0)*sj5*x644*x648))+(((-1.0)*cj4*x651))+((r00*sj4*x646))+((r11*sj4*x647))+(((-1.0)*sj4*x645*x649)));
evalcond[4]=(((sj4*x651))+((cj4*r00*x646))+(((-1.0)*cj4*x645*x649))+(((-1.0)*r02*x648))+((cj4*r11*x647))+(((-1.0)*cj4*x644*x650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x652=((4.11)*pz);
IkReal x653=((12.0)*pz);
IkReal x654=(cj5*r20);
IkReal x655=((4.11)*sj4);
IkReal x656=((0.31)*cj4);
IkReal x657=((0.07068)*sj5);
IkReal x658=(cj0*r01);
IkReal x659=(r21*sj5);
IkReal x660=(r22*sj4);
IkReal x661=((0.93)*cj4);
IkReal x662=((1.37)*sj4);
IkReal x663=((0.07068)*cj5);
IkReal x664=(r10*sj0);
IkReal x665=(cj0*r00);
IkReal x666=((0.02356)*cj5);
IkReal x667=(cj0*px);
IkReal x668=((0.49325)*sj4);
IkReal x669=(cj4*r22);
IkReal x670=(r11*sj0);
IkReal x671=((0.02356)*sj5);
IkReal x672=(py*sj0);
IkReal x673=((1.47975)*sj4);
IkReal x674=((0.31236)*x659);
IkReal x675=((0.912)*x659);
IkReal x676=(x663*x664);
IkReal x677=(x663*x665);
IkReal x678=(x659*x673);
IkReal x679=(x655*x659);
IkReal x680=(x654*x661);
IkReal x681=(x653+x679+x675+x680);
IkReal x682=((((0.912)*x654))+((x654*x655))+(((4.11)*x669))+(((0.93)*x660))+((x659*x661)));
IkReal x683=(x652+x678+x676+x677+x674);
IkReal x684=((((0.31236)*x654))+(((1.47975)*x669))+(((0.93)*x667))+((x657*x658))+(((0.93)*x672))+((x654*x673))+((x657*x670)));
j1eval[0]=((3.00392)+(IKabs(((-0.37318)+(((-1.0)*x684))+x683)))+(IKabs(((1.138)+(((-1.0)*x682))+x681)))+(IKabs(((-1.138)+(((-1.0)*x682))+x681)))+(IKabs(((1.138)+(((-0.31)*x660))+(((0.304)*x659))+(((-1.37)*x669))+(((-1.0)*x654*x662))+(((4.0)*pz))+(((-1.0)*x656*x659))+((x654*x656))+(((-0.304)*x654))+((x659*x662)))))+(IKabs(((0.37318)+(((-1.0)*x684))+x683)))+(IKabs(((0.37318)+(((-0.31)*x667))+(((1.37)*pz))+(((-0.49325)*x669))+(((-1.0)*x654*x668))+((x665*x666))+((x664*x666))+(((-0.10412)*x654))+(((-1.0)*x658*x671))+(((-1.0)*x670*x671))+(((0.10412)*x659))+(((-0.31)*x672))+((x659*x668))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x685=((12.0)*pz);
IkReal x686=((4.0)*pz);
IkReal x687=(cj5*r20);
IkReal x688=((4.11)*sj4);
IkReal x689=(r21*sj5);
IkReal x690=((0.31)*cj4);
IkReal x691=((0.93)*cj4);
IkReal x692=(r22*sj4);
IkReal x693=(cj4*r22);
IkReal x694=((1.37)*sj4);
IkReal x695=((0.912)*x689);
IkReal x696=((0.304)*x689);
IkReal x697=(x688*x689);
IkReal x698=(x687*x691);
IkReal x699=(x687*x690);
IkReal x700=(x689*x694);
IkReal x701=(x685+x695+x697+x698);
IkReal x702=(x686+x696+x699+x700);
IkReal x703=((((4.11)*x693))+((x687*x688))+((x689*x691))+(((0.93)*x692))+(((0.912)*x687)));
IkReal x704=(((x687*x694))+(((0.304)*x687))+((x689*x690))+(((0.31)*x692))+(((1.37)*x693)));
op[0]=((1.138)+(((-1.0)*x704))+x702);
op[1]=0.428;
op[2]=((1.138)+(((-1.0)*x703))+x701);
op[3]=0.856;
op[4]=((-1.138)+(((-1.0)*x703))+x701);
op[5]=0.428;
op[6]=((-1.138)+(((-1.0)*x704))+x702);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x705=((1.37)*pz);
IkReal x706=((4.11)*pz);
IkReal x707=((0.07068)*sj5);
IkReal x708=(cj0*r01);
IkReal x709=(cj5*r20);
IkReal x710=(r21*sj5);
IkReal x711=((0.07068)*cj5);
IkReal x712=(r10*sj0);
IkReal x713=(cj0*px);
IkReal x714=((0.49325)*sj4);
IkReal x715=(cj4*r22);
IkReal x716=(r11*sj0);
IkReal x717=(cj0*r00);
IkReal x718=((0.02356)*sj5);
IkReal x719=((0.02356)*cj5);
IkReal x720=(py*sj0);
IkReal x721=((1.47975)*sj4);
IkReal x722=((0.10412)*x710);
IkReal x723=((0.31236)*x710);
IkReal x724=(x712*x719);
IkReal x725=(x711*x712);
IkReal x726=(x711*x717);
IkReal x727=(x710*x721);
IkReal x728=(x717*x719);
IkReal x729=(x710*x714);
IkReal x730=(x706+x723+x725+x726+x727);
IkReal x731=(x705+x722+x724+x728+x729);
IkReal x732=(((x707*x708))+((x707*x716))+((x709*x721))+(((0.93)*x713))+(((0.93)*x720))+(((1.47975)*x715))+(((0.31236)*x709)));
IkReal x733=((((0.49325)*x715))+((x709*x714))+(((0.31)*x713))+((x716*x718))+(((0.31)*x720))+(((0.10412)*x709))+((x708*x718)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.37318)+(((-1.0)*x732))+x730))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((0.32298)*htj1))+(((-1.0)*x733))+(((htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x732))+x730))))+x731+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x733))+x731)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x734=((1.0)*cj4);
IkReal x735=(r22*sj1);
IkReal x736=((1.0)*sj4);
IkReal x737=(cj1*r22);
IkReal x738=(cj1*r21*sj5);
IkReal x739=(cj5*r20*sj1);
IkReal x740=(r21*sj1*sj5);
IkReal x741=(cj1*cj5*r20);
if( IKabs((((cj4*x735))+(((-1.0)*x736*x737))+(((-1.0)*x734*x738))+((sj4*x739))+((cj4*x741))+(((-1.0)*x736*x740)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x739))+(((-1.0)*x735*x736))+(((-1.0)*x734*x737))+(((-1.0)*x734*x740))+((sj4*x738))+(((-1.0)*x736*x741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x735))+(((-1.0)*x736*x737))+(((-1.0)*x734*x738))+((sj4*x739))+((cj4*x741))+(((-1.0)*x736*x740))))+IKsqr((((cj4*x739))+(((-1.0)*x735*x736))+(((-1.0)*x734*x737))+(((-1.0)*x734*x740))+((sj4*x738))+(((-1.0)*x736*x741))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x735))+(((-1.0)*x736*x737))+(((-1.0)*x734*x738))+((sj4*x739))+((cj4*x741))+(((-1.0)*x736*x740))), (((cj4*x739))+(((-1.0)*x735*x736))+(((-1.0)*x734*x737))+(((-1.0)*x734*x740))+((sj4*x738))+(((-1.0)*x736*x741))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x742=IKcos(j2);
IkReal x743=IKsin(j2);
IkReal x744=(sj0*sj4);
IkReal x745=(cj5*r10);
IkReal x746=((0.076)*sj0);
IkReal x747=((1.0)*sj4);
IkReal x748=(r11*sj5);
IkReal x749=((0.076)*sj5);
IkReal x750=((1.0)*cj4);
IkReal x751=(cj0*r02);
IkReal x752=(cj0*r01);
IkReal x753=((1.0)*sj1);
IkReal x754=(r21*sj5);
IkReal x755=(cj5*r20);
IkReal x756=(cj1*x742);
IkReal x757=(cj0*cj5*r00);
IkReal x758=(cj1*x743);
IkReal x759=(sj1*x743);
IkReal x760=(sj1*x742);
IkReal x761=(x742*x753);
IkReal x762=((1.0)*x758);
IkReal x763=(x761+x762);
evalcond[0]=(((cj4*r22))+((sj4*x755))+(((-1.0)*x747*x754))+(((-1.0)*x743*x753))+x756);
evalcond[1]=((((-1.0)*x750*x754))+(((-1.0)*x763))+(((-1.0)*r22*x747))+((cj4*x755)));
evalcond[2]=((((-0.3425)*x759))+(((0.0535)*sj1))+(((0.0775)*x758))+(((-0.2845)*cj1))+(((-0.076)*x755))+pz+((r21*x749))+(((0.3425)*x756))+(((0.0775)*x760)));
evalcond[3]=((((-1.0)*x750*x757))+(((-1.0)*sj0*x745*x750))+((sj4*x751))+((cj4*sj0*x748))+(((-1.0)*x756))+((r12*x744))+x759+((cj4*sj5*x752)));
evalcond[4]=(((sj4*sj5*x752))+(((-1.0)*x744*x745))+(((-1.0)*x750*x751))+((x744*x748))+(((-1.0)*x763))+(((-1.0)*r12*sj0*x750))+(((-1.0)*x747*x757)));
evalcond[5]=((((-0.0775)*x759))+((x745*x746))+(((-0.3425)*x758))+(((-1.0)*x746*x748))+(((0.2845)*sj1))+(((0.0775)*x756))+(((0.0535)*cj1))+(((0.076)*x757))+(((-0.3425)*x760))+(((-1.0)*py*sj0))+(((-1.0)*x749*x752))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x764=((0.076)*sj5);
IkReal x765=((0.076)*cj5);
CheckValue<IkReal> x766 = IKatan2WithCheck(IkReal((((r10*x765))+(((-1.0)*py))+(((-1.0)*r11*x764)))),IkReal(((((-1.0)*r01*x764))+(((-1.0)*px))+((r00*x765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x766.valid){
continue;
}
CheckValue<IkReal> x767=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+((rxp0_2*sj5))+(((0.076)*r22)))),-1);
if(!x767.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x766.value)+(((1.5707963267949)*(x767.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x768=IKcos(j0);
IkReal x769=IKsin(j0);
IkReal x770=((1.0)*r01);
IkReal x771=((1.0)*r10);
IkReal x772=(cj5*x769);
IkReal x773=(sj5*x768);
IkReal x774=(sj4*x769);
IkReal x775=(cj5*x768);
IkReal x776=(sj5*x769);
IkReal x777=(r12*x768);
evalcond[0]=(((r10*x776))+((r11*x772))+((r01*x775))+((r00*x773)));
evalcond[1]=((-1.0)+((r10*x773))+((r11*x775))+(((-1.0)*r00*x776))+(((-1.0)*x770*x772)));
evalcond[2]=((((0.076)*r10*x775))+((px*x769))+(((-0.076)*r11*x773))+(((0.076)*r01*x776))+(((-0.076)*r00*x772))+(((-1.0)*py*x768)));
evalcond[3]=(((cj4*r02*x769))+(((-1.0)*sj4*x771*x775))+((r00*sj4*x772))+((r11*sj4*x773))+(((-1.0)*cj4*x777))+(((-1.0)*sj5*x770*x774)));
evalcond[4]=((((-1.0)*r02*x774))+((sj4*x777))+((cj4*r00*x772))+(((-1.0)*cj4*x771*x775))+((cj4*r11*x773))+(((-1.0)*cj4*x770*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x778=((4.11)*pz);
IkReal x779=((12.0)*pz);
IkReal x780=(cj5*r20);
IkReal x781=((4.11)*sj4);
IkReal x782=((0.31)*cj4);
IkReal x783=((0.07068)*sj5);
IkReal x784=(cj0*r01);
IkReal x785=(r21*sj5);
IkReal x786=(r22*sj4);
IkReal x787=((0.93)*cj4);
IkReal x788=((1.37)*sj4);
IkReal x789=((0.07068)*cj5);
IkReal x790=(r10*sj0);
IkReal x791=(cj0*r00);
IkReal x792=((0.02356)*cj5);
IkReal x793=(cj0*px);
IkReal x794=((0.49325)*sj4);
IkReal x795=(cj4*r22);
IkReal x796=(r11*sj0);
IkReal x797=((0.02356)*sj5);
IkReal x798=(py*sj0);
IkReal x799=((1.47975)*sj4);
IkReal x800=((0.31236)*x785);
IkReal x801=((0.912)*x785);
IkReal x802=(x789*x790);
IkReal x803=(x789*x791);
IkReal x804=(x785*x799);
IkReal x805=(x781*x785);
IkReal x806=(x780*x787);
IkReal x807=(x779+x805+x806+x801);
IkReal x808=((((4.11)*x795))+((x785*x787))+(((0.912)*x780))+(((0.93)*x786))+((x780*x781)));
IkReal x809=(x778+x804+x800+x803+x802);
IkReal x810=((((0.31236)*x780))+((x783*x796))+((x783*x784))+(((0.93)*x798))+(((0.93)*x793))+(((1.47975)*x795))+((x780*x799)));
j1eval[0]=((3.00392)+(IKabs(((0.37318)+(((-0.10412)*x780))+(((1.37)*pz))+(((-1.0)*x796*x797))+((x785*x794))+((x790*x792))+(((0.10412)*x785))+(((-0.49325)*x795))+(((-1.0)*x784*x797))+(((-1.0)*x780*x794))+((x791*x792))+(((-0.31)*x798))+(((-0.31)*x793)))))+(IKabs(((0.37318)+(((-1.0)*x810))+x809)))+(IKabs(((-0.37318)+(((-1.0)*x810))+x809)))+(IKabs(((1.138)+(((0.304)*x785))+(((4.0)*pz))+((x785*x788))+(((-0.304)*x780))+(((-1.0)*x782*x785))+((x780*x782))+(((-0.31)*x786))+(((-1.0)*x780*x788))+(((-1.37)*x795)))))+(IKabs(((1.138)+x807+(((-1.0)*x808)))))+(IKabs(((-1.138)+x807+(((-1.0)*x808))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x811=((12.0)*pz);
IkReal x812=((4.0)*pz);
IkReal x813=(cj5*r20);
IkReal x814=((4.11)*sj4);
IkReal x815=(r21*sj5);
IkReal x816=((0.31)*cj4);
IkReal x817=((0.93)*cj4);
IkReal x818=(r22*sj4);
IkReal x819=(cj4*r22);
IkReal x820=((1.37)*sj4);
IkReal x821=((0.912)*x815);
IkReal x822=((0.304)*x815);
IkReal x823=(x814*x815);
IkReal x824=(x813*x817);
IkReal x825=(x813*x816);
IkReal x826=(x815*x820);
IkReal x827=(x811+x823+x821+x824);
IkReal x828=(x812+x822+x826+x825);
IkReal x829=(((x815*x817))+(((4.11)*x819))+((x813*x814))+(((0.912)*x813))+(((0.93)*x818)));
IkReal x830=(((x815*x816))+(((0.304)*x813))+(((0.31)*x818))+((x813*x820))+(((1.37)*x819)));
op[0]=((1.138)+(((-1.0)*x830))+x828);
op[1]=0.428;
op[2]=((1.138)+(((-1.0)*x829))+x827);
op[3]=0.856;
op[4]=((-1.138)+(((-1.0)*x829))+x827);
op[5]=0.428;
op[6]=((-1.138)+(((-1.0)*x830))+x828);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x831=((1.37)*pz);
IkReal x832=((4.11)*pz);
IkReal x833=((0.07068)*sj5);
IkReal x834=(cj0*r01);
IkReal x835=(cj5*r20);
IkReal x836=(r21*sj5);
IkReal x837=((0.07068)*cj5);
IkReal x838=(r10*sj0);
IkReal x839=(cj0*px);
IkReal x840=((0.49325)*sj4);
IkReal x841=(cj4*r22);
IkReal x842=(r11*sj0);
IkReal x843=(cj0*r00);
IkReal x844=((0.02356)*sj5);
IkReal x845=((0.02356)*cj5);
IkReal x846=(py*sj0);
IkReal x847=((1.47975)*sj4);
IkReal x848=((0.10412)*x836);
IkReal x849=((0.31236)*x836);
IkReal x850=(x838*x845);
IkReal x851=(x837*x838);
IkReal x852=(x837*x843);
IkReal x853=(x836*x847);
IkReal x854=(x843*x845);
IkReal x855=(x836*x840);
IkReal x856=(x852+x853+x851+x832+x849);
IkReal x857=(x850+x854+x855+x831+x848);
IkReal x858=((((0.93)*x846))+(((0.93)*x839))+(((1.47975)*x841))+((x833*x842))+((x835*x847))+((x833*x834))+(((0.31236)*x835)));
IkReal x859=((((0.10412)*x835))+(((0.49325)*x841))+((x835*x840))+(((0.31)*x846))+((x842*x844))+(((0.31)*x839))+((x834*x844)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((-1.0)*x859))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x859))+x857))))+(((htj1*htj1)*(((-0.37318)+(((-1.0)*x858))+x856))))+(((0.32298)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x858))+x856))))+x857);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x860=((1.0)*cj4);
IkReal x861=(r22*sj1);
IkReal x862=((1.0)*sj4);
IkReal x863=(cj1*r22);
IkReal x864=(cj1*r21*sj5);
IkReal x865=(cj5*r20*sj1);
IkReal x866=(r21*sj1*sj5);
IkReal x867=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x862*x863))+(((-1.0)*x862*x866))+(((-1.0)*x860*x864))+((sj4*x865))+((cj4*x861))+((cj4*x867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x862*x867))+(((-1.0)*x861*x862))+(((-1.0)*x860*x863))+(((-1.0)*x860*x866))+((sj4*x864))+((cj4*x865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x862*x863))+(((-1.0)*x862*x866))+(((-1.0)*x860*x864))+((sj4*x865))+((cj4*x861))+((cj4*x867))))+IKsqr(((((-1.0)*x862*x867))+(((-1.0)*x861*x862))+(((-1.0)*x860*x863))+(((-1.0)*x860*x866))+((sj4*x864))+((cj4*x865))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x862*x863))+(((-1.0)*x862*x866))+(((-1.0)*x860*x864))+((sj4*x865))+((cj4*x861))+((cj4*x867))), ((((-1.0)*x862*x867))+(((-1.0)*x861*x862))+(((-1.0)*x860*x863))+(((-1.0)*x860*x866))+((sj4*x864))+((cj4*x865))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x868=IKcos(j2);
IkReal x869=IKsin(j2);
IkReal x870=(sj0*sj4);
IkReal x871=(cj5*r10);
IkReal x872=((0.076)*sj0);
IkReal x873=((1.0)*sj4);
IkReal x874=(r11*sj5);
IkReal x875=((0.076)*sj5);
IkReal x876=((1.0)*cj4);
IkReal x877=(cj0*r02);
IkReal x878=(cj0*r01);
IkReal x879=((1.0)*sj1);
IkReal x880=(r21*sj5);
IkReal x881=(cj5*r20);
IkReal x882=(cj1*x868);
IkReal x883=(cj0*cj5*r00);
IkReal x884=(cj1*x869);
IkReal x885=(sj1*x869);
IkReal x886=(sj1*x868);
IkReal x887=(x868*x879);
IkReal x888=((1.0)*x884);
IkReal x889=(x887+x888);
evalcond[0]=(((sj4*x881))+(((-1.0)*x873*x880))+((cj4*r22))+(((-1.0)*x869*x879))+x882);
evalcond[1]=((((-1.0)*x876*x880))+(((-1.0)*x889))+((cj4*x881))+(((-1.0)*r22*x873)));
evalcond[2]=((((0.3425)*x882))+((r21*x875))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x884))+(((0.0775)*x886))+(((-0.076)*x881))+(((-0.3425)*x885)));
evalcond[3]=(((r12*x870))+(((-1.0)*x882))+(((-1.0)*x876*x883))+((cj4*sj5*x878))+(((-1.0)*sj0*x871*x876))+((sj4*x877))+((cj4*sj0*x874))+x885);
evalcond[4]=((((-1.0)*r12*sj0*x876))+(((-1.0)*x876*x877))+(((-1.0)*x873*x883))+((x870*x874))+(((-1.0)*x870*x871))+(((-1.0)*x889))+((sj4*sj5*x878)));
evalcond[5]=((((-1.0)*x872*x874))+((x871*x872))+(((-0.0775)*x885))+(((0.2845)*sj1))+(((0.076)*x883))+(((0.0535)*cj1))+(((0.0775)*x882))+(((-1.0)*py*sj0))+(((-1.0)*x875*x878))+(((-1.0)*cj0*px))+(((-0.3425)*x884))+(((-0.3425)*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x890=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)));
j0eval[0]=x890;
j0eval[1]=IKsign(x890);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x891=(sj4*sj5);
IkReal x892=((1.0)*cj4);
IkReal x893=((1.0)*cj5*sj4);
IkReal x894=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x894;
j0eval[1]=((IKabs((((r11*x891))+(((-1.0)*r12*x892))+(((-1.0)*r10*x893)))))+(IKabs((((r01*x891))+(((-1.0)*r02*x892))+(((-1.0)*r00*x893))))));
j0eval[2]=IKsign(x894);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x895=(rxp2_2*sj4);
IkReal x896=((13.1578947368421)*cj4);
IkReal x897=(rxp1_2*sj5);
IkReal x898=((1.0)*sj4);
IkReal x899=(cj5*r21);
IkReal x900=((0.076)*sj5);
IkReal x901=(cj5*rxp0_2);
IkReal x902=((0.076)*cj5);
j0eval[0]=((((-1.0)*x896*x901))+(((-1.0)*x898*x899))+((x896*x897))+(((-1.0)*r20*sj5*x898))+(((13.1578947368421)*x895)));
j0eval[1]=IKsign((((cj4*x897))+x895+(((-1.0)*cj4*x901))+(((-1.0)*r20*sj4*x900))+(((-0.076)*sj4*x899))));
j0eval[2]=((IKabs(((((-1.0)*r11*x900))+(((-1.0)*py))+((r10*x902)))))+(IKabs((((r00*x902))+(((-1.0)*px))+(((-1.0)*r01*x900))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x903=((0.076)*sj5);
IkReal x904=((0.076)*cj5);
CheckValue<IkReal> x905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x904))+(((-1.0)*cj4*cj5*rxp0_2))+((cj4*rxp1_2*sj5))+(((-1.0)*r20*sj4*x903))+((rxp2_2*sj4)))),-1);
if(!x905.valid){
continue;
}
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x903))+(((-1.0)*py))+((r10*x904)))),IkReal((((r00*x904))+(((-1.0)*px))+(((-1.0)*r01*x903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x905.value)))+(x906.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x907=IKcos(j0);
IkReal x908=IKsin(j0);
IkReal x909=((1.0)*r01);
IkReal x910=(r11*sj5);
IkReal x911=(cj4*r00);
IkReal x912=((1.0)*r10);
IkReal x913=(r01*sj5);
IkReal x914=(cj5*x908);
IkReal x915=(sj4*x907);
IkReal x916=(sj4*x908);
IkReal x917=(cj5*x907);
IkReal x918=(cj4*x908);
IkReal x919=(cj4*x907);
evalcond[0]=(((r10*sj5*x907))+(((-1.0)*r00*sj5*x908))+((r11*x917))+(((-1.0)*x909*x914)));
evalcond[1]=((((-1.0)*py*x907))+(((-0.076)*r00*x914))+((px*x908))+(((0.076)*x908*x913))+(((-0.076)*x907*x910))+(((0.076)*r10*x917)));
evalcond[2]=(((x910*x918))+(((-1.0)*cj4*x912*x914))+((r12*x916))+((r02*x915))+(((-1.0)*x911*x917))+((x913*x919)));
evalcond[3]=(((x910*x915))+(((-1.0)*r12*x919))+((r02*x918))+(((-1.0)*cj5*x912*x915))+((r00*sj4*x914))+(((-1.0)*sj5*x909*x916)));
evalcond[4]=((-1.0)+((x910*x919))+(((-1.0)*cj4*x912*x917))+((r12*x915))+(((-1.0)*r02*x916))+((x911*x914))+(((-1.0)*sj5*x909*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x952=IKPowWithIntegerCheck(cj4,-1);
if(!x952.valid){
continue;
}
IkReal x920=x952.value;
IkReal x921=(cj5*r21);
IkReal x922=((0.304)*sj0);
IkReal x923=(cj5*r10);
IkReal x924=(r11*sj5);
IkReal x925=(cj0*px);
IkReal x926=(r20*sj5);
IkReal x927=(py*sj0);
IkReal x928=(cj4*r22);
IkReal x929=((0.912)*sj0);
IkReal x930=((0.912)*cj0);
IkReal x931=(r01*sj5);
IkReal x932=(cj5*r00);
IkReal x933=((0.304)*cj0);
IkReal x934=((0.93)*x928);
IkReal x935=((4.11)*x926);
IkReal x936=((4.11)*x921);
IkReal x937=((12.0)*x925);
IkReal x938=((12.0)*x927);
IkReal x939=((2055.0)*x928);
IkReal x940=(r21*sj4*sj5);
IkReal x941=(cj5*r20*sj4);
IkReal x942=(r22*sj4*x920);
IkReal x943=((0.93)*x941);
IkReal x944=(x930*x931);
IkReal x945=(x924*x929);
IkReal x946=((2055.0)*x941);
IkReal x947=((456.0)*x942);
IkReal x948=(x939+x946+x947);
IkReal x949=((((0.93)*x940))+((x930*x932))+((x923*x929)));
IkReal x950=((((2055.0)*x940))+(((465.0)*x921))+(((465.0)*x926))+(((6000.0)*pz)));
IkReal x951=(x938+x935+x934+x937+x936+x943+x944+x945);
j1eval[0]=((10.816)+(IKabs(((0.214)+(((-1.0)*x949))+x951)))+(((0.002)*(IKabs(((569.0)+(((-1.0)*x950))+x948)))))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x950))+x948)))))+(IKabs(((-0.214)+(((-1.0)*x949))+x951)))+(IKabs(((0.214)+((x931*x933))+(((-0.31)*x940))+(((4.0)*x925))+(((4.0)*x927))+(((0.31)*x941))+((x922*x924))+(((-1.0)*x932*x933))+(((1.37)*x921))+(((1.37)*x926))+(((0.31)*x928))+(((-1.0)*x922*x923)))))+(((0.002)*(IKabs(((-569.0)+(((685.0)*x928))+(((685.0)*x941))+(((-685.0)*x940))+(((-155.0)*x926))+(((-155.0)*x921))+(((-2000.0)*pz))+(((152.0)*x942))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x983=IKPowWithIntegerCheck(cj4,-1);
if(!x983.valid){
continue;
}
IkReal x953=x983.value;
IkReal x954=cj4*cj4;
IkReal x955=((569.0)*cj4);
IkReal x956=(cj4*cj5);
IkReal x957=((0.002)*x953);
IkReal x958=(cj4*pz);
IkReal x959=((685.0)*sj4);
IkReal x960=(r22*sj4);
IkReal x961=((2055.0)*sj4);
IkReal x962=((456.0)*x960);
IkReal x963=((6000.0)*x958);
IkReal x964=((152.0)*x960);
IkReal x965=((2000.0)*x958);
IkReal x966=(cj4*r21*sj5);
IkReal x967=(r22*x954);
IkReal x968=(cj4*r20*sj5);
IkReal x969=((2055.0)*x967);
IkReal x970=((465.0)*x968);
IkReal x971=((465.0)*r21*x956);
IkReal x972=((685.0)*x967);
IkReal x973=((155.0)*x968);
IkReal x974=((155.0)*r21*x956);
IkReal x975=(r20*x956*x961);
IkReal x976=(x961*x966);
IkReal x977=(r20*x956*x959);
IkReal x978=(x959*x966);
IkReal x979=(x972+x977+x964);
IkReal x980=(x975+x962+x969);
IkReal x981=(x971+x970+x976+x963);
IkReal x982=(x973+x974+x978+x965);
op[0]=(x957*(((((-1.0)*x982))+(((-1.0)*x955))+x979)));
op[1]=-0.428;
op[2]=(x957*(((((-1.0)*x981))+(((-1.0)*x955))+x980)));
op[3]=-0.856;
op[4]=(x957*(((((-1.0)*x981))+x980+x955)));
op[5]=-0.428;
op[6]=(x957*(((((-1.0)*x982))+x979+x955)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x984=((0.304)*sj0);
IkReal x985=(cj5*r10);
IkReal x986=(r11*sj5);
IkReal x987=(cj0*px);
IkReal x988=(cj5*r21);
IkReal x989=(py*sj0);
IkReal x990=(r20*sj5);
IkReal x991=(cj4*r22);
IkReal x992=((0.912)*sj0);
IkReal x993=((0.912)*cj0);
IkReal x994=(r01*sj5);
IkReal x995=(cj5*r00);
IkReal x996=((0.304)*cj0);
IkReal x997=((4.0)*x987);
IkReal x998=((1.37)*x988);
IkReal x999=((1.37)*x990);
IkReal x1000=((4.0)*x989);
IkReal x1001=((0.31)*x991);
IkReal x1002=((0.93)*x991);
IkReal x1003=((4.11)*x990);
IkReal x1004=((4.11)*x988);
IkReal x1005=((12.0)*x987);
IkReal x1006=((12.0)*x989);
IkReal x1007=(r21*sj4*sj5);
IkReal x1008=(cj5*r20*sj4);
IkReal x1009=(x994*x996);
IkReal x1010=((0.31)*x1008);
IkReal x1011=((0.93)*x1008);
IkReal x1012=(x993*x994);
IkReal x1013=(x986*x992);
IkReal x1014=(x984*x986);
IkReal x1015=(x984*x985);
IkReal x1016=(x995*x996);
IkReal x1017=((0.31)*x1007);
IkReal x1018=(((x993*x995))+(((0.93)*x1007))+((x985*x992)));
IkReal x1019=(x1015+x1016+x1017);
IkReal x1020=(x1014+x1010+x1009+x1001+x1000+x997+x999+x998);
IkReal x1021=(x1011+x1012+x1013+x1006+x1005+x1004+x1003+x1002);
j1evalpoly[0]=((-0.214)+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+x1020+(((-1.0)*x1019))+(((htj1*htj1*htj1*htj1)*(((0.214)+x1021+(((-1.0)*x1018))))))+(((-2.276)*htj1))+(((htj1*htj1)*(((-0.214)+x1021+(((-1.0)*x1018))))))+(((-4.552)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+x1020+(((-1.0)*x1019)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1022=(cj4*r22);
IkReal x1023=((1.0)*cj1);
IkReal x1024=(r20*sj1);
IkReal x1025=(cj5*sj4);
IkReal x1026=(cj5*r21);
IkReal x1027=(r21*sj4*sj5);
if( IKabs((((sj1*x1022))+((cj1*r20*sj5))+(((-1.0)*sj1*x1027))+((x1024*x1025))+((cj1*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1026))+(((-1.0)*x1022*x1023))+(((-1.0)*r20*x1023*x1025))+((sj5*x1024))+((cj1*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1022))+((cj1*r20*sj5))+(((-1.0)*sj1*x1027))+((x1024*x1025))+((cj1*x1026))))+IKsqr((((sj1*x1026))+(((-1.0)*x1022*x1023))+(((-1.0)*r20*x1023*x1025))+((sj5*x1024))+((cj1*x1027))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1022))+((cj1*r20*sj5))+(((-1.0)*sj1*x1027))+((x1024*x1025))+((cj1*x1026))), (((sj1*x1026))+(((-1.0)*x1022*x1023))+(((-1.0)*r20*x1023*x1025))+((sj5*x1024))+((cj1*x1027))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1028=IKcos(j2);
IkReal x1029=IKsin(j2);
IkReal x1030=(r10*sj0);
IkReal x1031=((0.076)*cj5);
IkReal x1032=(cj0*r00);
IkReal x1033=((0.076)*sj5);
IkReal x1034=(r11*sj0);
IkReal x1035=((1.0)*sj5);
IkReal x1036=((1.0)*cj0);
IkReal x1037=(cj0*r01);
IkReal x1038=((1.0)*sj1);
IkReal x1039=((0.3425)*sj1);
IkReal x1040=(sj4*sj5);
IkReal x1041=((1.0)*sj0);
IkReal x1042=(cj1*x1028);
IkReal x1043=((1.0)*cj5*sj4);
IkReal x1044=(cj1*x1029);
IkReal x1045=(sj1*x1028);
IkReal x1046=(x1029*x1038);
evalcond[0]=(x1045+x1044+(((-1.0)*r20*x1035))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+x1042+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x1035))+(((-1.0)*x1046)));
evalcond[2]=(x1042+((cj5*x1034))+((cj5*x1037))+((sj5*x1032))+((sj5*x1030))+(((-1.0)*x1046)));
CheckValue<IkReal> x1047=IKPowWithIntegerCheck(cj4,-1);
if(!x1047.valid){
continue;
}
evalcond[3]=((((-1.0)*x1029*x1039))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1044))+(((0.0775)*x1045))+pz+(((0.3425)*x1042))+(((-0.076)*r22*sj4*(x1047.value))));
evalcond[4]=((((-1.0)*x1032*x1043))+((x1034*x1040))+(((-1.0)*x1028*x1038))+((x1037*x1040))+(((-1.0)*cj4*r12*x1041))+(((-1.0)*cj4*r02*x1036))+(((-1.0)*x1044))+(((-1.0)*x1030*x1043)));
evalcond[5]=(((x1031*x1032))+(((-1.0)*x1033*x1037))+(((-1.0)*x1033*x1034))+((x1030*x1031))+(((-1.0)*x1028*x1039))+(((0.2845)*sj1))+(((-0.0775)*sj1*x1029))+(((0.0775)*x1042))+(((-1.0)*py*x1041))+(((0.0535)*cj1))+(((-0.3425)*x1044))+(((-1.0)*px*x1036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1048=(sj4*sj5);
IkReal x1049=((1.0)*cj4);
IkReal x1050=((1.0)*cj5*sj4);
CheckValue<IkReal> x1051=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1051.valid){
continue;
}
CheckValue<IkReal> x1052 = IKatan2WithCheck(IkReal((((r11*x1048))+(((-1.0)*r10*x1050))+(((-1.0)*r12*x1049)))),IkReal(((((-1.0)*r02*x1049))+(((-1.0)*r00*x1050))+((r01*x1048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1052.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1051.value)))+(x1052.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1053=IKcos(j0);
IkReal x1054=IKsin(j0);
IkReal x1055=((1.0)*r01);
IkReal x1056=(r11*sj5);
IkReal x1057=(cj4*r00);
IkReal x1058=((1.0)*r10);
IkReal x1059=(r01*sj5);
IkReal x1060=(cj5*x1054);
IkReal x1061=(sj4*x1053);
IkReal x1062=(sj4*x1054);
IkReal x1063=(cj5*x1053);
IkReal x1064=(cj4*x1054);
IkReal x1065=(cj4*x1053);
evalcond[0]=((((-1.0)*r00*sj5*x1054))+(((-1.0)*x1055*x1060))+((r10*sj5*x1053))+((r11*x1063)));
evalcond[1]=((((-1.0)*py*x1053))+((px*x1054))+(((-0.076)*r00*x1060))+(((0.076)*x1054*x1059))+(((0.076)*r10*x1063))+(((-0.076)*x1053*x1056)));
evalcond[2]=(((x1056*x1064))+(((-1.0)*x1057*x1063))+((r12*x1062))+((x1059*x1065))+((r02*x1061))+(((-1.0)*cj4*x1058*x1060)));
evalcond[3]=(((x1056*x1061))+(((-1.0)*r12*x1065))+(((-1.0)*cj5*x1058*x1061))+((r00*sj4*x1060))+((r02*x1064))+(((-1.0)*sj5*x1055*x1062)));
evalcond[4]=((-1.0)+((x1056*x1065))+((r12*x1061))+(((-1.0)*r02*x1062))+((x1057*x1060))+(((-1.0)*cj4*x1058*x1063))+(((-1.0)*sj5*x1055*x1064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x1098=IKPowWithIntegerCheck(cj4,-1);
if(!x1098.valid){
continue;
}
IkReal x1066=x1098.value;
IkReal x1067=(cj5*r21);
IkReal x1068=((0.304)*sj0);
IkReal x1069=(cj5*r10);
IkReal x1070=(r11*sj5);
IkReal x1071=(cj0*px);
IkReal x1072=(r20*sj5);
IkReal x1073=(py*sj0);
IkReal x1074=(cj4*r22);
IkReal x1075=((0.912)*sj0);
IkReal x1076=((0.912)*cj0);
IkReal x1077=(r01*sj5);
IkReal x1078=(cj5*r00);
IkReal x1079=((0.304)*cj0);
IkReal x1080=((0.93)*x1074);
IkReal x1081=((4.11)*x1072);
IkReal x1082=((4.11)*x1067);
IkReal x1083=((12.0)*x1071);
IkReal x1084=((12.0)*x1073);
IkReal x1085=((2055.0)*x1074);
IkReal x1086=(r21*sj4*sj5);
IkReal x1087=(cj5*r20*sj4);
IkReal x1088=(r22*sj4*x1066);
IkReal x1089=((0.93)*x1087);
IkReal x1090=(x1076*x1077);
IkReal x1091=(x1070*x1075);
IkReal x1092=((2055.0)*x1087);
IkReal x1093=((456.0)*x1088);
IkReal x1094=(x1092+x1093+x1085);
IkReal x1095=(((x1069*x1075))+(((0.93)*x1086))+((x1076*x1078)));
IkReal x1096=((((2055.0)*x1086))+(((465.0)*x1067))+(((6000.0)*pz))+(((465.0)*x1072)));
IkReal x1097=(x1090+x1091+x1084+x1083+x1082+x1081+x1080+x1089);
j1eval[0]=((10.816)+(((0.002)*(IKabs(((-569.0)+x1094+(((-1.0)*x1096)))))))+(IKabs(((0.214)+x1097+(((-1.0)*x1095)))))+(IKabs(((-0.214)+x1097+(((-1.0)*x1095)))))+(IKabs(((0.214)+((x1068*x1070))+((x1077*x1079))+(((1.37)*x1072))+(((1.37)*x1067))+(((-1.0)*x1078*x1079))+(((0.31)*x1074))+(((-0.31)*x1086))+(((-1.0)*x1068*x1069))+(((4.0)*x1071))+(((4.0)*x1073))+(((0.31)*x1087)))))+(((0.002)*(IKabs(((-569.0)+(((685.0)*x1074))+(((152.0)*x1088))+(((-155.0)*x1072))+(((685.0)*x1087))+(((-155.0)*x1067))+(((-685.0)*x1086))+(((-2000.0)*pz)))))))+(((0.002)*(IKabs(((569.0)+x1094+(((-1.0)*x1096))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1129=IKPowWithIntegerCheck(cj4,-1);
if(!x1129.valid){
continue;
}
IkReal x1099=x1129.value;
IkReal x1100=cj4*cj4;
IkReal x1101=((569.0)*cj4);
IkReal x1102=(cj4*cj5);
IkReal x1103=((0.002)*x1099);
IkReal x1104=(cj4*pz);
IkReal x1105=((685.0)*sj4);
IkReal x1106=(r22*sj4);
IkReal x1107=((2055.0)*sj4);
IkReal x1108=((456.0)*x1106);
IkReal x1109=((6000.0)*x1104);
IkReal x1110=((152.0)*x1106);
IkReal x1111=((2000.0)*x1104);
IkReal x1112=(cj4*r21*sj5);
IkReal x1113=(r22*x1100);
IkReal x1114=(cj4*r20*sj5);
IkReal x1115=((2055.0)*x1113);
IkReal x1116=((465.0)*x1114);
IkReal x1117=((465.0)*r21*x1102);
IkReal x1118=((685.0)*x1113);
IkReal x1119=((155.0)*x1114);
IkReal x1120=((155.0)*r21*x1102);
IkReal x1121=(r20*x1102*x1107);
IkReal x1122=(x1107*x1112);
IkReal x1123=(r20*x1102*x1105);
IkReal x1124=(x1105*x1112);
IkReal x1125=(x1110+x1118+x1123);
IkReal x1126=(x1108+x1115+x1121);
IkReal x1127=(x1109+x1117+x1116+x1122);
IkReal x1128=(x1111+x1119+x1120+x1124);
op[0]=(x1103*((x1125+(((-1.0)*x1128))+(((-1.0)*x1101)))));
op[1]=-0.428;
op[2]=(x1103*((x1126+(((-1.0)*x1127))+(((-1.0)*x1101)))));
op[3]=-0.856;
op[4]=(x1103*((x1101+x1126+(((-1.0)*x1127)))));
op[5]=-0.428;
op[6]=(x1103*((x1101+x1125+(((-1.0)*x1128)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1130=((0.304)*sj0);
IkReal x1131=(cj5*r10);
IkReal x1132=(r11*sj5);
IkReal x1133=(cj0*px);
IkReal x1134=(cj5*r21);
IkReal x1135=(py*sj0);
IkReal x1136=(r20*sj5);
IkReal x1137=(cj4*r22);
IkReal x1138=((0.912)*sj0);
IkReal x1139=((0.912)*cj0);
IkReal x1140=(r01*sj5);
IkReal x1141=(cj5*r00);
IkReal x1142=((0.304)*cj0);
IkReal x1143=((4.0)*x1133);
IkReal x1144=((1.37)*x1134);
IkReal x1145=((1.37)*x1136);
IkReal x1146=((4.0)*x1135);
IkReal x1147=((0.31)*x1137);
IkReal x1148=((0.93)*x1137);
IkReal x1149=((4.11)*x1136);
IkReal x1150=((4.11)*x1134);
IkReal x1151=((12.0)*x1133);
IkReal x1152=((12.0)*x1135);
IkReal x1153=(r21*sj4*sj5);
IkReal x1154=(cj5*r20*sj4);
IkReal x1155=(x1140*x1142);
IkReal x1156=((0.31)*x1154);
IkReal x1157=((0.93)*x1154);
IkReal x1158=(x1139*x1140);
IkReal x1159=(x1132*x1138);
IkReal x1160=(x1130*x1132);
IkReal x1161=(x1130*x1131);
IkReal x1162=(x1141*x1142);
IkReal x1163=((0.31)*x1153);
IkReal x1164=(((x1131*x1138))+(((0.93)*x1153))+((x1139*x1141)));
IkReal x1165=(x1161+x1162+x1163);
IkReal x1166=(x1143+x1146+x1147+x1144+x1145+x1155+x1156+x1160);
IkReal x1167=(x1148+x1149+x1159+x1158+x1157+x1151+x1150+x1152);
j1evalpoly[0]=((-0.214)+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+x1166+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+x1166+(((-1.0)*x1165))))))+(((htj1*htj1*htj1*htj1)*(((0.214)+x1167+(((-1.0)*x1164))))))+(((htj1*htj1)*(((-0.214)+x1167+(((-1.0)*x1164))))))+(((-2.276)*htj1))+(((-1.0)*x1165))+(((-4.552)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1168=(cj4*r22);
IkReal x1169=((1.0)*cj1);
IkReal x1170=(r20*sj1);
IkReal x1171=(cj5*sj4);
IkReal x1172=(cj5*r21);
IkReal x1173=(r21*sj4*sj5);
if( IKabs((((cj1*x1172))+((cj1*r20*sj5))+((sj1*x1168))+(((-1.0)*sj1*x1173))+((x1170*x1171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1173))+(((-1.0)*x1168*x1169))+((sj1*x1172))+(((-1.0)*r20*x1169*x1171))+((sj5*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1172))+((cj1*r20*sj5))+((sj1*x1168))+(((-1.0)*sj1*x1173))+((x1170*x1171))))+IKsqr((((cj1*x1173))+(((-1.0)*x1168*x1169))+((sj1*x1172))+(((-1.0)*r20*x1169*x1171))+((sj5*x1170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1172))+((cj1*r20*sj5))+((sj1*x1168))+(((-1.0)*sj1*x1173))+((x1170*x1171))), (((cj1*x1173))+(((-1.0)*x1168*x1169))+((sj1*x1172))+(((-1.0)*r20*x1169*x1171))+((sj5*x1170))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1174=IKcos(j2);
IkReal x1175=IKsin(j2);
IkReal x1176=(r10*sj0);
IkReal x1177=((0.076)*cj5);
IkReal x1178=(cj0*r00);
IkReal x1179=((0.076)*sj5);
IkReal x1180=(r11*sj0);
IkReal x1181=((1.0)*sj5);
IkReal x1182=((1.0)*cj0);
IkReal x1183=(cj0*r01);
IkReal x1184=((1.0)*sj1);
IkReal x1185=((0.3425)*sj1);
IkReal x1186=(sj4*sj5);
IkReal x1187=((1.0)*sj0);
IkReal x1188=(cj1*x1174);
IkReal x1189=((1.0)*cj5*sj4);
IkReal x1190=(cj1*x1175);
IkReal x1191=(sj1*x1174);
IkReal x1192=(x1175*x1184);
evalcond[0]=(x1191+x1190+(((-1.0)*cj5*r21))+(((-1.0)*r20*x1181)));
evalcond[1]=(x1188+((cj4*r22))+(((-1.0)*r21*sj4*x1181))+((cj5*r20*sj4))+(((-1.0)*x1192)));
evalcond[2]=(x1188+((cj5*x1180))+((cj5*x1183))+(((-1.0)*x1192))+((sj5*x1178))+((sj5*x1176)));
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(cj4,-1);
if(!x1193.valid){
continue;
}
evalcond[3]=((((-1.0)*x1175*x1185))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.3425)*x1188))+(((0.0775)*x1190))+(((0.0775)*x1191))+(((-0.076)*r22*sj4*(x1193.value))));
evalcond[4]=((((-1.0)*x1176*x1189))+((x1183*x1186))+(((-1.0)*cj4*r12*x1187))+((x1180*x1186))+(((-1.0)*x1178*x1189))+(((-1.0)*x1190))+(((-1.0)*cj4*r02*x1182))+(((-1.0)*x1174*x1184)));
evalcond[5]=((((0.0775)*x1188))+(((0.2845)*sj1))+(((-0.0775)*sj1*x1175))+(((-1.0)*x1179*x1183))+(((-1.0)*x1179*x1180))+(((-1.0)*py*x1187))+((x1176*x1177))+((x1177*x1178))+(((0.0535)*cj1))+(((-0.3425)*x1190))+(((-1.0)*px*x1182))+(((-1.0)*x1174*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1194 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1194.valid){
continue;
}
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)))),-1);
if(!x1195.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1194.value)+(((1.5707963267949)*(x1195.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1196=IKcos(j0);
IkReal x1197=IKsin(j0);
IkReal x1198=((1.0)*r01);
IkReal x1199=(r11*sj5);
IkReal x1200=(cj4*r00);
IkReal x1201=((1.0)*r10);
IkReal x1202=(r01*sj5);
IkReal x1203=(cj5*x1197);
IkReal x1204=(sj4*x1196);
IkReal x1205=(sj4*x1197);
IkReal x1206=(cj5*x1196);
IkReal x1207=(cj4*x1197);
IkReal x1208=(cj4*x1196);
evalcond[0]=((((-1.0)*r00*sj5*x1197))+((r11*x1206))+((r10*sj5*x1196))+(((-1.0)*x1198*x1203)));
evalcond[1]=((((-0.076)*x1196*x1199))+(((0.076)*x1197*x1202))+(((-1.0)*py*x1196))+((px*x1197))+(((-0.076)*r00*x1203))+(((0.076)*r10*x1206)));
evalcond[2]=((((-1.0)*x1200*x1206))+((x1202*x1208))+((r12*x1205))+((x1199*x1207))+(((-1.0)*cj4*x1201*x1203))+((r02*x1204)));
evalcond[3]=((((-1.0)*cj5*x1201*x1204))+((x1199*x1204))+((r00*sj4*x1203))+(((-1.0)*sj5*x1198*x1205))+((r02*x1207))+(((-1.0)*r12*x1208)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x1205))+((r12*x1204))+((x1199*x1208))+((x1200*x1203))+(((-1.0)*cj4*x1201*x1206))+(((-1.0)*sj5*x1198*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(cj4,-1);
if(!x1241.valid){
continue;
}
IkReal x1209=x1241.value;
IkReal x1210=(cj5*r21);
IkReal x1211=((0.304)*sj0);
IkReal x1212=(cj5*r10);
IkReal x1213=(r11*sj5);
IkReal x1214=(cj0*px);
IkReal x1215=(r20*sj5);
IkReal x1216=(py*sj0);
IkReal x1217=(cj4*r22);
IkReal x1218=((0.912)*sj0);
IkReal x1219=((0.912)*cj0);
IkReal x1220=(r01*sj5);
IkReal x1221=(cj5*r00);
IkReal x1222=((0.304)*cj0);
IkReal x1223=((0.93)*x1217);
IkReal x1224=((4.11)*x1215);
IkReal x1225=((4.11)*x1210);
IkReal x1226=((12.0)*x1214);
IkReal x1227=((12.0)*x1216);
IkReal x1228=((2055.0)*x1217);
IkReal x1229=(r21*sj4*sj5);
IkReal x1230=(cj5*r20*sj4);
IkReal x1231=(r22*sj4*x1209);
IkReal x1232=((0.93)*x1230);
IkReal x1233=(x1219*x1220);
IkReal x1234=(x1213*x1218);
IkReal x1235=((2055.0)*x1230);
IkReal x1236=((456.0)*x1231);
IkReal x1237=(x1235+x1236+x1228);
IkReal x1238=(((x1212*x1218))+(((0.93)*x1229))+((x1219*x1221)));
IkReal x1239=((((465.0)*x1215))+(((465.0)*x1210))+(((2055.0)*x1229))+(((6000.0)*pz)));
IkReal x1240=(x1234+x1232+x1233+x1227+x1226+x1225+x1224+x1223);
j1eval[0]=((10.816)+(IKabs(((0.214)+(((0.31)*x1230))+(((-0.31)*x1229))+(((0.31)*x1217))+(((1.37)*x1215))+(((1.37)*x1210))+(((-1.0)*x1221*x1222))+((x1220*x1222))+(((-1.0)*x1211*x1212))+((x1211*x1213))+(((4.0)*x1214))+(((4.0)*x1216)))))+(((0.002)*(IKabs(((-569.0)+(((152.0)*x1231))+(((-155.0)*x1215))+(((-155.0)*x1210))+(((685.0)*x1217))+(((-685.0)*x1229))+(((-2000.0)*pz))+(((685.0)*x1230)))))))+(((0.002)*(IKabs(((569.0)+x1237+(((-1.0)*x1239)))))))+(((0.002)*(IKabs(((-569.0)+x1237+(((-1.0)*x1239)))))))+(IKabs(((-0.214)+x1240+(((-1.0)*x1238)))))+(IKabs(((0.214)+x1240+(((-1.0)*x1238))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(cj4,-1);
if(!x1272.valid){
continue;
}
IkReal x1242=x1272.value;
IkReal x1243=cj4*cj4;
IkReal x1244=((569.0)*cj4);
IkReal x1245=(cj4*cj5);
IkReal x1246=((0.002)*x1242);
IkReal x1247=(cj4*pz);
IkReal x1248=((685.0)*sj4);
IkReal x1249=(r22*sj4);
IkReal x1250=((2055.0)*sj4);
IkReal x1251=((456.0)*x1249);
IkReal x1252=((6000.0)*x1247);
IkReal x1253=((152.0)*x1249);
IkReal x1254=((2000.0)*x1247);
IkReal x1255=(cj4*r21*sj5);
IkReal x1256=(r22*x1243);
IkReal x1257=(cj4*r20*sj5);
IkReal x1258=((2055.0)*x1256);
IkReal x1259=((465.0)*x1257);
IkReal x1260=((465.0)*r21*x1245);
IkReal x1261=((685.0)*x1256);
IkReal x1262=((155.0)*x1257);
IkReal x1263=((155.0)*r21*x1245);
IkReal x1264=(r20*x1245*x1250);
IkReal x1265=(x1250*x1255);
IkReal x1266=(r20*x1245*x1248);
IkReal x1267=(x1248*x1255);
IkReal x1268=(x1261+x1266+x1253);
IkReal x1269=(x1264+x1251+x1258);
IkReal x1270=(x1260+x1265+x1252+x1259);
IkReal x1271=(x1263+x1262+x1267+x1254);
op[0]=(x1246*((x1268+(((-1.0)*x1271))+(((-1.0)*x1244)))));
op[1]=-0.428;
op[2]=(x1246*((x1269+(((-1.0)*x1270))+(((-1.0)*x1244)))));
op[3]=-0.856;
op[4]=(x1246*((x1244+x1269+(((-1.0)*x1270)))));
op[5]=-0.428;
op[6]=(x1246*((x1244+x1268+(((-1.0)*x1271)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1273=((0.304)*sj0);
IkReal x1274=(cj5*r10);
IkReal x1275=(r11*sj5);
IkReal x1276=(cj0*px);
IkReal x1277=(cj5*r21);
IkReal x1278=(py*sj0);
IkReal x1279=(r20*sj5);
IkReal x1280=(cj4*r22);
IkReal x1281=((0.912)*sj0);
IkReal x1282=((0.912)*cj0);
IkReal x1283=(r01*sj5);
IkReal x1284=(cj5*r00);
IkReal x1285=((0.304)*cj0);
IkReal x1286=((4.0)*x1276);
IkReal x1287=((1.37)*x1277);
IkReal x1288=((1.37)*x1279);
IkReal x1289=((4.0)*x1278);
IkReal x1290=((0.31)*x1280);
IkReal x1291=((0.93)*x1280);
IkReal x1292=((4.11)*x1279);
IkReal x1293=((4.11)*x1277);
IkReal x1294=((12.0)*x1276);
IkReal x1295=((12.0)*x1278);
IkReal x1296=(r21*sj4*sj5);
IkReal x1297=(cj5*r20*sj4);
IkReal x1298=(x1283*x1285);
IkReal x1299=((0.31)*x1297);
IkReal x1300=((0.93)*x1297);
IkReal x1301=(x1282*x1283);
IkReal x1302=(x1275*x1281);
IkReal x1303=(x1273*x1275);
IkReal x1304=(x1273*x1274);
IkReal x1305=(x1284*x1285);
IkReal x1306=((0.31)*x1296);
IkReal x1307=((((0.93)*x1296))+((x1282*x1284))+((x1274*x1281)));
IkReal x1308=(x1304+x1305+x1306);
IkReal x1309=(x1303+x1287+x1286+x1289+x1288+x1298+x1299+x1290);
IkReal x1310=(x1300+x1301+x1302+x1292+x1293+x1291+x1294+x1295);
j1evalpoly[0]=((-0.214)+x1309+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.214)+x1310+(((-1.0)*x1307))))))+(((htj1*htj1)*(((-0.214)+x1310+(((-1.0)*x1307))))))+(((-1.0)*x1308))+(((-2.276)*htj1))+(((-4.552)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+x1309+(((-1.0)*x1308)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1311=(cj4*r22);
IkReal x1312=((1.0)*cj1);
IkReal x1313=(r20*sj1);
IkReal x1314=(cj5*sj4);
IkReal x1315=(cj5*r21);
IkReal x1316=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+((x1313*x1314))+(((-1.0)*sj1*x1316))+((cj1*x1315))+((sj1*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1311*x1312))+((sj5*x1313))+((cj1*x1316))+(((-1.0)*r20*x1312*x1314))+((sj1*x1315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+((x1313*x1314))+(((-1.0)*sj1*x1316))+((cj1*x1315))+((sj1*x1311))))+IKsqr(((((-1.0)*x1311*x1312))+((sj5*x1313))+((cj1*x1316))+(((-1.0)*r20*x1312*x1314))+((sj1*x1315))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+((x1313*x1314))+(((-1.0)*sj1*x1316))+((cj1*x1315))+((sj1*x1311))), ((((-1.0)*x1311*x1312))+((sj5*x1313))+((cj1*x1316))+(((-1.0)*r20*x1312*x1314))+((sj1*x1315))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1317=IKcos(j2);
IkReal x1318=IKsin(j2);
IkReal x1319=(r10*sj0);
IkReal x1320=((0.076)*cj5);
IkReal x1321=(cj0*r00);
IkReal x1322=((0.076)*sj5);
IkReal x1323=(r11*sj0);
IkReal x1324=((1.0)*sj5);
IkReal x1325=((1.0)*cj0);
IkReal x1326=(cj0*r01);
IkReal x1327=((1.0)*sj1);
IkReal x1328=((0.3425)*sj1);
IkReal x1329=(sj4*sj5);
IkReal x1330=((1.0)*sj0);
IkReal x1331=(cj1*x1317);
IkReal x1332=((1.0)*cj5*sj4);
IkReal x1333=(cj1*x1318);
IkReal x1334=(sj1*x1317);
IkReal x1335=(x1318*x1327);
evalcond[0]=(x1334+x1333+(((-1.0)*r20*x1324))+(((-1.0)*cj5*r21)));
evalcond[1]=(x1331+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x1324))+(((-1.0)*x1335)));
evalcond[2]=(x1331+((cj5*x1323))+((cj5*x1326))+((sj5*x1321))+((sj5*x1319))+(((-1.0)*x1335)));
CheckValue<IkReal> x1336=IKPowWithIntegerCheck(cj4,-1);
if(!x1336.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.3425)*x1331))+(((-0.2845)*cj1))+pz+(((0.0775)*x1334))+(((0.0775)*x1333))+(((-0.076)*r22*sj4*(x1336.value)))+(((-1.0)*x1318*x1328)));
evalcond[4]=((((-1.0)*x1319*x1332))+(((-1.0)*cj4*r12*x1330))+(((-1.0)*x1333))+((x1323*x1329))+((x1326*x1329))+(((-1.0)*cj4*r02*x1325))+(((-1.0)*x1321*x1332))+(((-1.0)*x1317*x1327)));
evalcond[5]=(((x1320*x1321))+(((-1.0)*x1322*x1326))+(((-1.0)*x1322*x1323))+(((0.2845)*sj1))+(((-1.0)*py*x1330))+((x1319*x1320))+(((-0.3425)*x1333))+(((0.0535)*cj1))+(((0.0775)*x1331))+(((-0.0775)*sj1*x1318))+(((-1.0)*px*x1325))+(((-1.0)*x1317*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1337=(((r21*sj4*sj5))+(((-1.0)*cj5*r20*sj4))+(((-1.0)*cj4*r22)));
j0eval[0]=x1337;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x1337);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1338=(sj4*sj5);
IkReal x1339=((1.0)*cj4);
IkReal x1340=((1.0)*cj5*sj4);
IkReal x1341=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x1341;
j0eval[1]=((IKabs((((r01*x1338))+(((-1.0)*r00*x1340))+(((-1.0)*r02*x1339)))))+(IKabs((((r11*x1338))+(((-1.0)*r12*x1339))+(((-1.0)*r10*x1340))))));
j0eval[2]=IKsign(x1341);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1342=(rxp2_2*sj4);
IkReal x1343=((0.076)*sj5);
IkReal x1344=((0.076)*cj5);
IkReal x1345=(r20*sj4);
IkReal x1346=(r21*sj4);
IkReal x1347=(cj4*rxp1_2*sj5);
IkReal x1348=(cj4*cj5*rxp0_2);
j0eval[0]=((((-13.1578947368421)*x1347))+(((-13.1578947368421)*x1342))+((cj5*x1346))+(((13.1578947368421)*x1348))+((sj5*x1345)));
j0eval[1]=((IKabs(((((-1.0)*r11*x1343))+(((-1.0)*py))+((r10*x1344)))))+(IKabs(((((-1.0)*r01*x1343))+(((-1.0)*px))+((r00*x1344))))));
j0eval[2]=IKsign((x1348+((x1344*x1346))+((x1343*x1345))+(((-1.0)*x1342))+(((-1.0)*x1347))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1349=((0.076)*sj5);
IkReal x1350=((0.076)*cj5);
CheckValue<IkReal> x1351=IKPowWithIntegerCheck(IKsign((((r21*sj4*x1350))+(((-1.0)*rxp2_2*sj4))+((cj4*cj5*rxp0_2))+((r20*sj4*x1349))+(((-1.0)*cj4*rxp1_2*sj5)))),-1);
if(!x1351.valid){
continue;
}
CheckValue<IkReal> x1352 = IKatan2WithCheck(IkReal((((r10*x1350))+(((-1.0)*r11*x1349))+(((-1.0)*py)))),IkReal(((((-1.0)*r01*x1349))+(((-1.0)*px))+((r00*x1350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1352.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1351.value)))+(x1352.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1353=IKcos(j0);
IkReal x1354=IKsin(j0);
IkReal x1355=((1.0)*r01);
IkReal x1356=(r11*sj5);
IkReal x1357=(cj4*r00);
IkReal x1358=((1.0)*r10);
IkReal x1359=(r01*sj5);
IkReal x1360=(cj5*x1354);
IkReal x1361=(sj4*x1353);
IkReal x1362=(sj4*x1354);
IkReal x1363=(cj5*x1353);
IkReal x1364=(cj4*x1354);
IkReal x1365=(cj4*x1353);
evalcond[0]=(((r10*sj5*x1353))+(((-1.0)*x1355*x1360))+(((-1.0)*r00*sj5*x1354))+((r11*x1363)));
evalcond[1]=((((0.076)*r10*x1363))+(((-1.0)*py*x1353))+(((-0.076)*x1353*x1356))+(((0.076)*x1354*x1359))+((px*x1354))+(((-0.076)*r00*x1360)));
evalcond[2]=(((x1356*x1364))+((r02*x1361))+((x1359*x1365))+(((-1.0)*x1357*x1363))+((r12*x1362))+(((-1.0)*cj4*x1358*x1360)));
evalcond[3]=(((x1356*x1361))+(((-1.0)*cj5*x1358*x1361))+((r02*x1364))+(((-1.0)*r12*x1365))+(((-1.0)*sj5*x1355*x1362))+((r00*sj4*x1360)));
evalcond[4]=((1.0)+((x1356*x1365))+((x1357*x1360))+(((-1.0)*sj5*x1355*x1364))+(((-1.0)*r02*x1362))+((r12*x1361))+(((-1.0)*cj4*x1358*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1366=((6000.0)*pz);
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(cj4,-1);
if(!x1394.valid){
continue;
}
IkReal x1367=x1394.value;
IkReal x1368=(r20*sj5);
IkReal x1369=((0.304)*sj0);
IkReal x1370=(r11*sj5);
IkReal x1371=(cj0*px);
IkReal x1372=(py*sj0);
IkReal x1373=(cj4*r22);
IkReal x1374=(cj5*r10);
IkReal x1375=(cj5*r21);
IkReal x1376=((0.912)*sj0);
IkReal x1377=((0.912)*cj0);
IkReal x1378=(r01*sj5);
IkReal x1379=(cj5*r00);
IkReal x1380=((0.304)*cj0);
IkReal x1381=((4.11)*x1368);
IkReal x1382=((4.11)*x1375);
IkReal x1383=(cj5*r20*sj4);
IkReal x1384=(r21*sj4*sj5);
IkReal x1385=(r22*sj4*x1367);
IkReal x1386=((2055.0)*x1384);
IkReal x1387=(x1377*x1379);
IkReal x1388=(x1374*x1376);
IkReal x1389=((0.93)*x1384);
IkReal x1390=(x1366+x1386);
IkReal x1391=((((465.0)*x1368))+(((456.0)*x1385))+(((465.0)*x1375))+(((2055.0)*x1373))+(((2055.0)*x1383)));
IkReal x1392=(x1388+x1389+x1387+x1381+x1382);
IkReal x1393=((((0.93)*x1383))+(((12.0)*x1372))+(((12.0)*x1371))+(((0.93)*x1373))+((x1377*x1378))+((x1370*x1376)));
j1eval[0]=((10.816)+(IKabs(((0.214)+x1392+(((-1.0)*x1393)))))+(((0.002)*(IKabs(((569.0)+x1390+(((-1.0)*x1391)))))))+(IKabs(((-0.214)+x1392+(((-1.0)*x1393)))))+(((0.002)*(IKabs(((-569.0)+x1390+(((-1.0)*x1391)))))))+(IKabs(((-0.214)+(((-0.31)*x1373))+(((1.37)*x1368))+(((0.31)*x1384))+(((-0.31)*x1383))+((x1369*x1374))+((x1379*x1380))+(((-4.0)*x1371))+(((-4.0)*x1372))+(((-1.0)*x1378*x1380))+(((-1.0)*x1369*x1370))+(((1.37)*x1375)))))+(((0.002)*(IKabs(((569.0)+(((685.0)*x1384))+(((-152.0)*x1385))+(((-155.0)*x1368))+(((-685.0)*x1373))+(((-685.0)*x1383))+(((-155.0)*x1375))+(((2000.0)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(cj4,-1);
if(!x1425.valid){
continue;
}
IkReal x1395=x1425.value;
IkReal x1396=((569.0)*cj4);
IkReal x1397=cj4*cj4;
IkReal x1398=(cj4*cj5);
IkReal x1399=(cj4*pz);
IkReal x1400=((685.0)*sj4);
IkReal x1401=(r22*sj4);
IkReal x1402=((0.002)*x1395);
IkReal x1403=((2055.0)*sj4);
IkReal x1404=((6000.0)*x1399);
IkReal x1405=((456.0)*x1401);
IkReal x1406=((2000.0)*x1399);
IkReal x1407=((152.0)*x1401);
IkReal x1408=(cj4*r21*sj5);
IkReal x1409=(r22*x1397);
IkReal x1410=(cj4*r20*sj5);
IkReal x1411=((2055.0)*x1409);
IkReal x1412=((465.0)*x1410);
IkReal x1413=((465.0)*r21*x1398);
IkReal x1414=((155.0)*x1410);
IkReal x1415=((155.0)*r21*x1398);
IkReal x1416=((685.0)*x1409);
IkReal x1417=(x1403*x1408);
IkReal x1418=(r20*x1398*x1403);
IkReal x1419=(x1400*x1408);
IkReal x1420=(r20*x1398*x1400);
IkReal x1421=(x1417+x1404);
IkReal x1422=(x1419+x1406);
IkReal x1423=(x1418+x1411+x1412+x1413+x1405);
IkReal x1424=(x1420+x1414+x1415+x1416+x1407);
op[0]=(x1402*((x1396+x1422+(((-1.0)*x1424)))));
op[1]=0.428;
op[2]=(x1402*((x1396+x1421+(((-1.0)*x1423)))));
op[3]=0.856;
op[4]=(x1402*((x1421+(((-1.0)*x1396))+(((-1.0)*x1423)))));
op[5]=0.428;
op[6]=(x1402*((x1422+(((-1.0)*x1396))+(((-1.0)*x1424)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1426=((0.93)*sj4);
IkReal x1427=(cj5*r20);
IkReal x1428=((0.304)*sj0);
IkReal x1429=(cj5*r10);
IkReal x1430=(r11*sj5);
IkReal x1431=(r21*sj5);
IkReal x1432=((0.31)*sj4);
IkReal x1433=(cj0*px);
IkReal x1434=(py*sj0);
IkReal x1435=(r20*sj5);
IkReal x1436=(cj5*r21);
IkReal x1437=(cj4*r22);
IkReal x1438=((0.912)*sj0);
IkReal x1439=((0.912)*cj0);
IkReal x1440=(r01*sj5);
IkReal x1441=(cj5*r00);
IkReal x1442=((0.304)*cj0);
IkReal x1443=((1.37)*x1436);
IkReal x1444=((1.37)*x1435);
IkReal x1445=((4.11)*x1435);
IkReal x1446=((4.11)*x1436);
IkReal x1447=(x1428*x1429);
IkReal x1448=(x1441*x1442);
IkReal x1449=(x1431*x1432);
IkReal x1450=(x1439*x1441);
IkReal x1451=(x1429*x1438);
IkReal x1452=(x1426*x1431);
IkReal x1453=(x1447+x1444+x1443+x1449+x1448);
IkReal x1454=(x1450+x1451+x1452+x1446+x1445);
IkReal x1455=((((0.93)*x1437))+((x1439*x1440))+((x1430*x1438))+((x1426*x1427))+(((12.0)*x1433))+(((12.0)*x1434)));
IkReal x1456=((((0.31)*x1437))+((x1428*x1430))+(((4.0)*x1433))+(((4.0)*x1434))+((x1440*x1442))+((x1427*x1432)));
j1evalpoly[0]=((0.214)+(((htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x1455))+x1454))))+(((-1.0)*x1456))+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x1456))+x1453))))+(((2.276)*htj1))+x1453+(((htj1*htj1)*(((0.214)+(((-1.0)*x1455))+x1454)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1457=((1.0)*cj1);
IkReal x1458=(cj4*r22);
IkReal x1459=(cj5*r21);
IkReal x1460=((1.0)*sj1);
IkReal x1461=(r20*sj5);
IkReal x1462=(r21*sj4*sj5);
IkReal x1463=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1457*x1459))+(((-1.0)*x1457*x1461))+(((-1.0)*x1460*x1462))+((sj1*x1458))+((sj1*x1463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1457*x1458))+(((-1.0)*x1459*x1460))+((cj1*x1462))+(((-1.0)*x1457*x1463))+(((-1.0)*x1460*x1461)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1457*x1459))+(((-1.0)*x1457*x1461))+(((-1.0)*x1460*x1462))+((sj1*x1458))+((sj1*x1463))))+IKsqr(((((-1.0)*x1457*x1458))+(((-1.0)*x1459*x1460))+((cj1*x1462))+(((-1.0)*x1457*x1463))+(((-1.0)*x1460*x1461))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1457*x1459))+(((-1.0)*x1457*x1461))+(((-1.0)*x1460*x1462))+((sj1*x1458))+((sj1*x1463))), ((((-1.0)*x1457*x1458))+(((-1.0)*x1459*x1460))+((cj1*x1462))+(((-1.0)*x1457*x1463))+(((-1.0)*x1460*x1461))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1464=IKcos(j2);
IkReal x1465=IKsin(j2);
IkReal x1466=(r10*sj0);
IkReal x1467=((0.076)*cj5);
IkReal x1468=(cj0*r00);
IkReal x1469=((0.076)*sj5);
IkReal x1470=(r11*sj0);
IkReal x1471=((1.0)*sj5);
IkReal x1472=((1.0)*cj0);
IkReal x1473=(cj0*r01);
IkReal x1474=((1.0)*sj1);
IkReal x1475=((0.3425)*sj1);
IkReal x1476=(sj4*sj5);
IkReal x1477=((1.0)*sj0);
IkReal x1478=(cj1*x1464);
IkReal x1479=((1.0)*cj5*sj4);
IkReal x1480=(cj1*x1465);
IkReal x1481=(sj1*x1465);
IkReal x1482=(x1464*x1474);
IkReal x1483=((1.0)*x1480);
IkReal x1484=(x1483+x1482);
evalcond[0]=((((-1.0)*r20*x1471))+(((-1.0)*x1484))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x1471))+(((-1.0)*x1465*x1474))+x1478);
evalcond[2]=(((cj5*x1470))+((cj5*x1473))+(((-1.0)*x1478))+x1481+((sj5*x1466))+((sj5*x1468)));
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(cj4,-1);
if(!x1485.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*x1465*x1475))+(((0.0775)*x1480))+pz+(((0.3425)*x1478))+(((0.0775)*sj1*x1464))+(((-0.076)*r22*sj4*(x1485.value))));
evalcond[4]=((((-1.0)*x1484))+(((-1.0)*cj4*r02*x1472))+((x1470*x1476))+((x1473*x1476))+(((-1.0)*x1468*x1479))+(((-1.0)*x1466*x1479))+(((-1.0)*cj4*r12*x1477)));
evalcond[5]=((((-0.3425)*x1480))+(((-1.0)*px*x1472))+(((0.2845)*sj1))+((x1466*x1467))+(((-1.0)*py*x1477))+(((0.0535)*cj1))+(((-1.0)*x1469*x1470))+(((-1.0)*x1469*x1473))+(((-0.0775)*x1481))+((x1467*x1468))+(((0.0775)*x1478))+(((-1.0)*x1464*x1475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1486=(sj4*sj5);
IkReal x1487=((1.0)*cj4);
IkReal x1488=((1.0)*cj5*sj4);
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1487))+((r11*x1486))+(((-1.0)*r10*x1488)))),IkReal((((r01*x1486))+(((-1.0)*r00*x1488))+(((-1.0)*r02*x1487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1490.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1489.value)+(((1.5707963267949)*(x1490.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1491=IKcos(j0);
IkReal x1492=IKsin(j0);
IkReal x1493=((1.0)*r01);
IkReal x1494=(r11*sj5);
IkReal x1495=(cj4*r00);
IkReal x1496=((1.0)*r10);
IkReal x1497=(r01*sj5);
IkReal x1498=(cj5*x1492);
IkReal x1499=(sj4*x1491);
IkReal x1500=(sj4*x1492);
IkReal x1501=(cj5*x1491);
IkReal x1502=(cj4*x1492);
IkReal x1503=(cj4*x1491);
evalcond[0]=(((r11*x1501))+(((-1.0)*x1493*x1498))+(((-1.0)*r00*sj5*x1492))+((r10*sj5*x1491)));
evalcond[1]=((((0.076)*r10*x1501))+(((-0.076)*r00*x1498))+(((-0.076)*x1491*x1494))+((px*x1492))+(((-1.0)*py*x1491))+(((0.076)*x1492*x1497)));
evalcond[2]=(((x1494*x1502))+((r12*x1500))+((x1497*x1503))+(((-1.0)*cj4*x1496*x1498))+(((-1.0)*x1495*x1501))+((r02*x1499)));
evalcond[3]=(((r00*sj4*x1498))+((x1494*x1499))+(((-1.0)*sj5*x1493*x1500))+((r02*x1502))+(((-1.0)*r12*x1503))+(((-1.0)*cj5*x1496*x1499)));
evalcond[4]=((1.0)+((x1494*x1503))+((x1495*x1498))+((r12*x1499))+(((-1.0)*cj4*x1496*x1501))+(((-1.0)*sj5*x1493*x1502))+(((-1.0)*r02*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1504=((6000.0)*pz);
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(cj4,-1);
if(!x1532.valid){
continue;
}
IkReal x1505=x1532.value;
IkReal x1506=(r20*sj5);
IkReal x1507=((0.304)*sj0);
IkReal x1508=(r11*sj5);
IkReal x1509=(cj0*px);
IkReal x1510=(py*sj0);
IkReal x1511=(cj4*r22);
IkReal x1512=(cj5*r10);
IkReal x1513=(cj5*r21);
IkReal x1514=((0.912)*sj0);
IkReal x1515=((0.912)*cj0);
IkReal x1516=(r01*sj5);
IkReal x1517=(cj5*r00);
IkReal x1518=((0.304)*cj0);
IkReal x1519=((4.11)*x1506);
IkReal x1520=((4.11)*x1513);
IkReal x1521=(cj5*r20*sj4);
IkReal x1522=(r21*sj4*sj5);
IkReal x1523=(r22*sj4*x1505);
IkReal x1524=((2055.0)*x1522);
IkReal x1525=(x1515*x1517);
IkReal x1526=(x1512*x1514);
IkReal x1527=((0.93)*x1522);
IkReal x1528=(x1524+x1504);
IkReal x1529=((((456.0)*x1523))+(((2055.0)*x1511))+(((465.0)*x1513))+(((465.0)*x1506))+(((2055.0)*x1521)));
IkReal x1530=(x1525+x1526+x1527+x1520+x1519);
IkReal x1531=(((x1508*x1514))+((x1515*x1516))+(((0.93)*x1521))+(((0.93)*x1511))+(((12.0)*x1510))+(((12.0)*x1509)));
j1eval[0]=((10.816)+(((0.002)*(IKabs(((569.0)+(((-1.0)*x1529))+x1528)))))+(IKabs(((-0.214)+(((1.37)*x1513))+(((1.37)*x1506))+(((-1.0)*x1516*x1518))+(((-1.0)*x1507*x1508))+(((-4.0)*x1509))+(((-4.0)*x1510))+((x1507*x1512))+(((-0.31)*x1521))+(((-0.31)*x1511))+((x1517*x1518))+(((0.31)*x1522)))))+(IKabs(((0.214)+(((-1.0)*x1531))+x1530)))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x1529))+x1528)))))+(((0.002)*(IKabs(((569.0)+(((-155.0)*x1506))+(((-152.0)*x1523))+(((-155.0)*x1513))+(((-685.0)*x1511))+(((-685.0)*x1521))+(((685.0)*x1522))+(((2000.0)*pz)))))))+(IKabs(((-0.214)+(((-1.0)*x1531))+x1530))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(cj4,-1);
if(!x1563.valid){
continue;
}
IkReal x1533=x1563.value;
IkReal x1534=((569.0)*cj4);
IkReal x1535=cj4*cj4;
IkReal x1536=(cj4*cj5);
IkReal x1537=(cj4*pz);
IkReal x1538=((685.0)*sj4);
IkReal x1539=(r22*sj4);
IkReal x1540=((0.002)*x1533);
IkReal x1541=((2055.0)*sj4);
IkReal x1542=((6000.0)*x1537);
IkReal x1543=((456.0)*x1539);
IkReal x1544=((2000.0)*x1537);
IkReal x1545=((152.0)*x1539);
IkReal x1546=(cj4*r21*sj5);
IkReal x1547=(r22*x1535);
IkReal x1548=(cj4*r20*sj5);
IkReal x1549=((2055.0)*x1547);
IkReal x1550=((465.0)*x1548);
IkReal x1551=((465.0)*r21*x1536);
IkReal x1552=((155.0)*x1548);
IkReal x1553=((155.0)*r21*x1536);
IkReal x1554=((685.0)*x1547);
IkReal x1555=(x1541*x1546);
IkReal x1556=(r20*x1536*x1541);
IkReal x1557=(x1538*x1546);
IkReal x1558=(r20*x1536*x1538);
IkReal x1559=(x1542+x1555);
IkReal x1560=(x1544+x1557);
IkReal x1561=(x1543+x1549+x1551+x1550+x1556);
IkReal x1562=(x1545+x1553+x1552+x1554+x1558);
op[0]=(x1540*((x1560+x1534+(((-1.0)*x1562)))));
op[1]=0.428;
op[2]=(x1540*((x1559+x1534+(((-1.0)*x1561)))));
op[3]=0.856;
op[4]=(x1540*(((((-1.0)*x1534))+x1559+(((-1.0)*x1561)))));
op[5]=0.428;
op[6]=(x1540*(((((-1.0)*x1534))+x1560+(((-1.0)*x1562)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1564=((0.93)*sj4);
IkReal x1565=(cj5*r20);
IkReal x1566=((0.304)*sj0);
IkReal x1567=(cj5*r10);
IkReal x1568=(r11*sj5);
IkReal x1569=(r21*sj5);
IkReal x1570=((0.31)*sj4);
IkReal x1571=(cj0*px);
IkReal x1572=(py*sj0);
IkReal x1573=(r20*sj5);
IkReal x1574=(cj5*r21);
IkReal x1575=(cj4*r22);
IkReal x1576=((0.912)*sj0);
IkReal x1577=((0.912)*cj0);
IkReal x1578=(r01*sj5);
IkReal x1579=(cj5*r00);
IkReal x1580=((0.304)*cj0);
IkReal x1581=((1.37)*x1574);
IkReal x1582=((1.37)*x1573);
IkReal x1583=((4.11)*x1573);
IkReal x1584=((4.11)*x1574);
IkReal x1585=(x1566*x1567);
IkReal x1586=(x1579*x1580);
IkReal x1587=(x1569*x1570);
IkReal x1588=(x1577*x1579);
IkReal x1589=(x1567*x1576);
IkReal x1590=(x1564*x1569);
IkReal x1591=(x1582+x1581+x1586+x1587+x1585);
IkReal x1592=(x1588+x1589+x1583+x1584+x1590);
IkReal x1593=((((0.93)*x1575))+(((12.0)*x1572))+(((12.0)*x1571))+((x1568*x1576))+((x1577*x1578))+((x1564*x1565)));
IkReal x1594=(((x1566*x1568))+(((0.31)*x1575))+(((4.0)*x1571))+(((4.0)*x1572))+((x1578*x1580))+((x1565*x1570)));
j1evalpoly[0]=((0.214)+(((-1.0)*x1594))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x1594))+x1591))))+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((0.214)+(((-1.0)*x1593))+x1592))))+x1591+(((2.276)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x1593))+x1592)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1595=((1.0)*cj1);
IkReal x1596=(cj4*r22);
IkReal x1597=(cj5*r21);
IkReal x1598=((1.0)*sj1);
IkReal x1599=(r20*sj5);
IkReal x1600=(r21*sj4*sj5);
IkReal x1601=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1595*x1599))+(((-1.0)*x1595*x1597))+((sj1*x1601))+((sj1*x1596))+(((-1.0)*x1598*x1600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1600))+(((-1.0)*x1595*x1596))+(((-1.0)*x1595*x1601))+(((-1.0)*x1598*x1599))+(((-1.0)*x1597*x1598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1595*x1599))+(((-1.0)*x1595*x1597))+((sj1*x1601))+((sj1*x1596))+(((-1.0)*x1598*x1600))))+IKsqr((((cj1*x1600))+(((-1.0)*x1595*x1596))+(((-1.0)*x1595*x1601))+(((-1.0)*x1598*x1599))+(((-1.0)*x1597*x1598))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1595*x1599))+(((-1.0)*x1595*x1597))+((sj1*x1601))+((sj1*x1596))+(((-1.0)*x1598*x1600))), (((cj1*x1600))+(((-1.0)*x1595*x1596))+(((-1.0)*x1595*x1601))+(((-1.0)*x1598*x1599))+(((-1.0)*x1597*x1598))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1602=IKcos(j2);
IkReal x1603=IKsin(j2);
IkReal x1604=(r10*sj0);
IkReal x1605=((0.076)*cj5);
IkReal x1606=(cj0*r00);
IkReal x1607=((0.076)*sj5);
IkReal x1608=(r11*sj0);
IkReal x1609=((1.0)*sj5);
IkReal x1610=((1.0)*cj0);
IkReal x1611=(cj0*r01);
IkReal x1612=((1.0)*sj1);
IkReal x1613=((0.3425)*sj1);
IkReal x1614=(sj4*sj5);
IkReal x1615=((1.0)*sj0);
IkReal x1616=(cj1*x1602);
IkReal x1617=((1.0)*cj5*sj4);
IkReal x1618=(cj1*x1603);
IkReal x1619=(sj1*x1603);
IkReal x1620=(x1602*x1612);
IkReal x1621=((1.0)*x1618);
IkReal x1622=(x1621+x1620);
evalcond[0]=((((-1.0)*r20*x1609))+(((-1.0)*x1622))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+x1616+((cj5*r20*sj4))+(((-1.0)*x1603*x1612))+(((-1.0)*r21*sj4*x1609)));
evalcond[2]=((((-1.0)*x1616))+((cj5*x1608))+x1619+((sj5*x1604))+((sj5*x1606))+((cj5*x1611)));
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(cj4,-1);
if(!x1623.valid){
continue;
}
evalcond[3]=((((0.3425)*x1616))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*sj1*x1602))+pz+(((0.0775)*x1618))+(((-1.0)*x1603*x1613))+(((-0.076)*r22*sj4*(x1623.value))));
evalcond[4]=((((-1.0)*x1606*x1617))+(((-1.0)*cj4*r12*x1615))+(((-1.0)*x1622))+((x1608*x1614))+(((-1.0)*cj4*r02*x1610))+((x1611*x1614))+(((-1.0)*x1604*x1617)));
evalcond[5]=((((-1.0)*x1607*x1608))+(((0.2845)*sj1))+(((-1.0)*py*x1615))+(((-0.0775)*x1619))+(((0.0535)*cj1))+(((-1.0)*x1602*x1613))+(((-1.0)*px*x1610))+(((0.0775)*x1616))+((x1605*x1606))+(((-1.0)*x1607*x1611))+((x1604*x1605))+(((-0.3425)*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1624=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*cj5*r20*sj4))+(((-1.0)*cj4*r22)))),-1);
if(!x1624.valid){
continue;
}
CheckValue<IkReal> x1625 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1625.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1624.value)))+(x1625.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1626=IKcos(j0);
IkReal x1627=IKsin(j0);
IkReal x1628=((1.0)*r01);
IkReal x1629=(r11*sj5);
IkReal x1630=(cj4*r00);
IkReal x1631=((1.0)*r10);
IkReal x1632=(r01*sj5);
IkReal x1633=(cj5*x1627);
IkReal x1634=(sj4*x1626);
IkReal x1635=(sj4*x1627);
IkReal x1636=(cj5*x1626);
IkReal x1637=(cj4*x1627);
IkReal x1638=(cj4*x1626);
evalcond[0]=(((r11*x1636))+((r10*sj5*x1626))+(((-1.0)*x1628*x1633))+(((-1.0)*r00*sj5*x1627)));
evalcond[1]=((((-0.076)*r00*x1633))+(((0.076)*r10*x1636))+((px*x1627))+(((-1.0)*py*x1626))+(((0.076)*x1627*x1632))+(((-0.076)*x1626*x1629)));
evalcond[2]=(((r02*x1634))+(((-1.0)*cj4*x1631*x1633))+((r12*x1635))+((x1629*x1637))+(((-1.0)*x1630*x1636))+((x1632*x1638)));
evalcond[3]=(((r02*x1637))+((r00*sj4*x1633))+((x1629*x1634))+(((-1.0)*sj5*x1628*x1635))+(((-1.0)*cj5*x1631*x1634))+(((-1.0)*r12*x1638)));
evalcond[4]=((1.0)+(((-1.0)*r02*x1635))+(((-1.0)*cj4*x1631*x1636))+((r12*x1634))+((x1629*x1638))+(((-1.0)*sj5*x1628*x1637))+((x1630*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1639=((6000.0)*pz);
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(cj4,-1);
if(!x1667.valid){
continue;
}
IkReal x1640=x1667.value;
IkReal x1641=(r20*sj5);
IkReal x1642=((0.304)*sj0);
IkReal x1643=(r11*sj5);
IkReal x1644=(cj0*px);
IkReal x1645=(py*sj0);
IkReal x1646=(cj4*r22);
IkReal x1647=(cj5*r10);
IkReal x1648=(cj5*r21);
IkReal x1649=((0.912)*sj0);
IkReal x1650=((0.912)*cj0);
IkReal x1651=(r01*sj5);
IkReal x1652=(cj5*r00);
IkReal x1653=((0.304)*cj0);
IkReal x1654=((4.11)*x1641);
IkReal x1655=((4.11)*x1648);
IkReal x1656=(cj5*r20*sj4);
IkReal x1657=(r21*sj4*sj5);
IkReal x1658=(r22*sj4*x1640);
IkReal x1659=((2055.0)*x1657);
IkReal x1660=(x1650*x1652);
IkReal x1661=(x1647*x1649);
IkReal x1662=((0.93)*x1657);
IkReal x1663=(x1659+x1639);
IkReal x1664=((((465.0)*x1648))+(((465.0)*x1641))+(((456.0)*x1658))+(((2055.0)*x1646))+(((2055.0)*x1656)));
IkReal x1665=(x1662+x1661+x1660+x1654+x1655);
IkReal x1666=(((x1650*x1651))+(((0.93)*x1646))+((x1643*x1649))+(((0.93)*x1656))+(((12.0)*x1644))+(((12.0)*x1645)));
j1eval[0]=((10.816)+(((0.002)*(IKabs(((-569.0)+x1663+(((-1.0)*x1664)))))))+(IKabs(((0.214)+x1665+(((-1.0)*x1666)))))+(((0.002)*(IKabs(((569.0)+(((-685.0)*x1646))+(((-685.0)*x1656))+(((-152.0)*x1658))+(((-155.0)*x1641))+(((-155.0)*x1648))+(((685.0)*x1657))+(((2000.0)*pz)))))))+(IKabs(((-0.214)+(((-0.31)*x1646))+(((0.31)*x1657))+(((-1.0)*x1642*x1643))+(((1.37)*x1641))+(((1.37)*x1648))+((x1642*x1647))+(((-4.0)*x1644))+(((-4.0)*x1645))+(((-0.31)*x1656))+(((-1.0)*x1651*x1653))+((x1652*x1653)))))+(((0.002)*(IKabs(((569.0)+x1663+(((-1.0)*x1664)))))))+(IKabs(((-0.214)+x1665+(((-1.0)*x1666))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(cj4,-1);
if(!x1698.valid){
continue;
}
IkReal x1668=x1698.value;
IkReal x1669=((569.0)*cj4);
IkReal x1670=cj4*cj4;
IkReal x1671=(cj4*cj5);
IkReal x1672=(cj4*pz);
IkReal x1673=((685.0)*sj4);
IkReal x1674=(r22*sj4);
IkReal x1675=((0.002)*x1668);
IkReal x1676=((2055.0)*sj4);
IkReal x1677=((6000.0)*x1672);
IkReal x1678=((456.0)*x1674);
IkReal x1679=((2000.0)*x1672);
IkReal x1680=((152.0)*x1674);
IkReal x1681=(cj4*r21*sj5);
IkReal x1682=(r22*x1670);
IkReal x1683=(cj4*r20*sj5);
IkReal x1684=((2055.0)*x1682);
IkReal x1685=((465.0)*x1683);
IkReal x1686=((465.0)*r21*x1671);
IkReal x1687=((155.0)*x1683);
IkReal x1688=((155.0)*r21*x1671);
IkReal x1689=((685.0)*x1682);
IkReal x1690=(x1676*x1681);
IkReal x1691=(r20*x1671*x1676);
IkReal x1692=(x1673*x1681);
IkReal x1693=(r20*x1671*x1673);
IkReal x1694=(x1677+x1690);
IkReal x1695=(x1679+x1692);
IkReal x1696=(x1678+x1691+x1685+x1684+x1686);
IkReal x1697=(x1693+x1680+x1687+x1689+x1688);
op[0]=(x1675*(((((-1.0)*x1697))+x1669+x1695)));
op[1]=0.428;
op[2]=(x1675*(((((-1.0)*x1696))+x1669+x1694)));
op[3]=0.856;
op[4]=(x1675*(((((-1.0)*x1696))+x1694+(((-1.0)*x1669)))));
op[5]=0.428;
op[6]=(x1675*(((((-1.0)*x1697))+x1695+(((-1.0)*x1669)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1699=((0.93)*sj4);
IkReal x1700=(cj5*r20);
IkReal x1701=((0.304)*sj0);
IkReal x1702=(cj5*r10);
IkReal x1703=(r11*sj5);
IkReal x1704=(r21*sj5);
IkReal x1705=((0.31)*sj4);
IkReal x1706=(cj0*px);
IkReal x1707=(py*sj0);
IkReal x1708=(r20*sj5);
IkReal x1709=(cj5*r21);
IkReal x1710=(cj4*r22);
IkReal x1711=((0.912)*sj0);
IkReal x1712=((0.912)*cj0);
IkReal x1713=(r01*sj5);
IkReal x1714=(cj5*r00);
IkReal x1715=((0.304)*cj0);
IkReal x1716=((1.37)*x1709);
IkReal x1717=((1.37)*x1708);
IkReal x1718=((4.11)*x1708);
IkReal x1719=((4.11)*x1709);
IkReal x1720=(x1701*x1702);
IkReal x1721=(x1714*x1715);
IkReal x1722=(x1704*x1705);
IkReal x1723=(x1712*x1714);
IkReal x1724=(x1702*x1711);
IkReal x1725=(x1699*x1704);
IkReal x1726=(x1722+x1720+x1721+x1717+x1716);
IkReal x1727=(x1724+x1725+x1723+x1719+x1718);
IkReal x1728=(((x1703*x1711))+(((0.93)*x1710))+((x1712*x1713))+(((12.0)*x1707))+(((12.0)*x1706))+((x1699*x1700)));
IkReal x1729=(((x1713*x1715))+((x1700*x1705))+((x1701*x1703))+(((4.0)*x1706))+(((4.0)*x1707))+(((0.31)*x1710)));
j1evalpoly[0]=((0.214)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+x1726+(((-1.0)*x1729))))))+x1726+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((0.214)+x1727+(((-1.0)*x1728))))))+(((htj1*htj1*htj1*htj1)*(((-0.214)+x1727+(((-1.0)*x1728))))))+(((2.276)*htj1))+(((-1.0)*x1729)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1730=((1.0)*cj1);
IkReal x1731=(cj4*r22);
IkReal x1732=(cj5*r21);
IkReal x1733=((1.0)*sj1);
IkReal x1734=(r20*sj5);
IkReal x1735=(r21*sj4*sj5);
IkReal x1736=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1733*x1735))+((sj1*x1736))+((sj1*x1731))+(((-1.0)*x1730*x1734))+(((-1.0)*x1730*x1732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1733*x1734))+(((-1.0)*x1730*x1731))+(((-1.0)*x1730*x1736))+((cj1*x1735))+(((-1.0)*x1732*x1733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1733*x1735))+((sj1*x1736))+((sj1*x1731))+(((-1.0)*x1730*x1734))+(((-1.0)*x1730*x1732))))+IKsqr(((((-1.0)*x1733*x1734))+(((-1.0)*x1730*x1731))+(((-1.0)*x1730*x1736))+((cj1*x1735))+(((-1.0)*x1732*x1733))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1733*x1735))+((sj1*x1736))+((sj1*x1731))+(((-1.0)*x1730*x1734))+(((-1.0)*x1730*x1732))), ((((-1.0)*x1733*x1734))+(((-1.0)*x1730*x1731))+(((-1.0)*x1730*x1736))+((cj1*x1735))+(((-1.0)*x1732*x1733))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1737=IKcos(j2);
IkReal x1738=IKsin(j2);
IkReal x1739=(r10*sj0);
IkReal x1740=((0.076)*cj5);
IkReal x1741=(cj0*r00);
IkReal x1742=((0.076)*sj5);
IkReal x1743=(r11*sj0);
IkReal x1744=((1.0)*sj5);
IkReal x1745=((1.0)*cj0);
IkReal x1746=(cj0*r01);
IkReal x1747=((1.0)*sj1);
IkReal x1748=((0.3425)*sj1);
IkReal x1749=(sj4*sj5);
IkReal x1750=((1.0)*sj0);
IkReal x1751=(cj1*x1737);
IkReal x1752=((1.0)*cj5*sj4);
IkReal x1753=(cj1*x1738);
IkReal x1754=(sj1*x1738);
IkReal x1755=(x1737*x1747);
IkReal x1756=((1.0)*x1753);
IkReal x1757=(x1756+x1755);
evalcond[0]=((((-1.0)*x1757))+(((-1.0)*r20*x1744))+(((-1.0)*cj5*r21)));
evalcond[1]=((((-1.0)*r21*sj4*x1744))+((cj4*r22))+x1751+(((-1.0)*x1738*x1747))+((cj5*r20*sj4)));
evalcond[2]=(((sj5*x1739))+x1754+(((-1.0)*x1751))+((sj5*x1741))+((cj5*x1743))+((cj5*x1746)));
CheckValue<IkReal> x1758=IKPowWithIntegerCheck(cj4,-1);
if(!x1758.valid){
continue;
}
evalcond[3]=((((0.3425)*x1751))+(((-1.0)*x1738*x1748))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1753))+(((0.0775)*sj1*x1737))+pz+(((-0.076)*r22*sj4*(x1758.value))));
evalcond[4]=((((-1.0)*cj4*r12*x1750))+((x1746*x1749))+(((-1.0)*x1739*x1752))+(((-1.0)*x1757))+((x1743*x1749))+(((-1.0)*cj4*r02*x1745))+(((-1.0)*x1741*x1752)));
evalcond[5]=((((-0.0775)*x1754))+((x1739*x1740))+(((0.2845)*sj1))+(((0.0775)*x1751))+(((-0.3425)*x1753))+(((-1.0)*x1737*x1748))+(((0.0535)*cj1))+(((-1.0)*py*x1750))+((x1740*x1741))+(((-1.0)*x1742*x1746))+(((-1.0)*x1742*x1743))+(((-1.0)*px*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1759=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x1759) < -0.00001)
continue;
IkReal x1760=IKabs(IKsqrt(x1759));
IkReal x1766 = x1759;
if(IKabs(x1766)==0){
continue;
}
IkReal x1761=pow(x1766,-0.5);
IkReal x1762=((13.1578947368421)*x1761);
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(x1760,-1);
if(!x1767.valid){
continue;
}
IkReal x1763=x1767.value;
IkReal x1764=(r22*x1763);
if((((1.0)+(((-1.0)*(x1764*x1764))))) < -0.00001)
continue;
IkReal x1765=IKsqrt(((1.0)+(((-1.0)*(x1764*x1764)))));
CheckValue<IkReal> x1768 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1768.valid){
continue;
}
if( (x1764) < -1-IKFAST_SINCOS_THRESH || (x1764) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x1768.value)))+(IKasin(x1764)));
IkReal gconst1=(((rxp1_2*x1762*x1765))+(((-1.0)*rxp0_2*x1762*x1764)));
IkReal gconst2=((((-1.0)*rxp1_2*x1762*x1764))+(((-1.0)*rxp0_2*x1762*x1765)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x1769=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x1769.valid){
continue;
}
if( ((r22*(x1769.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x1769.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1770 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1770.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x1769.value))))))+(x1770.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1771=((0.076)*cj3);
IkReal x1772=((1.0)*cj3);
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign((((r22*(((((-0.076)*(gconst2*gconst2)))+(((-0.076)*(gconst1*gconst1)))))))+(((-1.0)*gconst1*rxp0_2))+(((-1.0)*gconst2*rxp1_2)))),-1);
if(!x1773.valid){
continue;
}
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*r11*x1771))+(((-1.0)*py*x1772))+((gconst2*r10*x1771)))),IkReal(((((-1.0)*gconst1*r01*x1771))+(((-1.0)*px*x1772))+((gconst2*r00*x1771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1773.value)))+(x1774.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1775=IKcos(j0);
IkReal x1776=IKsin(j0);
IkReal x1777=(cj4*gconst1);
IkReal x1778=((1.0)*sj4);
IkReal x1779=(gconst2*r00);
IkReal x1780=((1.0)*cj4);
IkReal x1781=(gconst1*r01);
IkReal x1782=(r11*x1775);
IkReal x1783=(r02*x1776);
IkReal x1784=((0.076)*x1776);
IkReal x1785=(r12*x1775);
IkReal x1786=((1.0)*x1776);
IkReal x1787=(gconst2*r10*x1775);
evalcond[0]=(cj3+((gconst1*r10*x1775))+((gconst2*x1782))+(((-1.0)*gconst2*r01*x1786))+(((-1.0)*gconst1*r00*x1786)));
evalcond[1]=((((-1.0)*py*x1775))+((px*x1776))+(((0.076)*x1787))+(((-1.0)*x1779*x1784))+((x1781*x1784))+(((-0.076)*gconst1*x1782)));
evalcond[2]=((((-1.0)*x1776*x1778*x1781))+((sj4*x1776*x1779))+((gconst1*sj4*x1782))+(((-1.0)*x1778*x1787))+(((-1.0)*x1780*x1785))+((cj4*x1783)));
evalcond[3]=((((-1.0)*sj3))+((cj4*x1776*x1779))+((x1777*x1782))+((sj4*x1785))+(((-1.0)*r01*x1777*x1786))+(((-1.0)*x1778*x1783))+(((-1.0)*x1780*x1787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1788=x1759;
if((x1788) < -0.00001)
continue;
IkReal x1789=IKabs(IKsqrt(x1788));
IkReal x1796 = x1788;
if(IKabs(x1796)==0){
continue;
}
IkReal x1790=pow(x1796,-0.5);
IkReal x1791=((13.1578947368421)*x1790);
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(x1789,-1);
if(!x1797.valid){
continue;
}
IkReal x1792=x1797.value;
IkReal x1793=(r22*x1792);
if((((1.0)+(((-1.0)*(x1793*x1793))))) < -0.00001)
continue;
IkReal x1794=IKsqrt(((1.0)+(((-1.0)*(x1793*x1793)))));
if( (x1793) < -1-IKFAST_SINCOS_THRESH || (x1793) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1798 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1798.valid){
continue;
}
IkReal x1795=((IKasin(x1793))+(((-1.0)*(x1798.value))));
sj5=gconst1;
cj5=gconst2;
j5=x1795;
IkReal gconst0=x1795;
IkReal gconst1=(((rxp1_2*x1791*x1794))+(((-1.0)*rxp0_2*x1791*x1793)));
IkReal gconst2=((((-1.0)*rxp1_2*x1791*x1793))+(((-1.0)*rxp0_2*x1791*x1794)));
IkReal x1799=((1.138)*cj3);
IkReal x1800=((12.0)*pz);
IkReal x1801=(gconst2*sj4);
IkReal x1802=((0.31)*sj0);
IkReal x1803=((0.93)*sj4);
IkReal x1804=((0.93)*cj4);
IkReal x1805=((1.37)*r20);
IkReal x1806=(gconst2*r20);
IkReal x1807=((4.0)*pz);
IkReal x1808=((0.31)*cj4);
IkReal x1809=(gconst1*r21);
IkReal x1810=((0.912)*cj3);
IkReal x1811=((4.11)*r20);
IkReal x1812=(gconst1*r11);
IkReal x1813=(cj0*r02);
IkReal x1814=(cj0*r00);
IkReal x1815=((0.31)*sj4);
IkReal x1816=((0.304)*cj3);
IkReal x1817=(cj3*x1800);
IkReal x1818=(r22*x1803);
IkReal x1819=((0.912)*x1809);
IkReal x1820=(cj0*gconst1*r01);
IkReal x1821=((4.11)*cj4*r22);
IkReal x1822=((1.37)*cj4*r22);
IkReal x1823=(x1804*x1806);
IkReal x1824=(x1806*x1810);
IkReal x1825=(cj3*x1821);
IkReal x1826=(x1804*x1809);
IkReal x1827=(x1809*x1810);
IkReal x1828=((4.11)*sj4*x1809);
IkReal x1829=(cj3*sj4*x1809);
IkReal x1830=(cj3*x1801*x1811);
IkReal x1831=(cj3*x1828);
IkReal x1832=(sj0*x1803*x1812);
IkReal x1833=(x1803*x1820);
IkReal x1834=(x1825+x1824+x1823+x1830);
IkReal x1835=(x1828+x1819+x1800+x1832+x1833);
IkReal x1836=(x1827+x1826+x1817+x1818+x1831);
IkReal x1837=((((0.912)*x1806))+((x1804*x1813))+(((0.93)*r10*sj0*x1801))+((r12*sj0*x1804))+x1821+((x1801*x1811))+(((0.93)*x1801*x1814)));
j1eval[0]=((1.712)+(IKabs(((((-1.0)*x1799))+(((-1.0)*x1836))+x1834)))+(IKabs(((1.138)+(((-1.0)*x1822))+(((1.37)*sj4*x1809))+(((-1.0)*cj4*r12*x1802))+(((-1.0)*x1808*x1813))+(((-0.304)*x1806))+(((-1.0)*x1801*x1805))+((sj4*x1802*x1812))+(((-1.0)*r10*x1801*x1802))+x1807+(((0.304)*x1809))+(((-0.31)*x1801*x1814))+((x1815*x1820)))))+(IKabs((x1799+(((-1.0)*x1836))+x1834)))+(IKabs(((((-1.0)*x1799))+(((-1.0)*cj3*x1807))+(((-1.37)*x1829))+((x1806*x1808))+(((-1.0)*x1809*x1816))+((cj3*x1822))+(((-1.0)*x1808*x1809))+((cj3*x1801*x1805))+((x1806*x1816))+(((-1.0)*r22*x1815)))))+(IKabs(((1.138)+(((-1.0)*x1837))+x1835)))+(IKabs(((-1.138)+(((-1.0)*x1837))+x1835)))+(((1.712)*(IKabs(cj3)))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1838=((1.138)*cj3);
IkReal x1839=(r22*sj4);
IkReal x1840=(gconst2*r20);
IkReal x1841=((0.31)*cj4);
IkReal x1842=((0.304)*cj3);
IkReal x1843=(gconst1*r21);
IkReal x1844=((0.912)*cj3);
IkReal x1845=(cj3*sj4);
IkReal x1846=((0.93)*cj4);
IkReal x1847=(cj3*pz);
IkReal x1848=((12.0)*x1847);
IkReal x1849=((0.93)*x1839);
IkReal x1850=((-0.428)*cj3);
IkReal x1851=((0.31)*x1839);
IkReal x1852=((4.0)*x1847);
IkReal x1853=(cj3*cj4*r22);
IkReal x1854=(x1840*x1846);
IkReal x1855=(x1840*x1844);
IkReal x1856=((4.11)*x1853);
IkReal x1857=(x1843*x1846);
IkReal x1858=(x1843*x1844);
IkReal x1859=((1.37)*x1853);
IkReal x1860=(x1840*x1841);
IkReal x1861=(x1840*x1842);
IkReal x1862=(x1841*x1843);
IkReal x1863=(x1842*x1843);
IkReal x1864=(x1843*x1845);
IkReal x1865=((4.11)*x1840*x1845);
IkReal x1866=((4.11)*x1864);
IkReal x1867=((1.37)*x1840*x1845);
IkReal x1868=((1.37)*x1864);
IkReal x1869=(x1861+x1860+x1867+x1859);
IkReal x1870=(x1865+x1854+x1855+x1856);
IkReal x1871=(x1866+x1858+x1857+x1849+x1848);
IkReal x1872=(x1863+x1862+x1868+x1851+x1852);
op[0]=((((-1.0)*x1872))+(((-1.0)*x1838))+x1869);
op[1]=x1850;
op[2]=((((-1.0)*x1871))+(((-1.0)*x1838))+x1870);
op[3]=((-0.856)*cj3);
op[4]=((((-1.0)*x1871))+x1870+x1838);
op[5]=x1850;
op[6]=((((-1.0)*x1872))+x1869+x1838);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1873=((4.0)*pz);
IkReal x1874=((12.0)*pz);
IkReal x1875=(gconst2*sj4);
IkReal x1876=((0.31)*sj0);
IkReal x1877=((0.93)*cj4);
IkReal x1878=(cj0*r02);
IkReal x1879=(gconst1*r21);
IkReal x1880=(gconst1*sj4);
IkReal x1881=((0.93)*cj0);
IkReal x1882=((0.93)*sj0);
IkReal x1883=(cj4*r22);
IkReal x1884=((0.31)*cj0);
IkReal x1885=(gconst2*r20);
IkReal x1886=((0.304)*x1879);
IkReal x1887=((0.912)*x1879);
IkReal x1888=((4.11)*sj4*x1879);
IkReal x1889=((1.37)*sj4*x1879);
IkReal x1890=(r11*x1876*x1880);
IkReal x1891=(r11*x1880*x1882);
IkReal x1892=(r01*x1880*x1881);
IkReal x1893=(r01*x1880*x1884);
IkReal x1894=(x1874+x1891+x1892+x1888+x1887);
IkReal x1895=(x1873+x1890+x1893+x1889+x1886);
IkReal x1896=(((x1877*x1878))+(((4.11)*r20*x1875))+((r10*x1875*x1882))+((r00*x1875*x1881))+((r12*sj0*x1877))+(((0.912)*x1885))+(((4.11)*x1883)));
IkReal x1897=((((0.304)*x1885))+(((1.37)*r20*x1875))+((r00*x1875*x1884))+(((1.37)*x1883))+((cj4*r12*x1876))+((r10*x1875*x1876))+(((0.31)*cj4*x1878)));
j1evalpoly[0]=((-1.138)+(((0.428)*htj1))+(((htj1*htj1)*(((-1.138)+x1894+(((-1.0)*x1896))))))+x1895+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((1.138)+x1894+(((-1.0)*x1896))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x1895+(((-1.0)*x1897))))))+(((-1.0)*x1897)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x1898=x1759;
if((x1898) < -0.00001)
continue;
IkReal x1899=IKabs(IKsqrt(x1898));
IkReal x1906 = x1898;
if(IKabs(x1906)==0){
continue;
}
IkReal x1900=pow(x1906,-0.5);
IkReal x1901=((13.1578947368421)*x1900);
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(x1899,-1);
if(!x1907.valid){
continue;
}
IkReal x1902=x1907.value;
IkReal x1903=(r22*x1902);
if((((1.0)+(((-1.0)*(x1903*x1903))))) < -0.00001)
continue;
IkReal x1904=IKsqrt(((1.0)+(((-1.0)*(x1903*x1903)))));
if( (x1903) < -1-IKFAST_SINCOS_THRESH || (x1903) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
IkReal x1905=((IKasin(x1903))+(((-1.0)*(x1908.value))));
sj5=gconst1;
cj5=gconst2;
j5=x1905;
IkReal gconst0=x1905;
IkReal gconst1=(((rxp1_2*x1901*x1904))+(((-1.0)*rxp0_2*x1901*x1903)));
IkReal gconst2=((((-1.0)*rxp1_2*x1901*x1903))+(((-1.0)*rxp0_2*x1901*x1904)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1909=x1759;
if((x1909) < -0.00001)
continue;
IkReal x1910=IKabs(IKsqrt(x1909));
IkReal x1917 = x1909;
if(IKabs(x1917)==0){
continue;
}
IkReal x1911=pow(x1917,-0.5);
IkReal x1912=((13.1578947368421)*x1911);
CheckValue<IkReal> x1918=IKPowWithIntegerCheck(x1910,-1);
if(!x1918.valid){
continue;
}
IkReal x1913=x1918.value;
IkReal x1914=(r22*x1913);
if((((1.0)+(((-1.0)*(x1914*x1914))))) < -0.00001)
continue;
IkReal x1915=IKsqrt(((1.0)+(((-1.0)*(x1914*x1914)))));
if( (x1914) < -1-IKFAST_SINCOS_THRESH || (x1914) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1919 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1919.valid){
continue;
}
IkReal x1916=((IKasin(x1914))+(((-1.0)*(x1919.value))));
sj5=gconst1;
cj5=gconst2;
j5=x1916;
IkReal gconst0=x1916;
IkReal gconst1=(((rxp1_2*x1912*x1915))+(((-1.0)*rxp0_2*x1912*x1914)));
IkReal gconst2=((((-1.0)*rxp0_2*x1912*x1915))+(((-1.0)*rxp1_2*x1912*x1914)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1920=x1759;
if((x1920) < -0.00001)
continue;
IkReal x1921=IKabs(IKsqrt(x1920));
IkReal x1928 = x1920;
if(IKabs(x1928)==0){
continue;
}
IkReal x1922=pow(x1928,-0.5);
IkReal x1923=((13.1578947368421)*x1922);
CheckValue<IkReal> x1929=IKPowWithIntegerCheck(x1921,-1);
if(!x1929.valid){
continue;
}
IkReal x1924=x1929.value;
IkReal x1925=(r22*x1924);
if((((1.0)+(((-1.0)*(x1925*x1925))))) < -0.00001)
continue;
IkReal x1926=IKsqrt(((1.0)+(((-1.0)*(x1925*x1925)))));
if( (x1925) < -1-IKFAST_SINCOS_THRESH || (x1925) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
IkReal x1927=((IKasin(x1925))+(((-1.0)*(x1930.value))));
sj5=gconst1;
cj5=gconst2;
j5=x1927;
IkReal gconst0=x1927;
IkReal gconst1=((((-1.0)*rxp0_2*x1923*x1925))+((rxp1_2*x1923*x1926)));
IkReal gconst2=((((-1.0)*rxp1_2*x1923*x1925))+(((-1.0)*rxp0_2*x1923*x1926)));
IkReal x1931=(cj3*sj3);
j2eval[0]=x1931;
j2eval[1]=IKsign(x1931);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1932=(cj1*gconst1);
IkReal x1933=(sj1*sj3);
IkReal x1934=(r22*sj4);
IkReal x1935=(gconst1*sj1);
IkReal x1936=(cj0*cj3);
IkReal x1937=(cj4*r20);
IkReal x1938=(gconst2*sj1);
IkReal x1939=(cj4*r21*sj3);
IkReal x1940=(cj3*r10*sj0);
IkReal x1941=((1.0)*cj1*gconst2);
IkReal x1942=(cj3*r11*sj0);
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal((((cj1*sj3*x1934))+((x1938*x1942))+((x1932*x1939))+((r01*x1936*x1938))+((x1935*x1940))+(((-1.0)*sj3*x1937*x1941))+((r00*x1935*x1936)))),IkReal(((((-1.0)*r00*x1932*x1936))+(((-1.0)*gconst2*x1933*x1937))+((cj4*gconst1*r21*x1933))+(((-1.0)*x1932*x1940))+(((-1.0)*r01*x1936*x1941))+(((-1.0)*x1941*x1942))+((x1933*x1934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x1944.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1943.value)+(((1.5707963267949)*(x1944.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1945=IKcos(j2);
IkReal x1946=IKsin(j2);
IkReal x1947=(gconst2*sj0);
IkReal x1948=(cj3*sj1);
IkReal x1949=(cj0*r01);
IkReal x1950=(gconst1*sj4);
IkReal x1951=((1.0)*cj4);
IkReal x1952=(gconst1*r21);
IkReal x1953=(gconst2*r20);
IkReal x1954=(r12*sj0);
IkReal x1955=(r11*sj0);
IkReal x1956=((1.0)*sj4);
IkReal x1957=(cj0*r02);
IkReal x1958=(cj4*gconst1);
IkReal x1959=((0.076)*gconst1);
IkReal x1960=((1.0)*r21);
IkReal x1961=(cj1*x1945);
IkReal x1962=((1.0)*x1946);
IkReal x1963=(sj1*x1945);
IkReal x1964=(cj0*gconst2*r00);
IkReal x1965=(cj1*x1946);
IkReal x1966=(sj1*x1946);
evalcond[0]=((((-1.0)*gconst2*x1960))+((sj3*x1963))+((sj3*x1965))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*sj1*x1962))+(((-1.0)*x1950*x1960))+x1961+((sj4*x1953)));
evalcond[2]=(((x1945*x1948))+(((-1.0)*r22*x1956))+((cj3*x1965))+(((-1.0)*x1951*x1952))+((cj4*x1953)));
evalcond[3]=((((-1.0)*sj1*sj3*x1962))+((r11*x1947))+((sj3*x1961))+((gconst2*x1949))+((gconst1*r10*sj0))+((cj0*gconst1*r00)));
evalcond[4]=((((0.0775)*x1965))+(((0.0775)*x1963))+(((-0.076)*x1953))+(((-0.3425)*x1966))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.076)*x1952))+(((0.3425)*x1961)));
evalcond[5]=((((-1.0)*x1948*x1962))+((cj3*x1961))+(((-1.0)*x1951*x1964))+((x1955*x1958))+((sj4*x1957))+((sj4*x1954))+(((-1.0)*r10*x1947*x1951))+((x1949*x1958)));
evalcond[6]=((((-1.0)*x1956*x1964))+((x1950*x1955))+(((-1.0)*x1963))+(((-1.0)*x1951*x1954))+(((-1.0)*x1951*x1957))+(((-1.0)*r10*x1947*x1956))+(((-1.0)*cj1*x1962))+((x1949*x1950)));
evalcond[7]=((((-1.0)*x1949*x1959))+(((0.076)*r10*x1947))+(((0.0775)*x1961))+(((-0.3425)*x1965))+(((-0.3425)*x1963))+(((0.2845)*sj1))+(((-0.0775)*x1966))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*x1955*x1959))+(((0.076)*x1964))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1967=(cj1*cj3);
IkReal x1968=(cj4*r22);
IkReal x1969=(gconst1*r21);
IkReal x1970=(cj3*sj1);
IkReal x1971=(r22*sj4);
IkReal x1972=(cj4*sj1);
IkReal x1973=(gconst2*r20);
IkReal x1974=((1.0)*sj4);
IkReal x1975=(cj1*cj4);
CheckValue<IkReal> x1976=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal((((x1969*x1975))+((cj1*x1971))+(((-1.0)*x1973*x1975))+((sj4*x1970*x1973))+(((-1.0)*x1969*x1970*x1974))+((x1968*x1970)))),IkReal((((x1969*x1972))+((sj4*x1967*x1969))+((sj1*x1971))+(((-1.0)*x1967*x1973*x1974))+(((-1.0)*x1967*x1968))+(((-1.0)*x1972*x1973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1976.value)))+(x1977.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1978=IKcos(j2);
IkReal x1979=IKsin(j2);
IkReal x1980=(gconst2*sj0);
IkReal x1981=(cj3*sj1);
IkReal x1982=(cj0*r01);
IkReal x1983=(gconst1*sj4);
IkReal x1984=((1.0)*cj4);
IkReal x1985=(gconst1*r21);
IkReal x1986=(gconst2*r20);
IkReal x1987=(r12*sj0);
IkReal x1988=(r11*sj0);
IkReal x1989=((1.0)*sj4);
IkReal x1990=(cj0*r02);
IkReal x1991=(cj4*gconst1);
IkReal x1992=((0.076)*gconst1);
IkReal x1993=((1.0)*r21);
IkReal x1994=(cj1*x1978);
IkReal x1995=((1.0)*x1979);
IkReal x1996=(sj1*x1978);
IkReal x1997=(cj0*gconst2*r00);
IkReal x1998=(cj1*x1979);
IkReal x1999=(sj1*x1979);
evalcond[0]=((((-1.0)*gconst2*x1993))+((sj3*x1998))+((sj3*x1996))+(((-1.0)*gconst1*r20)));
evalcond[1]=((((-1.0)*x1983*x1993))+((cj4*r22))+x1994+((sj4*x1986))+(((-1.0)*sj1*x1995)));
evalcond[2]=((((-1.0)*x1984*x1985))+((x1978*x1981))+((cj4*x1986))+(((-1.0)*r22*x1989))+((cj3*x1998)));
evalcond[3]=(((gconst2*x1982))+((r11*x1980))+((sj3*x1994))+(((-1.0)*sj1*sj3*x1995))+((gconst1*r10*sj0))+((cj0*gconst1*r00)));
evalcond[4]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1996))+(((0.0775)*x1998))+(((0.3425)*x1994))+(((-0.3425)*x1999))+pz+(((0.076)*x1985))+(((-0.076)*x1986)));
evalcond[5]=(((x1988*x1991))+(((-1.0)*r10*x1980*x1984))+(((-1.0)*x1981*x1995))+((sj4*x1987))+((x1982*x1991))+(((-1.0)*x1984*x1997))+((sj4*x1990))+((cj3*x1994)));
evalcond[6]=((((-1.0)*r10*x1980*x1989))+(((-1.0)*x1984*x1987))+(((-1.0)*x1989*x1997))+((x1982*x1983))+(((-1.0)*x1984*x1990))+(((-1.0)*x1996))+(((-1.0)*cj1*x1995))+((x1983*x1988)));
evalcond[7]=((((0.076)*x1997))+(((-1.0)*x1982*x1992))+(((0.2845)*sj1))+(((-0.0775)*x1999))+(((0.0775)*x1994))+(((-0.3425)*x1996))+(((-0.3425)*x1998))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+(((0.076)*r10*x1980))+(((-1.0)*x1988*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2000=(cj1*r21);
IkReal x2001=(sj3*sj4);
IkReal x2002=(gconst2*r20);
IkReal x2003=((1.0)*cj1);
IkReal x2004=(r21*sj1);
IkReal x2005=(gconst1*r20);
IkReal x2006=(cj4*r22*sj3);
CheckValue<IkReal> x2007=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2007.valid){
continue;
}
CheckValue<IkReal> x2008 = IKatan2WithCheck(IkReal((((sj1*x2001*x2002))+((gconst2*x2000))+(((-1.0)*gconst1*x2001*x2004))+((sj1*x2006))+((cj1*x2005)))),IkReal(((((-1.0)*x2003*x2006))+((gconst2*x2004))+(((-1.0)*x2001*x2002*x2003))+((gconst1*x2000*x2001))+((sj1*x2005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2008.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2007.value)))+(x2008.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2009=IKcos(j2);
IkReal x2010=IKsin(j2);
IkReal x2011=(gconst2*sj0);
IkReal x2012=(cj3*sj1);
IkReal x2013=(cj0*r01);
IkReal x2014=(gconst1*sj4);
IkReal x2015=((1.0)*cj4);
IkReal x2016=(gconst1*r21);
IkReal x2017=(gconst2*r20);
IkReal x2018=(r12*sj0);
IkReal x2019=(r11*sj0);
IkReal x2020=((1.0)*sj4);
IkReal x2021=(cj0*r02);
IkReal x2022=(cj4*gconst1);
IkReal x2023=((0.076)*gconst1);
IkReal x2024=((1.0)*r21);
IkReal x2025=(cj1*x2009);
IkReal x2026=((1.0)*x2010);
IkReal x2027=(sj1*x2009);
IkReal x2028=(cj0*gconst2*r00);
IkReal x2029=(cj1*x2010);
IkReal x2030=(sj1*x2010);
evalcond[0]=(((sj3*x2029))+((sj3*x2027))+(((-1.0)*gconst2*x2024))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+((sj4*x2017))+x2025+(((-1.0)*sj1*x2026))+(((-1.0)*x2014*x2024)));
evalcond[2]=((((-1.0)*r22*x2020))+(((-1.0)*x2015*x2016))+((x2009*x2012))+((cj3*x2029))+((cj4*x2017)));
evalcond[3]=(((sj3*x2025))+(((-1.0)*sj1*sj3*x2026))+((gconst1*r10*sj0))+((gconst2*x2013))+((r11*x2011))+((cj0*gconst1*r00)));
evalcond[4]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.076)*x2017))+(((-0.3425)*x2030))+pz+(((0.3425)*x2025))+(((0.076)*x2016))+(((0.0775)*x2029))+(((0.0775)*x2027)));
evalcond[5]=(((x2019*x2022))+((sj4*x2018))+(((-1.0)*r10*x2011*x2015))+((x2013*x2022))+(((-1.0)*x2015*x2028))+((cj3*x2025))+(((-1.0)*x2012*x2026))+((sj4*x2021)));
evalcond[6]=(((x2014*x2019))+(((-1.0)*cj1*x2026))+(((-1.0)*x2015*x2018))+(((-1.0)*x2027))+(((-1.0)*x2015*x2021))+(((-1.0)*r10*x2011*x2020))+(((-1.0)*x2020*x2028))+((x2013*x2014)));
evalcond[7]=((((0.076)*r10*x2011))+(((0.2845)*sj1))+(((-1.0)*x2013*x2023))+(((-0.0775)*x2030))+(((-1.0)*x2019*x2023))+(((0.0535)*cj1))+(((0.076)*x2028))+(((-0.3425)*x2029))+(((-0.3425)*x2027))+(((-1.0)*py*sj0))+(((0.0775)*x2025))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2031=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x2031) < -0.00001)
continue;
IkReal x2032=IKabs(IKsqrt(x2031));
IkReal x2038 = x2031;
if(IKabs(x2038)==0){
continue;
}
IkReal x2033=pow(x2038,-0.5);
IkReal x2034=((13.1578947368421)*x2033);
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(x2032,-1);
if(!x2039.valid){
continue;
}
IkReal x2035=x2039.value;
IkReal x2036=(r22*x2035);
if((((1.0)+(((-1.0)*(x2036*x2036))))) < -0.00001)
continue;
IkReal x2037=IKsqrt(((1.0)+(((-1.0)*(x2036*x2036)))));
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
if( (x2036) < -1-IKFAST_SINCOS_THRESH || (x2036) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2040.value)))+(((-1.0)*(IKasin(x2036)))));
IkReal gconst4=((((-1.0)*rxp0_2*x2034*x2036))+(((-1.0)*rxp1_2*x2034*x2037)));
IkReal gconst5=(((rxp0_2*x2034*x2037))+(((-1.0)*rxp1_2*x2034*x2036)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x2041.valid){
continue;
}
if( ((r22*(x2041.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x2041.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x2041.value))))+(x2042.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2043=((0.076)*cj3);
IkReal x2044=((1.0)*cj3);
CheckValue<IkReal> x2045=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*rxp1_2))+((r22*(((((-0.076)*(gconst4*gconst4)))+(((-0.076)*(gconst5*gconst5)))))))+(((-1.0)*gconst4*rxp0_2)))),-1);
if(!x2045.valid){
continue;
}
CheckValue<IkReal> x2046 = IKatan2WithCheck(IkReal((((gconst5*r10*x2043))+(((-1.0)*py*x2044))+(((-1.0)*gconst4*r11*x2043)))),IkReal((((gconst5*r00*x2043))+(((-1.0)*gconst4*r01*x2043))+(((-1.0)*px*x2044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2046.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2045.value)))+(x2046.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2047=IKcos(j0);
IkReal x2048=IKsin(j0);
IkReal x2049=((1.0)*sj4);
IkReal x2050=((0.076)*gconst4);
IkReal x2051=((1.0)*cj4);
IkReal x2052=(r10*x2047);
IkReal x2053=(r02*x2048);
IkReal x2054=(r01*x2048);
IkReal x2055=(r12*x2047);
IkReal x2056=(r11*x2047);
IkReal x2057=((1.0)*gconst4*x2048);
IkReal x2058=(gconst5*r00*x2048);
IkReal x2059=(gconst4*x2056);
evalcond[0]=(cj3+(((-1.0)*r00*x2057))+((gconst4*x2052))+(((-1.0)*gconst5*x2054))+((gconst5*x2056)));
evalcond[1]=((((-0.076)*x2058))+(((0.076)*gconst5*x2052))+(((-1.0)*x2050*x2056))+((px*x2048))+(((-1.0)*py*x2047))+((x2050*x2054)));
evalcond[2]=((((-1.0)*gconst4*x2049*x2054))+(((-1.0)*gconst5*x2049*x2052))+((cj4*x2053))+(((-1.0)*x2051*x2055))+((sj4*x2058))+((sj4*x2059)));
evalcond[3]=((((-1.0)*sj3))+((cj4*x2058))+((cj4*x2059))+(((-1.0)*x2049*x2053))+(((-1.0)*gconst4*x2051*x2054))+((sj4*x2055))+(((-1.0)*gconst5*x2051*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2060=x2031;
if((x2060) < -0.00001)
continue;
IkReal x2061=IKabs(IKsqrt(x2060));
IkReal x2068 = x2060;
if(IKabs(x2068)==0){
continue;
}
IkReal x2062=pow(x2068,-0.5);
IkReal x2063=((13.1578947368421)*x2062);
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(x2061,-1);
if(!x2069.valid){
continue;
}
IkReal x2064=x2069.value;
IkReal x2065=(r22*x2064);
if((((1.0)+(((-1.0)*(x2065*x2065))))) < -0.00001)
continue;
IkReal x2066=IKsqrt(((1.0)+(((-1.0)*(x2065*x2065)))));
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
if( (x2065) < -1-IKFAST_SINCOS_THRESH || (x2065) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2067=((((1.0)*(x2070.value)))+(((1.0)*(IKasin(x2065)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2067)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2067)));
IkReal gconst4=((((-1.0)*rxp1_2*x2063*x2066))+(((-1.0)*rxp0_2*x2063*x2065)));
IkReal gconst5=(((rxp0_2*x2063*x2066))+(((-1.0)*rxp1_2*x2063*x2065)));
IkReal x2071=((1.138)*cj3);
IkReal x2072=((12.0)*pz);
IkReal x2073=((0.31)*cj4);
IkReal x2074=(r12*sj0);
IkReal x2075=(gconst5*r20);
IkReal x2076=(gconst4*r21);
IkReal x2077=((0.93)*cj4);
IkReal x2078=(cj0*r02);
IkReal x2079=((4.11)*sj4);
IkReal x2080=((4.0)*pz);
IkReal x2081=((0.912)*cj3);
IkReal x2082=((0.304)*cj3);
IkReal x2083=((0.31)*sj4);
IkReal x2084=((0.93)*sj4);
IkReal x2085=((1.37)*sj4);
IkReal x2086=(cj3*x2072);
IkReal x2087=(r22*x2084);
IkReal x2088=((0.912)*x2076);
IkReal x2089=(cj3*x2085);
IkReal x2090=(gconst5*r10*sj0);
IkReal x2091=(cj0*gconst4*r01);
IkReal x2092=(gconst4*r11*sj0);
IkReal x2093=((4.11)*cj4*r22);
IkReal x2094=((1.37)*cj4*r22);
IkReal x2095=(cj0*gconst5*r00);
IkReal x2096=(x2075*x2077);
IkReal x2097=(cj3*x2093);
IkReal x2098=(x2075*x2081);
IkReal x2099=(x2076*x2077);
IkReal x2100=(x2076*x2081);
IkReal x2101=(x2076*x2079);
IkReal x2102=(cj3*x2075*x2079);
IkReal x2103=(cj3*x2101);
IkReal x2104=(x2084*x2091);
IkReal x2105=(x2084*x2092);
IkReal x2106=(x2097+x2096+x2098+x2102);
IkReal x2107=(x2072+x2088+x2101+x2105+x2104);
IkReal x2108=(x2099+x2086+x2087+x2103+x2100);
IkReal x2109=(((x2084*x2095))+((x2084*x2090))+((x2075*x2079))+(((0.912)*x2075))+x2093+((x2077*x2078))+((x2074*x2077)));
j1eval[0]=((1.712)+(IKabs(((((-1.0)*x2108))+x2106+(((-1.0)*x2071)))))+(IKabs(((((-1.0)*r22*x2083))+(((-1.0)*x2071))+(((-1.0)*x2076*x2082))+(((-1.0)*x2076*x2089))+((cj3*x2094))+(((-1.0)*cj3*x2080))+(((-1.0)*x2073*x2076))+((x2073*x2075))+((x2075*x2082))+((x2075*x2089)))))+(IKabs(((1.138)+(((-1.0)*x2094))+(((-1.0)*x2083*x2095))+(((-1.0)*x2083*x2090))+x2080+((x2076*x2085))+((x2083*x2092))+((x2083*x2091))+(((0.304)*x2076))+(((-1.0)*x2073*x2078))+(((-1.0)*x2073*x2074))+(((-1.0)*x2075*x2085))+(((-0.304)*x2075)))))+(IKabs(((((-1.0)*x2108))+x2071+x2106)))+(((1.712)*(IKabs(cj3))))+(IKabs(((1.138)+(((-1.0)*x2109))+x2107)))+(IKabs(((-1.138)+(((-1.0)*x2109))+x2107))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2110=((1.138)*cj3);
IkReal x2111=(gconst5*r20);
IkReal x2112=((0.31)*cj4);
IkReal x2113=((4.11)*cj3);
IkReal x2114=(r22*sj4);
IkReal x2115=((0.304)*cj3);
IkReal x2116=(cj4*r22);
IkReal x2117=((1.37)*cj3);
IkReal x2118=((0.912)*cj3);
IkReal x2119=(gconst4*r21);
IkReal x2120=(cj3*pz);
IkReal x2121=((0.93)*cj4);
IkReal x2122=((12.0)*x2120);
IkReal x2123=((0.93)*x2114);
IkReal x2124=((-0.428)*cj3);
IkReal x2125=((0.31)*x2114);
IkReal x2126=((4.0)*x2120);
IkReal x2127=(x2111*x2121);
IkReal x2128=(x2113*x2116);
IkReal x2129=(x2111*x2118);
IkReal x2130=(x2119*x2121);
IkReal x2131=(x2118*x2119);
IkReal x2132=(x2111*x2115);
IkReal x2133=(x2116*x2117);
IkReal x2134=(x2111*x2112);
IkReal x2135=(x2115*x2119);
IkReal x2136=(x2112*x2119);
IkReal x2137=(cj3*sj4*x2119);
IkReal x2138=(sj4*x2111*x2113);
IkReal x2139=(sj4*x2113*x2119);
IkReal x2140=(sj4*x2111*x2117);
IkReal x2141=(sj4*x2117*x2119);
IkReal x2142=(x2127+x2129+x2128+x2138);
IkReal x2143=(x2134+x2132+x2133+x2140);
IkReal x2144=(x2125+x2126+x2136+x2135+x2141);
IkReal x2145=(x2123+x2122+x2130+x2131+x2139);
op[0]=(x2143+(((-1.0)*x2144))+(((-1.0)*x2110)));
op[1]=x2124;
op[2]=(x2142+(((-1.0)*x2145))+(((-1.0)*x2110)));
op[3]=((-0.856)*cj3);
op[4]=(x2110+x2142+(((-1.0)*x2145)));
op[5]=x2124;
op[6]=(x2110+x2143+(((-1.0)*x2144)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2146=((4.0)*pz);
IkReal x2147=((12.0)*pz);
IkReal x2148=(gconst4*r21);
IkReal x2149=(gconst5*r20);
IkReal x2150=((0.93)*cj4);
IkReal x2151=(cj0*r02);
IkReal x2152=((4.11)*sj4);
IkReal x2153=((0.31)*sj4);
IkReal x2154=(r12*sj0);
IkReal x2155=((1.37)*sj4);
IkReal x2156=((0.93)*sj4);
IkReal x2157=((0.31)*cj4);
IkReal x2158=(cj4*r22);
IkReal x2159=((0.304)*x2148);
IkReal x2160=((0.912)*x2148);
IkReal x2161=(gconst4*r11*sj0);
IkReal x2162=(cj0*gconst5*r00);
IkReal x2163=(gconst5*r10*sj0);
IkReal x2164=(cj0*gconst4*r01);
IkReal x2165=(x2148*x2155);
IkReal x2166=(x2148*x2152);
IkReal x2167=(x2153*x2164);
IkReal x2168=(x2156*x2164);
IkReal x2169=(x2156*x2161);
IkReal x2170=(x2153*x2161);
IkReal x2171=(x2169+x2168+x2166+x2160+x2147);
IkReal x2172=(x2170+x2165+x2167+x2159+x2146);
IkReal x2173=(((x2149*x2152))+(((0.912)*x2149))+((x2150*x2151))+((x2150*x2154))+((x2156*x2163))+((x2156*x2162))+(((4.11)*x2158)));
IkReal x2174=(((x2149*x2155))+(((0.304)*x2149))+((x2154*x2157))+(((1.37)*x2158))+((x2151*x2157))+((x2153*x2163))+((x2153*x2162)));
j1evalpoly[0]=((-1.138)+(((htj1*htj1*htj1*htj1)*(((1.138)+x2171+(((-1.0)*x2173))))))+(((htj1*htj1)*(((-1.138)+x2171+(((-1.0)*x2173))))))+(((0.428)*htj1))+x2172+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x2172+(((-1.0)*x2174))))))+(((-1.0)*x2174)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x2175=x2031;
if((x2175) < -0.00001)
continue;
IkReal x2176=IKabs(IKsqrt(x2175));
IkReal x2183 = x2175;
if(IKabs(x2183)==0){
continue;
}
IkReal x2177=pow(x2183,-0.5);
IkReal x2178=((13.1578947368421)*x2177);
CheckValue<IkReal> x2184=IKPowWithIntegerCheck(x2176,-1);
if(!x2184.valid){
continue;
}
IkReal x2179=x2184.value;
IkReal x2180=(r22*x2179);
if((((1.0)+(((-1.0)*(x2180*x2180))))) < -0.00001)
continue;
IkReal x2181=IKsqrt(((1.0)+(((-1.0)*(x2180*x2180)))));
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
if( (x2180) < -1-IKFAST_SINCOS_THRESH || (x2180) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2182=((((1.0)*(x2185.value)))+(((1.0)*(IKasin(x2180)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2182)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2182)));
IkReal gconst4=((((-1.0)*rxp1_2*x2178*x2181))+(((-1.0)*rxp0_2*x2178*x2180)));
IkReal gconst5=((((-1.0)*rxp1_2*x2178*x2180))+((rxp0_2*x2178*x2181)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x2186=x2031;
if((x2186) < -0.00001)
continue;
IkReal x2187=IKabs(IKsqrt(x2186));
IkReal x2194 = x2186;
if(IKabs(x2194)==0){
continue;
}
IkReal x2188=pow(x2194,-0.5);
IkReal x2189=((13.1578947368421)*x2188);
CheckValue<IkReal> x2195=IKPowWithIntegerCheck(x2187,-1);
if(!x2195.valid){
continue;
}
IkReal x2190=x2195.value;
IkReal x2191=(r22*x2190);
if((((1.0)+(((-1.0)*(x2191*x2191))))) < -0.00001)
continue;
IkReal x2192=IKsqrt(((1.0)+(((-1.0)*(x2191*x2191)))));
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
if( (x2191) < -1-IKFAST_SINCOS_THRESH || (x2191) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2193=((((1.0)*(x2196.value)))+(((1.0)*(IKasin(x2191)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2193)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2193)));
IkReal gconst4=((((-1.0)*rxp0_2*x2189*x2191))+(((-1.0)*rxp1_2*x2189*x2192)));
IkReal gconst5=(((rxp0_2*x2189*x2192))+(((-1.0)*rxp1_2*x2189*x2191)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x2197=x2031;
if((x2197) < -0.00001)
continue;
IkReal x2198=IKabs(IKsqrt(x2197));
IkReal x2205 = x2197;
if(IKabs(x2205)==0){
continue;
}
IkReal x2199=pow(x2205,-0.5);
IkReal x2200=((13.1578947368421)*x2199);
CheckValue<IkReal> x2206=IKPowWithIntegerCheck(x2198,-1);
if(!x2206.valid){
continue;
}
IkReal x2201=x2206.value;
IkReal x2202=(r22*x2201);
if((((1.0)+(((-1.0)*(x2202*x2202))))) < -0.00001)
continue;
IkReal x2203=IKsqrt(((1.0)+(((-1.0)*(x2202*x2202)))));
CheckValue<IkReal> x2207 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x2207.valid){
continue;
}
if( (x2202) < -1-IKFAST_SINCOS_THRESH || (x2202) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2204=((((1.0)*(x2207.value)))+(((1.0)*(IKasin(x2202)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2204)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2204)));
IkReal gconst4=((((-1.0)*rxp1_2*x2200*x2203))+(((-1.0)*rxp0_2*x2200*x2202)));
IkReal gconst5=((((-1.0)*rxp1_2*x2200*x2202))+((rxp0_2*x2200*x2203)));
IkReal x2208=(cj3*sj3);
j2eval[0]=x2208;
j2eval[1]=IKsign(x2208);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2209=(sj1*sj3);
IkReal x2210=(r22*sj4);
IkReal x2211=(cj3*sj1);
IkReal x2212=(cj1*sj3);
IkReal x2213=(cj0*gconst5*r01);
IkReal x2214=(gconst4*r10*sj0);
IkReal x2215=((1.0)*cj1*cj3);
IkReal x2216=(gconst5*r11*sj0);
IkReal x2217=(cj0*gconst4*r00);
IkReal x2218=(cj4*gconst4*r21);
IkReal x2219=((1.0)*cj4*gconst5*r20);
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal((((x2210*x2212))+((x2211*x2214))+((x2211*x2216))+((x2211*x2217))+((x2211*x2213))+((x2212*x2218))+(((-1.0)*x2212*x2219)))),IkReal(((((-1.0)*x2214*x2215))+(((-1.0)*x2215*x2216))+(((-1.0)*x2215*x2217))+(((-1.0)*x2213*x2215))+(((-1.0)*x2209*x2219))+((x2209*x2218))+((x2209*x2210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2220.value)))+(x2221.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2222=IKcos(j2);
IkReal x2223=IKsin(j2);
IkReal x2224=(gconst5*sj4);
IkReal x2225=((1.0)*cj4);
IkReal x2226=(r10*sj0);
IkReal x2227=(cj3*sj1);
IkReal x2228=((0.076)*gconst4);
IkReal x2229=(cj0*r01);
IkReal x2230=(r12*sj0);
IkReal x2231=((1.0)*cj0);
IkReal x2232=(cj0*r02);
IkReal x2233=(gconst4*r21);
IkReal x2234=(gconst5*r20);
IkReal x2235=((1.0)*sj4);
IkReal x2236=(cj1*x2222);
IkReal x2237=(cj0*gconst5*r00);
IkReal x2238=(gconst4*r11*sj0);
IkReal x2239=((1.0)*x2223);
IkReal x2240=(sj1*x2222);
IkReal x2241=(cj1*x2223);
IkReal x2242=(sj1*x2223);
evalcond[0]=(((sj3*x2241))+((sj3*x2240))+(((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x2236+((cj4*r22))+(((-1.0)*sj1*x2239))+((r20*x2224))+(((-1.0)*x2233*x2235)));
evalcond[2]=((((-1.0)*x2225*x2233))+((x2222*x2227))+((cj4*x2234))+((cj3*x2241))+(((-1.0)*r22*x2235)));
evalcond[3]=(((cj0*gconst4*r00))+((sj3*x2236))+((gconst4*x2226))+((gconst5*x2229))+((gconst5*r11*sj0))+(((-1.0)*sj1*sj3*x2239)));
evalcond[4]=((((0.3425)*x2236))+(((0.0775)*x2241))+(((0.0775)*x2240))+(((0.0535)*sj1))+(((-0.3425)*x2242))+(((-0.2845)*cj1))+((r21*x2228))+pz+(((-0.076)*x2234)));
evalcond[5]=(((sj4*x2230))+((sj4*x2232))+(((-1.0)*x2225*x2237))+(((-1.0)*x2227*x2239))+((cj4*x2238))+(((-1.0)*gconst5*x2225*x2226))+((cj4*gconst4*x2229))+((cj3*x2236)));
evalcond[6]=(((sj4*x2238))+(((-1.0)*cj1*x2239))+(((-1.0)*x2240))+((gconst4*sj4*x2229))+(((-1.0)*x2225*x2232))+(((-1.0)*x2225*x2230))+(((-1.0)*r00*x2224*x2231))+(((-1.0)*x2224*x2226)));
evalcond[7]=((((-1.0)*r11*sj0*x2228))+(((0.076)*gconst5*x2226))+(((0.076)*x2237))+(((0.2845)*sj1))+(((-0.3425)*x2241))+(((-0.3425)*x2240))+(((-1.0)*x2228*x2229))+(((0.0535)*cj1))+(((-0.0775)*x2242))+(((0.0775)*x2236))+(((-1.0)*px*x2231))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2243=(cj1*cj4);
IkReal x2244=(gconst4*r21);
IkReal x2245=(cj3*r22);
IkReal x2246=(cj4*sj1);
IkReal x2247=(gconst5*r20);
IkReal x2248=(sj1*sj4);
IkReal x2249=((1.0)*cj3);
IkReal x2250=(cj1*sj4);
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x2251.valid){
continue;
}
CheckValue<IkReal> x2252 = IKatan2WithCheck(IkReal((((x2243*x2244))+(((-1.0)*x2244*x2248*x2249))+(((-1.0)*x2243*x2247))+((r22*x2250))+((cj3*x2247*x2248))+((x2245*x2246)))),IkReal((((cj3*x2244*x2250))+(((-1.0)*x2246*x2247))+((x2244*x2246))+(((-1.0)*x2243*x2245))+((r22*x2248))+(((-1.0)*x2247*x2249*x2250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2252.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2251.value)))+(x2252.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2253=IKcos(j2);
IkReal x2254=IKsin(j2);
IkReal x2255=(gconst5*sj4);
IkReal x2256=((1.0)*cj4);
IkReal x2257=(r10*sj0);
IkReal x2258=(cj3*sj1);
IkReal x2259=((0.076)*gconst4);
IkReal x2260=(cj0*r01);
IkReal x2261=(r12*sj0);
IkReal x2262=((1.0)*cj0);
IkReal x2263=(cj0*r02);
IkReal x2264=(gconst4*r21);
IkReal x2265=(gconst5*r20);
IkReal x2266=((1.0)*sj4);
IkReal x2267=(cj1*x2253);
IkReal x2268=(cj0*gconst5*r00);
IkReal x2269=(gconst4*r11*sj0);
IkReal x2270=((1.0)*x2254);
IkReal x2271=(sj1*x2253);
IkReal x2272=(cj1*x2254);
IkReal x2273=(sj1*x2254);
evalcond[0]=((((-1.0)*gconst5*r21))+((sj3*x2271))+((sj3*x2272))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x2267+((cj4*r22))+((r20*x2255))+(((-1.0)*sj1*x2270))+(((-1.0)*x2264*x2266)));
evalcond[2]=((((-1.0)*x2256*x2264))+((x2253*x2258))+((cj4*x2265))+(((-1.0)*r22*x2266))+((cj3*x2272)));
evalcond[3]=(((gconst4*x2257))+((cj0*gconst4*r00))+(((-1.0)*sj1*sj3*x2270))+((sj3*x2267))+((gconst5*r11*sj0))+((gconst5*x2260)));
evalcond[4]=((((-0.076)*x2265))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-0.3425)*x2273))+((r21*x2259))+(((0.0775)*x2271))+(((0.0775)*x2272))+(((0.3425)*x2267)));
evalcond[5]=(((cj4*gconst4*x2260))+(((-1.0)*x2256*x2268))+((sj4*x2263))+((sj4*x2261))+((cj4*x2269))+(((-1.0)*x2258*x2270))+((cj3*x2267))+(((-1.0)*gconst5*x2256*x2257)));
evalcond[6]=(((gconst4*sj4*x2260))+(((-1.0)*x2256*x2263))+(((-1.0)*x2256*x2261))+((sj4*x2269))+(((-1.0)*cj1*x2270))+(((-1.0)*x2255*x2257))+(((-1.0)*r00*x2255*x2262))+(((-1.0)*x2271)));
evalcond[7]=((((0.0775)*x2267))+(((0.076)*gconst5*x2257))+(((0.076)*x2268))+(((-0.0775)*x2273))+(((0.2845)*sj1))+(((-1.0)*px*x2262))+(((-1.0)*x2259*x2260))+(((-1.0)*r11*sj0*x2259))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.3425)*x2271))+(((-0.3425)*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2274=(gconst5*sj1);
IkReal x2275=(cj1*gconst4);
IkReal x2276=(cj1*gconst5);
IkReal x2277=(sj1*sj3);
IkReal x2278=(cj4*r22);
IkReal x2279=(r21*sj4);
IkReal x2280=(r20*sj3*sj4);
CheckValue<IkReal> x2281=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2281.valid){
continue;
}
CheckValue<IkReal> x2282 = IKatan2WithCheck(IkReal((((r21*x2276))+((x2274*x2280))+((r20*x2275))+((x2277*x2278))+(((-1.0)*gconst4*x2277*x2279)))),IkReal((((r21*x2274))+((sj3*x2275*x2279))+((gconst4*r20*sj1))+(((-1.0)*cj1*sj3*x2278))+(((-1.0)*x2276*x2280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2282.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2281.value)))+(x2282.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2283=IKcos(j2);
IkReal x2284=IKsin(j2);
IkReal x2285=(gconst5*sj4);
IkReal x2286=((1.0)*cj4);
IkReal x2287=(r10*sj0);
IkReal x2288=(cj3*sj1);
IkReal x2289=((0.076)*gconst4);
IkReal x2290=(cj0*r01);
IkReal x2291=(r12*sj0);
IkReal x2292=((1.0)*cj0);
IkReal x2293=(cj0*r02);
IkReal x2294=(gconst4*r21);
IkReal x2295=(gconst5*r20);
IkReal x2296=((1.0)*sj4);
IkReal x2297=(cj1*x2283);
IkReal x2298=(cj0*gconst5*r00);
IkReal x2299=(gconst4*r11*sj0);
IkReal x2300=((1.0)*x2284);
IkReal x2301=(sj1*x2283);
IkReal x2302=(cj1*x2284);
IkReal x2303=(sj1*x2284);
evalcond[0]=(((sj3*x2301))+((sj3*x2302))+(((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20)));
evalcond[1]=((((-1.0)*sj1*x2300))+x2297+((cj4*r22))+((r20*x2285))+(((-1.0)*x2294*x2296)));
evalcond[2]=((((-1.0)*x2286*x2294))+((x2283*x2288))+((cj4*x2295))+(((-1.0)*r22*x2296))+((cj3*x2302)));
evalcond[3]=(((gconst4*x2287))+((cj0*gconst4*r00))+((sj3*x2297))+(((-1.0)*sj1*sj3*x2300))+((gconst5*x2290))+((gconst5*r11*sj0)));
evalcond[4]=((((-0.076)*x2295))+(((0.3425)*x2297))+(((-0.3425)*x2303))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x2301))+(((0.0775)*x2302))+pz+((r21*x2289)));
evalcond[5]=(((sj4*x2293))+((sj4*x2291))+(((-1.0)*x2286*x2298))+(((-1.0)*gconst5*x2286*x2287))+((cj4*x2299))+((cj4*gconst4*x2290))+(((-1.0)*x2288*x2300))+((cj3*x2297)));
evalcond[6]=((((-1.0)*x2285*x2287))+((sj4*x2299))+(((-1.0)*x2301))+(((-1.0)*x2286*x2291))+(((-1.0)*x2286*x2293))+(((-1.0)*cj1*x2300))+(((-1.0)*r00*x2285*x2292))+((gconst4*sj4*x2290)));
evalcond[7]=((((-1.0)*x2289*x2290))+(((0.076)*x2298))+(((-0.0775)*x2303))+(((-0.3425)*x2302))+(((-0.3425)*x2301))+(((0.2845)*sj1))+(((0.076)*gconst5*x2287))+(((0.0535)*cj1))+(((0.0775)*x2297))+(((-1.0)*py*sj0))+(((-1.0)*r11*sj0*x2289))+(((-1.0)*px*x2292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2304=((1.0)*sj3);
IkReal x2305=((0.076)*sj4);
IkReal x2306=((0.076)*cj5*sj3);
IkReal x2307=((0.076)*sj3*sj5);
CheckValue<IkReal> x2308=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*rxp0_2))+(((-1.0)*cj5*r21*x2305))+((cj4*rxp1_2*sj5))+(((-1.0)*r20*sj5*x2305))+((rxp2_2*sj4)))),-1);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2307))+((r10*x2306))+(((-1.0)*py*x2304)))),IkReal(((((-1.0)*r01*x2307))+(((-1.0)*px*x2304))+((r00*x2306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2309.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2308.value)))+(x2309.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2310=IKcos(j0);
IkReal x2311=IKsin(j0);
IkReal x2312=(sj4*sj5);
IkReal x2313=(cj4*sj5);
IkReal x2314=((1.0)*cj4);
IkReal x2315=((0.076)*sj5);
IkReal x2316=((1.0)*x2311);
IkReal x2317=(r11*x2310);
IkReal x2318=(r12*x2310);
IkReal x2319=(cj5*r00*x2311);
IkReal x2320=(cj5*r10*x2310);
evalcond[0]=(cj3+(((-1.0)*r00*sj5*x2316))+(((-1.0)*cj5*r01*x2316))+((cj5*x2317))+((r10*sj5*x2310)));
evalcond[1]=((((-0.076)*x2319))+(((-1.0)*x2315*x2317))+(((-1.0)*py*x2310))+(((0.076)*x2320))+((px*x2311))+((r01*x2311*x2315)));
evalcond[2]=(((x2312*x2317))+(((-1.0)*r01*x2312*x2316))+(((-1.0)*sj4*x2320))+((sj4*x2319))+(((-1.0)*x2314*x2318))+((cj4*r02*x2311)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*r01*x2313*x2316))+((cj4*x2319))+((sj4*x2318))+(((-1.0)*x2314*x2320))+((x2313*x2317))+(((-1.0)*r02*sj4*x2316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2321=((1.138)*sj3);
IkReal x2322=((1.138)*cj3);
IkReal x2323=((0.31)*cj5);
IkReal x2324=(cj4*r20);
IkReal x2325=((0.93)*sj5);
IkReal x2326=(cj4*r21);
IkReal x2327=(r22*sj4);
IkReal x2328=((0.912)*sj3);
IkReal x2329=(cj5*r20);
IkReal x2330=(r21*sj5);
IkReal x2331=((4.11)*sj4);
IkReal x2332=((0.93)*cj5);
IkReal x2333=((0.304)*cj3);
IkReal x2334=(pz*sj3);
IkReal x2335=((0.31)*sj5);
IkReal x2336=((0.304)*sj3);
IkReal x2337=((0.912)*cj3);
IkReal x2338=((1.37)*sj3);
IkReal x2339=(cj4*r22);
IkReal x2340=(cj3*pz);
IkReal x2341=((1.37)*cj3);
IkReal x2342=(r21*x2332);
IkReal x2343=((12.0)*x2334);
IkReal x2344=(r20*x2325);
IkReal x2345=((12.0)*x2340);
IkReal x2346=((0.93)*x2327);
IkReal x2347=((4.11)*sj3*x2339);
IkReal x2348=(x2328*x2329);
IkReal x2349=(x2328*x2330);
IkReal x2350=((4.11)*cj3*x2339);
IkReal x2351=(x2329*x2337);
IkReal x2352=(x2324*x2332);
IkReal x2353=(x2330*x2337);
IkReal x2354=(x2325*x2326);
IkReal x2355=((1.37)*sj4*x2330);
IkReal x2356=(sj3*x2329*x2331);
IkReal x2357=(sj3*x2330*x2331);
IkReal x2358=(cj3*x2329*x2331);
IkReal x2359=(cj3*x2330*x2331);
IkReal x2360=(x2356+x2347+x2348);
IkReal x2361=(x2358+x2352+x2350+x2351);
IkReal x2362=(x2357+x2344+x2343+x2342+x2349);
IkReal x2363=(x2359+x2353+x2354+x2345+x2346);
j1eval[0]=((IKabs((x2360+(((-1.0)*x2362))+(((-1.0)*x2321)))))+(IKabs((x2322+x2361+(((-1.0)*x2363)))))+(IKabs((x2361+(((-1.0)*x2363))+(((-1.0)*x2322)))))+(IKabs((x2321+x2360+(((-1.0)*x2362)))))+(IKabs(((((-4.0)*x2334))+((x2329*x2336))+(((-1.0)*sj4*x2330*x2338))+((sj4*x2329*x2338))+(((-1.0)*x2330*x2336))+(((-1.0)*r20*x2335))+((x2338*x2339))+(((-1.0)*x2321))+(((-1.0)*r21*x2323)))))+(IKabs(((((-0.31)*x2327))+((x2329*x2333))+(((-4.0)*x2340))+((x2339*x2341))+(((-1.0)*x2326*x2335))+(((-1.0)*sj4*x2330*x2341))+((x2323*x2324))+(((-1.0)*x2330*x2333))+((sj4*x2329*x2341))+(((-1.0)*x2322)))))+(((1.712)*(IKabs(cj3))))+(((1.712)*(IKabs(sj3)))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2364=((1.138)*sj3);
IkReal x2365=(r20*sj5);
IkReal x2366=(pz*sj3);
IkReal x2367=((1.37)*sj4);
IkReal x2368=(cj5*r21);
IkReal x2369=((4.11)*sj4);
IkReal x2370=((0.93)*x2368);
IkReal x2371=((12.0)*x2366);
IkReal x2372=((0.93)*x2365);
IkReal x2373=((-0.428)*sj3);
IkReal x2374=((0.31)*x2365);
IkReal x2375=((4.0)*x2366);
IkReal x2376=((0.31)*x2368);
IkReal x2377=(r21*sj3*sj5);
IkReal x2378=(cj5*r20*sj3);
IkReal x2379=(cj4*r22*sj3);
IkReal x2380=((4.11)*x2379);
IkReal x2381=((0.912)*x2378);
IkReal x2382=((0.912)*x2377);
IkReal x2383=((1.37)*x2379);
IkReal x2384=((0.304)*x2378);
IkReal x2385=((0.304)*x2377);
IkReal x2386=(x2369*x2378);
IkReal x2387=(x2369*x2377);
IkReal x2388=(x2367*x2378);
IkReal x2389=(x2367*x2377);
IkReal x2390=(x2381+x2380+x2386);
IkReal x2391=(x2383+x2384+x2388);
IkReal x2392=(x2385+x2389+x2374+x2375+x2376);
IkReal x2393=(x2382+x2387+x2370+x2371+x2372);
op[0]=(x2391+(((-1.0)*x2364))+(((-1.0)*x2392)));
op[1]=x2373;
op[2]=(x2390+(((-1.0)*x2364))+(((-1.0)*x2393)));
op[3]=((-0.856)*sj3);
op[4]=(x2390+x2364+(((-1.0)*x2393)));
op[5]=x2373;
op[6]=(x2391+x2364+(((-1.0)*x2392)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2394=((1.138)*cj3);
IkReal x2395=(cj5*r20);
IkReal x2396=((0.31)*cj4);
IkReal x2397=(r21*sj5);
IkReal x2398=(cj3*sj4);
IkReal x2399=(r22*sj4);
IkReal x2400=((0.93)*cj4);
IkReal x2401=((0.304)*cj3);
IkReal x2402=((0.912)*cj3);
IkReal x2403=((0.428)*cj3);
IkReal x2404=(cj3*pz);
IkReal x2405=((12.0)*x2404);
IkReal x2406=((0.93)*x2399);
IkReal x2407=((0.31)*x2399);
IkReal x2408=((4.0)*x2404);
IkReal x2409=(cj3*cj4*r22);
IkReal x2410=(x2395*x2401);
IkReal x2411=((1.37)*x2409);
IkReal x2412=((4.11)*x2409);
IkReal x2413=(x2395*x2402);
IkReal x2414=(x2395*x2400);
IkReal x2415=(x2397*x2402);
IkReal x2416=(x2397*x2400);
IkReal x2417=(x2395*x2396);
IkReal x2418=(x2397*x2401);
IkReal x2419=(x2396*x2397);
IkReal x2420=((1.37)*x2395*x2398);
IkReal x2421=((4.11)*x2395*x2398);
IkReal x2422=((4.11)*x2397*x2398);
IkReal x2423=((1.37)*x2397*x2398);
IkReal x2424=(x2413+x2412+x2414+x2421);
IkReal x2425=(x2411+x2410+x2417+x2420);
IkReal x2426=(x2406+x2405+x2415+x2416+x2422);
IkReal x2427=(x2407+x2408+x2419+x2418+x2423);
j1evalpoly[0]=((((-1.0)*htj1*x2403))+x2425+x2394+(((-1.0)*x2403*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2425+(((-1.0)*x2394))+(((-1.0)*x2427))))))+(((-1.0)*x2427))+(((htj1*htj1*htj1*htj1)*((x2424+(((-1.0)*x2394))+(((-1.0)*x2426))))))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1)*((x2424+x2394+(((-1.0)*x2426)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x2428=(cj5*r20);
IkReal x2429=(r20*sj5);
IkReal x2430=(r21*sj5);
IkReal x2431=(cj5*r21);
IkReal x2432=(cj1*sj3*sj4);
IkReal x2433=(cj4*r22*sj3);
IkReal x2434=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*cj1*x2433))+((sj1*x2429))+(((-1.0)*x2428*x2432))+((x2430*x2432))+((sj1*x2431)))))+(IKabs((((x2428*x2434))+((cj1*x2429))+((cj1*x2431))+((sj1*x2433))+(((-1.0)*x2430*x2434))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2435=(cj4*r22);
IkReal x2436=((1.0)*cj1);
IkReal x2437=(r20*sj1);
IkReal x2438=(cj5*sj4);
IkReal x2439=(cj5*r21);
IkReal x2440=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+((x2437*x2438))+((cj1*x2439))+(((-1.0)*sj1*x2440))+((sj1*x2435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2440))+(((-1.0)*r20*x2436*x2438))+((sj5*x2437))+(((-1.0)*x2435*x2436))+((sj1*x2439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+((x2437*x2438))+((cj1*x2439))+(((-1.0)*sj1*x2440))+((sj1*x2435))))+IKsqr((((cj1*x2440))+(((-1.0)*r20*x2436*x2438))+((sj5*x2437))+(((-1.0)*x2435*x2436))+((sj1*x2439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+((x2437*x2438))+((cj1*x2439))+(((-1.0)*sj1*x2440))+((sj1*x2435))), (((cj1*x2440))+(((-1.0)*r20*x2436*x2438))+((sj5*x2437))+(((-1.0)*x2435*x2436))+((sj1*x2439))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2441=IKcos(j2);
IkReal x2442=IKsin(j2);
IkReal x2443=(r10*sj0);
IkReal x2444=((0.076)*cj5);
IkReal x2445=(cj0*r00);
IkReal x2446=((0.076)*sj5);
IkReal x2447=(r11*sj0);
IkReal x2448=((1.0)*sj5);
IkReal x2449=((1.0)*cj0);
IkReal x2450=(cj0*r01);
IkReal x2451=((1.0)*sj1);
IkReal x2452=((0.3425)*sj1);
IkReal x2453=(sj4*sj5);
IkReal x2454=((1.0)*sj0);
IkReal x2455=(cj1*x2441);
IkReal x2456=((1.0)*cj5*sj4);
IkReal x2457=(cj1*x2442);
IkReal x2458=(sj1*x2441);
IkReal x2459=(x2442*x2451);
evalcond[0]=(x2458+x2457+(((-1.0)*r20*x2448))+(((-1.0)*cj5*r21)));
evalcond[1]=(x2455+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*x2459))+(((-1.0)*r21*sj4*x2448)));
evalcond[2]=(((sj5*x2443))+((sj5*x2445))+x2455+((cj5*x2447))+((cj5*x2450))+(((-1.0)*x2459)));
CheckValue<IkReal> x2460=IKPowWithIntegerCheck(cj4,-1);
if(!x2460.valid){
continue;
}
evalcond[3]=((((-1.0)*x2442*x2452))+(((0.0535)*sj1))+(((0.3425)*x2455))+(((-0.2845)*cj1))+pz+(((0.0775)*x2458))+(((0.0775)*x2457))+(((-0.076)*r22*sj4*(x2460.value))));
evalcond[4]=(((x2447*x2453))+(((-1.0)*cj4*r12*x2454))+((x2450*x2453))+(((-1.0)*x2445*x2456))+(((-1.0)*x2441*x2451))+(((-1.0)*x2457))+(((-1.0)*x2443*x2456))+(((-1.0)*cj4*r02*x2449)));
evalcond[5]=((((-1.0)*py*x2454))+(((0.2845)*sj1))+((x2443*x2444))+(((-1.0)*x2441*x2452))+(((0.0535)*cj1))+(((-1.0)*x2446*x2450))+(((-1.0)*x2446*x2447))+((x2444*x2445))+(((-1.0)*px*x2449))+(((0.0775)*x2455))+(((-0.0775)*sj1*x2442))+(((-0.3425)*x2457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2461=((1.0)*cj1);
IkReal x2462=(cj4*r22);
IkReal x2463=(cj5*r21);
IkReal x2464=((1.0)*sj1);
IkReal x2465=(r20*sj5);
IkReal x2466=(r21*sj4*sj5);
IkReal x2467=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x2464*x2466))+((sj1*x2462))+((sj1*x2467))+(((-1.0)*x2461*x2463))+(((-1.0)*x2461*x2465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2464*x2465))+((cj1*x2466))+(((-1.0)*x2463*x2464))+(((-1.0)*x2461*x2467))+(((-1.0)*x2461*x2462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2464*x2466))+((sj1*x2462))+((sj1*x2467))+(((-1.0)*x2461*x2463))+(((-1.0)*x2461*x2465))))+IKsqr(((((-1.0)*x2464*x2465))+((cj1*x2466))+(((-1.0)*x2463*x2464))+(((-1.0)*x2461*x2467))+(((-1.0)*x2461*x2462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2464*x2466))+((sj1*x2462))+((sj1*x2467))+(((-1.0)*x2461*x2463))+(((-1.0)*x2461*x2465))), ((((-1.0)*x2464*x2465))+((cj1*x2466))+(((-1.0)*x2463*x2464))+(((-1.0)*x2461*x2467))+(((-1.0)*x2461*x2462))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2468=IKcos(j2);
IkReal x2469=IKsin(j2);
IkReal x2470=(r10*sj0);
IkReal x2471=((0.076)*cj5);
IkReal x2472=(cj0*r00);
IkReal x2473=((0.076)*sj5);
IkReal x2474=(r11*sj0);
IkReal x2475=((1.0)*sj5);
IkReal x2476=((1.0)*cj0);
IkReal x2477=(cj0*r01);
IkReal x2478=((1.0)*sj1);
IkReal x2479=((0.3425)*sj1);
IkReal x2480=(sj4*sj5);
IkReal x2481=((1.0)*sj0);
IkReal x2482=(cj1*x2468);
IkReal x2483=((1.0)*cj5*sj4);
IkReal x2484=(cj1*x2469);
IkReal x2485=(sj1*x2469);
IkReal x2486=(x2468*x2478);
IkReal x2487=((1.0)*x2484);
IkReal x2488=(x2486+x2487);
evalcond[0]=((((-1.0)*r20*x2475))+(((-1.0)*x2488))+(((-1.0)*cj5*r21)));
evalcond[1]=(x2482+((cj4*r22))+(((-1.0)*r21*sj4*x2475))+((cj5*r20*sj4))+(((-1.0)*x2469*x2478)));
evalcond[2]=(x2485+(((-1.0)*x2482))+((cj5*x2477))+((cj5*x2474))+((sj5*x2472))+((sj5*x2470)));
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(cj4,-1);
if(!x2489.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.0775)*sj1*x2468))+(((-0.2845)*cj1))+(((0.0775)*x2484))+(((0.3425)*x2482))+pz+(((-1.0)*x2469*x2479))+(((-0.076)*r22*sj4*(x2489.value))));
evalcond[4]=((((-1.0)*cj4*r12*x2481))+((x2477*x2480))+((x2474*x2480))+(((-1.0)*x2488))+(((-1.0)*cj4*r02*x2476))+(((-1.0)*x2472*x2483))+(((-1.0)*x2470*x2483)));
evalcond[5]=(((x2471*x2472))+(((-0.3425)*x2484))+(((0.2845)*sj1))+(((-1.0)*py*x2481))+(((-1.0)*x2473*x2474))+(((-1.0)*x2473*x2477))+(((0.0775)*x2482))+(((0.0535)*cj1))+(((-1.0)*x2468*x2479))+(((-1.0)*px*x2476))+(((-0.0775)*x2485))+((x2470*x2471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2490=(cj4*r22);
IkReal x2491=((1.0)*cj1);
IkReal x2492=(sj1*sj4);
IkReal x2493=(cj5*r20);
IkReal x2494=(r21*sj5);
IkReal x2495=(cj4*sj1);
IkReal x2496=(cj1*x2494);
if( IKabs((((x2492*x2493))+((sj1*x2490))+(((-1.0)*x2492*x2494))+(((-1.0)*cj4*x2491*x2493))+((cj4*x2496))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2494*x2495))+(((-1.0)*x2493*x2495))+(((-1.0)*sj4*x2491*x2493))+(((-1.0)*x2490*x2491))+((r22*x2492))+((sj4*x2496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2492*x2493))+((sj1*x2490))+(((-1.0)*x2492*x2494))+(((-1.0)*cj4*x2491*x2493))+((cj4*x2496))+((cj1*r22*sj4))))+IKsqr((((x2494*x2495))+(((-1.0)*x2493*x2495))+(((-1.0)*sj4*x2491*x2493))+(((-1.0)*x2490*x2491))+((r22*x2492))+((sj4*x2496))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2492*x2493))+((sj1*x2490))+(((-1.0)*x2492*x2494))+(((-1.0)*cj4*x2491*x2493))+((cj4*x2496))+((cj1*r22*sj4))), (((x2494*x2495))+(((-1.0)*x2493*x2495))+(((-1.0)*sj4*x2491*x2493))+(((-1.0)*x2490*x2491))+((r22*x2492))+((sj4*x2496))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2497=IKcos(j2);
IkReal x2498=IKsin(j2);
IkReal x2499=((1.0)*sj4);
IkReal x2500=((0.076)*sj5);
IkReal x2501=(r11*sj0);
IkReal x2502=((1.0)*cj4);
IkReal x2503=(cj0*r02);
IkReal x2504=(cj0*r01);
IkReal x2505=(cj5*r20);
IkReal x2506=((1.0)*sj1);
IkReal x2507=(sj4*sj5);
IkReal x2508=(r21*sj5);
IkReal x2509=(cj4*sj5);
IkReal x2510=(r12*sj0);
IkReal x2511=(cj1*x2497);
IkReal x2512=(cj5*r10*sj0);
IkReal x2513=(cj0*cj5*r00);
IkReal x2514=(cj1*x2498);
IkReal x2515=(sj1*x2498);
IkReal x2516=(sj1*x2497);
IkReal x2517=(x2498*x2506);
evalcond[0]=(x2511+(((-1.0)*x2517))+((sj4*x2505))+((cj4*r22))+(((-1.0)*x2499*x2508)));
evalcond[1]=(x2514+x2516+((cj4*x2505))+(((-1.0)*x2502*x2508))+(((-1.0)*r22*x2499)));
evalcond[2]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x2515))+(((0.3425)*x2511))+(((-0.076)*x2505))+(((0.0775)*x2514))+(((0.0775)*x2516))+pz+((r21*x2500)));
evalcond[3]=(((x2504*x2509))+x2511+(((-1.0)*x2517))+((sj4*x2503))+(((-1.0)*x2502*x2512))+(((-1.0)*x2502*x2513))+((x2501*x2509))+((sj4*x2510)));
evalcond[4]=(((x2504*x2507))+(((-1.0)*x2502*x2510))+((x2501*x2507))+(((-1.0)*x2502*x2503))+(((-1.0)*x2499*x2512))+(((-1.0)*x2499*x2513))+(((-1.0)*x2497*x2506))+(((-1.0)*x2514)));
evalcond[5]=((((-0.0775)*x2515))+(((0.2845)*sj1))+(((-0.3425)*x2514))+(((-0.3425)*x2516))+(((-1.0)*x2500*x2501))+(((-1.0)*x2500*x2504))+(((0.0535)*cj1))+(((0.0775)*x2511))+(((0.076)*x2512))+(((0.076)*x2513))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2518=((1.0)*cj4);
IkReal x2519=(r22*sj1);
IkReal x2520=((1.0)*sj4);
IkReal x2521=(cj1*r22);
IkReal x2522=(cj1*r21*sj5);
IkReal x2523=(cj5*r20*sj1);
IkReal x2524=(r21*sj1*sj5);
IkReal x2525=(cj1*cj5*r20);
if( IKabs((((sj4*x2523))+(((-1.0)*x2520*x2521))+(((-1.0)*x2520*x2524))+((cj4*x2519))+((cj4*x2525))+(((-1.0)*x2518*x2522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x2522))+(((-1.0)*x2520*x2525))+((cj4*x2523))+(((-1.0)*x2519*x2520))+(((-1.0)*x2518*x2524))+(((-1.0)*x2518*x2521)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x2523))+(((-1.0)*x2520*x2521))+(((-1.0)*x2520*x2524))+((cj4*x2519))+((cj4*x2525))+(((-1.0)*x2518*x2522))))+IKsqr((((sj4*x2522))+(((-1.0)*x2520*x2525))+((cj4*x2523))+(((-1.0)*x2519*x2520))+(((-1.0)*x2518*x2524))+(((-1.0)*x2518*x2521))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x2523))+(((-1.0)*x2520*x2521))+(((-1.0)*x2520*x2524))+((cj4*x2519))+((cj4*x2525))+(((-1.0)*x2518*x2522))), (((sj4*x2522))+(((-1.0)*x2520*x2525))+((cj4*x2523))+(((-1.0)*x2519*x2520))+(((-1.0)*x2518*x2524))+(((-1.0)*x2518*x2521))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2526=IKcos(j2);
IkReal x2527=IKsin(j2);
IkReal x2528=(sj0*sj4);
IkReal x2529=(cj5*r10);
IkReal x2530=((0.076)*sj0);
IkReal x2531=((1.0)*sj4);
IkReal x2532=(r11*sj5);
IkReal x2533=((0.076)*sj5);
IkReal x2534=((1.0)*cj4);
IkReal x2535=(cj0*r02);
IkReal x2536=(cj0*r01);
IkReal x2537=((1.0)*sj1);
IkReal x2538=(r21*sj5);
IkReal x2539=(cj5*r20);
IkReal x2540=(cj1*x2526);
IkReal x2541=(cj0*cj5*r00);
IkReal x2542=(cj1*x2527);
IkReal x2543=(sj1*x2527);
IkReal x2544=(sj1*x2526);
IkReal x2545=(x2526*x2537);
IkReal x2546=((1.0)*x2542);
IkReal x2547=(x2546+x2545);
evalcond[0]=(x2540+((cj4*r22))+(((-1.0)*x2527*x2537))+((sj4*x2539))+(((-1.0)*x2531*x2538)));
evalcond[1]=(((cj4*x2539))+(((-1.0)*x2534*x2538))+(((-1.0)*r22*x2531))+(((-1.0)*x2547)));
evalcond[2]=((((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x2533))+(((0.0775)*x2542))+(((0.0775)*x2544))+pz+(((0.3425)*x2540))+(((-0.3425)*x2543))+(((-0.076)*x2539)));
evalcond[3]=(x2543+((r12*x2528))+(((-1.0)*x2540))+(((-1.0)*sj0*x2529*x2534))+((sj4*x2535))+((cj4*sj5*x2536))+((cj4*sj0*x2532))+(((-1.0)*x2534*x2541)));
evalcond[4]=((((-1.0)*x2531*x2541))+(((-1.0)*r12*sj0*x2534))+(((-1.0)*x2528*x2529))+(((-1.0)*x2534*x2535))+(((-1.0)*x2547))+((sj4*sj5*x2536))+((x2528*x2532)));
evalcond[5]=((((-1.0)*x2533*x2536))+(((0.076)*x2541))+(((0.2845)*sj1))+(((-1.0)*x2530*x2532))+(((0.0775)*x2540))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.0775)*x2543))+((x2529*x2530))+(((-0.3425)*x2542))+(((-0.3425)*x2544))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2548=(cj1*cj4);
IkReal x2549=(r21*sj5);
IkReal x2550=((1.0)*cj3);
IkReal x2551=(cj5*r20);
IkReal x2552=(cj1*sj4);
IkReal x2553=(sj1*sj4);
IkReal x2554=(cj4*sj1);
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x2555.valid){
continue;
}
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal((((r22*x2552))+((cj3*r22*x2554))+((cj3*x2551*x2553))+(((-1.0)*x2549*x2550*x2553))+((x2548*x2549))+(((-1.0)*x2548*x2551)))),IkReal(((((-1.0)*r22*x2548*x2550))+((cj3*x2549*x2552))+((r22*x2553))+(((-1.0)*x2551*x2554))+(((-1.0)*x2550*x2551*x2552))+((x2549*x2554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2555.value)))+(x2556.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2557=IKcos(j2);
IkReal x2558=IKsin(j2);
IkReal x2559=(r10*sj0);
IkReal x2560=((0.076)*cj5);
IkReal x2561=((1.0)*sj1);
IkReal x2562=(cj0*r00);
IkReal x2563=((0.076)*sj5);
IkReal x2564=(r11*sj0);
IkReal x2565=((1.0)*sj0);
IkReal x2566=((1.0)*sj5);
IkReal x2567=((1.0)*cj4);
IkReal x2568=(cj0*r01);
IkReal x2569=(cj0*r02);
IkReal x2570=(sj4*sj5);
IkReal x2571=(cj4*sj5);
IkReal x2572=(cj5*r20);
IkReal x2573=(cj1*x2557);
IkReal x2574=((1.0)*cj5*sj4);
IkReal x2575=(cj3*x2558);
IkReal x2576=(cj1*x2558);
IkReal x2577=(sj1*x2557);
IkReal x2578=(sj1*x2558);
evalcond[0]=((((-1.0)*r20*x2566))+((sj3*x2577))+((sj3*x2576))+(((-1.0)*cj5*r21)));
evalcond[1]=(x2573+((cj4*r22))+(((-1.0)*r21*sj4*x2566))+(((-1.0)*x2558*x2561))+((sj4*x2572)));
evalcond[2]=(((cj3*x2577))+((cj1*x2575))+(((-1.0)*cj4*r21*x2566))+((cj4*x2572))+(((-1.0)*r22*sj4)));
evalcond[3]=(((sj5*x2562))+((sj5*x2559))+((sj3*x2573))+(((-1.0)*sj3*x2558*x2561))+((cj5*x2568))+((cj5*x2564)));
evalcond[4]=((((-1.0)*r20*x2560))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x2577))+(((0.0775)*x2576))+pz+(((0.3425)*x2573))+((r21*x2563))+(((-0.3425)*x2578)));
evalcond[5]=(((cj3*x2573))+((x2568*x2571))+((x2564*x2571))+(((-1.0)*cj5*x2559*x2567))+((r12*sj0*sj4))+((sj4*x2569))+(((-1.0)*cj5*x2562*x2567))+(((-1.0)*x2561*x2575)));
evalcond[6]=((((-1.0)*cj4*r12*x2565))+((x2568*x2570))+((x2564*x2570))+(((-1.0)*x2562*x2574))+(((-1.0)*x2557*x2561))+(((-1.0)*x2576))+(((-1.0)*x2559*x2574))+(((-1.0)*x2567*x2569)));
evalcond[7]=(((x2560*x2562))+(((-1.0)*x2563*x2568))+(((-1.0)*x2563*x2564))+(((0.2845)*sj1))+((x2559*x2560))+(((0.0775)*x2573))+(((0.0535)*cj1))+(((-1.0)*py*x2565))+(((-0.0775)*x2578))+(((-1.0)*cj0*px))+(((-0.3425)*x2577))+(((-0.3425)*x2576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2579=((1.0)*cj1);
IkReal x2580=(sj0*sj1);
IkReal x2581=(cj5*r11);
IkReal x2582=(r10*sj5);
IkReal x2583=(r20*sj5);
IkReal x2584=(cj5*r21);
IkReal x2585=(cj0*cj5*r01);
IkReal x2586=(cj0*r00*sj5);
CheckValue<IkReal> x2587=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2587.valid){
continue;
}
CheckValue<IkReal> x2588 = IKatan2WithCheck(IkReal((((cj1*x2584))+((cj1*x2583))+((x2580*x2582))+((x2580*x2581))+((sj1*x2585))+((sj1*x2586)))),IkReal(((((-1.0)*x2579*x2586))+(((-1.0)*x2579*x2585))+((sj1*x2583))+((sj1*x2584))+(((-1.0)*sj0*x2579*x2581))+(((-1.0)*sj0*x2579*x2582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2588.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2587.value)))+(x2588.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2589=IKcos(j2);
IkReal x2590=IKsin(j2);
IkReal x2591=(r10*sj0);
IkReal x2592=((0.076)*cj5);
IkReal x2593=((1.0)*sj1);
IkReal x2594=(cj0*r00);
IkReal x2595=((0.076)*sj5);
IkReal x2596=(r11*sj0);
IkReal x2597=((1.0)*sj0);
IkReal x2598=((1.0)*sj5);
IkReal x2599=((1.0)*cj4);
IkReal x2600=(cj0*r01);
IkReal x2601=(cj0*r02);
IkReal x2602=(sj4*sj5);
IkReal x2603=(cj4*sj5);
IkReal x2604=(cj5*r20);
IkReal x2605=(cj1*x2589);
IkReal x2606=((1.0)*cj5*sj4);
IkReal x2607=(cj3*x2590);
IkReal x2608=(cj1*x2590);
IkReal x2609=(sj1*x2589);
IkReal x2610=(sj1*x2590);
evalcond[0]=((((-1.0)*r20*x2598))+((sj3*x2609))+((sj3*x2608))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r21*sj4*x2598))+(((-1.0)*x2590*x2593))+((sj4*x2604))+x2605);
evalcond[2]=(((cj4*x2604))+(((-1.0)*cj4*r21*x2598))+((cj1*x2607))+((cj3*x2609))+(((-1.0)*r22*sj4)));
evalcond[3]=((((-1.0)*sj3*x2590*x2593))+((sj5*x2594))+((sj5*x2591))+((sj3*x2605))+((cj5*x2600))+((cj5*x2596)));
evalcond[4]=((((-1.0)*r20*x2592))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x2609))+(((0.0775)*x2608))+pz+(((-0.3425)*x2610))+(((0.3425)*x2605))+((r21*x2595)));
evalcond[5]=((((-1.0)*x2593*x2607))+((x2596*x2603))+(((-1.0)*cj5*x2594*x2599))+((r12*sj0*sj4))+((x2600*x2603))+((sj4*x2601))+((cj3*x2605))+(((-1.0)*cj5*x2591*x2599)));
evalcond[6]=((((-1.0)*cj4*r12*x2597))+(((-1.0)*x2608))+((x2596*x2602))+(((-1.0)*x2591*x2606))+(((-1.0)*x2589*x2593))+((x2600*x2602))+(((-1.0)*x2594*x2606))+(((-1.0)*x2599*x2601)));
evalcond[7]=((((-1.0)*x2595*x2600))+((x2591*x2592))+(((0.2845)*sj1))+((x2592*x2594))+(((-1.0)*x2595*x2596))+(((0.0775)*x2605))+(((0.0535)*cj1))+(((-1.0)*py*x2597))+(((-0.3425)*x2609))+(((-0.3425)*x2608))+(((-0.0775)*x2610))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2611=(cj5*r20);
IkReal x2612=(r20*sj5);
IkReal x2613=(r21*sj5);
IkReal x2614=(cj5*r21);
IkReal x2615=(cj1*sj3*sj4);
IkReal x2616=(cj4*r22*sj3);
IkReal x2617=(sj1*sj3*sj4);
CheckValue<IkReal> x2618=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2618.valid){
continue;
}
CheckValue<IkReal> x2619 = IKatan2WithCheck(IkReal(((((-1.0)*x2613*x2617))+((cj1*x2612))+((cj1*x2614))+((x2611*x2617))+((sj1*x2616)))),IkReal((((x2613*x2615))+(((-1.0)*x2611*x2615))+(((-1.0)*cj1*x2616))+((sj1*x2612))+((sj1*x2614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2619.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2618.value)))+(x2619.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2620=IKcos(j2);
IkReal x2621=IKsin(j2);
IkReal x2622=(r10*sj0);
IkReal x2623=((0.076)*cj5);
IkReal x2624=((1.0)*sj1);
IkReal x2625=(cj0*r00);
IkReal x2626=((0.076)*sj5);
IkReal x2627=(r11*sj0);
IkReal x2628=((1.0)*sj0);
IkReal x2629=((1.0)*sj5);
IkReal x2630=((1.0)*cj4);
IkReal x2631=(cj0*r01);
IkReal x2632=(cj0*r02);
IkReal x2633=(sj4*sj5);
IkReal x2634=(cj4*sj5);
IkReal x2635=(cj5*r20);
IkReal x2636=(cj1*x2620);
IkReal x2637=((1.0)*cj5*sj4);
IkReal x2638=(cj3*x2621);
IkReal x2639=(cj1*x2621);
IkReal x2640=(sj1*x2620);
IkReal x2641=(sj1*x2621);
evalcond[0]=(((sj3*x2639))+(((-1.0)*cj5*r21))+((sj3*x2640))+(((-1.0)*r20*x2629)));
evalcond[1]=(((sj4*x2635))+((cj4*r22))+(((-1.0)*r21*sj4*x2629))+x2636+(((-1.0)*x2621*x2624)));
evalcond[2]=(((cj1*x2638))+(((-1.0)*cj4*r21*x2629))+((cj4*x2635))+(((-1.0)*r22*sj4))+((cj3*x2640)));
evalcond[3]=(((sj5*x2622))+((sj5*x2625))+((cj5*x2627))+((sj3*x2636))+((cj5*x2631))+(((-1.0)*sj3*x2621*x2624)));
evalcond[4]=((((0.0775)*x2639))+(((0.3425)*x2636))+(((0.0535)*sj1))+(((0.0775)*x2640))+(((-0.2845)*cj1))+(((-0.3425)*x2641))+pz+((r21*x2626))+(((-1.0)*r20*x2623)));
evalcond[5]=(((cj3*x2636))+((sj4*x2632))+((r12*sj0*sj4))+(((-1.0)*cj5*x2625*x2630))+(((-1.0)*cj5*x2622*x2630))+((x2631*x2634))+((x2627*x2634))+(((-1.0)*x2624*x2638)));
evalcond[6]=((((-1.0)*cj4*r12*x2628))+(((-1.0)*x2622*x2637))+(((-1.0)*x2630*x2632))+(((-1.0)*x2639))+((x2631*x2633))+((x2627*x2633))+(((-1.0)*x2625*x2637))+(((-1.0)*x2620*x2624)));
evalcond[7]=((((0.0775)*x2636))+(((-0.3425)*x2639))+(((0.2845)*sj1))+(((-0.3425)*x2640))+(((-1.0)*x2626*x2627))+(((-0.0775)*x2641))+(((0.0535)*cj1))+(((-1.0)*py*x2628))+((x2623*x2625))+((x2622*x2623))+(((-1.0)*x2626*x2631))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2642=((1.0)*cj3);
IkReal x2643=(cj5*sj4);
IkReal x2644=(cj3*sj4*sj5);
CheckValue<IkReal> x2645 = IKatan2WithCheck(IkReal((((r11*x2644))+(((-1.0)*cj4*r12*x2642))+(((-1.0)*r10*x2642*x2643)))),IkReal(((((-1.0)*cj4*r02*x2642))+(((-1.0)*r00*x2642*x2643))+((r01*x2644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646=IKPowWithIntegerCheck(IKsign((((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*cj5*r20)))),-1);
if(!x2646.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2645.value)+(((1.5707963267949)*(x2646.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2647=IKcos(j0);
IkReal x2648=IKsin(j0);
IkReal x2649=(sj4*sj5);
IkReal x2650=(cj4*sj5);
IkReal x2651=((1.0)*cj4);
IkReal x2652=((0.076)*sj5);
IkReal x2653=((1.0)*x2648);
IkReal x2654=(r11*x2647);
IkReal x2655=(r12*x2647);
IkReal x2656=(cj5*r00*x2648);
IkReal x2657=(cj5*r10*x2647);
evalcond[0]=(((r10*sj5*x2647))+cj3+(((-1.0)*cj5*r01*x2653))+((cj5*x2654))+(((-1.0)*r00*sj5*x2653)));
evalcond[1]=((((-1.0)*x2652*x2654))+((px*x2648))+(((-0.076)*x2656))+((r01*x2648*x2652))+(((0.076)*x2657))+(((-1.0)*py*x2647)));
evalcond[2]=((((-1.0)*x2651*x2655))+((x2649*x2654))+((sj4*x2656))+((cj4*r02*x2648))+(((-1.0)*sj4*x2657))+(((-1.0)*r01*x2649*x2653)));
evalcond[3]=((((-1.0)*x2651*x2657))+(((-1.0)*sj3))+((sj4*x2655))+(((-1.0)*r02*sj4*x2653))+((cj4*x2656))+(((-1.0)*r01*x2650*x2653))+((x2650*x2654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2658=((1.138)*sj3);
IkReal x2659=((1.138)*cj3);
IkReal x2660=((0.31)*cj5);
IkReal x2661=(cj4*r20);
IkReal x2662=((0.93)*sj5);
IkReal x2663=(cj4*r21);
IkReal x2664=(r22*sj4);
IkReal x2665=((0.912)*sj3);
IkReal x2666=(cj5*r20);
IkReal x2667=(r21*sj5);
IkReal x2668=((4.11)*sj4);
IkReal x2669=((0.93)*cj5);
IkReal x2670=((0.304)*cj3);
IkReal x2671=(pz*sj3);
IkReal x2672=((0.31)*sj5);
IkReal x2673=((0.304)*sj3);
IkReal x2674=((0.912)*cj3);
IkReal x2675=((1.37)*sj3);
IkReal x2676=(cj4*r22);
IkReal x2677=(cj3*pz);
IkReal x2678=((1.37)*cj3);
IkReal x2679=(r21*x2669);
IkReal x2680=((12.0)*x2671);
IkReal x2681=(r20*x2662);
IkReal x2682=((12.0)*x2677);
IkReal x2683=((0.93)*x2664);
IkReal x2684=((4.11)*sj3*x2676);
IkReal x2685=(x2665*x2666);
IkReal x2686=(x2665*x2667);
IkReal x2687=((4.11)*cj3*x2676);
IkReal x2688=(x2666*x2674);
IkReal x2689=(x2661*x2669);
IkReal x2690=(x2667*x2674);
IkReal x2691=(x2662*x2663);
IkReal x2692=((1.37)*sj4*x2667);
IkReal x2693=(sj3*x2666*x2668);
IkReal x2694=(sj3*x2667*x2668);
IkReal x2695=(cj3*x2666*x2668);
IkReal x2696=(cj3*x2667*x2668);
IkReal x2697=(x2684+x2685+x2693);
IkReal x2698=(x2688+x2689+x2687+x2695);
IkReal x2699=(x2679+x2686+x2680+x2681+x2694);
IkReal x2700=(x2682+x2683+x2696+x2691+x2690);
j1eval[0]=((IKabs(((((-1.0)*x2699))+(((-1.0)*x2658))+x2697)))+(IKabs(((((-1.0)*x2699))+x2658+x2697)))+(IKabs(((((-1.0)*x2700))+x2659+x2698)))+(IKabs(((((-4.0)*x2671))+((sj4*x2666*x2675))+((x2666*x2673))+((x2675*x2676))+(((-1.0)*r20*x2672))+(((-1.0)*r21*x2660))+(((-1.0)*x2658))+(((-1.0)*x2667*x2673))+(((-1.0)*sj4*x2667*x2675)))))+(IKabs(((((-4.0)*x2677))+(((-0.31)*x2664))+((sj4*x2666*x2678))+((x2666*x2670))+(((-1.0)*x2663*x2672))+((x2660*x2661))+(((-1.0)*x2659))+(((-1.0)*x2667*x2670))+(((-1.0)*sj4*x2667*x2678))+((x2676*x2678)))))+(((1.712)*(IKabs(cj3))))+(((1.712)*(IKabs(sj3))))+(IKabs(((((-1.0)*x2700))+(((-1.0)*x2659))+x2698))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2701=((1.138)*sj3);
IkReal x2702=(r20*sj5);
IkReal x2703=(pz*sj3);
IkReal x2704=((1.37)*sj4);
IkReal x2705=(cj5*r21);
IkReal x2706=((4.11)*sj4);
IkReal x2707=((0.93)*x2705);
IkReal x2708=((12.0)*x2703);
IkReal x2709=((0.93)*x2702);
IkReal x2710=((-0.428)*sj3);
IkReal x2711=((0.31)*x2702);
IkReal x2712=((4.0)*x2703);
IkReal x2713=((0.31)*x2705);
IkReal x2714=(r21*sj3*sj5);
IkReal x2715=(cj5*r20*sj3);
IkReal x2716=(cj4*r22*sj3);
IkReal x2717=((4.11)*x2716);
IkReal x2718=((0.912)*x2715);
IkReal x2719=((0.912)*x2714);
IkReal x2720=((1.37)*x2716);
IkReal x2721=((0.304)*x2715);
IkReal x2722=((0.304)*x2714);
IkReal x2723=(x2706*x2715);
IkReal x2724=(x2706*x2714);
IkReal x2725=(x2704*x2715);
IkReal x2726=(x2704*x2714);
IkReal x2727=(x2717+x2718+x2723);
IkReal x2728=(x2725+x2721+x2720);
IkReal x2729=(x2712+x2713+x2711+x2726+x2722);
IkReal x2730=(x2719+x2709+x2708+x2707+x2724);
op[0]=(x2728+(((-1.0)*x2701))+(((-1.0)*x2729)));
op[1]=x2710;
op[2]=(x2727+(((-1.0)*x2701))+(((-1.0)*x2730)));
op[3]=((-0.856)*sj3);
op[4]=(x2701+x2727+(((-1.0)*x2730)));
op[5]=x2710;
op[6]=(x2701+x2728+(((-1.0)*x2729)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2731=((1.138)*cj3);
IkReal x2732=(cj5*r20);
IkReal x2733=((0.31)*cj4);
IkReal x2734=(r21*sj5);
IkReal x2735=(cj3*sj4);
IkReal x2736=(r22*sj4);
IkReal x2737=((0.93)*cj4);
IkReal x2738=((0.304)*cj3);
IkReal x2739=((0.912)*cj3);
IkReal x2740=((0.428)*cj3);
IkReal x2741=(cj3*pz);
IkReal x2742=((12.0)*x2741);
IkReal x2743=((0.93)*x2736);
IkReal x2744=((0.31)*x2736);
IkReal x2745=((4.0)*x2741);
IkReal x2746=(cj3*cj4*r22);
IkReal x2747=(x2732*x2738);
IkReal x2748=((1.37)*x2746);
IkReal x2749=((4.11)*x2746);
IkReal x2750=(x2732*x2739);
IkReal x2751=(x2732*x2737);
IkReal x2752=(x2734*x2739);
IkReal x2753=(x2734*x2737);
IkReal x2754=(x2732*x2733);
IkReal x2755=(x2734*x2738);
IkReal x2756=(x2733*x2734);
IkReal x2757=((1.37)*x2732*x2735);
IkReal x2758=((4.11)*x2732*x2735);
IkReal x2759=((4.11)*x2734*x2735);
IkReal x2760=((1.37)*x2734*x2735);
IkReal x2761=(x2750+x2751+x2758+x2749);
IkReal x2762=(x2757+x2754+x2747+x2748);
IkReal x2763=(x2752+x2753+x2759+x2743+x2742);
IkReal x2764=(x2756+x2755+x2745+x2744+x2760);
j1evalpoly[0]=(x2762+x2731+(((htj1*htj1)*((x2761+x2731+(((-1.0)*x2763))))))+(((-1.0)*htj1*x2740))+(((htj1*htj1*htj1*htj1)*((x2761+(((-1.0)*x2763))+(((-1.0)*x2731))))))+(((-1.0)*x2764))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((-1.0)*x2740*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2762+(((-1.0)*x2764))+(((-1.0)*x2731)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x2765=(cj5*r20);
IkReal x2766=(r20*sj5);
IkReal x2767=(r21*sj5);
IkReal x2768=(cj5*r21);
IkReal x2769=(cj1*sj3*sj4);
IkReal x2770=(cj4*r22*sj3);
IkReal x2771=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((sj1*x2768))+((sj1*x2766))+((x2767*x2769))+(((-1.0)*cj1*x2770))+(((-1.0)*x2765*x2769)))))+(IKabs((((cj1*x2766))+((cj1*x2768))+((sj1*x2770))+(((-1.0)*x2767*x2771))+((x2765*x2771))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2772=(cj4*r22);
IkReal x2773=((1.0)*cj1);
IkReal x2774=(r20*sj1);
IkReal x2775=(cj5*sj4);
IkReal x2776=(cj5*r21);
IkReal x2777=(r21*sj4*sj5);
if( IKabs((((x2774*x2775))+((sj1*x2772))+((cj1*r20*sj5))+(((-1.0)*sj1*x2777))+((cj1*x2776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2776))+(((-1.0)*r20*x2773*x2775))+(((-1.0)*x2772*x2773))+((sj5*x2774))+((cj1*x2777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2774*x2775))+((sj1*x2772))+((cj1*r20*sj5))+(((-1.0)*sj1*x2777))+((cj1*x2776))))+IKsqr((((sj1*x2776))+(((-1.0)*r20*x2773*x2775))+(((-1.0)*x2772*x2773))+((sj5*x2774))+((cj1*x2777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2774*x2775))+((sj1*x2772))+((cj1*r20*sj5))+(((-1.0)*sj1*x2777))+((cj1*x2776))), (((sj1*x2776))+(((-1.0)*r20*x2773*x2775))+(((-1.0)*x2772*x2773))+((sj5*x2774))+((cj1*x2777))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2778=IKcos(j2);
IkReal x2779=IKsin(j2);
IkReal x2780=(r10*sj0);
IkReal x2781=((0.076)*cj5);
IkReal x2782=(cj0*r00);
IkReal x2783=((0.076)*sj5);
IkReal x2784=(r11*sj0);
IkReal x2785=((1.0)*sj5);
IkReal x2786=((1.0)*cj0);
IkReal x2787=(cj0*r01);
IkReal x2788=((1.0)*sj1);
IkReal x2789=((0.3425)*sj1);
IkReal x2790=(sj4*sj5);
IkReal x2791=((1.0)*sj0);
IkReal x2792=(cj1*x2778);
IkReal x2793=((1.0)*cj5*sj4);
IkReal x2794=(cj1*x2779);
IkReal x2795=(sj1*x2778);
IkReal x2796=(x2779*x2788);
evalcond[0]=(x2794+x2795+(((-1.0)*r20*x2785))+(((-1.0)*cj5*r21)));
evalcond[1]=(x2792+(((-1.0)*x2796))+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x2785)));
evalcond[2]=(x2792+(((-1.0)*x2796))+((sj5*x2782))+((sj5*x2780))+((cj5*x2787))+((cj5*x2784)));
CheckValue<IkReal> x2797=IKPowWithIntegerCheck(cj4,-1);
if(!x2797.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-1.0)*x2779*x2789))+(((0.3425)*x2792))+(((0.0775)*x2795))+(((0.0775)*x2794))+(((-0.076)*r22*sj4*(x2797.value))));
evalcond[4]=(((x2784*x2790))+((x2787*x2790))+(((-1.0)*x2780*x2793))+(((-1.0)*x2778*x2788))+(((-1.0)*cj4*r02*x2786))+(((-1.0)*x2794))+(((-1.0)*x2782*x2793))+(((-1.0)*cj4*r12*x2791)));
evalcond[5]=(((x2780*x2781))+(((-1.0)*px*x2786))+((x2781*x2782))+(((-0.0775)*sj1*x2779))+(((0.2845)*sj1))+(((-0.3425)*x2794))+(((-1.0)*x2778*x2789))+(((-1.0)*x2783*x2784))+(((-1.0)*x2783*x2787))+(((0.0535)*cj1))+(((0.0775)*x2792))+(((-1.0)*py*x2791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2798=((1.0)*cj1);
IkReal x2799=(cj4*r22);
IkReal x2800=(cj5*r21);
IkReal x2801=((1.0)*sj1);
IkReal x2802=(r20*sj5);
IkReal x2803=(r21*sj4*sj5);
IkReal x2804=(cj5*r20*sj4);
if( IKabs((((sj1*x2804))+((sj1*x2799))+(((-1.0)*x2798*x2802))+(((-1.0)*x2798*x2800))+(((-1.0)*x2801*x2803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2803))+(((-1.0)*x2800*x2801))+(((-1.0)*x2798*x2799))+(((-1.0)*x2798*x2804))+(((-1.0)*x2801*x2802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2804))+((sj1*x2799))+(((-1.0)*x2798*x2802))+(((-1.0)*x2798*x2800))+(((-1.0)*x2801*x2803))))+IKsqr((((cj1*x2803))+(((-1.0)*x2800*x2801))+(((-1.0)*x2798*x2799))+(((-1.0)*x2798*x2804))+(((-1.0)*x2801*x2802))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2804))+((sj1*x2799))+(((-1.0)*x2798*x2802))+(((-1.0)*x2798*x2800))+(((-1.0)*x2801*x2803))), (((cj1*x2803))+(((-1.0)*x2800*x2801))+(((-1.0)*x2798*x2799))+(((-1.0)*x2798*x2804))+(((-1.0)*x2801*x2802))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2805=IKcos(j2);
IkReal x2806=IKsin(j2);
IkReal x2807=(r10*sj0);
IkReal x2808=((0.076)*cj5);
IkReal x2809=(cj0*r00);
IkReal x2810=((0.076)*sj5);
IkReal x2811=(r11*sj0);
IkReal x2812=((1.0)*sj5);
IkReal x2813=((1.0)*cj0);
IkReal x2814=(cj0*r01);
IkReal x2815=((1.0)*sj1);
IkReal x2816=((0.3425)*sj1);
IkReal x2817=(sj4*sj5);
IkReal x2818=((1.0)*sj0);
IkReal x2819=(cj1*x2805);
IkReal x2820=((1.0)*cj5*sj4);
IkReal x2821=(cj1*x2806);
IkReal x2822=(sj1*x2806);
IkReal x2823=(x2805*x2815);
IkReal x2824=((1.0)*x2821);
IkReal x2825=(x2824+x2823);
evalcond[0]=((((-1.0)*r20*x2812))+(((-1.0)*cj5*r21))+(((-1.0)*x2825)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*x2806*x2815))+(((-1.0)*r21*sj4*x2812))+x2819);
evalcond[2]=(((cj5*x2814))+((cj5*x2811))+(((-1.0)*x2819))+((sj5*x2809))+((sj5*x2807))+x2822);
CheckValue<IkReal> x2826=IKPowWithIntegerCheck(cj4,-1);
if(!x2826.valid){
continue;
}
evalcond[3]=((((0.0775)*sj1*x2805))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-1.0)*x2806*x2816))+(((0.0775)*x2821))+(((0.3425)*x2819))+(((-0.076)*r22*sj4*(x2826.value))));
evalcond[4]=((((-1.0)*x2809*x2820))+(((-1.0)*cj4*r12*x2818))+((x2814*x2817))+(((-1.0)*x2825))+(((-1.0)*x2807*x2820))+(((-1.0)*cj4*r02*x2813))+((x2811*x2817)));
evalcond[5]=((((-1.0)*x2810*x2814))+(((-1.0)*x2810*x2811))+(((0.0775)*x2819))+((x2808*x2809))+(((-0.3425)*x2821))+(((0.2845)*sj1))+(((-1.0)*py*x2818))+(((0.0535)*cj1))+(((-1.0)*x2805*x2816))+(((-0.0775)*x2822))+((x2807*x2808))+(((-1.0)*px*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2827=(cj4*r22);
IkReal x2828=((1.0)*cj1);
IkReal x2829=(sj1*sj4);
IkReal x2830=(cj5*r20);
IkReal x2831=(r21*sj5);
IkReal x2832=(cj4*sj1);
IkReal x2833=(cj1*x2831);
if( IKabs((((x2829*x2830))+((cj4*x2833))+(((-1.0)*x2829*x2831))+((sj1*x2827))+(((-1.0)*cj4*x2828*x2830))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x2833))+(((-1.0)*x2830*x2832))+((x2831*x2832))+((r22*x2829))+(((-1.0)*sj4*x2828*x2830))+(((-1.0)*x2827*x2828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2829*x2830))+((cj4*x2833))+(((-1.0)*x2829*x2831))+((sj1*x2827))+(((-1.0)*cj4*x2828*x2830))+((cj1*r22*sj4))))+IKsqr((((sj4*x2833))+(((-1.0)*x2830*x2832))+((x2831*x2832))+((r22*x2829))+(((-1.0)*sj4*x2828*x2830))+(((-1.0)*x2827*x2828))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2829*x2830))+((cj4*x2833))+(((-1.0)*x2829*x2831))+((sj1*x2827))+(((-1.0)*cj4*x2828*x2830))+((cj1*r22*sj4))), (((sj4*x2833))+(((-1.0)*x2830*x2832))+((x2831*x2832))+((r22*x2829))+(((-1.0)*sj4*x2828*x2830))+(((-1.0)*x2827*x2828))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2834=IKcos(j2);
IkReal x2835=IKsin(j2);
IkReal x2836=((1.0)*sj4);
IkReal x2837=((0.076)*sj5);
IkReal x2838=(r11*sj0);
IkReal x2839=((1.0)*cj4);
IkReal x2840=(cj0*r02);
IkReal x2841=(cj0*r01);
IkReal x2842=(cj5*r20);
IkReal x2843=((1.0)*sj1);
IkReal x2844=(sj4*sj5);
IkReal x2845=(r21*sj5);
IkReal x2846=(cj4*sj5);
IkReal x2847=(r12*sj0);
IkReal x2848=(cj1*x2834);
IkReal x2849=(cj5*r10*sj0);
IkReal x2850=(cj0*cj5*r00);
IkReal x2851=(cj1*x2835);
IkReal x2852=(sj1*x2835);
IkReal x2853=(sj1*x2834);
IkReal x2854=(x2835*x2843);
evalcond[0]=(((cj4*r22))+(((-1.0)*x2836*x2845))+x2848+((sj4*x2842))+(((-1.0)*x2854)));
evalcond[1]=((((-1.0)*x2839*x2845))+((cj4*x2842))+(((-1.0)*r22*x2836))+x2851+x2853);
evalcond[2]=((((-0.3425)*x2852))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x2851))+(((0.0775)*x2853))+(((0.3425)*x2848))+pz+(((-0.076)*x2842))+((r21*x2837)));
evalcond[3]=((((-1.0)*x2839*x2850))+((x2838*x2846))+(((-1.0)*x2839*x2849))+x2848+((sj4*x2847))+((sj4*x2840))+((x2841*x2846))+(((-1.0)*x2854)));
evalcond[4]=(((x2838*x2844))+(((-1.0)*x2839*x2840))+(((-1.0)*x2839*x2847))+(((-1.0)*x2836*x2849))+(((-1.0)*x2836*x2850))+(((-1.0)*x2851))+((x2841*x2844))+(((-1.0)*x2834*x2843)));
evalcond[5]=((((-0.3425)*x2851))+(((-0.3425)*x2853))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((0.0775)*x2848))+(((-1.0)*x2837*x2838))+(((-1.0)*py*sj0))+(((0.076)*x2849))+(((-1.0)*x2837*x2841))+(((0.076)*x2850))+(((-0.0775)*x2852))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2855=((1.0)*cj4);
IkReal x2856=(r22*sj1);
IkReal x2857=((1.0)*sj4);
IkReal x2858=(cj1*r22);
IkReal x2859=(cj1*r21*sj5);
IkReal x2860=(cj5*r20*sj1);
IkReal x2861=(r21*sj1*sj5);
IkReal x2862=(cj1*cj5*r20);
if( IKabs((((cj4*x2862))+(((-1.0)*x2857*x2861))+((cj4*x2856))+((sj4*x2860))+(((-1.0)*x2857*x2858))+(((-1.0)*x2855*x2859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x2860))+(((-1.0)*x2855*x2861))+(((-1.0)*x2857*x2862))+(((-1.0)*x2856*x2857))+(((-1.0)*x2855*x2858))+((sj4*x2859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x2862))+(((-1.0)*x2857*x2861))+((cj4*x2856))+((sj4*x2860))+(((-1.0)*x2857*x2858))+(((-1.0)*x2855*x2859))))+IKsqr((((cj4*x2860))+(((-1.0)*x2855*x2861))+(((-1.0)*x2857*x2862))+(((-1.0)*x2856*x2857))+(((-1.0)*x2855*x2858))+((sj4*x2859))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x2862))+(((-1.0)*x2857*x2861))+((cj4*x2856))+((sj4*x2860))+(((-1.0)*x2857*x2858))+(((-1.0)*x2855*x2859))), (((cj4*x2860))+(((-1.0)*x2855*x2861))+(((-1.0)*x2857*x2862))+(((-1.0)*x2856*x2857))+(((-1.0)*x2855*x2858))+((sj4*x2859))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2863=IKcos(j2);
IkReal x2864=IKsin(j2);
IkReal x2865=(sj0*sj4);
IkReal x2866=(cj5*r10);
IkReal x2867=((0.076)*sj0);
IkReal x2868=((1.0)*sj4);
IkReal x2869=(r11*sj5);
IkReal x2870=((0.076)*sj5);
IkReal x2871=((1.0)*cj4);
IkReal x2872=(cj0*r02);
IkReal x2873=(cj0*r01);
IkReal x2874=((1.0)*sj1);
IkReal x2875=(r21*sj5);
IkReal x2876=(cj5*r20);
IkReal x2877=(cj1*x2863);
IkReal x2878=(cj0*cj5*r00);
IkReal x2879=(cj1*x2864);
IkReal x2880=(sj1*x2864);
IkReal x2881=(sj1*x2863);
IkReal x2882=(x2863*x2874);
IkReal x2883=((1.0)*x2879);
IkReal x2884=(x2882+x2883);
evalcond[0]=(((cj4*r22))+((sj4*x2876))+(((-1.0)*x2864*x2874))+(((-1.0)*x2868*x2875))+x2877);
evalcond[1]=(((cj4*x2876))+(((-1.0)*x2871*x2875))+(((-1.0)*r22*x2868))+(((-1.0)*x2884)));
evalcond[2]=((((0.3425)*x2877))+(((0.0775)*x2879))+(((-0.076)*x2876))+(((0.0535)*sj1))+(((0.0775)*x2881))+(((-0.2845)*cj1))+((r21*x2870))+pz+(((-0.3425)*x2880)));
evalcond[3]=((((-1.0)*x2877))+((sj4*x2872))+(((-1.0)*x2871*x2878))+((r12*x2865))+((cj4*sj0*x2869))+x2880+(((-1.0)*sj0*x2866*x2871))+((cj4*sj5*x2873)));
evalcond[4]=((((-1.0)*x2865*x2866))+(((-1.0)*r12*sj0*x2871))+((x2865*x2869))+(((-1.0)*x2871*x2872))+(((-1.0)*x2868*x2878))+((sj4*sj5*x2873))+(((-1.0)*x2884)));
evalcond[5]=((((0.0775)*x2877))+(((0.076)*x2878))+(((0.2845)*sj1))+((x2866*x2867))+(((-1.0)*x2870*x2873))+(((-1.0)*x2867*x2869))+(((0.0535)*cj1))+(((-0.0775)*x2880))+(((-0.3425)*x2879))+(((-1.0)*py*sj0))+(((-0.3425)*x2881))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2885=(cj1*cj4);
IkReal x2886=(r21*sj5);
IkReal x2887=((1.0)*cj3);
IkReal x2888=(cj5*r20);
IkReal x2889=(cj1*sj4);
IkReal x2890=(sj1*sj4);
IkReal x2891=(cj4*sj1);
CheckValue<IkReal> x2892=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x2892.valid){
continue;
}
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal((((cj3*x2888*x2890))+((x2885*x2886))+((cj3*r22*x2891))+((r22*x2889))+(((-1.0)*x2885*x2888))+(((-1.0)*x2886*x2887*x2890)))),IkReal(((((-1.0)*r22*x2885*x2887))+(((-1.0)*x2888*x2891))+((r22*x2890))+((x2886*x2891))+(((-1.0)*x2887*x2888*x2889))+((cj3*x2886*x2889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2892.value)))+(x2893.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2894=IKcos(j2);
IkReal x2895=IKsin(j2);
IkReal x2896=(r10*sj0);
IkReal x2897=((0.076)*cj5);
IkReal x2898=((1.0)*sj1);
IkReal x2899=(cj0*r00);
IkReal x2900=((0.076)*sj5);
IkReal x2901=(r11*sj0);
IkReal x2902=((1.0)*sj0);
IkReal x2903=((1.0)*sj5);
IkReal x2904=((1.0)*cj4);
IkReal x2905=(cj0*r01);
IkReal x2906=(cj0*r02);
IkReal x2907=(sj4*sj5);
IkReal x2908=(cj4*sj5);
IkReal x2909=(cj5*r20);
IkReal x2910=(cj1*x2894);
IkReal x2911=((1.0)*cj5*sj4);
IkReal x2912=(cj3*x2895);
IkReal x2913=(cj1*x2895);
IkReal x2914=(sj1*x2894);
IkReal x2915=(sj1*x2895);
evalcond[0]=(((sj3*x2913))+((sj3*x2914))+(((-1.0)*cj5*r21))+(((-1.0)*r20*x2903)));
evalcond[1]=((((-1.0)*r21*sj4*x2903))+((cj4*r22))+(((-1.0)*x2895*x2898))+x2910+((sj4*x2909)));
evalcond[2]=(((cj3*x2914))+(((-1.0)*cj4*r21*x2903))+((cj1*x2912))+((cj4*x2909))+(((-1.0)*r22*sj4)));
evalcond[3]=(((sj3*x2910))+(((-1.0)*sj3*x2895*x2898))+((sj5*x2899))+((sj5*x2896))+((cj5*x2901))+((cj5*x2905)));
evalcond[4]=((((0.0535)*sj1))+((r21*x2900))+(((0.0775)*x2913))+(((0.0775)*x2914))+(((-0.2845)*cj1))+pz+(((0.3425)*x2910))+(((-0.3425)*x2915))+(((-1.0)*r20*x2897)));
evalcond[5]=((((-1.0)*cj5*x2896*x2904))+((x2901*x2908))+((cj3*x2910))+((x2905*x2908))+(((-1.0)*cj5*x2899*x2904))+((r12*sj0*sj4))+(((-1.0)*x2898*x2912))+((sj4*x2906)));
evalcond[6]=((((-1.0)*x2899*x2911))+((x2901*x2907))+(((-1.0)*x2904*x2906))+((x2905*x2907))+(((-1.0)*x2896*x2911))+(((-1.0)*cj4*r12*x2902))+(((-1.0)*x2913))+(((-1.0)*x2894*x2898)));
evalcond[7]=((((-0.0775)*x2915))+(((-1.0)*x2900*x2901))+(((-1.0)*x2900*x2905))+(((0.2845)*sj1))+(((0.0775)*x2910))+(((0.0535)*cj1))+((x2896*x2897))+(((-0.3425)*x2913))+(((-0.3425)*x2914))+((x2897*x2899))+(((-1.0)*cj0*px))+(((-1.0)*py*x2902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2916=((1.0)*cj1);
IkReal x2917=(sj0*sj1);
IkReal x2918=(cj5*r11);
IkReal x2919=(r10*sj5);
IkReal x2920=(r20*sj5);
IkReal x2921=(cj5*r21);
IkReal x2922=(cj0*cj5*r01);
IkReal x2923=(cj0*r00*sj5);
CheckValue<IkReal> x2924=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2924.valid){
continue;
}
CheckValue<IkReal> x2925 = IKatan2WithCheck(IkReal((((sj1*x2922))+((sj1*x2923))+((x2917*x2919))+((x2917*x2918))+((cj1*x2921))+((cj1*x2920)))),IkReal(((((-1.0)*sj0*x2916*x2919))+(((-1.0)*sj0*x2916*x2918))+((sj1*x2920))+((sj1*x2921))+(((-1.0)*x2916*x2922))+(((-1.0)*x2916*x2923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2925.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2924.value)))+(x2925.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2926=IKcos(j2);
IkReal x2927=IKsin(j2);
IkReal x2928=(r10*sj0);
IkReal x2929=((0.076)*cj5);
IkReal x2930=((1.0)*sj1);
IkReal x2931=(cj0*r00);
IkReal x2932=((0.076)*sj5);
IkReal x2933=(r11*sj0);
IkReal x2934=((1.0)*sj0);
IkReal x2935=((1.0)*sj5);
IkReal x2936=((1.0)*cj4);
IkReal x2937=(cj0*r01);
IkReal x2938=(cj0*r02);
IkReal x2939=(sj4*sj5);
IkReal x2940=(cj4*sj5);
IkReal x2941=(cj5*r20);
IkReal x2942=(cj1*x2926);
IkReal x2943=((1.0)*cj5*sj4);
IkReal x2944=(cj3*x2927);
IkReal x2945=(cj1*x2927);
IkReal x2946=(sj1*x2926);
IkReal x2947=(sj1*x2927);
evalcond[0]=((((-1.0)*r20*x2935))+((sj3*x2945))+((sj3*x2946))+(((-1.0)*cj5*r21)));
evalcond[1]=(((sj4*x2941))+((cj4*r22))+(((-1.0)*x2927*x2930))+x2942+(((-1.0)*r21*sj4*x2935)));
evalcond[2]=(((cj1*x2944))+(((-1.0)*cj4*r21*x2935))+((cj4*x2941))+(((-1.0)*r22*sj4))+((cj3*x2946)));
evalcond[3]=(((sj5*x2931))+((sj5*x2928))+((cj5*x2937))+((cj5*x2933))+((sj3*x2942))+(((-1.0)*sj3*x2927*x2930)));
evalcond[4]=((((0.3425)*x2942))+(((-1.0)*r20*x2929))+(((-0.3425)*x2947))+((r21*x2932))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x2945))+(((0.0775)*x2946)));
evalcond[5]=((((-1.0)*cj5*x2928*x2936))+(((-1.0)*cj5*x2931*x2936))+((r12*sj0*sj4))+((x2933*x2940))+((cj3*x2942))+((x2937*x2940))+(((-1.0)*x2930*x2944))+((sj4*x2938)));
evalcond[6]=((((-1.0)*x2931*x2943))+(((-1.0)*x2945))+(((-1.0)*x2936*x2938))+(((-1.0)*cj4*r12*x2934))+((x2937*x2939))+((x2933*x2939))+(((-1.0)*x2928*x2943))+(((-1.0)*x2926*x2930)));
evalcond[7]=(((x2929*x2931))+(((-0.3425)*x2945))+(((-0.3425)*x2946))+((x2928*x2929))+(((0.2845)*sj1))+(((-0.0775)*x2947))+(((-1.0)*x2932*x2937))+(((-1.0)*x2932*x2933))+(((0.0535)*cj1))+(((0.0775)*x2942))+(((-1.0)*py*x2934))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2948=(cj5*r20);
IkReal x2949=(r20*sj5);
IkReal x2950=(r21*sj5);
IkReal x2951=(cj5*r21);
IkReal x2952=(cj1*sj3*sj4);
IkReal x2953=(cj4*r22*sj3);
IkReal x2954=(sj1*sj3*sj4);
CheckValue<IkReal> x2955=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2955.valid){
continue;
}
CheckValue<IkReal> x2956 = IKatan2WithCheck(IkReal((((cj1*x2949))+((sj1*x2953))+((x2948*x2954))+(((-1.0)*x2950*x2954))+((cj1*x2951)))),IkReal((((x2950*x2952))+((sj1*x2951))+(((-1.0)*x2948*x2952))+(((-1.0)*cj1*x2953))+((sj1*x2949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2956.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2955.value)))+(x2956.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2957=IKcos(j2);
IkReal x2958=IKsin(j2);
IkReal x2959=(r10*sj0);
IkReal x2960=((0.076)*cj5);
IkReal x2961=((1.0)*sj1);
IkReal x2962=(cj0*r00);
IkReal x2963=((0.076)*sj5);
IkReal x2964=(r11*sj0);
IkReal x2965=((1.0)*sj0);
IkReal x2966=((1.0)*sj5);
IkReal x2967=((1.0)*cj4);
IkReal x2968=(cj0*r01);
IkReal x2969=(cj0*r02);
IkReal x2970=(sj4*sj5);
IkReal x2971=(cj4*sj5);
IkReal x2972=(cj5*r20);
IkReal x2973=(cj1*x2957);
IkReal x2974=((1.0)*cj5*sj4);
IkReal x2975=(cj3*x2958);
IkReal x2976=(cj1*x2958);
IkReal x2977=(sj1*x2957);
IkReal x2978=(sj1*x2958);
evalcond[0]=((((-1.0)*r20*x2966))+((sj3*x2977))+((sj3*x2976))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+((sj4*x2972))+(((-1.0)*x2958*x2961))+(((-1.0)*r21*sj4*x2966))+x2973);
evalcond[2]=(((cj1*x2975))+((cj4*x2972))+(((-1.0)*cj4*r21*x2966))+(((-1.0)*r22*sj4))+((cj3*x2977)));
evalcond[3]=((((-1.0)*sj3*x2958*x2961))+((cj5*x2964))+((cj5*x2968))+((sj5*x2959))+((sj3*x2973))+((sj5*x2962)));
evalcond[4]=(((r21*x2963))+(((0.0535)*sj1))+(((-0.3425)*x2978))+(((-0.2845)*cj1))+(((-1.0)*r20*x2960))+pz+(((0.0775)*x2977))+(((0.0775)*x2976))+(((0.3425)*x2973)));
evalcond[5]=(((x2964*x2971))+(((-1.0)*cj5*x2959*x2967))+((x2968*x2971))+((r12*sj0*sj4))+(((-1.0)*cj5*x2962*x2967))+((cj3*x2973))+((sj4*x2969))+(((-1.0)*x2961*x2975)));
evalcond[6]=(((x2964*x2970))+(((-1.0)*x2957*x2961))+(((-1.0)*x2976))+(((-1.0)*cj4*r12*x2965))+(((-1.0)*x2962*x2974))+((x2968*x2970))+(((-1.0)*x2967*x2969))+(((-1.0)*x2959*x2974)));
evalcond[7]=((((-1.0)*x2963*x2964))+(((-1.0)*x2963*x2968))+(((0.2845)*sj1))+(((-0.3425)*x2977))+(((-0.3425)*x2976))+((x2960*x2962))+(((-0.0775)*x2978))+((x2959*x2960))+(((0.0535)*cj1))+(((-1.0)*py*x2965))+(((0.0775)*x2973))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2979=((0.076)*cj3);
IkReal x2980=((1.0)*cj3);
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.076)*r22)))),-1);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982 = IKatan2WithCheck(IkReal(((((-1.0)*py*x2980))+(((-1.0)*r11*sj5*x2979))+((cj5*r10*x2979)))),IkReal((((cj5*r00*x2979))+(((-1.0)*px*x2980))+(((-1.0)*r01*sj5*x2979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2982.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2981.value)))+(x2982.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2983=IKcos(j0);
IkReal x2984=IKsin(j0);
IkReal x2985=(sj4*sj5);
IkReal x2986=(cj4*sj5);
IkReal x2987=((1.0)*cj4);
IkReal x2988=((0.076)*sj5);
IkReal x2989=((1.0)*x2984);
IkReal x2990=(r11*x2983);
IkReal x2991=(r12*x2983);
IkReal x2992=(cj5*r00*x2984);
IkReal x2993=(cj5*r10*x2983);
evalcond[0]=(cj3+(((-1.0)*cj5*r01*x2989))+((cj5*x2990))+((r10*sj5*x2983))+(((-1.0)*r00*sj5*x2989)));
evalcond[1]=(((px*x2984))+(((0.076)*x2993))+((r01*x2984*x2988))+(((-0.076)*x2992))+(((-1.0)*x2988*x2990))+(((-1.0)*py*x2983)));
evalcond[2]=((((-1.0)*sj4*x2993))+((x2985*x2990))+(((-1.0)*x2987*x2991))+((cj4*r02*x2984))+((sj4*x2992))+(((-1.0)*r01*x2985*x2989)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*x2987*x2993))+((x2986*x2990))+(((-1.0)*r02*sj4*x2989))+((sj4*x2991))+((cj4*x2992))+(((-1.0)*r01*x2986*x2989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2994=((1.138)*sj3);
IkReal x2995=((1.138)*cj3);
IkReal x2996=((0.31)*cj5);
IkReal x2997=(cj4*r20);
IkReal x2998=((0.93)*sj5);
IkReal x2999=(cj4*r21);
IkReal x3000=(r22*sj4);
IkReal x3001=((0.912)*sj3);
IkReal x3002=(cj5*r20);
IkReal x3003=(r21*sj5);
IkReal x3004=((4.11)*sj4);
IkReal x3005=((0.93)*cj5);
IkReal x3006=((0.304)*cj3);
IkReal x3007=(pz*sj3);
IkReal x3008=((0.31)*sj5);
IkReal x3009=((0.304)*sj3);
IkReal x3010=((0.912)*cj3);
IkReal x3011=((1.37)*sj3);
IkReal x3012=(cj4*r22);
IkReal x3013=(cj3*pz);
IkReal x3014=((1.37)*cj3);
IkReal x3015=(r21*x3005);
IkReal x3016=((12.0)*x3007);
IkReal x3017=(r20*x2998);
IkReal x3018=((12.0)*x3013);
IkReal x3019=((0.93)*x3000);
IkReal x3020=((4.11)*sj3*x3012);
IkReal x3021=(x3001*x3002);
IkReal x3022=(x3001*x3003);
IkReal x3023=((4.11)*cj3*x3012);
IkReal x3024=(x3002*x3010);
IkReal x3025=(x2997*x3005);
IkReal x3026=(x3003*x3010);
IkReal x3027=(x2998*x2999);
IkReal x3028=((1.37)*sj4*x3003);
IkReal x3029=(sj3*x3002*x3004);
IkReal x3030=(sj3*x3003*x3004);
IkReal x3031=(cj3*x3002*x3004);
IkReal x3032=(cj3*x3003*x3004);
IkReal x3033=(x3029+x3021+x3020);
IkReal x3034=(x3031+x3025+x3024+x3023);
IkReal x3035=(x3016+x3017+x3015+x3030+x3022);
IkReal x3036=(x3018+x3019+x3032+x3027+x3026);
j1eval[0]=((IKabs((x3033+(((-1.0)*x3035))+x2994)))+(IKabs(((((-1.0)*x2995))+x3034+(((-1.0)*x3036)))))+(IKabs((x3034+(((-1.0)*x3036))+x2995)))+(IKabs(((((-1.0)*x2994))+((x3011*x3012))+(((-1.0)*x3003*x3009))+(((-1.0)*sj4*x3003*x3011))+((sj4*x3002*x3011))+(((-4.0)*x3007))+((x3002*x3009))+(((-1.0)*r20*x3008))+(((-1.0)*r21*x2996)))))+(IKabs(((((-1.0)*x2994))+x3033+(((-1.0)*x3035)))))+(((1.712)*(IKabs(cj3))))+(IKabs(((((-1.0)*x2995))+((x2996*x2997))+(((-1.0)*x3003*x3006))+((x3012*x3014))+(((-1.0)*sj4*x3003*x3014))+((sj4*x3002*x3014))+(((-0.31)*x3000))+(((-4.0)*x3013))+((x3002*x3006))+(((-1.0)*x2999*x3008)))))+(((1.712)*(IKabs(sj3)))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x3037=((1.138)*sj3);
IkReal x3038=(r20*sj5);
IkReal x3039=(pz*sj3);
IkReal x3040=((1.37)*sj4);
IkReal x3041=(cj5*r21);
IkReal x3042=((4.11)*sj4);
IkReal x3043=((0.93)*x3041);
IkReal x3044=((12.0)*x3039);
IkReal x3045=((0.93)*x3038);
IkReal x3046=((-0.428)*sj3);
IkReal x3047=((0.31)*x3038);
IkReal x3048=((4.0)*x3039);
IkReal x3049=((0.31)*x3041);
IkReal x3050=(r21*sj3*sj5);
IkReal x3051=(cj5*r20*sj3);
IkReal x3052=(cj4*r22*sj3);
IkReal x3053=((4.11)*x3052);
IkReal x3054=((0.912)*x3051);
IkReal x3055=((0.912)*x3050);
IkReal x3056=((1.37)*x3052);
IkReal x3057=((0.304)*x3051);
IkReal x3058=((0.304)*x3050);
IkReal x3059=(x3042*x3051);
IkReal x3060=(x3042*x3050);
IkReal x3061=(x3040*x3051);
IkReal x3062=(x3040*x3050);
IkReal x3063=(x3059+x3054+x3053);
IkReal x3064=(x3061+x3056+x3057);
IkReal x3065=(x3049+x3048+x3047+x3062+x3058);
IkReal x3066=(x3043+x3045+x3044+x3060+x3055);
op[0]=(x3064+(((-1.0)*x3065))+(((-1.0)*x3037)));
op[1]=x3046;
op[2]=(x3063+(((-1.0)*x3066))+(((-1.0)*x3037)));
op[3]=((-0.856)*sj3);
op[4]=(x3063+x3037+(((-1.0)*x3066)));
op[5]=x3046;
op[6]=(x3064+x3037+(((-1.0)*x3065)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3067=((1.138)*cj3);
IkReal x3068=(cj5*r20);
IkReal x3069=((0.31)*cj4);
IkReal x3070=(r21*sj5);
IkReal x3071=(cj3*sj4);
IkReal x3072=(r22*sj4);
IkReal x3073=((0.93)*cj4);
IkReal x3074=((0.304)*cj3);
IkReal x3075=((0.912)*cj3);
IkReal x3076=((0.428)*cj3);
IkReal x3077=(cj3*pz);
IkReal x3078=((12.0)*x3077);
IkReal x3079=((0.93)*x3072);
IkReal x3080=((0.31)*x3072);
IkReal x3081=((4.0)*x3077);
IkReal x3082=(cj3*cj4*r22);
IkReal x3083=(x3068*x3074);
IkReal x3084=((1.37)*x3082);
IkReal x3085=((4.11)*x3082);
IkReal x3086=(x3068*x3075);
IkReal x3087=(x3068*x3073);
IkReal x3088=(x3070*x3075);
IkReal x3089=(x3070*x3073);
IkReal x3090=(x3068*x3069);
IkReal x3091=(x3070*x3074);
IkReal x3092=(x3069*x3070);
IkReal x3093=((1.37)*x3068*x3071);
IkReal x3094=((4.11)*x3068*x3071);
IkReal x3095=((4.11)*x3070*x3071);
IkReal x3096=((1.37)*x3070*x3071);
IkReal x3097=(x3085+x3087+x3086+x3094);
IkReal x3098=(x3084+x3083+x3093+x3090);
IkReal x3099=(x3089+x3088+x3095+x3078+x3079);
IkReal x3100=(x3081+x3080+x3092+x3091+x3096);
j1evalpoly[0]=((((-1.0)*x3076*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*((x3097+x3067+(((-1.0)*x3099))))))+(((-1.0)*htj1*x3076))+x3098+x3067+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x3098+(((-1.0)*x3100))+(((-1.0)*x3067))))))+(((-1.0)*x3100))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*((x3097+(((-1.0)*x3099))+(((-1.0)*x3067)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x3101=(cj5*r20);
IkReal x3102=(r20*sj5);
IkReal x3103=(r21*sj5);
IkReal x3104=(cj5*r21);
IkReal x3105=(cj1*sj3*sj4);
IkReal x3106=(cj4*r22*sj3);
IkReal x3107=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((sj1*x3102))+((sj1*x3104))+((x3103*x3105))+(((-1.0)*cj1*x3106))+(((-1.0)*x3101*x3105)))))+(IKabs((((sj1*x3106))+((cj1*x3104))+((cj1*x3102))+(((-1.0)*x3103*x3107))+((x3101*x3107))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3108=(cj4*r22);
IkReal x3109=((1.0)*cj1);
IkReal x3110=(r20*sj1);
IkReal x3111=(cj5*sj4);
IkReal x3112=(cj5*r21);
IkReal x3113=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+((sj1*x3108))+((cj1*x3112))+((x3110*x3111))+(((-1.0)*sj1*x3113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3112))+((cj1*x3113))+((sj5*x3110))+(((-1.0)*r20*x3109*x3111))+(((-1.0)*x3108*x3109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+((sj1*x3108))+((cj1*x3112))+((x3110*x3111))+(((-1.0)*sj1*x3113))))+IKsqr((((sj1*x3112))+((cj1*x3113))+((sj5*x3110))+(((-1.0)*r20*x3109*x3111))+(((-1.0)*x3108*x3109))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+((sj1*x3108))+((cj1*x3112))+((x3110*x3111))+(((-1.0)*sj1*x3113))), (((sj1*x3112))+((cj1*x3113))+((sj5*x3110))+(((-1.0)*r20*x3109*x3111))+(((-1.0)*x3108*x3109))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3114=IKcos(j2);
IkReal x3115=IKsin(j2);
IkReal x3116=(r10*sj0);
IkReal x3117=((0.076)*cj5);
IkReal x3118=(cj0*r00);
IkReal x3119=((0.076)*sj5);
IkReal x3120=(r11*sj0);
IkReal x3121=((1.0)*sj5);
IkReal x3122=((1.0)*cj0);
IkReal x3123=(cj0*r01);
IkReal x3124=((1.0)*sj1);
IkReal x3125=((0.3425)*sj1);
IkReal x3126=(sj4*sj5);
IkReal x3127=((1.0)*sj0);
IkReal x3128=(cj1*x3114);
IkReal x3129=((1.0)*cj5*sj4);
IkReal x3130=(cj1*x3115);
IkReal x3131=(sj1*x3114);
IkReal x3132=(x3115*x3124);
evalcond[0]=(x3131+x3130+(((-1.0)*r20*x3121))+(((-1.0)*cj5*r21)));
evalcond[1]=(x3128+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x3121))+(((-1.0)*x3132)));
evalcond[2]=(x3128+((sj5*x3118))+((sj5*x3116))+((cj5*x3120))+((cj5*x3123))+(((-1.0)*x3132)));
CheckValue<IkReal> x3133=IKPowWithIntegerCheck(cj4,-1);
if(!x3133.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*x3115*x3125))+(((0.0775)*x3130))+(((0.0775)*x3131))+pz+(((0.3425)*x3128))+(((-0.076)*r22*sj4*(x3133.value))));
evalcond[4]=(((x3120*x3126))+(((-1.0)*x3114*x3124))+(((-1.0)*x3116*x3129))+(((-1.0)*x3130))+(((-1.0)*cj4*r12*x3127))+(((-1.0)*cj4*r02*x3122))+(((-1.0)*x3118*x3129))+((x3123*x3126)));
evalcond[5]=((((-1.0)*py*x3127))+(((-1.0)*x3114*x3125))+(((0.2845)*sj1))+(((0.0775)*x3128))+(((-0.0775)*sj1*x3115))+(((0.0535)*cj1))+(((-0.3425)*x3130))+(((-1.0)*x3119*x3120))+(((-1.0)*x3119*x3123))+((x3116*x3117))+(((-1.0)*px*x3122))+((x3117*x3118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3134=((1.0)*cj1);
IkReal x3135=(cj4*r22);
IkReal x3136=(cj5*r21);
IkReal x3137=((1.0)*sj1);
IkReal x3138=(r20*sj5);
IkReal x3139=(r21*sj4*sj5);
IkReal x3140=(cj5*r20*sj4);
if( IKabs((((sj1*x3140))+(((-1.0)*x3134*x3136))+(((-1.0)*x3134*x3138))+(((-1.0)*x3137*x3139))+((sj1*x3135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x3139))+(((-1.0)*x3136*x3137))+(((-1.0)*x3134*x3135))+(((-1.0)*x3137*x3138))+(((-1.0)*x3134*x3140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3140))+(((-1.0)*x3134*x3136))+(((-1.0)*x3134*x3138))+(((-1.0)*x3137*x3139))+((sj1*x3135))))+IKsqr((((cj1*x3139))+(((-1.0)*x3136*x3137))+(((-1.0)*x3134*x3135))+(((-1.0)*x3137*x3138))+(((-1.0)*x3134*x3140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3140))+(((-1.0)*x3134*x3136))+(((-1.0)*x3134*x3138))+(((-1.0)*x3137*x3139))+((sj1*x3135))), (((cj1*x3139))+(((-1.0)*x3136*x3137))+(((-1.0)*x3134*x3135))+(((-1.0)*x3137*x3138))+(((-1.0)*x3134*x3140))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3141=IKcos(j2);
IkReal x3142=IKsin(j2);
IkReal x3143=(r10*sj0);
IkReal x3144=((0.076)*cj5);
IkReal x3145=(cj0*r00);
IkReal x3146=((0.076)*sj5);
IkReal x3147=(r11*sj0);
IkReal x3148=((1.0)*sj5);
IkReal x3149=((1.0)*cj0);
IkReal x3150=(cj0*r01);
IkReal x3151=((1.0)*sj1);
IkReal x3152=((0.3425)*sj1);
IkReal x3153=(sj4*sj5);
IkReal x3154=((1.0)*sj0);
IkReal x3155=(cj1*x3141);
IkReal x3156=((1.0)*cj5*sj4);
IkReal x3157=(cj1*x3142);
IkReal x3158=(sj1*x3142);
IkReal x3159=(x3141*x3151);
IkReal x3160=((1.0)*x3157);
IkReal x3161=(x3159+x3160);
evalcond[0]=((((-1.0)*r20*x3148))+(((-1.0)*cj5*r21))+(((-1.0)*x3161)));
evalcond[1]=(x3155+((cj4*r22))+(((-1.0)*x3142*x3151))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x3148)));
evalcond[2]=(((sj5*x3143))+((sj5*x3145))+x3158+(((-1.0)*x3155))+((cj5*x3150))+((cj5*x3147)));
CheckValue<IkReal> x3162=IKPowWithIntegerCheck(cj4,-1);
if(!x3162.valid){
continue;
}
evalcond[3]=((((0.0775)*sj1*x3141))+(((-1.0)*x3142*x3152))+(((0.0535)*sj1))+(((0.0775)*x3157))+(((-0.2845)*cj1))+(((0.3425)*x3155))+pz+(((-0.076)*r22*sj4*(x3162.value))));
evalcond[4]=((((-1.0)*x3145*x3156))+((x3147*x3153))+(((-1.0)*x3143*x3156))+((x3150*x3153))+(((-1.0)*cj4*r12*x3154))+(((-1.0)*cj4*r02*x3149))+(((-1.0)*x3161)));
evalcond[5]=((((-0.3425)*x3157))+(((-1.0)*x3146*x3147))+(((-1.0)*px*x3149))+(((-1.0)*x3146*x3150))+(((-1.0)*x3141*x3152))+(((0.2845)*sj1))+((x3144*x3145))+(((0.0775)*x3155))+((x3143*x3144))+(((-0.0775)*x3158))+(((0.0535)*cj1))+(((-1.0)*py*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3163=(cj4*r22);
IkReal x3164=((1.0)*cj1);
IkReal x3165=(sj1*sj4);
IkReal x3166=(cj5*r20);
IkReal x3167=(r21*sj5);
IkReal x3168=(cj4*sj1);
IkReal x3169=(cj1*x3167);
if( IKabs((((cj4*x3169))+(((-1.0)*cj4*x3164*x3166))+(((-1.0)*x3165*x3167))+((sj1*x3163))+((cj1*r22*sj4))+((x3165*x3166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3165))+(((-1.0)*x3163*x3164))+((x3167*x3168))+((sj4*x3169))+(((-1.0)*x3166*x3168))+(((-1.0)*sj4*x3164*x3166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x3169))+(((-1.0)*cj4*x3164*x3166))+(((-1.0)*x3165*x3167))+((sj1*x3163))+((cj1*r22*sj4))+((x3165*x3166))))+IKsqr((((r22*x3165))+(((-1.0)*x3163*x3164))+((x3167*x3168))+((sj4*x3169))+(((-1.0)*x3166*x3168))+(((-1.0)*sj4*x3164*x3166))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x3169))+(((-1.0)*cj4*x3164*x3166))+(((-1.0)*x3165*x3167))+((sj1*x3163))+((cj1*r22*sj4))+((x3165*x3166))), (((r22*x3165))+(((-1.0)*x3163*x3164))+((x3167*x3168))+((sj4*x3169))+(((-1.0)*x3166*x3168))+(((-1.0)*sj4*x3164*x3166))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3170=IKcos(j2);
IkReal x3171=IKsin(j2);
IkReal x3172=((1.0)*sj4);
IkReal x3173=((0.076)*sj5);
IkReal x3174=(r11*sj0);
IkReal x3175=((1.0)*cj4);
IkReal x3176=(cj0*r02);
IkReal x3177=(cj0*r01);
IkReal x3178=(cj5*r20);
IkReal x3179=((1.0)*sj1);
IkReal x3180=(sj4*sj5);
IkReal x3181=(r21*sj5);
IkReal x3182=(cj4*sj5);
IkReal x3183=(r12*sj0);
IkReal x3184=(cj1*x3170);
IkReal x3185=(cj5*r10*sj0);
IkReal x3186=(cj0*cj5*r00);
IkReal x3187=(cj1*x3171);
IkReal x3188=(sj1*x3171);
IkReal x3189=(sj1*x3170);
IkReal x3190=(x3171*x3179);
evalcond[0]=(x3184+((cj4*r22))+(((-1.0)*x3172*x3181))+(((-1.0)*x3190))+((sj4*x3178)));
evalcond[1]=(x3187+x3189+((cj4*x3178))+(((-1.0)*x3175*x3181))+(((-1.0)*r22*x3172)));
evalcond[2]=((((-0.3425)*x3188))+(((0.0535)*sj1))+(((0.3425)*x3184))+(((-0.2845)*cj1))+(((-0.076)*x3178))+((r21*x3173))+pz+(((0.0775)*x3187))+(((0.0775)*x3189)));
evalcond[3]=(x3184+((sj4*x3183))+(((-1.0)*x3175*x3186))+(((-1.0)*x3175*x3185))+((x3177*x3182))+((x3174*x3182))+(((-1.0)*x3190))+((sj4*x3176)));
evalcond[4]=((((-1.0)*x3172*x3186))+(((-1.0)*x3172*x3185))+(((-1.0)*x3175*x3183))+((x3177*x3180))+((x3174*x3180))+(((-1.0)*x3187))+(((-1.0)*x3170*x3179))+(((-1.0)*x3175*x3176)));
evalcond[5]=((((-0.0775)*x3188))+(((-0.3425)*x3189))+(((-0.3425)*x3187))+(((0.076)*x3185))+(((0.076)*x3186))+(((0.2845)*sj1))+(((-1.0)*x3173*x3177))+(((-1.0)*x3173*x3174))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.0775)*x3184))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3191=((1.0)*cj4);
IkReal x3192=(r22*sj1);
IkReal x3193=((1.0)*sj4);
IkReal x3194=(cj1*r22);
IkReal x3195=(cj1*r21*sj5);
IkReal x3196=(cj5*r20*sj1);
IkReal x3197=(r21*sj1*sj5);
IkReal x3198=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x3191*x3195))+((sj4*x3196))+(((-1.0)*x3193*x3197))+(((-1.0)*x3193*x3194))+((cj4*x3198))+((cj4*x3192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3191*x3194))+(((-1.0)*x3191*x3197))+((sj4*x3195))+(((-1.0)*x3193*x3198))+((cj4*x3196))+(((-1.0)*x3192*x3193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3191*x3195))+((sj4*x3196))+(((-1.0)*x3193*x3197))+(((-1.0)*x3193*x3194))+((cj4*x3198))+((cj4*x3192))))+IKsqr(((((-1.0)*x3191*x3194))+(((-1.0)*x3191*x3197))+((sj4*x3195))+(((-1.0)*x3193*x3198))+((cj4*x3196))+(((-1.0)*x3192*x3193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3191*x3195))+((sj4*x3196))+(((-1.0)*x3193*x3197))+(((-1.0)*x3193*x3194))+((cj4*x3198))+((cj4*x3192))), ((((-1.0)*x3191*x3194))+(((-1.0)*x3191*x3197))+((sj4*x3195))+(((-1.0)*x3193*x3198))+((cj4*x3196))+(((-1.0)*x3192*x3193))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3199=IKcos(j2);
IkReal x3200=IKsin(j2);
IkReal x3201=(sj0*sj4);
IkReal x3202=(cj5*r10);
IkReal x3203=((0.076)*sj0);
IkReal x3204=((1.0)*sj4);
IkReal x3205=(r11*sj5);
IkReal x3206=((0.076)*sj5);
IkReal x3207=((1.0)*cj4);
IkReal x3208=(cj0*r02);
IkReal x3209=(cj0*r01);
IkReal x3210=((1.0)*sj1);
IkReal x3211=(r21*sj5);
IkReal x3212=(cj5*r20);
IkReal x3213=(cj1*x3199);
IkReal x3214=(cj0*cj5*r00);
IkReal x3215=(cj1*x3200);
IkReal x3216=(sj1*x3200);
IkReal x3217=(sj1*x3199);
IkReal x3218=(x3199*x3210);
IkReal x3219=((1.0)*x3215);
IkReal x3220=(x3218+x3219);
evalcond[0]=(((cj4*r22))+((sj4*x3212))+(((-1.0)*x3204*x3211))+x3213+(((-1.0)*x3200*x3210)));
evalcond[1]=(((cj4*x3212))+(((-1.0)*r22*x3204))+(((-1.0)*x3207*x3211))+(((-1.0)*x3220)));
evalcond[2]=((((-0.076)*x3212))+(((-0.3425)*x3216))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x3215))+(((0.0775)*x3217))+pz+(((0.3425)*x3213))+((r21*x3206)));
evalcond[3]=((((-1.0)*sj0*x3202*x3207))+x3216+(((-1.0)*x3213))+((cj4*sj5*x3209))+((r12*x3201))+((cj4*sj0*x3205))+(((-1.0)*x3207*x3214))+((sj4*x3208)));
evalcond[4]=((((-1.0)*x3207*x3208))+(((-1.0)*x3204*x3214))+((sj4*sj5*x3209))+((x3201*x3205))+(((-1.0)*x3201*x3202))+(((-1.0)*r12*sj0*x3207))+(((-1.0)*x3220)));
evalcond[5]=((((-0.0775)*x3216))+(((-0.3425)*x3215))+(((-0.3425)*x3217))+(((0.2845)*sj1))+(((0.0775)*x3213))+((x3202*x3203))+(((-1.0)*x3203*x3205))+(((0.0535)*cj1))+(((0.076)*x3214))+(((-1.0)*py*sj0))+(((-1.0)*x3206*x3209))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3221=(cj1*cj4);
IkReal x3222=(r21*sj5);
IkReal x3223=((1.0)*cj3);
IkReal x3224=(cj5*r20);
IkReal x3225=(cj1*sj4);
IkReal x3226=(sj1*sj4);
IkReal x3227=(cj4*sj1);
CheckValue<IkReal> x3228 = IKatan2WithCheck(IkReal(((((-1.0)*x3222*x3223*x3226))+((cj3*r22*x3227))+((cj3*x3224*x3226))+((x3221*x3222))+(((-1.0)*x3221*x3224))+((r22*x3225)))),IkReal((((x3222*x3227))+(((-1.0)*x3223*x3224*x3225))+(((-1.0)*r22*x3221*x3223))+(((-1.0)*x3224*x3227))+((r22*x3226))+((cj3*x3222*x3225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3228.valid){
continue;
}
CheckValue<IkReal> x3229=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x3229.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3228.value)+(((1.5707963267949)*(x3229.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3230=IKcos(j2);
IkReal x3231=IKsin(j2);
IkReal x3232=(r10*sj0);
IkReal x3233=((0.076)*cj5);
IkReal x3234=((1.0)*sj1);
IkReal x3235=(cj0*r00);
IkReal x3236=((0.076)*sj5);
IkReal x3237=(r11*sj0);
IkReal x3238=((1.0)*sj0);
IkReal x3239=((1.0)*sj5);
IkReal x3240=((1.0)*cj4);
IkReal x3241=(cj0*r01);
IkReal x3242=(cj0*r02);
IkReal x3243=(sj4*sj5);
IkReal x3244=(cj4*sj5);
IkReal x3245=(cj5*r20);
IkReal x3246=(cj1*x3230);
IkReal x3247=((1.0)*cj5*sj4);
IkReal x3248=(cj3*x3231);
IkReal x3249=(cj1*x3231);
IkReal x3250=(sj1*x3230);
IkReal x3251=(sj1*x3231);
evalcond[0]=(((sj3*x3250))+((sj3*x3249))+(((-1.0)*r20*x3239))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+x3246+(((-1.0)*x3231*x3234))+(((-1.0)*r21*sj4*x3239))+((sj4*x3245)));
evalcond[2]=((((-1.0)*cj4*r21*x3239))+((cj3*x3250))+((cj4*x3245))+((cj1*x3248))+(((-1.0)*r22*sj4)));
evalcond[3]=(((cj5*x3237))+(((-1.0)*sj3*x3231*x3234))+((cj5*x3241))+((sj3*x3246))+((sj5*x3232))+((sj5*x3235)));
evalcond[4]=((((0.0775)*x3249))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x3251))+pz+(((-1.0)*r20*x3233))+(((0.0775)*x3250))+((r21*x3236))+(((0.3425)*x3246)));
evalcond[5]=((((-1.0)*cj5*x3232*x3240))+((x3237*x3244))+((r12*sj0*sj4))+(((-1.0)*cj5*x3235*x3240))+((x3241*x3244))+((cj3*x3246))+(((-1.0)*x3234*x3248))+((sj4*x3242)));
evalcond[6]=((((-1.0)*x3249))+(((-1.0)*x3240*x3242))+(((-1.0)*x3235*x3247))+(((-1.0)*x3230*x3234))+((x3237*x3243))+(((-1.0)*cj4*r12*x3238))+((x3241*x3243))+(((-1.0)*x3232*x3247)));
evalcond[7]=(((x3232*x3233))+(((-0.3425)*x3249))+(((-1.0)*x3236*x3241))+(((0.0775)*x3246))+(((0.2845)*sj1))+(((-1.0)*x3236*x3237))+(((-0.0775)*x3251))+(((-0.3425)*x3250))+(((0.0535)*cj1))+(((-1.0)*py*x3238))+(((-1.0)*cj0*px))+((x3233*x3235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3252=((1.0)*cj1);
IkReal x3253=(sj0*sj1);
IkReal x3254=(cj5*r11);
IkReal x3255=(r10*sj5);
IkReal x3256=(r20*sj5);
IkReal x3257=(cj5*r21);
IkReal x3258=(cj0*cj5*r01);
IkReal x3259=(cj0*r00*sj5);
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261 = IKatan2WithCheck(IkReal((((cj1*x3256))+((cj1*x3257))+((sj1*x3259))+((sj1*x3258))+((x3253*x3255))+((x3253*x3254)))),IkReal(((((-1.0)*sj0*x3252*x3255))+(((-1.0)*sj0*x3252*x3254))+((sj1*x3257))+((sj1*x3256))+(((-1.0)*x3252*x3259))+(((-1.0)*x3252*x3258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3261.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3260.value)))+(x3261.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3262=IKcos(j2);
IkReal x3263=IKsin(j2);
IkReal x3264=(r10*sj0);
IkReal x3265=((0.076)*cj5);
IkReal x3266=((1.0)*sj1);
IkReal x3267=(cj0*r00);
IkReal x3268=((0.076)*sj5);
IkReal x3269=(r11*sj0);
IkReal x3270=((1.0)*sj0);
IkReal x3271=((1.0)*sj5);
IkReal x3272=((1.0)*cj4);
IkReal x3273=(cj0*r01);
IkReal x3274=(cj0*r02);
IkReal x3275=(sj4*sj5);
IkReal x3276=(cj4*sj5);
IkReal x3277=(cj5*r20);
IkReal x3278=(cj1*x3262);
IkReal x3279=((1.0)*cj5*sj4);
IkReal x3280=(cj3*x3263);
IkReal x3281=(cj1*x3263);
IkReal x3282=(sj1*x3262);
IkReal x3283=(sj1*x3263);
evalcond[0]=(((sj3*x3281))+((sj3*x3282))+(((-1.0)*r20*x3271))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+x3278+(((-1.0)*r21*sj4*x3271))+(((-1.0)*x3263*x3266))+((sj4*x3277)));
evalcond[2]=(((cj3*x3282))+((cj4*x3277))+(((-1.0)*cj4*r21*x3271))+((cj1*x3280))+(((-1.0)*r22*sj4)));
evalcond[3]=(((cj5*x3273))+(((-1.0)*sj3*x3263*x3266))+((cj5*x3269))+((sj3*x3278))+((sj5*x3264))+((sj5*x3267)));
evalcond[4]=(((r21*x3268))+(((0.3425)*x3278))+(((0.0535)*sj1))+(((-1.0)*r20*x3265))+(((-0.2845)*cj1))+(((-0.3425)*x3283))+pz+(((0.0775)*x3282))+(((0.0775)*x3281)));
evalcond[5]=((((-1.0)*cj5*x3264*x3272))+((x3273*x3276))+((r12*sj0*sj4))+((cj3*x3278))+(((-1.0)*x3266*x3280))+(((-1.0)*cj5*x3267*x3272))+((sj4*x3274))+((x3269*x3276)));
evalcond[6]=((((-1.0)*x3272*x3274))+((x3273*x3275))+(((-1.0)*x3264*x3279))+(((-1.0)*x3262*x3266))+(((-1.0)*x3267*x3279))+(((-1.0)*cj4*r12*x3270))+(((-1.0)*x3281))+((x3269*x3275)));
evalcond[7]=((((-1.0)*x3268*x3273))+((x3265*x3267))+(((0.2845)*sj1))+(((0.0775)*x3278))+(((-0.3425)*x3282))+(((-0.3425)*x3281))+(((0.0535)*cj1))+(((-0.0775)*x3283))+(((-1.0)*py*x3270))+(((-1.0)*cj0*px))+((x3264*x3265))+(((-1.0)*x3268*x3269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3284=(cj5*r20);
IkReal x3285=(r20*sj5);
IkReal x3286=(r21*sj5);
IkReal x3287=(cj5*r21);
IkReal x3288=(cj1*sj3*sj4);
IkReal x3289=(cj4*r22*sj3);
IkReal x3290=(sj1*sj3*sj4);
CheckValue<IkReal> x3291=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3291.valid){
continue;
}
CheckValue<IkReal> x3292 = IKatan2WithCheck(IkReal((((cj1*x3287))+((cj1*x3285))+((sj1*x3289))+((x3284*x3290))+(((-1.0)*x3286*x3290)))),IkReal((((x3286*x3288))+(((-1.0)*cj1*x3289))+((sj1*x3285))+((sj1*x3287))+(((-1.0)*x3284*x3288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3292.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3291.value)))+(x3292.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3293=IKcos(j2);
IkReal x3294=IKsin(j2);
IkReal x3295=(r10*sj0);
IkReal x3296=((0.076)*cj5);
IkReal x3297=((1.0)*sj1);
IkReal x3298=(cj0*r00);
IkReal x3299=((0.076)*sj5);
IkReal x3300=(r11*sj0);
IkReal x3301=((1.0)*sj0);
IkReal x3302=((1.0)*sj5);
IkReal x3303=((1.0)*cj4);
IkReal x3304=(cj0*r01);
IkReal x3305=(cj0*r02);
IkReal x3306=(sj4*sj5);
IkReal x3307=(cj4*sj5);
IkReal x3308=(cj5*r20);
IkReal x3309=(cj1*x3293);
IkReal x3310=((1.0)*cj5*sj4);
IkReal x3311=(cj3*x3294);
IkReal x3312=(cj1*x3294);
IkReal x3313=(sj1*x3293);
IkReal x3314=(sj1*x3294);
evalcond[0]=((((-1.0)*r20*x3302))+((sj3*x3312))+((sj3*x3313))+(((-1.0)*cj5*r21)));
evalcond[1]=(((sj4*x3308))+((cj4*r22))+x3309+(((-1.0)*r21*sj4*x3302))+(((-1.0)*x3294*x3297)));
evalcond[2]=(((cj4*x3308))+((cj3*x3313))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x3302))+((cj1*x3311)));
evalcond[3]=(((sj5*x3298))+((sj5*x3295))+((sj3*x3309))+(((-1.0)*sj3*x3294*x3297))+((cj5*x3304))+((cj5*x3300)));
evalcond[4]=((((-1.0)*r20*x3296))+(((0.0535)*sj1))+(((-0.3425)*x3314))+(((0.3425)*x3309))+(((-0.2845)*cj1))+((r21*x3299))+pz+(((0.0775)*x3312))+(((0.0775)*x3313)));
evalcond[5]=(((x3300*x3307))+((sj4*x3305))+(((-1.0)*cj5*x3298*x3303))+((r12*sj0*sj4))+((cj3*x3309))+(((-1.0)*cj5*x3295*x3303))+((x3304*x3307))+(((-1.0)*x3297*x3311)));
evalcond[6]=(((x3300*x3306))+(((-1.0)*x3293*x3297))+(((-1.0)*cj4*r12*x3301))+(((-1.0)*x3298*x3310))+((x3304*x3306))+(((-1.0)*x3312))+(((-1.0)*x3295*x3310))+(((-1.0)*x3303*x3305)));
evalcond[7]=((((-1.0)*py*x3301))+(((0.2845)*sj1))+(((-0.3425)*x3312))+(((-0.3425)*x3313))+(((-0.0775)*x3314))+((x3296*x3298))+((x3295*x3296))+(((0.0535)*cj1))+(((-1.0)*x3299*x3304))+(((-1.0)*x3299*x3300))+(((0.0775)*x3309))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - xarm6 (b4f5c67f3fa416ff6c2f6c402982e656)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
