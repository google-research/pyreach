/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-08-26 21:37:09.646883
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.1)*x5);
x13=((0.1)*x6);
x14=((0.1)*x0);
x15=((0.1)*x11);
x16=((1.0)*x11);
x17=((1.0)*x6);
x18=((1.0)*x8);
x19=((0.392)*x0);
x20=((0.1)*x2);
x21=((0.425)*x1);
x22=((1.0)*x5);
x23=((1.0)*x0);
x24=((0.392)*x11);
x25=(x11*x8);
x26=(x3*x4);
x27=(x1*x3);
x28=(x2*x4);
x29=(x0*x10);
x30=(x1*x2);
x31=(x10*x16);
x32=(x23*x27);
x33=(x16*x27);
x34=(x30+x26);
x35=((((-1.0)*x28))+(((1.0)*x27)));
x36=(x34*x5);
x37=(x35*x6);
x38=((((-1.0)*x32))+((x0*x28)));
x39=((((-1.0)*x33))+((x11*x28)));
x40=(x23*((x30+x26)));
x41=(x16*((x30+x26)));
x42=(x38*x5);
x43=(((x35*x5))+((x6*(((((-1.0)*x30))+(((-1.0)*x26)))))));
x44=(x42+((x40*x6)));
x45=(((x41*x6))+((x39*x5)));
x46=(((x17*(((((-1.0)*x32))+((x23*x28))))))+(((-1.0)*x22*x40)));
x47=(((x17*(((((-1.0)*x33))+((x16*x28))))))+(((-1.0)*x22*x41)));
eerot[0]=(((x46*x7))+((x9*(((((-1.0)*x18*x44))+x31)))));
eerot[1]=(((x7*(((((-1.0)*x31))+((x44*x8))))))+((x46*x9)));
eerot[2]=(((x10*x44))+x25);
eetrans[0]=(((x5*((((x14*x26))+((x14*x30))))))+((x19*x28))+(((-1.0)*x0*x21))+(((-1.0)*x19*x27))+(((0.134)*x11))+((x10*((((x12*x38))+((x13*x40))))))+((x6*((((x14*x27))+(((-1.0)*x14*x28))))))+((x15*x8)));
eerot[3]=(((x47*x7))+((x9*(((((-1.0)*x18*x45))+(((-1.0)*x10*x23)))))));
eerot[4]=(((x7*((x29+((x45*x8))))))+((x47*x9)));
eerot[5]=(((x10*x45))+(((-1.0)*x0*x18)));
eetrans[1]=(((x10*((((x12*x39))+((x13*x41))))))+(((-1.0)*x11*x21))+(((-0.134)*x0))+(((-1.0)*x24*x27))+(((-1.0)*x14*x8))+((x5*((((x15*x30))+((x15*x26))))))+((x24*x28))+((x6*(((((-1.0)*x15*x28))+((x15*x27)))))));
eerot[6]=(((x43*x7))+((x8*x9*((x37+x36)))));
eerot[7]=(((x43*x9))+((x7*x8*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x17*x35))+(((-1.0)*x22*x34)))));
eetrans[2]=((0.163)+(((-0.392)*x26))+(((-0.425)*x4))+((x10*(((((-1.0)*x12*x34))+(((-1.0)*x13*x35))))))+(((-0.392)*x30))+((x6*((((x1*x20))+(((0.1)*x26))))))+((x5*(((((-0.1)*x27))+((x20*x4)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((0.1)*r02))+(((-1.0)*px)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((0.1)*r12))+(((-1.0)*py)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.163)+(((-0.1)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x51=((0.2)*npx);
IkReal x52=((0.2)*npy);
IkReal x53=((0.1)*r22);
IkReal x54=((0.1)*r21);
IkReal x55=((-0.1)*r20);
IkReal x56=((-1.0)*r20);
IkReal x57=((-1.0)*rxp0_2);
IkReal x58=((-0.1)*r21);
IkReal x59=((-1.0)*r21);
IkReal x60=((-1.0)*rxp1_2);
IkReal x61=((-1.0)*npx);
IkReal x62=((-1.0)*r22);
IkReal x63=((-1.0)*npz);
matrixinvcoeffs[0]=x55;
matrixinvcoeffs[1]=x51;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x56;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x57;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x55;
matrixinvcoeffs[19]=x51;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x56;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x57;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x58;
matrixinvcoeffs[33]=x52;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x59;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x60;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x58;
matrixinvcoeffs[51]=x52;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x59;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x60;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x62;
matrixinvcoeffs[76]=x53;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x63;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x53;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x60;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x58;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x60;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x54;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x56;
matrixinvcoeffs[133]=x61;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x56;
matrixinvcoeffs[151]=x61;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x55;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x62;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x53;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x62;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x59;
matrixinvcoeffs[204]=x54;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x60;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x54;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x61;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x55;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x56;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x55;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x57;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x64=pz*pz;
IkReal x65=pp*pp;
IkReal x66=((0.2)*pz);
IkReal x67=(pp*r21);
IkReal x68=(gclwh13_10*rxp1_2);
IkReal x69=((0.00134)*r22);
IkReal x70=(npx*pz);
IkReal x71=((0.001)*r21);
IkReal x72=(pp*r20);
IkReal x73=(npy*pz);
IkReal x74=((4.0)*gclwh12_11);
IkReal x75=(gclwh10_11*r22);
IkReal x76=((0.00784)*r21);
IkReal x77=(pp*r22);
IkReal x78=(gclwh15_9*r20);
IkReal x79=(gclwh15_1*r20);
IkReal x80=(gclwh12_8*r21);
IkReal x81=((0.01)*r22);
IkReal x82=((0.2)*rxp2_2);
IkReal x83=(gclwh4_3*pp);
IkReal x84=(npz*pz);
IkReal x85=((2.0)*gclwh11_10);
IkReal x86=((0.01)*r21);
IkReal x87=(gclwh2_0*pz);
IkReal x88=(gclwh14_2*pz);
IkReal x89=(gclwh14_11*rxp0_2);
IkReal x90=((0.4)*rxp2_2);
IkReal x91=((0.00784)*r22);
IkReal x92=((1.0)*pz);
IkReal x93=((2.0)*gclwh4_11);
IkReal x94=((0.02)*r21);
IkReal x95=((0.1568)*rxp0_2);
IkReal x96=((0.0066)*rxp1_2);
IkReal x97=(gclwh8_2*r20);
IkReal x98=((0.0066)*rxp2_2);
IkReal x99=((0.01634)*r20);
IkReal x100=((9.045e-5)*r20);
IkReal x101=(gclwh14_8*r20);
IkReal x102=((0.02)*r22);
IkReal x103=((2.0)*gclwh9_10);
IkReal x104=(gclwh12_3*rxp1_2);
IkReal x105=(gclwh13_1*r21);
IkReal x106=((4.0)*gclwh14_11);
IkReal x107=((0.00268)*r20);
IkReal x108=(gclwh10_12*r22);
IkReal x109=((2.0)*gclwh13_10);
IkReal x110=((0.268)*gclwh14_14);
IkReal x111=(gclwh14_3*rxp0_2);
IkReal x112=((0.02)*rxp0_2);
IkReal x113=(gclwh12_14*r21);
IkReal x114=((2.0)*pp);
IkReal x115=((4.0)*gclwh11_10);
IkReal x116=(gclwh8_11*r20);
IkReal x117=((0.0132)*rxp2_2);
IkReal x118=((0.0132)*rxp0_2);
IkReal x119=((0.00817)*r22);
IkReal x120=(gclwh5_1*rxp2_2);
IkReal x121=((0.0268)*rxp2_2);
IkReal x122=(gclwh9_10*r20);
IkReal x123=(gclwh4_2*pz);
IkReal x124=(gclwh14_11*r20);
IkReal x125=((0.2)*rxp1_2);
IkReal x126=(gclwh5_0*rxp2_2);
IkReal x127=((0.1634)*rxp1_2);
IkReal x128=(gclwh13_15*r21);
IkReal x129=((4.0)*gclwh8_11);
IkReal x130=((0.00134)*r20);
IkReal x131=(gclwh3_3*r21);
IkReal x132=(gclwh5_1*r22);
IkReal x133=((0.0268)*rxp1_2);
IkReal x134=(gclwh7_13*r21);
IkReal x135=((2.0)*gclwh7_10);
IkReal x136=((0.0066)*rxp0_2);
IkReal x137=(gclwh13_9*rxp1_2);
IkReal x138=((0.00033)*r21);
IkReal x139=(gclwh2_1*r21);
IkReal x140=(gclwh7_0*pz);
IkReal x141=((0.536)*gclwh14_14);
IkReal x142=(gclwh6_11*rxp1_2);
IkReal x143=((0.17)*rxp2_2);
IkReal x144=((0.0536)*rxp1_2);
IkReal x145=(gclwh10_12*rxp2_2);
IkReal x146=((0.3268)*rxp1_2);
IkReal x147=((4.0)*gclwh9_10);
IkReal x148=((0.8)*rxp2_2);
IkReal x149=((0.04)*r22);
IkReal x150=((0.01634)*r21);
IkReal x151=((0.01)*r20);
IkReal x152=((4.0)*gclwh7_10);
IkReal x153=((0.1568)*rxp1_2);
IkReal x154=((0.2)*rxp0_2);
IkReal x155=((4.0)*gclwh4_11);
IkReal x156=((0.04)*r21);
IkReal x157=(gclwh10_2*r22);
IkReal x158=((0.2)*pp);
IkReal x159=(gclwh13_9*r21);
IkReal x160=((0.17)*rxp0_2);
IkReal x161=((0.268)*gclwh4_14);
IkReal x162=(gclwh12_8*rxp1_2);
IkReal x163=((0.8)*rxp0_2);
IkReal x164=((2.0)*gclwh6_11);
IkReal x165=(gclwh6_12*r21);
IkReal x166=(gclwh1_3*r20);
IkReal x167=((0.02)*rxp2_2);
IkReal x168=((0.0268)*rxp0_2);
IkReal x169=(gclwh8_2*rxp0_2);
IkReal x170=((0.1634)*rxp0_2);
IkReal x171=((2.0)*gclwh12_11);
IkReal x172=(gclwh10_2*rxp2_2);
IkReal x173=((0.1072)*rxp1_2);
IkReal x174=((2.0)*gclwh5_10);
IkReal x175=(gclwh11_0*r22);
IkReal x176=((0.268)*gclwh13_15);
IkReal x177=(gclwh10_2*pz);
IkReal x178=((0.268)*gclwh15_15);
IkReal x179=(gclwh9_0*pz);
IkReal x180=(gclwh4_3*r22);
IkReal x181=((2.0)*gclwh8_11);
IkReal x182=((2.0)*gclwh15_10);
IkReal x183=((0.268)*gclwh5_15);
IkReal x184=(gclwh4_14*rxp2_2);
IkReal x185=(gclwh4_8*r22);
IkReal x186=((0.00268)*r22);
IkReal x187=(gclwh4_3*rxp2_2);
IkReal x188=(gclwh12_3*r21);
IkReal x189=(gclwh9_0*r20);
IkReal x190=((0.00817)*r20);
IkReal x191=((0.3268)*rxp0_2);
IkReal x192=((4.0)*gclwh6_11);
IkReal x193=(gclwh12_11*rxp1_2);
IkReal x194=(gclwh11_0*pz);
IkReal x195=(gclwh5_9*r22);
IkReal x196=(gclwh5_0*pz);
IkReal x197=((0.4)*rxp0_2);
IkReal x198=((0.0132)*rxp1_2);
IkReal x199=((0.00784)*r20);
IkReal x200=((0.1568)*rxp2_2);
IkReal x201=((0.1634)*rxp2_2);
IkReal x202=((0.00675445)*r20);
IkReal x203=((0.536)*gclwh12_14);
IkReal x204=(gclwh15_1*rxp0_2);
IkReal x205=(gclwh13_0*pz);
IkReal x206=(gclwh9_13*r20);
IkReal x207=(gclwh11_13*r22);
IkReal x208=((0.1072)*rxp0_2);
IkReal x209=((0.00066)*r21);
IkReal x210=((0.536)*gclwh4_14);
IkReal x211=(gclwh5_15*rxp2_2);
IkReal x212=((0.00134)*r21);
IkReal x213=(gclwh8_12*r20);
IkReal x214=(gclwh13_1*rxp1_2);
IkReal x215=(gclwh6_2*pz);
IkReal x216=((2.0)*gclwh14_11);
IkReal x217=((0.0536)*rxp0_2);
IkReal x218=((0.268)*gclwh12_14);
IkReal x219=(gclwh12_2*pz);
IkReal x220=(gclwh14_14*x168);
IkReal x221=(gclwh6_5*x212);
IkReal x222=(gclwh4_14*x121);
IkReal x223=(gclwh10_5*x69);
IkReal x224=(gclwh8_5*x130);
IkReal x225=(gclwh12_14*x133);
IkReal x226=((0.02)*x162);
IkReal x227=(gclwh12_11*x125);
IkReal x228=(gclwh4_8*x167);
IkReal x229=(gclwh4_11*x82);
IkReal x230=(gclwh6_11*x86);
IkReal x231=((0.01)*x116);
IkReal x232=((0.01)*x75);
IkReal x233=((0.2)*x89);
IkReal x234=(gclwh14_8*x112);
IkReal x235=((0.02)*x137);
IkReal x236=(gclwh11_10*x81);
IkReal x237=(gclwh15_10*x154);
IkReal x238=((0.01)*x122);
IkReal x239=(gclwh5_9*x167);
IkReal x240=(gclwh7_10*x86);
IkReal x241=(gclwh5_10*x82);
IkReal x242=(gclwh15_9*x112);
IkReal x243=((0.2)*x68);
IkReal x244=(gclwh15_15*x168);
IkReal x245=(gclwh7_7*x212);
IkReal x246=(gclwh13_15*x133);
IkReal x247=(gclwh9_7*x130);
IkReal x248=(gclwh11_7*x69);
IkReal x249=(gclwh5_15*x121);
IkReal x250=(gclwh8_5*x168);
IkReal x251=(gclwh10_5*x121);
IkReal x252=(gclwh14_14*x130);
IkReal x253=((0.00134)*x113);
IkReal x254=(gclwh4_14*x69);
IkReal x255=(gclwh6_5*x133);
IkReal x256=(gclwh12_11*x86);
IkReal x257=(gclwh10_11*x82);
IkReal x258=((0.001)*x185);
IkReal x259=(gclwh4_11*x81);
IkReal x260=(gclwh8_11*x154);
IkReal x261=(gclwh12_8*x71);
IkReal x262=((0.001)*x101);
IkReal x263=(gclwh6_11*x125);
IkReal x264=((0.01)*x124);
IkReal x265=((0.001)*x78);
IkReal x266=(gclwh11_10*x82);
IkReal x267=(gclwh13_10*x86);
IkReal x268=(gclwh5_10*x81);
IkReal x269=(gclwh9_10*x154);
IkReal x270=((0.001)*x195);
IkReal x271=(gclwh13_9*x71);
IkReal x272=(gclwh7_10*x125);
IkReal x273=(gclwh15_10*x151);
IkReal x274=(gclwh5_15*x69);
IkReal x275=((0.00134)*x128);
IkReal x276=(gclwh7_7*x133);
IkReal x277=(gclwh11_7*x121);
IkReal x278=(gclwh9_7*x168);
IkReal x279=(gclwh15_15*x130);
IkReal x280=((0.4)*x89);
IkReal x281=((0.02)*x75);
IkReal x282=((0.02)*x116);
IkReal x283=(gclwh14_14*x217);
IkReal x284=(gclwh12_14*x144);
IkReal x285=((0.0536)*x184);
IkReal x286=(gclwh4_11*x90);
IkReal x287=(gclwh6_11*x94);
IkReal x288=((0.4)*x193);
IkReal x289=(gclwh13_15*x144);
IkReal x290=((0.0536)*x211);
IkReal x291=(gclwh15_15*x217);
IkReal x292=(gclwh11_10*x102);
IkReal x293=(gclwh15_10*x197);
IkReal x294=((0.02)*x122);
IkReal x295=((0.4)*x68);
IkReal x296=(gclwh7_10*x94);
IkReal x297=(gclwh5_10*x90);
IkReal x298=((0.02)*x124);
IkReal x299=((0.4)*x142);
IkReal x300=(gclwh14_14*x107);
IkReal x301=((0.00268)*x113);
IkReal x302=(gclwh4_14*x186);
IkReal x303=(gclwh4_11*x102);
IkReal x304=(gclwh12_11*x94);
IkReal x305=(gclwh10_11*x90);
IkReal x306=(gclwh8_11*x197);
IkReal x307=(gclwh15_9*x70);
IkReal x308=((2.0)*x64);
IkReal x309=((1.0)*x65);
IkReal x310=((0.134)*gclwh6_5*x67);
IkReal x311=((0.268)*gclwh10_5*x84);
IkReal x312=((0.268)*gclwh8_5*x70);
IkReal x313=((0.268)*gclwh6_5*x73);
IkReal x314=((0.134)*gclwh8_5*x72);
IkReal x315=((0.134)*gclwh10_5*x77);
IkReal x316=(gclwh14_2*rxp0_2*x66);
IkReal x317=((2.0)*gclwh10_11*x84);
IkReal x318=(x181*x70);
IkReal x319=(x177*x77);
IkReal x320=(x177*x81);
IkReal x321=(x104*x158);
IkReal x322=(gclwh8_2*pz*x72);
IkReal x323=(x82*x83);
IkReal x324=((0.01)*pz*x97);
IkReal x325=(gclwh12_2*rxp1_2*x66);
IkReal x326=(x111*x158);
IkReal x327=(gclwh4_2*rxp2_2*x66);
IkReal x328=(x164*x73);
IkReal x329=(x215*x86);
IkReal x330=(gclwh13_1*pp*x125);
IkReal x331=(x194*x77);
IkReal x332=(gclwh5_1*pp*x82);
IkReal x333=(x135*x73);
IkReal x334=(gclwh15_0*rxp0_2*x66);
IkReal x335=(x194*x81);
IkReal x336=(x151*x179);
IkReal x337=(x179*x72);
IkReal x338=(gclwh15_1*pp*x154);
IkReal x339=(x84*x85);
IkReal x340=(x103*x70);
IkReal x341=(x126*x66);
IkReal x342=(gclwh13_0*rxp1_2*x66);
IkReal x343=(x140*x86);
IkReal x344=((0.268)*gclwh9_7*x70);
IkReal x345=((0.134)*gclwh7_7*x67);
IkReal x346=((0.268)*gclwh11_7*x84);
IkReal x347=((0.134)*gclwh11_7*x77);
IkReal x348=((0.268)*gclwh7_7*x73);
IkReal x349=((0.134)*gclwh9_7*x72);
IkReal x350=(x218*x73);
IkReal x351=((0.134)*gclwh14_14*x72);
IkReal x352=(x161*x84);
IkReal x353=((0.134)*gclwh12_14*x67);
IkReal x354=(x110*x70);
IkReal x355=((0.134)*gclwh4_14*x77);
IkReal x356=(x72*x88);
IkReal x357=(x151*x88);
IkReal x358=((0.1)*gclwh4_8*x77);
IkReal x359=(x188*x65);
IkReal x360=(gclwh1_2*pz*x151);
IkReal x361=(gclwh3_2*pz*x86);
IkReal x362=((0.1)*gclwh12_8*x67);
IkReal x363=(x131*x65);
IkReal x364=(x166*x65);
IkReal x365=(gclwh6_2*rxp1_2*x66);
IkReal x366=(x216*x70);
IkReal x367=(x180*x65);
IkReal x368=(gclwh14_8*npx*x66);
IkReal x369=(x84*x93);
IkReal x370=(gclwh4_8*npz*x66);
IkReal x371=(gclwh12_8*npy*x66);
IkReal x372=(x172*x66);
IkReal x373=(x123*x81);
IkReal x374=(x171*x73);
IkReal x375=(x169*x66);
IkReal x376=((0.1)*gclwh14_8*x72);
IkReal x377=(x219*x86);
IkReal x378=(x205*x86);
IkReal x379=(gclwh0_0*pz*x151);
IkReal x380=(gclwh11_0*rxp2_2*x66);
IkReal x381=(x86*x87);
IkReal x382=(gclwh13_9*npy*x66);
IkReal x383=(x65*x79);
IkReal x384=(x196*x77);
IkReal x385=(x196*x81);
IkReal x386=(x205*x67);
IkReal x387=(gclwh9_0*rxp0_2*x66);
IkReal x388=((0.1)*gclwh15_9*x72);
IkReal x389=(x182*x70);
IkReal x390=(x139*x65);
IkReal x391=(gclwh5_9*npz*x66);
IkReal x392=(gclwh0_1*r20*x65);
IkReal x393=(gclwh7_0*rxp1_2*x66);
IkReal x394=((0.1)*gclwh5_9*x77);
IkReal x395=(gclwh15_9*npx*x66);
IkReal x396=((0.1)*gclwh13_9*x67);
IkReal x397=(x174*x84);
IkReal x398=(gclwh15_0*pz*x151);
IkReal x399=(x109*x73);
IkReal x400=((0.134)*gclwh13_15*x67);
IkReal x401=(x178*x70);
IkReal x402=((0.134)*gclwh5_15*x77);
IkReal x403=(x183*x84);
IkReal x404=((0.134)*gclwh15_15*x72);
IkReal x405=(x176*x73);
IkReal x406=(x181*x72);
IkReal x407=(x114*x75);
IkReal x408=(x192*x73);
IkReal x409=(x129*x70);
IkReal x410=(x164*x67);
IkReal x411=((4.0)*gclwh10_11*x84);
IkReal x412=(x77*x85);
IkReal x413=(x152*x73);
IkReal x414=(x103*x72);
IkReal x415=(x135*x67);
IkReal x416=(x147*x70);
IkReal x417=(x115*x84);
IkReal x418=(x216*x72);
IkReal x419=(x73*x74);
IkReal x420=(x155*x84);
IkReal x421=(x210*x84);
IkReal x422=(x110*x72);
IkReal x423=(x203*x73);
IkReal x424=(x218*x67);
IkReal x425=(x141*x70);
IkReal x426=(x161*x77);
IkReal x427=(x77*x93);
IkReal x428=(x171*x67);
IkReal x429=(x106*x70);
IkReal x430=(gclwh6_2*npy*x308);
IkReal x431=(gclwh6_2*x67*x92);
IkReal x432=(gclwh10_2*npz*x308);
IkReal x433=(gclwh8_2*npx*x308);
IkReal x434=(gclwh7_0*npy*x308);
IkReal x435=(gclwh9_0*npx*x308);
IkReal x436=(gclwh11_0*npz*x308);
IkReal x437=(gclwh7_0*x67*x92);
IkReal x438=(gclwh12_2*npy*x308);
IkReal x439=(gclwh3_2*npy*x308);
IkReal x440=(gclwh1_2*npx*x308);
IkReal x441=(gclwh14_3*x114*x70);
IkReal x442=(gclwh4_2*npz*x308);
IkReal x443=((2.0)*x83*x84);
IkReal x444=(gclwh12_2*x67*x92);
IkReal x445=(gclwh1_2*x72*x92);
IkReal x446=(gclwh3_3*x114*x73);
IkReal x447=(gclwh4_2*x77*x92);
IkReal x448=(gclwh1_3*x114*x70);
IkReal x449=(gclwh3_2*x67*x92);
IkReal x450=(gclwh12_3*x114*x73);
IkReal x451=(gclwh14_2*npx*x308);
IkReal x452=(gclwh14_3*r20*x309);
IkReal x453=(gclwh0_0*npx*x308);
IkReal x454=(gclwh2_0*npy*x308);
IkReal x455=(gclwh5_1*x114*x84);
IkReal x456=(gclwh13_1*x114*x73);
IkReal x457=(gclwh15_0*npx*x308);
IkReal x458=(gclwh2_1*x114*x73);
IkReal x459=(gclwh0_1*x114*x70);
IkReal x460=(gclwh5_0*npz*x308);
IkReal x461=(gclwh13_0*npy*x308);
IkReal x462=(gclwh0_0*x72*x92);
IkReal x463=(gclwh15_0*x72*x92);
IkReal x464=((1.0)*x67*x87);
IkReal x465=(x105*x309);
IkReal x466=(x132*x309);
IkReal x467=(gclwh15_1*x114*x70);
IkReal x468=(x222+x225);
IkReal x469=(x285+x284);
IkReal x470=(x246+x249);
IkReal x471=(x277+x278);
IkReal x472=(x250+x251);
IkReal x473=(x290+x289);
IkReal x474=(x328+x232+x233+x231);
IkReal x475=(x333+x238+x236+x237);
IkReal x476=(x374+x369+x264+x263);
IkReal x477=(x397+x399+x272+x273);
IkReal x478=(x279+x403+x405+x404);
IkReal x479=(x311+x310+x312+x221);
IkReal x480=(x346+x344+x345+x245);
IkReal x481=(x300+x423+x422+x421);
IkReal x482=(x351+x350+x352+x252);
IkReal x483=(x366+x259+x256+x257+x260);
IkReal x484=(x389+x267+x266+x269+x268);
IkReal x485=(x339+x340+x243+x241+x240);
IkReal x486=(x318+x317+x229+x227+x230);
IkReal x487=(x315+x314+x313+x223+x224);
IkReal x488=(x298+x299+x418+x419+x420);
IkReal x489=(x274+x275+x401+x400+x402);
IkReal x490=(x353+x355+x354+x254+x253);
IkReal x491=(x302+x301+x426+x425+x424);
IkReal x492=(x347+x348+x349+x247+x248);
IkReal x493=(x288+x287+x286+x409+x410+x411);
IkReal x494=(x295+x296+x297+x416+x417+x415);
IkReal x495=(x282+x281+x280+x407+x406+x408);
IkReal x496=(x292+x293+x294+x412+x413+x414);
IkReal x497=(x306+x304+x305+x303+x429+x428+x427);
IkReal x498=(x338+x342+x343+x341+x242+x435+x436+x437);
IkReal x499=(x325+x326+x327+x329+x234+x431+x432+x433);
IkReal x500=(x324+x320+x321+x322+x323+x319+x316+x228+x226+x430);
IkReal x501=(x332+x331+x330+x337+x336+x335+x334+x239+x235+x434);
IkReal x502=(x395+x394+x396+x393+x398+x270+x271+x458+x459+x463+x462+x461+x460+x467+x466+x465+x464);
IkReal x503=(x357+x356+x359+x358+x368+x360+x361+x362+x363+x364+x365+x367+x258+x261+x438+x439+x441+x440+x442+x66);
IkReal x504=(x377+x376+x375+x373+x372+x371+x370+x262+x449+x448+x445+x444+x447+x446+x443+x452+x450+x451);
IkReal x505=(x386+x387+x384+x385+x382+x383+x380+x381+x388+x379+x378+x391+x390+x392+x265+x456+x457+x454+x455+x453+x66);
op[0]=((((0.817)*gclwh6_12*x67))+(((-1.0)*x487))+(((1.634)*gclwh8_12*x70))+(((0.00817)*x165))+(((-1.634)*gclwh6_12*x73))+(((-1.0)*gclwh12_8*x127))+(((-0.817)*gclwh10_12*x77))+x468+x479+((gclwh14_8*x170))+(((-1.0)*gclwh4_8*x201))+(((-1.0)*gclwh8_12*x190))+(((-0.00817)*x108))+(((-0.817)*gclwh8_12*x72))+(((-1.0)*x220))+(((1.634)*gclwh10_12*x84)));
op[1]=((((-0.135089)*x187))+(((-1.0)*x499))+(((-1.0)*x486))+(((-1.0)*gclwh6_11*x67))+x474+x500+((gclwh8_11*x72))+((pp*x75))+(((0.135089)*x111))+(((-0.135089)*x104)));
op[2]=((-0.210112)+(((-1.0)*x493))+x495);
op[3]=((((0.784)*gclwh8_2*x72))+(((-1.0)*gclwh6_2*x76))+(((-1.0)*gclwh12_2*x153))+(((0.00784)*x97))+(((-1.568)*gclwh10_2*x84))+(((-1.0)*gclwh14_8*x160))+(((-1.0)*x469))+(((-0.784)*gclwh6_2*x67))+((gclwh4_8*x143))+x283+(((1.568)*gclwh6_2*x73))+(((-1.568)*gclwh8_2*x70))+(((0.784)*gclwh10_2*x77))+((gclwh14_2*x95))+((gclwh10_2*x91))+(((-1.0)*gclwh4_2*x200))+(((0.17)*x162)));
op[4]=((((-1.0)*gclwh14_8*x136))+(((-0.033)*gclwh8_12*x72))+(((0.066)*gclwh8_12*x70))+(((0.033)*gclwh6_12*x67))+(((-1.0)*x487))+(((-0.033)*gclwh10_12*x77))+(((0.066)*gclwh10_12*x84))+(((-1.0)*x468))+(((-0.00033)*x213))+x220+((gclwh6_12*x138))+((gclwh12_8*x96))+x479+(((-0.00033)*x108))+(((-0.066)*gclwh6_12*x73))+((gclwh4_8*x98)));
op[5]=((((-1.0)*x499))+(((-0.001809)*x104))+(((-1.0)*x474))+(((0.001809)*x111))+x486+x500+(((-1.0)*pp*x75))+((gclwh6_11*x67))+(((-0.001809)*x187))+(((-1.0)*gclwh8_11*x72)));
op[6]=((((-1.0)*x498))+(((0.135089)*x204))+((gclwh7_10*x67))+(((-1.0)*x475))+(((-0.135089)*x214))+(((-1.0)*gclwh11_10*x77))+x485+x501+(((-1.0)*gclwh9_10*x72))+(((-0.135089)*x120)));
op[7]=((((0.00817)*x134))+(((-1.634)*gclwh7_13*x73))+(((-1.0)*x492))+(((-1.0)*gclwh5_9*x201))+(((-1.0)*gclwh11_13*x119))+(((-0.817)*gclwh11_13*x77))+((gclwh15_9*x170))+(((-1.0)*gclwh9_13*x190))+x480+x470+(((-1.0)*gclwh13_9*x127))+(((-1.0)*x244))+(((1.634)*gclwh11_13*x84))+(((0.817)*gclwh7_13*x67))+(((1.634)*gclwh9_13*x70))+(((-0.817)*gclwh9_13*x72)));
op[8]=((((-1.0)*gclwh5_9*x143))+(((-0.784)*gclwh7_0*x67))+(((-1.0)*gclwh7_0*x76))+(((-1.568)*gclwh11_0*x84))+(((1.568)*gclwh7_0*x73))+(((0.00784)*x189))+(((-1.0)*x291))+((gclwh15_0*x95))+((gclwh15_9*x160))+(((-1.0)*gclwh13_0*x153))+(((-1.568)*gclwh9_0*x70))+x473+(((0.784)*gclwh9_0*x72))+((gclwh11_0*x91))+(((-0.1568)*x126))+(((-0.17)*x137))+(((0.784)*gclwh11_0*x77)));
op[9]=((-0.210112)+(((-1.0)*x494))+x496);
op[10]=((((-0.001809)*x214))+(((-1.0)*x498))+((gclwh11_10*x77))+(((-1.0)*x485))+(((-1.0)*gclwh7_10*x67))+(((-0.001809)*x120))+(((0.001809)*x204))+x475+x501+((gclwh9_10*x72)));
op[11]=((((-0.00033)*x207))+(((-0.00033)*x206))+(((0.00033)*x134))+(((-1.0)*x492))+(((-0.066)*gclwh7_13*x73))+(((-1.0)*x470))+((gclwh13_9*x96))+(((-0.033)*gclwh9_13*x72))+x244+x480+((gclwh5_9*x98))+(((0.066)*gclwh11_13*x84))+(((0.033)*gclwh7_13*x67))+(((-0.033)*gclwh11_13*x77))+(((-1.0)*gclwh15_9*x136))+(((0.066)*gclwh9_13*x70)));
op[12]=((((-1.634)*gclwh14_8*x70))+(((1.634)*gclwh4_8*x84))+(((-0.817)*gclwh12_8*x67))+(((-1.0)*x482))+(((-1.0)*gclwh6_12*x127))+(((0.817)*gclwh14_8*x72))+(((-1.0)*gclwh4_8*x119))+(((-0.817)*gclwh4_8*x77))+(((0.1634)*x145))+x490+x472+(((-0.00817)*x80))+((gclwh8_12*x170))+(((1.634)*gclwh12_8*x73))+(((0.00817)*x101))+(((-1.0)*x255)));
op[13]=((-0.685445)+(((0.00675445)*x166))+(((1.35089)*gclwh3_3*x73))+(((-1.0)*gclwh12_11*x67))+(((1.35089)*gclwh1_3*x70))+(((-0.665445)*gclwh4_3*x77))+(((-1.0)*x483))+(((0.665445)*gclwh14_3*x72))+(((-1.0)*x504))+(((0.00675445)*x131))+(((-1.35089)*gclwh14_3*x70))+(((-0.685445)*gclwh3_3*x67))+(((-0.665445)*gclwh12_3*x67))+(((-0.00675445)*x180))+(((-0.00675445)*x188))+x476+(((-0.685445)*gclwh1_3*x72))+((gclwh14_11*x72))+(((1.35089)*gclwh4_3*x84))+(((1.35089)*gclwh12_3*x73))+x503+((gclwh14_3*x202))+(((-1.0)*gclwh4_11*x77)));
op[14]=((-0.089834)+(((-1.0)*x497))+x488);
op[15]=((((-1.0)*gclwh4_2*x91))+((gclwh1_2*x199))+(((-1.0)*gclwh8_2*x95))+(((1.568)*gclwh12_2*x73))+(((0.85)*gclwh4_8*x77))+(((-1.0)*x491))+((gclwh3_2*x76))+(((1.7)*gclwh14_8*x70))+(((-0.784)*gclwh3_2*x67))+(((0.0085)*x185))+(((1.568)*gclwh3_2*x73))+(((-1.7)*gclwh4_8*x84))+(((-0.1568)*x172))+(((-1.568)*gclwh14_2*x70))+(((-0.0085)*x101))+x481+(((-0.784)*gclwh4_2*x77))+(((-0.784)*gclwh1_2*x72))+(((-1.7)*gclwh12_8*x73))+(((-0.784)*gclwh12_2*x67))+(((-1.0)*gclwh12_2*x76))+(((0.784)*gclwh14_2*x72))+((gclwh6_2*x153))+(((0.0085)*x80))+((gclwh14_2*x199))+(((0.85)*gclwh12_8*x67))+(((1.568)*gclwh1_2*x70))+(((1.568)*gclwh4_2*x84))+(((-0.85)*gclwh14_8*x72)));
op[16]=(((gclwh8_12*x136))+(((0.066)*gclwh14_8*x70))+(((-1.0)*x490))+(((-0.066)*gclwh4_8*x84))+(((-0.066)*gclwh12_8*x73))+((gclwh10_12*x98))+(((-0.033)*gclwh14_8*x72))+(((0.033)*gclwh12_8*x67))+x482+x472+(((0.00033)*x185))+(((-0.00033)*x101))+(((0.033)*gclwh4_8*x77))+(((0.00033)*x80))+(((-1.0)*gclwh6_12*x96))+(((-1.0)*x255)));
op[17]=((0.019045)+(((0.01809)*gclwh12_3*x73))+((gclwh1_3*x100))+(((-0.019045)*gclwh3_3*x67))+(((0.01809)*gclwh4_3*x84))+(((-1.0)*x504))+(((-0.01809)*gclwh14_3*x70))+(((-0.019045)*gclwh1_3*x72))+((gclwh14_3*x100))+(((-1.0)*x476))+(((0.01809)*gclwh3_3*x73))+(((-0.000955)*gclwh14_3*x72))+(((0.000955)*gclwh12_3*x67))+(((9.045e-5)*x131))+x483+(((-9.045e-5)*x188))+(((-9.045e-5)*x180))+x503+(((0.01809)*gclwh1_3*x70))+(((0.000955)*gclwh4_3*x77))+((gclwh12_11*x67))+(((-1.0)*gclwh14_11*x72))+((gclwh4_11*x77)));
op[18]=((0.685445)+(((0.665445)*gclwh13_1*x67))+(((-1.0)*x484))+((gclwh0_1*x202))+(((-0.00675445)*x79))+(((1.35089)*gclwh2_1*x73))+(((-1.0)*x502))+(((0.00675445)*x139))+(((0.00675445)*x132))+(((-0.685445)*gclwh2_1*x67))+(((0.665445)*gclwh5_1*x77))+(((-0.685445)*gclwh0_1*x72))+(((1.35089)*gclwh0_1*x70))+(((-1.0)*gclwh5_10*x77))+(((0.00675445)*x105))+x477+(((-1.35089)*gclwh13_1*x73))+x505+(((-1.0)*gclwh13_10*x67))+((gclwh15_10*x72))+(((-0.665445)*gclwh15_1*x72))+(((1.35089)*gclwh15_1*x70))+(((-1.35089)*gclwh5_1*x84)));
op[19]=((((-0.817)*gclwh15_9*x72))+(((0.00817)*x159))+((gclwh7_13*x127))+(((-1.0)*x489))+(((0.817)*gclwh13_9*x67))+((gclwh5_9*x119))+(((-1.0)*x471))+(((-1.0)*gclwh9_13*x170))+(((-1.634)*gclwh13_9*x73))+x276+x478+(((-1.0)*gclwh11_13*x201))+(((1.634)*x307))+(((-1.634)*gclwh5_9*x84))+(((0.817)*gclwh5_9*x77))+(((-0.00817)*x78)));
op[20]=((((-0.85)*gclwh15_9*x72))+(((-1.7)*gclwh13_9*x73))+(((-1.7)*gclwh5_9*x84))+(((-0.784)*gclwh15_0*x72))+(((0.784)*gclwh5_0*x77))+(((1.568)*gclwh0_0*x70))+(((1.7)*x307))+(((0.0085)*x195))+(((-1.568)*gclwh13_0*x73))+((gclwh5_0*x91))+(((-1.0)*x183*x77))+(((0.0085)*x159))+(((-0.536)*gclwh15_15*x70))+(((-1.568)*gclwh5_0*x84))+(((0.784)*gclwh13_0*x67))+((gclwh2_0*x76))+(((-1.0)*gclwh15_0*x199))+((gclwh13_0*x76))+(((-0.0085)*x78))+(((0.85)*gclwh13_9*x67))+(((-1.0)*gclwh7_0*x153))+(((1.568)*gclwh15_0*x70))+((gclwh11_0*x200))+((x178*x72))+(((-0.784)*gclwh2_0*x67))+(((1.568)*gclwh2_0*x73))+(((0.536)*gclwh13_15*x73))+(((0.536)*gclwh5_15*x84))+(((0.85)*gclwh5_9*x77))+((gclwh0_0*x199))+(((-0.00268)*x128))+(((-0.784)*gclwh0_0*x72))+((gclwh9_0*x95))+(((-1.0)*gclwh5_15*x186))+(((-1.0)*x176*x67))+((gclwh15_15*x107)));
op[21]=((-0.089834)+(((-4.0)*gclwh5_10*x84))+((x174*x77))+((gclwh9_10*x197))+(((-0.4)*gclwh7_10*rxp1_2))+((gclwh5_10*x102))+(((-4.0)*gclwh13_10*x73))+(((-1.0)*x182*x72))+((gclwh11_10*x90))+(((4.0)*gclwh15_10*x70))+(((-0.02)*gclwh15_10*r20))+((x109*x67))+((gclwh13_10*x94)));
op[22]=((-0.019045)+((gclwh0_1*x100))+((gclwh13_10*x67))+(((-9.045e-5)*x79))+(((-1.0)*x502))+(((-0.019045)*gclwh0_1*x72))+(((-0.000955)*gclwh5_1*x77))+(((9.045e-5)*x105))+(((0.01809)*gclwh0_1*x70))+(((-1.0)*x477))+((gclwh5_10*x77))+(((0.000955)*gclwh15_1*x72))+(((9.045e-5)*x132))+(((9.045e-5)*x139))+(((-0.01809)*gclwh13_1*x73))+x484+(((-0.01809)*gclwh5_1*x84))+x505+(((0.01809)*gclwh2_1*x73))+(((0.01809)*gclwh15_1*x70))+(((-0.000955)*gclwh13_1*x67))+(((-0.019045)*gclwh2_1*x67))+(((-1.0)*gclwh15_10*x72)));
op[23]=((((-0.00033)*x195))+(((0.066)*gclwh5_9*x84))+(((0.033)*gclwh15_9*x72))+(((-1.0)*x471))+(((-1.0)*x478))+(((-0.033)*gclwh5_9*x77))+(((0.00033)*x78))+(((-0.066)*x307))+x276+(((-1.0)*gclwh11_13*x98))+x489+(((0.066)*gclwh13_9*x73))+(((-1.0)*gclwh9_13*x136))+((gclwh7_13*x96))+(((-0.033)*gclwh13_9*x67))+(((-1.0)*gclwh13_9*x138)));
op[24]=((-0.437912)+(((-1.0)*x493))+x495);
op[25]=((((-1.0)*gclwh12_2*x146))+(((0.01634)*x97))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.0)*gclwh6_2*x150))+(((-1.634)*gclwh6_2*x67))+(((-1.0)*x469))+(((-3.268)*gclwh10_2*x84))+(((1.634)*gclwh8_2*x72))+x283+(((0.01634)*x157))+(((1.634)*gclwh10_2*x77))+(((3.268)*gclwh6_2*x73))+((gclwh14_2*x191))+(((-3.268)*gclwh8_2*x70)));
op[26]=((((-3.136)*gclwh8_12*x70))+(((3.136)*gclwh6_12*x73))+(((1.568)*gclwh8_12*x72))+(((-0.01568)*x165))+((gclwh14_14*x208))+(((0.01568)*x108))+(((-1.568)*gclwh6_12*x67))+(((-1.0)*gclwh12_14*x173))+(((0.01568)*x213))+(((-3.136)*gclwh10_12*x84))+(((-0.1072)*x184))+(((1.568)*gclwh10_12*x77)));
op[27]=((((-0.8)*x89))+(((-0.04)*x75))+(((-1.0)*x129*x72))+(((-0.04)*x116))+(((-4.0)*pp*x75))+(((8.0)*gclwh8_11*x70))+(((0.8)*x193))+((x192*x67))+(((8.0)*gclwh10_11*x84))+((gclwh4_11*x148))+(((-8.0)*gclwh6_11*x73))+((gclwh6_11*x156)));
op[28]=((-0.017688)+(((-1.0)*x495))+x493);
op[29]=((((-1.0)*gclwh6_2*x209))+(((-1.0)*gclwh12_2*x198))+(((0.066)*gclwh8_2*x72))+(((-1.0)*gclwh4_2*x117))+(((0.00066)*x157))+((gclwh14_2*x118))+(((-0.132)*gclwh8_2*x70))+(((0.132)*gclwh6_2*x73))+(((-0.132)*gclwh10_2*x84))+x469+(((0.00066)*x97))+(((0.066)*gclwh10_2*x77))+(((-1.0)*x283))+(((-0.066)*gclwh6_2*x67)));
op[30]=((((3.268)*gclwh7_0*x73))+(((-0.3268)*x126))+(((-1.634)*gclwh7_0*x67))+(((1.634)*gclwh11_0*x77))+(((-1.0)*x291))+(((-3.268)*gclwh11_0*x84))+((gclwh15_0*x191))+(((-3.268)*gclwh9_0*x70))+(((0.01634)*x175))+x473+(((-1.0)*gclwh7_0*x150))+(((-1.0)*gclwh13_0*x146))+(((1.634)*gclwh9_0*x72))+((gclwh9_0*x99)));
op[31]=((-0.437912)+(((-1.0)*x494))+x496);
op[32]=((((-1.0)*x152*x67))+(((-1.0)*gclwh5_10*x148))+((gclwh11_10*x149))+((gclwh15_10*x163))+((x115*x77))+(((-0.8)*x68))+(((-8.0)*gclwh9_10*x70))+(((8.0)*gclwh7_10*x73))+(((0.04)*x122))+(((-1.0)*gclwh7_10*x156))+(((-8.0)*gclwh11_10*x84))+((x147*x72)));
op[33]=((((-3.136)*gclwh9_13*x70))+(((-0.01568)*x134))+((gclwh15_15*x208))+(((3.136)*gclwh7_13*x73))+(((-3.136)*gclwh11_13*x84))+(((1.568)*gclwh11_13*x77))+(((0.01568)*x207))+(((0.01568)*x206))+(((-1.568)*gclwh7_13*x67))+(((-1.0)*gclwh13_15*x173))+(((-0.1072)*x211))+(((1.568)*gclwh9_13*x72)));
op[34]=((((0.00066)*x189))+(((-1.0)*x473))+(((0.066)*gclwh11_0*x77))+((gclwh15_0*x118))+(((0.066)*gclwh9_0*x72))+(((0.00066)*x175))+(((-1.0)*gclwh5_0*x117))+(((-0.132)*gclwh9_0*x70))+(((-0.066)*gclwh7_0*x67))+x291+(((-1.0)*gclwh13_0*x198))+(((0.132)*gclwh7_0*x73))+(((-1.0)*gclwh7_0*x209))+(((-0.132)*gclwh11_0*x84)));
op[35]=((-0.017688)+(((-1.0)*x496))+x494);
op[36]=((1.299066)+(((-1.0)*x497))+x488);
op[37]=((((3.268)*gclwh12_2*x73))+(((-1.0)*x491))+(((-1.0)*gclwh12_2*x150))+(((3.268)*gclwh3_2*x73))+(((3.268)*gclwh1_2*x70))+(((-0.3268)*x172))+(((-0.3268)*x169))+((gclwh1_2*x99))+(((-1.634)*gclwh3_2*x67))+(((-3.268)*gclwh14_2*x70))+x481+(((-1.634)*gclwh4_2*x77))+((gclwh14_2*x99))+(((-1.634)*gclwh1_2*x72))+(((-0.01634)*gclwh4_2*r22))+(((3.268)*gclwh4_2*x84))+((gclwh3_2*x150))+(((1.634)*gclwh14_2*x72))+(((-1.634)*gclwh12_2*x67))+((gclwh6_2*x146)));
op[38]=((((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+(((-0.3136)*x145))+(((-0.3136)*gclwh8_12*rxp0_2))+((x141*x72))+(((-1.072)*gclwh14_14*x70))+(((-0.00536)*x113))+(((-1.0)*x210*x77))+(((1.072)*gclwh4_14*x84))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x73))+(((-1.0)*x203*x67)));
op[39]=((-0.03602)+((gclwh10_11*x148))+(((-0.8)*x142))+(((-0.04)*x124))+(((-8.0)*gclwh12_11*x73))+((x67*x74))+(((-8.0)*gclwh4_11*x84))+(((-1.0)*x106*x72))+(((8.0)*gclwh14_11*x70))+((gclwh12_11*x156))+((x155*x77))+((gclwh4_11*x149))+((gclwh8_11*x163)));
op[40]=((0.033734)+(((-1.0)*x488))+x497);
IkReal x506=pz*pz;
IkReal x507=pp*pp;
IkReal x508=((0.2)*pz);
IkReal x509=(pp*r21);
IkReal x510=((0.2)*rxp1_2);
IkReal x511=((0.00134)*r22);
IkReal x512=((0.066)*pz);
IkReal x513=(gclwh14_8*npx);
IkReal x514=((0.001)*r21);
IkReal x515=(pp*r20);
IkReal x516=(gclwh13_10*r21);
IkReal x517=(gclwh5_0*r22);
IkReal x518=((0.0132)*rxp2_2);
IkReal x519=((2.0)*pz);
IkReal x520=(gclwh7_10*npy);
IkReal x521=((0.02)*r22);
IkReal x522=((0.00784)*r21);
IkReal x523=(gclwh15_9*r20);
IkReal x524=(gclwh15_1*r20);
IkReal x525=(gclwh12_8*r21);
IkReal x526=((0.01)*r22);
IkReal x527=(gclwh6_12*npy);
IkReal x528=((0.2)*rxp2_2);
IkReal x529=(gclwh4_3*pp);
IkReal x530=(npz*pz);
IkReal x531=(gclwh2_0*pz);
IkReal x532=((0.01)*r21);
IkReal x533=(gclwh14_2*pz);
IkReal x534=((0.2)*rxp0_2);
IkReal x535=(gclwh8_2*pz);
IkReal x536=((0.00784)*r22);
IkReal x537=((1.0)*pz);
IkReal x538=(gclwh9_13*rxp0_2);
IkReal x539=(npx*pz);
IkReal x540=((0.1568)*rxp0_2);
IkReal x541=(npy*pz);
IkReal x542=((0.784)*pp);
IkReal x543=((0.0066)*rxp1_2);
IkReal x544=((0.536)*gclwh15_15);
IkReal x545=(pp*r22);
IkReal x546=((0.0066)*rxp2_2);
IkReal x547=((0.536)*gclwh5_15);
IkReal x548=(gclwh12_8*npy);
IkReal x549=((9.045e-5)*r20);
IkReal x550=(gclwh14_8*r20);
IkReal x551=(gclwh4_2*pz);
IkReal x552=(gclwh12_3*rxp1_2);
IkReal x553=(gclwh13_1*r21);
IkReal x554=((0.0132)*rxp1_2);
IkReal x555=(gclwh15_15*r20);
IkReal x556=((0.268)*gclwh14_14);
IkReal x557=((0.135089)*rxp0_2);
IkReal x558=((0.02)*rxp0_2);
IkReal x559=(gclwh12_14*r21);
IkReal x560=((0.00066)*r21);
IkReal x561=(gclwh5_1*pp);
IkReal x562=(gclwh8_11*r20);
IkReal x563=((0.02)*r21);
IkReal x564=((0.00817)*r22);
IkReal x565=(gclwh7_0*rxp1_2);
IkReal x566=((0.001809)*rxp2_2);
IkReal x567=(gclwh4_14*rxp2_2);
IkReal x568=((4.0)*gclwh15_10);
IkReal x569=((0.00066)*r20);
IkReal x570=(gclwh9_10*rxp0_2);
IkReal x571=(gclwh14_11*r20);
IkReal x572=((0.00033)*r22);
IkReal x573=((0.1634)*rxp1_2);
IkReal x574=(gclwh13_15*r21);
IkReal x575=((0.00134)*r20);
IkReal x576=(gclwh3_3*r21);
IkReal x577=(gclwh5_1*r22);
IkReal x578=(gclwh7_13*r21);
IkReal x579=(gclwh13_9*rxp1_2);
IkReal x580=((0.00033)*r21);
IkReal x581=(gclwh7_0*pz);
IkReal x582=(gclwh14_8*rxp0_2);
IkReal x583=((0.17)*rxp2_2);
IkReal x584=((0.0536)*rxp1_2);
IkReal x585=((0.1634)*rxp2_2);
IkReal x586=((0.1568)*rxp2_2);
IkReal x587=((0.01)*r20);
IkReal x588=((0.01634)*r21);
IkReal x589=(gclwh7_10*rxp1_2);
IkReal x590=(gclwh12_3*pp);
IkReal x591=(gclwh13_9*r21);
IkReal x592=((0.268)*gclwh4_14);
IkReal x593=(gclwh12_8*rxp1_2);
IkReal x594=((0.4)*rxp2_2);
IkReal x595=((0.0132)*rxp0_2);
IkReal x596=((0.00784)*r20);
IkReal x597=(gclwh1_3*r20);
IkReal x598=(gclwh14_3*pp);
IkReal x599=((0.02)*rxp2_2);
IkReal x600=((0.0268)*rxp0_2);
IkReal x601=(gclwh15_9*rxp0_2);
IkReal x602=((0.1568)*rxp1_2);
IkReal x603=((0.0268)*rxp1_2);
IkReal x604=((0.536)*gclwh13_15);
IkReal x605=(gclwh2_1*r21);
IkReal x606=((0.02)*r20);
IkReal x607=((0.4)*rxp1_2);
IkReal x608=((0.01634)*r20);
IkReal x609=((0.268)*gclwh13_15);
IkReal x610=(gclwh10_2*pz);
IkReal x611=(gclwh15_0*pz);
IkReal x612=((0.268)*gclwh15_15);
IkReal x613=(gclwh5_15*r22);
IkReal x614=(gclwh8_12*rxp0_2);
IkReal x615=(gclwh9_0*pz);
IkReal x616=(gclwh4_3*r22);
IkReal x617=((0.268)*gclwh5_15);
IkReal x618=((0.0268)*rxp2_2);
IkReal x619=(gclwh4_8*r22);
IkReal x620=((1.634)*pz);
IkReal x621=((4.0)*gclwh5_10);
IkReal x622=(npx*pp);
IkReal x623=((4.0)*gclwh13_10);
IkReal x624=(gclwh12_3*r21);
IkReal x625=(gclwh4_2*r22);
IkReal x626=((0.00817)*r20);
IkReal x627=((1.568)*npx);
IkReal x628=(gclwh0_1*r20);
IkReal x629=(npy*pp);
IkReal x630=(gclwh13_9*npy);
IkReal x631=(gclwh11_0*pz);
IkReal x632=(gclwh5_9*r22);
IkReal x633=((0.4)*rxp0_2);
IkReal x634=((0.135089)*rxp2_2);
IkReal x635=(gclwh13_0*pz);
IkReal x636=(gclwh14_3*r20);
IkReal x637=((0.00033)*r20);
IkReal x638=((0.00134)*r21);
IkReal x639=(gclwh13_1*rxp1_2);
IkReal x640=(gclwh6_2*pz);
IkReal x641=((0.0536)*rxp0_2);
IkReal x642=((0.001809)*rxp0_2);
IkReal x643=((0.268)*gclwh12_14);
IkReal x644=(gclwh12_2*pz);
IkReal x645=((0.00268)*x613);
IkReal x646=((0.00268)*x574);
IkReal x647=((0.00268)*x555);
IkReal x648=((0.4)*x589);
IkReal x649=(gclwh15_10*x606);
IkReal x650=((0.4)*x570);
IkReal x651=(gclwh5_10*x521);
IkReal x652=(gclwh11_10*x594);
IkReal x653=((0.02)*x516);
IkReal x654=((0.0268)*x567);
IkReal x655=(gclwh6_5*x638);
IkReal x656=(gclwh12_14*x603);
IkReal x657=(gclwh14_14*x600);
IkReal x658=(gclwh10_5*x511);
IkReal x659=(gclwh8_5*x575);
IkReal x660=((0.01)*x562);
IkReal x661=((0.02)*x593);
IkReal x662=(gclwh10_11*x526);
IkReal x663=(gclwh14_11*x534);
IkReal x664=(gclwh4_8*x599);
IkReal x665=(gclwh14_8*x558);
IkReal x666=(gclwh12_11*x510);
IkReal x667=(gclwh4_11*x528);
IkReal x668=(gclwh6_11*x532);
IkReal x669=((0.02)*x579);
IkReal x670=(gclwh7_10*x532);
IkReal x671=(gclwh5_10*x528);
IkReal x672=(gclwh5_9*x599);
IkReal x673=(gclwh13_10*x510);
IkReal x674=(gclwh11_10*x526);
IkReal x675=(gclwh15_10*x534);
IkReal x676=(gclwh9_10*x587);
IkReal x677=(gclwh15_9*x558);
IkReal x678=(gclwh13_15*x603);
IkReal x679=(gclwh5_15*x618);
IkReal x680=(gclwh7_7*x638);
IkReal x681=(gclwh15_15*x600);
IkReal x682=(gclwh9_7*x575);
IkReal x683=(gclwh11_7*x511);
IkReal x684=((0.00268)*x559);
IkReal x685=((0.00268)*gclwh4_14*r22);
IkReal x686=((0.00268)*gclwh14_14*r20);
IkReal x687=((0.00134)*x559);
IkReal x688=(gclwh8_5*x600);
IkReal x689=(gclwh10_5*x618);
IkReal x690=(gclwh4_14*x511);
IkReal x691=(gclwh6_5*x603);
IkReal x692=(gclwh14_14*x575);
IkReal x693=((0.001)*x619);
IkReal x694=(gclwh6_11*x510);
IkReal x695=((0.01)*x571);
IkReal x696=(gclwh12_8*x514);
IkReal x697=(gclwh12_11*x532);
IkReal x698=(gclwh10_11*x528);
IkReal x699=((0.001)*x550);
IkReal x700=(gclwh4_11*x526);
IkReal x701=(gclwh8_11*x534);
IkReal x702=((0.001)*x523);
IkReal x703=(gclwh7_10*x510);
IkReal x704=(gclwh15_10*x587);
IkReal x705=((0.001)*x632);
IkReal x706=(gclwh11_10*x528);
IkReal x707=(gclwh13_9*x514);
IkReal x708=((0.01)*x516);
IkReal x709=(gclwh5_10*x526);
IkReal x710=(gclwh9_10*x534);
IkReal x711=((0.00134)*x555);
IkReal x712=(gclwh7_7*x603);
IkReal x713=(gclwh11_7*x618);
IkReal x714=(gclwh5_15*x511);
IkReal x715=((0.00134)*x574);
IkReal x716=(gclwh9_7*x600);
IkReal x717=(gclwh15_9*x539);
IkReal x718=((2.0)*x506);
IkReal x719=((1.0)*x507);
IkReal x720=(x509*x609);
IkReal x721=(x545*x617);
IkReal x722=(x539*x544);
IkReal x723=(x515*x612);
IkReal x724=(x530*x547);
IkReal x725=(x541*x604);
IkReal x726=((2.0)*gclwh15_10*x515);
IkReal x727=(x530*x621);
IkReal x728=(x541*x623);
IkReal x729=((2.0)*gclwh13_10*x509);
IkReal x730=(x539*x568);
IkReal x731=((2.0)*gclwh5_10*x545);
IkReal x732=((0.134)*gclwh6_5*x509);
IkReal x733=((0.268)*gclwh10_5*x530);
IkReal x734=((0.268)*gclwh8_5*x539);
IkReal x735=((0.268)*gclwh6_5*x541);
IkReal x736=((0.134)*gclwh8_5*x515);
IkReal x737=((0.134)*gclwh10_5*x545);
IkReal x738=(gclwh14_2*rxp0_2*x508);
IkReal x739=(gclwh6_11*npy*x519);
IkReal x740=(x545*x610);
IkReal x741=(x526*x610);
IkReal x742=(x510*x590);
IkReal x743=(x515*x535);
IkReal x744=(x528*x529);
IkReal x745=(x535*x587);
IkReal x746=(gclwh12_2*rxp1_2*x508);
IkReal x747=(x534*x598);
IkReal x748=(gclwh4_2*rxp2_2*x508);
IkReal x749=(gclwh10_11*npz*x519);
IkReal x750=(x532*x640);
IkReal x751=(gclwh8_11*npx*x519);
IkReal x752=(gclwh11_10*npz*x519);
IkReal x753=(gclwh9_10*npx*x519);
IkReal x754=(gclwh13_1*pp*x510);
IkReal x755=(x545*x631);
IkReal x756=(x528*x561);
IkReal x757=(gclwh15_0*rxp0_2*x508);
IkReal x758=(x526*x631);
IkReal x759=(x587*x615);
IkReal x760=(x515*x615);
IkReal x761=(gclwh15_1*pp*x534);
IkReal x762=(gclwh5_0*rxp2_2*x508);
IkReal x763=(gclwh13_0*rxp1_2*x508);
IkReal x764=(x532*x581);
IkReal x765=(x519*x520);
IkReal x766=((0.268)*gclwh9_7*x539);
IkReal x767=((0.134)*gclwh7_7*x509);
IkReal x768=((0.268)*gclwh11_7*x530);
IkReal x769=((0.134)*gclwh11_7*x545);
IkReal x770=((0.268)*gclwh7_7*x541);
IkReal x771=((0.134)*gclwh9_7*x515);
IkReal x772=(x509*x643);
IkReal x773=((0.536)*gclwh14_14*x539);
IkReal x774=(x545*x592);
IkReal x775=((0.536)*gclwh4_14*x530);
IkReal x776=(x515*x556);
IkReal x777=((0.536)*gclwh12_14*x541);
IkReal x778=((0.134)*gclwh12_14*x509);
IkReal x779=(x539*x556);
IkReal x780=((0.134)*gclwh4_14*x545);
IkReal x781=(x541*x643);
IkReal x782=((0.134)*gclwh14_14*x515);
IkReal x783=(x530*x592);
IkReal x784=(x515*x533);
IkReal x785=(x533*x587);
IkReal x786=((0.1)*gclwh4_8*x545);
IkReal x787=(x507*x624);
IkReal x788=(gclwh1_2*pz*x587);
IkReal x789=(gclwh3_2*pz*x532);
IkReal x790=(gclwh4_11*npz*x519);
IkReal x791=((0.1)*gclwh12_8*x509);
IkReal x792=(x507*x576);
IkReal x793=(x507*x597);
IkReal x794=(gclwh6_2*rxp1_2*x508);
IkReal x795=(x507*x616);
IkReal x796=(gclwh12_11*npy*x519);
IkReal x797=(x508*x513);
IkReal x798=(gclwh4_8*npz*x508);
IkReal x799=(gclwh14_11*npx*x519);
IkReal x800=(x508*x548);
IkReal x801=(gclwh10_2*rxp2_2*x508);
IkReal x802=(x526*x551);
IkReal x803=(gclwh8_2*rxp0_2*x508);
IkReal x804=((0.1)*gclwh14_8*x515);
IkReal x805=(x532*x644);
IkReal x806=(x532*x635);
IkReal x807=(gclwh0_0*pz*x587);
IkReal x808=(gclwh11_0*rxp2_2*x508);
IkReal x809=(x531*x532);
IkReal x810=(x508*x630);
IkReal x811=(x507*x524);
IkReal x812=(pp*pz*x517);
IkReal x813=((0.01)*pz*x517);
IkReal x814=(x509*x635);
IkReal x815=(gclwh9_0*rxp0_2*x508);
IkReal x816=((0.1)*gclwh15_9*x515);
IkReal x817=(x507*x605);
IkReal x818=(gclwh5_10*npz*x519);
IkReal x819=(gclwh13_10*npy*x519);
IkReal x820=(gclwh5_9*npz*x508);
IkReal x821=(x507*x628);
IkReal x822=(x508*x565);
IkReal x823=((0.1)*gclwh5_9*x545);
IkReal x824=(gclwh15_9*npx*x508);
IkReal x825=((0.1)*gclwh13_9*x509);
IkReal x826=(gclwh15_10*npx*x519);
IkReal x827=(x587*x611);
IkReal x828=(x530*x617);
IkReal x829=((0.134)*gclwh15_15*x515);
IkReal x830=(x541*x609);
IkReal x831=((0.134)*gclwh13_15*x509);
IkReal x832=(x539*x612);
IkReal x833=((0.134)*gclwh5_15*x545);
IkReal x834=(gclwh6_2*npy*x718);
IkReal x835=(gclwh6_2*x509*x537);
IkReal x836=(gclwh10_2*npz*x718);
IkReal x837=(gclwh8_2*npx*x718);
IkReal x838=(gclwh7_0*npy*x718);
IkReal x839=(gclwh9_0*npx*x718);
IkReal x840=(gclwh11_0*npz*x718);
IkReal x841=(gclwh7_0*x509*x537);
IkReal x842=(gclwh12_2*npy*x718);
IkReal x843=(gclwh3_2*npy*x718);
IkReal x844=(gclwh1_2*npx*x718);
IkReal x845=(npx*x519*x598);
IkReal x846=(gclwh4_2*npz*x718);
IkReal x847=(npz*x519*x529);
IkReal x848=(gclwh12_2*x509*x537);
IkReal x849=(gclwh1_2*x515*x537);
IkReal x850=(gclwh3_3*x519*x629);
IkReal x851=(gclwh4_2*x537*x545);
IkReal x852=(gclwh1_3*x519*x622);
IkReal x853=(gclwh3_2*x509*x537);
IkReal x854=(npy*x519*x590);
IkReal x855=(gclwh14_2*npx*x718);
IkReal x856=(x636*x719);
IkReal x857=(gclwh0_0*npx*x718);
IkReal x858=(gclwh2_0*npy*x718);
IkReal x859=(npz*x519*x561);
IkReal x860=(gclwh13_1*x519*x629);
IkReal x861=(gclwh15_0*npx*x718);
IkReal x862=(gclwh2_1*x519*x629);
IkReal x863=(gclwh0_1*x519*x622);
IkReal x864=(gclwh5_0*npz*x718);
IkReal x865=(gclwh13_0*npy*x718);
IkReal x866=(gclwh0_0*x515*x537);
IkReal x867=(gclwh15_0*x515*x537);
IkReal x868=((1.0)*x509*x531);
IkReal x869=(x553*x719);
IkReal x870=(x577*x719);
IkReal x871=(gclwh15_1*x519*x622);
IkReal x872=(x689+x688);
IkReal x873=(x678+x679);
IkReal x874=(x713+x716);
IkReal x875=(x654+x656);
IkReal x876=(x660+x663+x662+x739);
IkReal x877=(x676+x674+x675+x765);
IkReal x878=(x703+x704+x818+x819);
IkReal x879=(x694+x695+x790+x796);
IkReal x880=(x647+x723+x724+x725);
IkReal x881=(x711+x829+x828+x830);
IkReal x882=(x655+x734+x733+x732);
IkReal x883=(x686+x777+x776+x775);
IkReal x884=(x692+x782+x783+x781);
IkReal x885=(x680+x768+x766+x767);
IkReal x886=(x697+x698+x700+x701+x799);
IkReal x887=(x710+x708+x709+x706+x826);
IkReal x888=(x673+x670+x671+x753+x752);
IkReal x889=(x668+x667+x666+x751+x749);
IkReal x890=(x649+x648+x726+x727+x728);
IkReal x891=(x685+x684+x773+x772+x774);
IkReal x892=(x658+x659+x737+x736+x735);
IkReal x893=(x715+x714+x831+x832+x833);
IkReal x894=(x683+x682+x771+x770+x769);
IkReal x895=(x687+x690+x779+x778+x780);
IkReal x896=(x646+x645+x720+x721+x722);
IkReal x897=(x650+x651+x652+x653+x731+x730+x729);
IkReal x898=(x677+x764+x761+x762+x763+x839+x841+x840);
IkReal x899=(x665+x750+x746+x747+x748+x835+x836+x837);
IkReal x900=(x669+x672+x755+x754+x757+x756+x759+x758+x760+x838);
IkReal x901=(x661+x664+x738+x744+x745+x742+x743+x740+x741+x834);
IkReal x902=(x707+x705+x869+x868+x867+x866+x865+x864+x863+x862+x870+x871+x823+x822+x827+x825+x824);
IkReal x903=(x508+x696+x693+x791+x793+x792+x795+x794+x797+x786+x787+x784+x785+x788+x789+x843+x842+x845+x844+x846);
IkReal x904=(x699+x798+x852+x853+x850+x851+x856+x854+x855+x847+x849+x848+x805+x804+x801+x800+x803+x802);
IkReal x905=(x508+x702+x857+x858+x859+x861+x860+x816+x817+x814+x815+x812+x813+x810+x811+x821+x820+x809+x808+x807+x806);
op[41]=((((-1.0)*gclwh10_2*x518))+((gclwh1_2*x569))+((gclwh3_2*x560))+(((0.132)*gclwh1_2*x539))+((gclwh14_2*x569))+(((-1.0)*gclwh12_2*x560))+(((-0.132)*npx*x533))+(((-0.066)*gclwh12_2*x509))+(((0.132)*gclwh3_2*x541))+(((-1.0)*x883))+(((0.132)*gclwh12_2*x541))+(((-0.066)*gclwh3_2*x509))+(((-0.066)*gclwh4_2*x545))+((gclwh6_2*x554))+(((-0.066)*gclwh1_2*x515))+(((0.132)*gclwh4_2*x530))+(((-1.0)*gclwh8_2*x595))+x891+(((-0.00066)*x625))+(((0.066)*gclwh14_2*x515)));
op[42]=((((0.3268)*gclwh11_0*rxp2_2))+(((0.3268)*gclwh9_0*rxp0_2))+(((-3.268)*gclwh5_0*x530))+(((1.634)*gclwh13_0*x509))+((gclwh13_0*x588))+(((-1.0)*x896))+(((3.268)*gclwh15_0*x539))+((gclwh2_0*x588))+(((3.268)*npy*x531))+(((-3.268)*gclwh13_0*x541))+(((-1.634)*gclwh15_0*x515))+(((3.268)*gclwh0_0*x539))+(((-1.634)*gclwh2_0*x509))+x880+(((-1.634)*gclwh0_0*x515))+(((1.634)*pp*x517))+(((0.01634)*x517))+(((-0.3268)*x565))+(((-1.0)*gclwh15_0*x608))+((gclwh0_0*x608)));
op[43]=((1.299066)+(((-1.0)*x890))+x897);
op[44]=((0.03602)+(((-0.8)*x589))+(((0.04)*x516))+((x509*x623))+((x545*x621))+(((0.04)*gclwh5_10*r22))+(((0.8)*gclwh11_10*rxp2_2))+(((0.8)*x570))+(((-8.0)*gclwh5_10*x530))+(((8.0)*gclwh15_10*x539))+(((-8.0)*gclwh13_10*x541))+(((-1.0)*x515*x568))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((-0.00536)*x555))+(((-1.072)*gclwh5_15*x530))+(((1.072)*gclwh15_15*x539))+(((-1.072)*gclwh13_15*x541))+(((0.3136)*x538))+(((0.00536)*x613))+(((-1.0)*x515*x544))+(((0.3136)*gclwh11_13*rxp2_2))+(((0.00536)*x574))+((x509*x604))+(((-0.3136)*gclwh7_13*rxp1_2))+((x545*x547)));
op[46]=(((gclwh9_0*x595))+(((-0.066)*gclwh0_0*x515))+(((-1.0)*gclwh7_0*x554))+(((-0.066)*gclwh15_0*x515))+(((0.066)*pp*x517))+(((0.066)*gclwh13_0*x509))+(((-0.132)*gclwh5_0*x530))+((gclwh0_0*x569))+(((-1.0)*x880))+((gclwh11_0*x518))+(((-0.066)*gclwh2_0*x509))+((gclwh13_0*x560))+((gclwh2_0*x560))+(((0.132)*npy*x531))+(((0.132)*gclwh15_0*x539))+(((-0.132)*gclwh13_0*x541))+x896+(((0.132)*gclwh0_0*x539))+(((-1.0)*gclwh15_0*x569))+(((0.00066)*x517)));
op[47]=((0.033734)+(((-1.0)*x897))+x890);
op[48]=((((-1.0)*gclwh12_8*x573))+(((0.1634)*x582))+(((0.817)*gclwh8_12*x515))+((gclwh8_12*x626))+(((-1.0)*x892))+(((0.817)*gclwh10_12*x545))+((x527*x620))+(((-0.00817)*gclwh6_12*r21))+((gclwh10_12*x564))+x657+(((-1.634)*gclwh8_12*x539))+(((-0.817)*gclwh6_12*x509))+(((-1.634)*gclwh10_12*x530))+x882+(((-1.0)*gclwh4_8*x585))+(((-1.0)*x875)));
op[49]=((((-1.0)*gclwh8_11*x515))+(((-1.0)*x899))+(((-1.0)*gclwh4_3*x634))+(((-1.0)*gclwh10_11*x545))+((gclwh14_3*x557))+(((-0.135089)*x552))+((gclwh6_11*x509))+x889+x901+(((-1.0)*x876)));
op[50]=((0.210112)+((gclwh12_11*x607))+(((2.0)*gclwh6_11*x509))+(((-0.02)*x562))+(((-4.0)*gclwh6_11*x541))+(((-2.0)*gclwh10_11*x545))+(((4.0)*gclwh8_11*x539))+((gclwh6_11*x563))+(((-2.0)*gclwh8_11*x515))+((gclwh4_11*x594))+(((4.0)*gclwh10_11*x530))+(((-1.0)*gclwh10_11*x521))+(((-1.0)*gclwh14_11*x633)));
op[51]=((((-1.0)*gclwh14_14*x641))+(((0.0536)*x567))+((gclwh4_8*x583))+(((-1.568)*gclwh6_2*x541))+((gclwh12_14*x584))+(((-1.0)*gclwh10_2*x536))+(((-0.784)*gclwh8_2*x515))+(((1.568)*gclwh10_2*x530))+(((0.784)*gclwh6_2*x509))+((gclwh6_2*x522))+((gclwh12_2*x602))+(((-1.0)*gclwh10_2*r22*x542))+(((-1.0)*gclwh14_2*x540))+(((-1.0)*gclwh8_2*x596))+(((0.17)*x593))+((gclwh4_2*x586))+((x535*x627))+(((-0.17)*x582)));
op[52]=(((gclwh12_8*x543))+(((-0.033)*gclwh6_12*x509))+((gclwh8_12*x637))+(((-1.0)*x892))+(((-1.0)*x657))+(((-0.0066)*x582))+(((0.033)*gclwh10_12*x545))+(((0.033)*gclwh8_12*x515))+((x512*x527))+((gclwh10_12*x572))+x875+x882+(((-1.0)*gclwh6_12*x580))+(((-1.0)*gclwh10_12*npz*x512))+(((-1.0)*gclwh8_12*npx*x512))+((gclwh4_8*x546)));
op[53]=((((-1.0)*gclwh4_3*x566))+(((-1.0)*gclwh6_11*x509))+(((-1.0)*x899))+((gclwh8_11*x515))+(((-1.0)*x889))+((gclwh14_3*x642))+x876+((gclwh10_11*x545))+x901+(((-0.001809)*x552)));
op[54]=((((-1.0)*x898))+(((-1.0)*x888))+(((-0.135089)*x639))+(((-1.0)*gclwh7_10*x509))+((gclwh11_10*x545))+((gclwh9_10*x515))+(((-1.0)*gclwh5_1*x634))+x877+((gclwh15_1*x557))+x900);
op[55]=(((gclwh11_13*x564))+(((-1.0)*gclwh5_9*x585))+(((0.817)*gclwh9_13*x515))+(((-1.0)*x894))+(((0.1634)*x601))+(((1.634)*gclwh7_13*x541))+((gclwh9_13*x626))+(((-0.00817)*x578))+(((-1.634)*gclwh11_13*x530))+(((0.817)*gclwh11_13*x545))+x681+(((-1.0)*gclwh13_9*x573))+x885+(((-1.634)*gclwh9_13*x539))+(((-0.817)*gclwh7_13*x509))+(((-1.0)*x873)));
op[56]=(((gclwh5_0*x586))+(((-1.0)*gclwh5_9*x583))+(((-1.0)*gclwh15_0*x540))+(((-1.0)*gclwh9_0*x596))+((gclwh15_15*x641))+(((1.568)*gclwh9_0*x539))+(((-1.568)*gclwh7_0*x541))+(((0.784)*gclwh7_0*x509))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh11_0*r22*x542))+((gclwh7_0*x522))+(((-0.784)*gclwh9_0*x515))+(((0.17)*x601))+((gclwh13_0*x602))+(((-1.0)*gclwh11_0*x536))+(((-0.17)*x579))+(((1.568)*gclwh11_0*x530))+(((-1.0)*gclwh13_15*x584)));
op[57]=((0.210112)+(((-1.0)*gclwh9_10*x606))+((gclwh7_10*x563))+(((-4.0)*pz*x520))+(((4.0)*gclwh11_10*x530))+(((2.0)*gclwh7_10*x509))+((gclwh5_10*x594))+(((-1.0)*gclwh11_10*x521))+(((-2.0)*gclwh9_10*x515))+((gclwh13_10*x607))+(((-1.0)*gclwh15_10*x633))+(((4.0)*gclwh9_10*x539))+(((-2.0)*gclwh11_10*x545)));
op[58]=((((-1.0)*gclwh9_10*x515))+((gclwh15_1*x642))+((gclwh7_10*x509))+(((-1.0)*x898))+(((-1.0)*gclwh5_1*x566))+(((-1.0)*gclwh11_10*x545))+x888+x900+(((-0.001809)*x639))+(((-1.0)*x877)));
op[59]=((((-0.0066)*x601))+((gclwh7_13*npy*x512))+(((-1.0)*x681))+(((-1.0)*gclwh9_13*npx*x512))+(((0.033)*gclwh9_13*x515))+(((-1.0)*x894))+((gclwh13_9*x543))+(((-0.00033)*x578))+((gclwh9_13*x637))+(((0.033)*gclwh11_13*x545))+((gclwh11_13*x572))+x873+x885+(((-0.033)*gclwh7_13*x509))+((gclwh5_9*x546))+(((-1.0)*gclwh11_13*npz*x512)));
op[60]=((((-1.0)*gclwh10_12*x585))+(((-0.1634)*x614))+(((0.817)*gclwh14_8*x515))+((gclwh6_12*x573))+(((1.634)*gclwh12_8*x541))+(((-0.00817)*x525))+(((-1.0)*x513*x620))+(((-1.0)*x895))+(((-0.817)*gclwh4_8*x545))+(((1.634)*gclwh4_8*x530))+(((0.00817)*x550))+(((-1.0)*gclwh4_8*x564))+(((-1.0)*x691))+x872+x884+(((-0.817)*gclwh12_8*x509)));
op[61]=((0.685445)+(((-0.665445)*gclwh12_3*x509))+(((0.665445)*gclwh14_3*x515))+(((-0.00675445)*x624))+(((-1.35089)*gclwh14_3*x539))+(((-1.0)*x904))+(((-0.00675445)*x616))+(((0.00675445)*x636))+(((0.00675445)*x576))+(((0.00675445)*x597))+(((1.35089)*gclwh4_3*x530))+(((-0.685445)*gclwh1_3*x515))+(((1.35089)*gclwh1_3*x539))+(((1.35089)*gclwh3_3*x541))+((gclwh4_11*x545))+((gclwh12_11*x509))+(((1.35089)*gclwh12_3*x541))+(((-0.665445)*r22*x529))+x886+x903+(((-0.685445)*gclwh3_3*x509))+(((-1.0)*gclwh14_11*x515))+(((-1.0)*x879)));
op[62]=((0.089834)+((gclwh10_11*x594))+(((-1.0)*gclwh6_11*x607))+(((-4.0)*gclwh12_11*x541))+((gclwh8_11*x633))+(((-0.02)*x571))+((gclwh12_11*x563))+(((-2.0)*gclwh14_11*x515))+(((2.0)*gclwh4_11*x545))+((gclwh4_11*x521))+(((4.0)*gclwh14_11*x539))+(((-4.0)*gclwh4_11*x530))+(((2.0)*gclwh12_11*x509)));
op[63]=((((-1.7)*gclwh12_8*x541))+(((0.85)*gclwh4_8*x545))+(((-1.568)*gclwh4_2*x530))+(((-1.568)*gclwh3_2*x541))+(((0.784)*gclwh3_2*x509))+(((0.784)*gclwh1_2*x515))+(((-0.784)*gclwh14_2*x515))+(((-1.568)*gclwh12_2*x541))+(((-1.0)*gclwh14_2*x596))+(((-1.0)*gclwh6_2*x602))+(((-1.0)*gclwh1_2*x596))+(((-1.0)*gclwh3_2*x522))+(((-1.0)*x883))+(((0.0085)*x619))+(((-0.85)*gclwh14_8*x515))+(((0.85)*gclwh12_8*x509))+(((1.7)*pz*x513))+((gclwh12_2*x522))+((gclwh10_2*x586))+(((0.0085)*x525))+((x533*x627))+((gclwh8_2*x540))+x891+(((-0.0085)*x550))+(((-1.7)*gclwh4_8*x530))+((gclwh4_2*x536))+(((-1.568)*gclwh1_2*x539))+((x542*x625))+(((0.784)*gclwh12_2*x509)));
op[64]=((((-0.033)*gclwh14_8*x515))+(((0.033)*gclwh4_8*x545))+(((0.00033)*x525))+((gclwh4_8*x572))+(((-1.0)*x884))+(((0.033)*gclwh12_8*x509))+((x512*x513))+(((-1.0)*x691))+(((-1.0)*x512*x548))+(((-1.0)*gclwh4_8*npz*x512))+x872+x895+(((-0.00033)*x550))+(((-1.0)*gclwh10_12*x546))+((gclwh6_12*x543))+(((-0.0066)*x614)));
op[65]=((-0.019045)+(((-1.0)*gclwh12_11*x509))+(((0.000955)*r22*x529))+(((-0.01809)*gclwh14_3*x539))+(((-1.0)*x904))+(((0.01809)*gclwh1_3*x539))+(((-1.0)*x886))+(((-1.0)*gclwh4_11*x545))+(((0.01809)*gclwh12_3*x541))+(((-9.045e-5)*x616))+((gclwh14_3*x549))+(((9.045e-5)*x576))+(((0.01809)*gclwh4_3*x530))+((gclwh14_11*x515))+(((-9.045e-5)*x624))+(((-0.019045)*gclwh3_3*x509))+x879+x903+(((-0.019045)*gclwh1_3*x515))+(((0.01809)*gclwh3_3*x541))+((gclwh1_3*x549))+(((-0.000955)*gclwh14_3*x515))+(((0.000955)*gclwh12_3*x509)));
op[66]=((-0.685445)+(((0.00675445)*x553))+(((0.00675445)*x605))+(((1.35089)*gclwh15_1*x539))+(((-1.0)*x902))+(((0.665445)*gclwh13_1*x509))+(((0.00675445)*x628))+(((0.00675445)*x577))+((gclwh5_10*x545))+(((1.35089)*gclwh2_1*x541))+(((-0.665445)*gclwh15_1*x515))+(((-1.35089)*gclwh13_1*x541))+(((-0.685445)*gclwh0_1*x515))+(((1.35089)*gclwh0_1*x539))+(((-0.685445)*gclwh2_1*x509))+(((0.665445)*gclwh5_1*x545))+x887+((gclwh13_10*x509))+(((-0.00675445)*x524))+x905+(((-1.35089)*gclwh5_1*x530))+(((-1.0)*gclwh15_10*x515))+(((-1.0)*x878)));
op[67]=((((0.1634)*x538))+((gclwh5_9*x564))+(((0.817)*gclwh5_9*x545))+(((-1.634)*gclwh13_9*x541))+(((-1.634)*gclwh5_9*x530))+(((-0.00817)*x523))+(((-1.0)*x881))+((gclwh11_13*x585))+(((-0.817)*gclwh15_9*x515))+(((1.634)*x717))+(((-1.0)*gclwh7_13*x573))+x712+x893+(((0.00817)*x591))+(((0.817)*gclwh13_9*x509))+(((-1.0)*x874)));
op[68]=((((0.85)*gclwh5_9*x545))+(((0.85)*gclwh13_9*x509))+(((1.568)*gclwh5_0*x530))+(((0.784)*gclwh0_0*x515))+(((-0.784)*gclwh13_0*x509))+(((-1.568)*npy*x531))+(((-1.0)*gclwh11_0*x586))+(((-1.0)*gclwh2_0*x522))+(((-1.568)*gclwh0_0*x539))+(((-1.0)*x880))+(((-1.0)*gclwh0_0*x596))+(((0.0085)*x591))+(((-1.0)*x517*x542))+(((-1.568)*gclwh15_0*x539))+(((-0.85)*gclwh15_9*x515))+(((0.784)*gclwh2_0*x509))+(((-1.0)*gclwh9_0*x540))+((gclwh15_0*x596))+(((-0.0085)*x523))+(((0.1568)*x565))+x896+(((1.568)*gclwh13_0*x541))+(((0.784)*gclwh15_0*x515))+(((0.0085)*x632))+(((-1.7)*gclwh5_9*x530))+(((-1.0)*gclwh13_0*x522))+(((-0.00784)*x517))+(((1.7)*x717))+(((-1.7)*gclwh13_9*x541)));
op[69]=((0.089834)+(((-1.0)*x897))+x890);
op[70]=((0.019045)+((gclwh0_1*x549))+(((0.01809)*gclwh0_1*x539))+(((0.01809)*gclwh2_1*x541))+(((-0.019045)*gclwh0_1*x515))+(((-1.0)*x902))+(((0.000955)*gclwh15_1*x515))+(((-1.0)*gclwh5_10*x545))+(((9.045e-5)*x605))+(((-0.01809)*gclwh5_1*x530))+(((-1.0)*x887))+(((-0.000955)*gclwh13_1*x509))+((gclwh15_10*x515))+(((9.045e-5)*x577))+(((-0.01809)*gclwh13_1*x541))+(((0.01809)*gclwh15_1*x539))+x878+(((-1.0)*gclwh13_10*x509))+(((-0.019045)*gclwh2_1*x509))+(((-9.045e-5)*x524))+x905+(((9.045e-5)*x553))+(((-0.000955)*gclwh5_1*x545)));
op[71]=((((-0.033)*gclwh5_9*x545))+(((0.0066)*x538))+(((-0.033)*gclwh13_9*x509))+(((0.00033)*x523))+(((-1.0)*x893))+(((-1.0)*gclwh5_9*x572))+(((-1.0)*gclwh7_13*x543))+(((-1.0)*gclwh13_9*x580))+(((-1.0)*gclwh15_9*npx*x512))+(((0.033)*gclwh15_9*x515))+((gclwh11_13*x546))+x712+x881+((x512*x630))+((gclwh5_9*npz*x512))+(((-1.0)*x874)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x906=htj1*htj1;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+x906),-1);
if(!x907.valid){
continue;
}
cj1array[numsolutions]=((x907.value)*(((1.0)+(((-1.0)*x906)))));
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x908.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x908.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x909=htj2*htj2;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+x909),-1);
if(!x910.valid){
continue;
}
cj2array[numsolutions]=((x910.value)*(((1.0)+(((-1.0)*x909)))));
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x911.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x911.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x912=htj3*htj3;
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+x912),-1);
if(!x913.valid){
continue;
}
cj3array[numsolutions]=((x913.value)*(((1.0)+(((-1.0)*x912)))));
CheckValue<IkReal> x914=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x914.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x914.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x917=IKPowWithIntegerCheck(r22,-1);
if(!x917.valid){
continue;
}
CheckValue<IkReal> x918=IKPowWithIntegerCheck(sj3,-1);
if(!x918.valid){
continue;
}
sj4array[0]=((x917.value)*(x918.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x919=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x919);
rxp1_0=(pz*r11);
rxp1_1=(r01*x919);
IkReal x920=((16.0)*sj4);
IkReal x921=(cj1*cj2);
IkReal x922=((4.0)*sj3);
IkReal x923=((8.0)*sj4);
IkReal x924=((4.0)*cj4);
IkReal x925=(sj1*sj2);
IkReal x926=((4.0)*sj4);
IkReal x927=(cj3*r02);
IkReal x928=((16.0)*sj3);
IkReal x929=((8.0)*sj3);
IkReal x930=((12.0)*cj4);
IkReal x931=((12.0)*sj4);
IkReal x932=(cj3*r12);
IkReal x933=(r11*x922);
IkReal x934=(r01*x922);
IkReal x935=(r01*x925);
IkReal x936=(cj3*cj4*r01);
IkReal x937=(cj3*cj4*r11);
IkReal x938=(cj3*r10*x924);
IkReal x939=(x931*x932);
IkReal x940=(cj3*r00*x924);
IkReal x941=(x927*x931);
IkReal x942=(r00*x925*x926);
IkReal x943=(r02*x925*x930);
IkReal x944=(r00*x921*x926);
IkReal x945=(r02*x921*x930);
IkReal x946=(r10*x925*x926);
IkReal x947=(r12*x921*x930);
IkReal x948=(r12*x925*x930);
IkReal x949=(r10*x921*x926);
IkReal x950=(x933+x944);
IkReal x951=(x934+x946);
IkReal x952=(x938+x942);
IkReal x953=(x939+x945);
IkReal x954=(x949+x940);
IkReal x955=(x948+x941);
j5eval[0]=((IKabs(((((-1.0)*r10*x929))+(((-8.0)*x937))+((r01*x921*x923))+(((-1.0)*x923*x935)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x952))+x950+x943)))))+(((0.5)*(IKabs(((((-1.0)*r12*x924*x925))+(((-1.0)*x926*x927))+((r12*x921*x924))+(((-1.0)*x954))+x951)))))+(((0.5)*(IKabs(((((-1.0)*r10*x928))+(((-1.0)*x920*x935))+((r01*x920*x921))+(((-16.0)*x937)))))))+(((0.5)*(IKabs((((r11*x920*x925))+(((-16.0)*x936))+(((-1.0)*r00*x928))+(((-1.0)*r11*x920*x921)))))))+(IKabs(((((-1.0)*r11*x921*x923))+(((-8.0)*x936))+((r11*x923*x925))+(((-1.0)*r00*x929)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x950))+x952+x943)))))+(((0.5)*(IKabs(((((-1.0)*x955))+(((-1.0)*x951))+x954+x947)))))+(((0.5)*(IKabs((((r02*x924*x925))+(((-1.0)*x926*x932))+(((-1.0)*x952))+x950+(((-1.0)*r02*x921*x924)))))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x955))+x951+x947))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x956=(r10*sj3);
IkReal x957=(r01*sj4);
IkReal x958=(cj1*cj2);
IkReal x959=(cj3*cj4);
IkReal x960=(sj1*sj2);
IkReal x961=(cj4*r02);
IkReal x962=((4.0)*r11*sj3);
IkReal x963=(cj3*r12*sj4);
IkReal x964=((4.0)*r00*sj4);
IkReal x965=((4.0)*r10*x959);
IkReal x966=((12.0)*x963);
IkReal x967=((4.0)*x963);
IkReal x968=(x958*x964);
IkReal x969=(x960*x964);
IkReal x970=((12.0)*x960*x961);
IkReal x971=((12.0)*x958*x961);
IkReal x972=((4.0)*x960*x961);
IkReal x973=((4.0)*x958*x961);
IkReal x974=(x962+x968);
IkReal x975=(x965+x969);
IkReal x976=(x973+x967);
IkReal x977=(x971+x966);
IkReal x978=((((8.0)*x957*x958))+(((-8.0)*x956))+(((-8.0)*x957*x960))+(((-8.0)*r11*x959)));
op[0]=(x972+x974+(((-1.0)*x975))+(((-1.0)*x976)));
op[1]=x978;
op[2]=(x970+x974+(((-1.0)*x975))+(((-1.0)*x977)));
op[3]=((((16.0)*x957*x958))+(((-16.0)*r11*x959))+(((-16.0)*x957*x960))+(((-16.0)*x956)));
op[4]=(x970+x975+(((-1.0)*x974))+(((-1.0)*x977)));
op[5]=x978;
op[6]=(x972+x975+(((-1.0)*x974))+(((-1.0)*x976)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x979=(cj1*cj2);
IkReal x980=((4.0)*cj4);
IkReal x981=(sj1*sj2);
IkReal x982=((4.0)*sj4);
IkReal x983=(r00*sj3);
IkReal x984=(cj3*r02);
IkReal x985=((4.0)*r01*sj3);
IkReal x986=((16.0)*r11*sj4);
IkReal x987=(cj3*cj4*r01);
IkReal x988=((12.0)*cj4*r12);
IkReal x989=((8.0)*r11*sj4);
IkReal x990=(cj3*r00*x980);
IkReal x991=((12.0)*sj4*x984);
IkReal x992=(x982*x984);
IkReal x993=(r10*x979*x982);
IkReal x994=(r10*x981*x982);
IkReal x995=(x979*x988);
IkReal x996=(x981*x988);
IkReal x997=(r12*x979*x980);
IkReal x998=(r12*x980*x981);
IkReal x999=(x994+x985);
IkReal x1000=(x993+x990);
IkReal x1001=(x992+x998);
IkReal x1002=(x991+x996);
IkReal x1003=(((x981*x989))+(((-8.0)*x983))+(((-8.0)*x987))+(((-1.0)*x979*x989)));
j5evalpoly[0]=(((x1003*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1002))+(((-1.0)*x1000))+x995+x999))))+x1000+(((-1.0)*x1001))+(((htj5*htj5*htj5)*((((x981*x986))+(((-16.0)*x983))+(((-16.0)*x987))+(((-1.0)*x979*x986))))))+(((-1.0)*x999))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x1000))+x997+x999))))+(((htj5*htj5)*((x1000+(((-1.0)*x1002))+(((-1.0)*x999))+x995))))+((htj5*x1003))+x997);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1004=(cj5*sj4);
IkReal x1005=(sj4*sj5);
if( IKabs((((r01*x1005))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1005))+((cj4*r12))+((r10*x1004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1005))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1004))))+IKsqr(((((-1.0)*r11*x1005))+((cj4*r12))+((r10*x1004))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1005))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1004))), ((((-1.0)*r11*x1005))+((cj4*r12))+((r10*x1004))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1006=IKcos(j0);
IkReal x1007=IKsin(j0);
IkReal x1008=(r02*sj4);
IkReal x1009=((0.1)*sj5);
IkReal x1010=(cj5*r11);
IkReal x1011=((1.0)*sj3);
IkReal x1012=(r12*sj4);
IkReal x1013=((1.0)*cj3);
IkReal x1014=(r11*sj5);
IkReal x1015=(cj3*cj4);
IkReal x1016=((1.0)*sj2);
IkReal x1017=(cj5*r01);
IkReal x1018=(r01*sj5);
IkReal x1019=(sj1*sj2);
IkReal x1020=(cj1*cj2);
IkReal x1021=(r00*sj5);
IkReal x1022=((1.0)*cj2);
IkReal x1023=(r10*sj5);
IkReal x1024=((1.0)*cj4);
IkReal x1025=(cj4*cj5*r00);
IkReal x1026=(cj1*x1006);
IkReal x1027=(cj4*cj5*r10);
IkReal x1028=((0.392)*x1007);
IkReal x1029=((1.0)*x1007);
IkReal x1030=(cj1*x1007);
IkReal x1031=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x1024))+(((-1.0)*r10*x1031))+x1006+((sj4*x1014)));
evalcond[1]=(((sj4*x1018))+(((-1.0)*x1029))+(((-1.0)*r02*x1024))+(((-1.0)*r00*x1031)));
evalcond[2]=((((0.392)*x1006*x1020))+(((-1.0)*px))+(((-0.392)*x1006*x1019))+(((0.425)*x1026))+(((-0.134)*x1007))+(((-1.0)*r00*x1009))+(((-0.1)*x1017)));
evalcond[3]=((((-1.0)*r10*x1009))+(((0.425)*x1030))+(((-1.0)*x1019*x1028))+(((0.134)*x1006))+(((-1.0)*py))+((x1020*x1028))+(((-0.1)*x1010)));
evalcond[4]=(((cj3*x1008))+((x1006*x1019))+((x1015*x1018))+((sj3*x1017))+(((-1.0)*x1006*x1020))+(((-1.0)*x1013*x1025))+((sj3*x1021)));
evalcond[5]=(((x1014*x1015))+((cj3*x1012))+(((-1.0)*x1020*x1029))+((sj3*x1010))+((x1007*x1019))+(((-1.0)*x1013*x1027))+((sj3*x1023)));
evalcond[6]=((((-1.0)*sj1*x1006*x1022))+((cj3*x1017))+(((-1.0)*x1008*x1011))+(((-1.0)*cj4*x1011*x1018))+(((-1.0)*x1016*x1026))+((sj3*x1025))+((cj3*x1021)));
evalcond[7]=((((-1.0)*x1011*x1012))+((cj3*x1010))+(((-1.0)*sj1*x1007*x1022))+(((-1.0)*x1016*x1030))+(((-1.0)*cj4*x1011*x1014))+((sj3*x1027))+((cj3*x1023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(cj3,-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(r22,-1);
if(!x1033.valid){
continue;
}
sj4array[0]=((-1.0)*(x1032.value)*(x1033.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1034=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1034);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1034);
IkReal x1035=((16.0)*sj4);
IkReal x1036=(cj1*cj2);
IkReal x1037=((4.0)*sj3);
IkReal x1038=((8.0)*sj4);
IkReal x1039=((4.0)*cj4);
IkReal x1040=(sj1*sj2);
IkReal x1041=((4.0)*sj4);
IkReal x1042=(cj3*r02);
IkReal x1043=((16.0)*sj3);
IkReal x1044=((8.0)*sj3);
IkReal x1045=((12.0)*cj4);
IkReal x1046=((12.0)*sj4);
IkReal x1047=(cj3*r12);
IkReal x1048=(r11*x1037);
IkReal x1049=(r01*x1037);
IkReal x1050=(r01*x1040);
IkReal x1051=(cj3*cj4*r01);
IkReal x1052=(cj3*cj4*r11);
IkReal x1053=(cj3*r10*x1039);
IkReal x1054=(x1046*x1047);
IkReal x1055=(cj3*r00*x1039);
IkReal x1056=(x1042*x1046);
IkReal x1057=(r00*x1040*x1041);
IkReal x1058=(r02*x1040*x1045);
IkReal x1059=(r00*x1036*x1041);
IkReal x1060=(r02*x1036*x1045);
IkReal x1061=(r10*x1040*x1041);
IkReal x1062=(r12*x1036*x1045);
IkReal x1063=(r12*x1040*x1045);
IkReal x1064=(r10*x1036*x1041);
IkReal x1065=(x1059+x1048);
IkReal x1066=(x1049+x1061);
IkReal x1067=(x1053+x1057);
IkReal x1068=(x1054+x1060);
IkReal x1069=(x1055+x1064);
IkReal x1070=(x1056+x1063);
j5eval[0]=((IKabs(((((-1.0)*r00*x1044))+(((-1.0)*r11*x1036*x1038))+(((-8.0)*x1051))+((r11*x1038*x1040)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1043))+(((-1.0)*r11*x1035*x1036))+(((-16.0)*x1051))+((r11*x1035*x1040)))))))+(((0.5)*(IKabs((x1066+((r12*x1036*x1039))+(((-1.0)*x1041*x1042))+(((-1.0)*r12*x1039*x1040))+(((-1.0)*x1069)))))))+(((0.5)*(IKabs((x1065+(((-1.0)*r02*x1036*x1039))+(((-1.0)*x1041*x1047))+(((-1.0)*x1067))+((r02*x1039*x1040)))))))+(IKabs(((((-8.0)*x1052))+(((-1.0)*r10*x1044))+(((-1.0)*x1038*x1050))+((r01*x1036*x1038)))))+(((0.5)*(IKabs((x1058+x1065+(((-1.0)*x1068))+(((-1.0)*x1067)))))))+(((0.5)*(IKabs((x1069+x1062+(((-1.0)*x1066))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1043))+(((-16.0)*x1052))+((r01*x1035*x1036))+(((-1.0)*x1035*x1050)))))))+(((0.5)*(IKabs((x1058+x1067+(((-1.0)*x1068))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1062+x1066+(((-1.0)*x1069))+(((-1.0)*x1070))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1071=(r10*sj3);
IkReal x1072=(r01*sj4);
IkReal x1073=(cj1*cj2);
IkReal x1074=(cj3*cj4);
IkReal x1075=(sj1*sj2);
IkReal x1076=(cj4*r02);
IkReal x1077=((4.0)*r11*sj3);
IkReal x1078=(cj3*r12*sj4);
IkReal x1079=((4.0)*r00*sj4);
IkReal x1080=((4.0)*r10*x1074);
IkReal x1081=((12.0)*x1078);
IkReal x1082=((4.0)*x1078);
IkReal x1083=(x1073*x1079);
IkReal x1084=(x1075*x1079);
IkReal x1085=((12.0)*x1075*x1076);
IkReal x1086=((12.0)*x1073*x1076);
IkReal x1087=((4.0)*x1075*x1076);
IkReal x1088=((4.0)*x1073*x1076);
IkReal x1089=(x1077+x1083);
IkReal x1090=(x1084+x1080);
IkReal x1091=(x1082+x1088);
IkReal x1092=(x1086+x1081);
IkReal x1093=((((-8.0)*x1071))+(((-8.0)*x1072*x1075))+(((8.0)*x1072*x1073))+(((-8.0)*r11*x1074)));
op[0]=(x1087+x1089+(((-1.0)*x1091))+(((-1.0)*x1090)));
op[1]=x1093;
op[2]=(x1085+x1089+(((-1.0)*x1090))+(((-1.0)*x1092)));
op[3]=((((-16.0)*x1072*x1075))+(((16.0)*x1072*x1073))+(((-16.0)*r11*x1074))+(((-16.0)*x1071)));
op[4]=(x1090+x1085+(((-1.0)*x1092))+(((-1.0)*x1089)));
op[5]=x1093;
op[6]=(x1090+x1087+(((-1.0)*x1091))+(((-1.0)*x1089)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1094=(cj1*cj2);
IkReal x1095=((4.0)*cj4);
IkReal x1096=(sj1*sj2);
IkReal x1097=((4.0)*sj4);
IkReal x1098=(r00*sj3);
IkReal x1099=(cj3*r02);
IkReal x1100=((4.0)*r01*sj3);
IkReal x1101=((16.0)*r11*sj4);
IkReal x1102=(cj3*cj4*r01);
IkReal x1103=((12.0)*cj4*r12);
IkReal x1104=((8.0)*r11*sj4);
IkReal x1105=(cj3*r00*x1095);
IkReal x1106=((12.0)*sj4*x1099);
IkReal x1107=(x1097*x1099);
IkReal x1108=(r10*x1094*x1097);
IkReal x1109=(r10*x1096*x1097);
IkReal x1110=(x1094*x1103);
IkReal x1111=(x1096*x1103);
IkReal x1112=(r12*x1094*x1095);
IkReal x1113=(r12*x1095*x1096);
IkReal x1114=(x1100+x1109);
IkReal x1115=(x1105+x1108);
IkReal x1116=(x1107+x1113);
IkReal x1117=(x1106+x1111);
IkReal x1118=((((-8.0)*x1098))+(((-1.0)*x1094*x1104))+((x1096*x1104))+(((-8.0)*x1102)));
j5evalpoly[0]=(x1112+x1115+(((htj5*htj5*htj5*htj5)*((x1110+x1114+(((-1.0)*x1117))+(((-1.0)*x1115))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1102))+(((-16.0)*x1098))+(((-1.0)*x1094*x1101))+((x1096*x1101))))))+((x1118*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1116))+(((-1.0)*x1114))+(((htj5*htj5)*((x1110+x1115+(((-1.0)*x1117))+(((-1.0)*x1114))))))+((htj5*x1118))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1112+x1114+(((-1.0)*x1116))+(((-1.0)*x1115)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1119=(cj5*sj4);
IkReal x1120=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1120))+(((-1.0)*r00*x1119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1120))+((cj4*r12))+((r10*x1119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1120))+(((-1.0)*r00*x1119))))+IKsqr(((((-1.0)*r11*x1120))+((cj4*r12))+((r10*x1119))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1120))+(((-1.0)*r00*x1119))), ((((-1.0)*r11*x1120))+((cj4*r12))+((r10*x1119))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1121=IKcos(j0);
IkReal x1122=IKsin(j0);
IkReal x1123=(r02*sj4);
IkReal x1124=((0.1)*sj5);
IkReal x1125=(cj5*r11);
IkReal x1126=((1.0)*sj3);
IkReal x1127=(r12*sj4);
IkReal x1128=((1.0)*cj3);
IkReal x1129=(r11*sj5);
IkReal x1130=(cj3*cj4);
IkReal x1131=((1.0)*sj2);
IkReal x1132=(cj5*r01);
IkReal x1133=(r01*sj5);
IkReal x1134=(sj1*sj2);
IkReal x1135=(cj1*cj2);
IkReal x1136=(r00*sj5);
IkReal x1137=((1.0)*cj2);
IkReal x1138=(r10*sj5);
IkReal x1139=((1.0)*cj4);
IkReal x1140=(cj4*cj5*r00);
IkReal x1141=(cj1*x1121);
IkReal x1142=(cj4*cj5*r10);
IkReal x1143=((0.392)*x1122);
IkReal x1144=((1.0)*x1122);
IkReal x1145=(cj1*x1122);
IkReal x1146=((1.0)*cj5*sj4);
evalcond[0]=(x1121+(((-1.0)*r12*x1139))+((sj4*x1129))+(((-1.0)*r10*x1146)));
evalcond[1]=((((-1.0)*r00*x1146))+((sj4*x1133))+(((-1.0)*x1144))+(((-1.0)*r02*x1139)));
evalcond[2]=((((-0.1)*x1132))+(((0.425)*x1141))+(((-1.0)*px))+(((-0.392)*x1121*x1134))+(((-0.134)*x1122))+(((0.392)*x1121*x1135))+(((-1.0)*r00*x1124)));
evalcond[3]=((((-0.1)*x1125))+(((0.134)*x1121))+(((-1.0)*x1134*x1143))+(((0.425)*x1145))+(((-1.0)*r10*x1124))+(((-1.0)*py))+((x1135*x1143)));
evalcond[4]=((((-1.0)*x1128*x1140))+((x1130*x1133))+((x1121*x1134))+(((-1.0)*x1121*x1135))+((sj3*x1132))+((sj3*x1136))+((cj3*x1123)));
evalcond[5]=((((-1.0)*x1135*x1144))+(((-1.0)*x1128*x1142))+((x1129*x1130))+((sj3*x1125))+((sj3*x1138))+((x1122*x1134))+((cj3*x1127)));
evalcond[6]=(((cj3*x1132))+((cj3*x1136))+(((-1.0)*x1123*x1126))+((sj3*x1140))+(((-1.0)*x1131*x1141))+(((-1.0)*sj1*x1121*x1137))+(((-1.0)*cj4*x1126*x1133)));
evalcond[7]=(((cj3*x1138))+(((-1.0)*x1126*x1127))+((sj3*x1142))+(((-1.0)*x1131*x1145))+(((-1.0)*sj1*x1122*x1137))+(((-1.0)*cj4*x1126*x1129))+((cj3*x1125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1147=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1147);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1147);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1149=IKPowWithIntegerCheck(r22,-1);
if(!x1149.valid){
continue;
}
CheckValue<IkReal> x1150=IKPowWithIntegerCheck(sj3,-1);
if(!x1150.valid){
continue;
}
sj4array[0]=((x1149.value)*(x1150.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1151=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1151);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1151);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1152=((4.0)*r01);
IkReal x1153=((16.0)*r00);
IkReal x1154=(cj3*sj2);
IkReal x1155=((8.0)*r00);
IkReal x1156=(cj2*cj3);
IkReal x1157=(cj4*r01);
IkReal x1158=((16.0)*cj1);
IkReal x1159=((8.0)*sj1);
IkReal x1160=((16.0)*sj1);
IkReal x1161=((8.0)*cj1);
IkReal x1162=(sj2*sj3);
IkReal x1163=(cj2*sj3);
IkReal x1164=(sj1*x1163);
IkReal x1165=((4.0)*cj4*r00);
IkReal x1166=(((sj1*x1162*x1165))+((cj1*x1152*x1162))+((x1152*x1164))+((sj1*x1152*x1154)));
IkReal x1167=(((cj1*x1152*x1156))+((cj1*x1154*x1165))+((cj1*x1163*x1165))+((sj1*x1156*x1165)));
IkReal x1168=(x1167+(((-1.0)*x1166)));
IkReal x1169=((((-1.0)*x1157*x1159*x1162))+((cj1*x1155*x1162))+((x1155*x1164))+(((-1.0)*cj1*x1155*x1156))+((sj1*x1154*x1155))+((x1154*x1157*x1161))+((x1157*x1161*x1163))+((x1156*x1157*x1159)));
IkReal x1170=(x1166+(((-1.0)*x1167)));
op[0]=x1168;
op[1]=x1169;
op[2]=x1168;
op[3]=(((x1154*x1157*x1158))+((x1153*x1164))+((x1157*x1158*x1163))+((cj1*x1153*x1162))+(((-1.0)*x1157*x1160*x1162))+((sj1*x1153*x1154))+((x1156*x1157*x1160))+(((-1.0)*cj1*x1153*x1156)));
op[4]=x1170;
op[5]=x1169;
op[6]=x1170;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1171=(cj5*sj4);
IkReal x1172=(sj4*sj5);
if( IKabs((((r01*x1172))+(((-1.0)*r00*x1171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1171))+(((-1.0)*r11*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1172))+(((-1.0)*r00*x1171))))+IKsqr((((r10*x1171))+(((-1.0)*r11*x1172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1172))+(((-1.0)*r00*x1171))), (((r10*x1171))+(((-1.0)*r11*x1172))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1173=IKcos(j0);
IkReal x1174=IKsin(j0);
IkReal x1175=((0.1)*sj5);
IkReal x1176=((0.392)*sj1);
IkReal x1177=(cj5*r11);
IkReal x1178=((1.0)*cj3);
IkReal x1179=((0.425)*cj1);
IkReal x1180=((1.0)*cj1);
IkReal x1181=(r11*sj5);
IkReal x1182=(cj5*r01);
IkReal x1183=(r01*sj5);
IkReal x1184=(cj3*cj4);
IkReal x1185=(r00*sj5);
IkReal x1186=((1.0)*sj1);
IkReal x1187=(r10*sj5);
IkReal x1188=(sj2*x1174);
IkReal x1189=(cj4*cj5*r00);
IkReal x1190=(sj2*x1173);
IkReal x1191=(cj4*cj5*r10);
IkReal x1192=((1.0)*cj4*sj3);
IkReal x1193=((0.392)*cj1*cj2);
IkReal x1194=(cj2*x1173);
IkReal x1195=((1.0)*cj5*sj4);
IkReal x1196=(cj2*x1174);
evalcond[0]=(x1173+((sj4*x1181))+(((-1.0)*r10*x1195)));
evalcond[1]=((((-1.0)*r00*x1195))+((sj4*x1183))+(((-1.0)*x1174)));
evalcond[2]=(((x1183*x1184))+(((-1.0)*x1178*x1189))+((sj1*x1190))+((sj3*x1182))+((sj3*x1185))+(((-1.0)*x1180*x1194)));
evalcond[3]=(((sj3*x1177))+((sj1*x1188))+(((-1.0)*x1178*x1191))+((sj3*x1187))+((x1181*x1184))+(((-1.0)*x1180*x1196)));
evalcond[4]=((((-1.0)*x1186*x1194))+((sj3*x1189))+(((-1.0)*x1180*x1190))+(((-1.0)*x1183*x1192))+((cj3*x1182))+((cj3*x1185)));
evalcond[5]=((((-1.0)*x1181*x1192))+(((-1.0)*x1186*x1196))+(((-1.0)*x1180*x1188))+((sj3*x1191))+((cj3*x1177))+((cj3*x1187)));
evalcond[6]=(((x1173*x1179))+((x1173*x1193))+(((-0.1)*x1182))+(((-1.0)*px))+(((-1.0)*r00*x1175))+(((-0.134)*x1174))+(((-1.0)*x1176*x1190)));
evalcond[7]=((((-1.0)*x1176*x1188))+((x1174*x1179))+((x1174*x1193))+(((-1.0)*py))+(((0.134)*x1173))+(((-1.0)*r10*x1175))+(((-0.1)*x1177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(cj3,-1);
if(!x1197.valid){
continue;
}
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(r22,-1);
if(!x1198.valid){
continue;
}
sj4array[0]=((-1.0)*(x1197.value)*(x1198.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1199=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1199);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1199);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1200=((4.0)*r01);
IkReal x1201=((16.0)*r00);
IkReal x1202=(cj3*sj2);
IkReal x1203=((8.0)*r00);
IkReal x1204=(cj2*cj3);
IkReal x1205=(cj4*r01);
IkReal x1206=((16.0)*cj1);
IkReal x1207=((8.0)*sj1);
IkReal x1208=((16.0)*sj1);
IkReal x1209=((8.0)*cj1);
IkReal x1210=(sj2*sj3);
IkReal x1211=(cj2*sj3);
IkReal x1212=(sj1*x1211);
IkReal x1213=((4.0)*cj4*r00);
IkReal x1214=(((cj1*x1200*x1210))+((sj1*x1210*x1213))+((x1200*x1212))+((sj1*x1200*x1202)));
IkReal x1215=(((cj1*x1211*x1213))+((cj1*x1202*x1213))+((sj1*x1204*x1213))+((cj1*x1200*x1204)));
IkReal x1216=(x1215+(((-1.0)*x1214)));
IkReal x1217=(((sj1*x1202*x1203))+(((-1.0)*cj1*x1203*x1204))+((x1202*x1205*x1209))+((cj1*x1203*x1210))+((x1205*x1209*x1211))+(((-1.0)*x1205*x1207*x1210))+((x1203*x1212))+((x1204*x1205*x1207)));
IkReal x1218=(x1214+(((-1.0)*x1215)));
op[0]=x1216;
op[1]=x1217;
op[2]=x1216;
op[3]=(((x1205*x1206*x1211))+(((-1.0)*x1205*x1208*x1210))+((x1202*x1205*x1206))+(((-1.0)*cj1*x1201*x1204))+((x1201*x1212))+((sj1*x1201*x1202))+((cj1*x1201*x1210))+((x1204*x1205*x1208)));
op[4]=x1218;
op[5]=x1217;
op[6]=x1218;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1219=(cj5*sj4);
IkReal x1220=(sj4*sj5);
if( IKabs((((r01*x1220))+(((-1.0)*r00*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1220))+((r10*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1220))+(((-1.0)*r00*x1219))))+IKsqr(((((-1.0)*r11*x1220))+((r10*x1219))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1220))+(((-1.0)*r00*x1219))), ((((-1.0)*r11*x1220))+((r10*x1219))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1221=IKcos(j0);
IkReal x1222=IKsin(j0);
IkReal x1223=((0.1)*sj5);
IkReal x1224=((0.392)*sj1);
IkReal x1225=(cj5*r11);
IkReal x1226=((1.0)*cj3);
IkReal x1227=((0.425)*cj1);
IkReal x1228=((1.0)*cj1);
IkReal x1229=(r11*sj5);
IkReal x1230=(cj5*r01);
IkReal x1231=(r01*sj5);
IkReal x1232=(cj3*cj4);
IkReal x1233=(r00*sj5);
IkReal x1234=((1.0)*sj1);
IkReal x1235=(r10*sj5);
IkReal x1236=(sj2*x1222);
IkReal x1237=(cj4*cj5*r00);
IkReal x1238=(sj2*x1221);
IkReal x1239=(cj4*cj5*r10);
IkReal x1240=((1.0)*cj4*sj3);
IkReal x1241=((0.392)*cj1*cj2);
IkReal x1242=(cj2*x1221);
IkReal x1243=((1.0)*cj5*sj4);
IkReal x1244=(cj2*x1222);
evalcond[0]=(x1221+(((-1.0)*r10*x1243))+((sj4*x1229)));
evalcond[1]=((((-1.0)*x1222))+((sj4*x1231))+(((-1.0)*r00*x1243)));
evalcond[2]=(((sj1*x1238))+((sj3*x1230))+((sj3*x1233))+(((-1.0)*x1228*x1242))+(((-1.0)*x1226*x1237))+((x1231*x1232)));
evalcond[3]=(((sj1*x1236))+((sj3*x1235))+((sj3*x1225))+(((-1.0)*x1228*x1244))+(((-1.0)*x1226*x1239))+((x1229*x1232)));
evalcond[4]=(((cj3*x1230))+((cj3*x1233))+(((-1.0)*x1231*x1240))+((sj3*x1237))+(((-1.0)*x1228*x1238))+(((-1.0)*x1234*x1242)));
evalcond[5]=(((cj3*x1235))+((cj3*x1225))+((sj3*x1239))+(((-1.0)*x1229*x1240))+(((-1.0)*x1228*x1236))+(((-1.0)*x1234*x1244)));
evalcond[6]=((((-1.0)*r00*x1223))+(((-1.0)*x1224*x1238))+(((-0.134)*x1222))+(((-1.0)*px))+(((-0.1)*x1230))+((x1221*x1227))+((x1221*x1241)));
evalcond[7]=((((-1.0)*x1224*x1236))+(((-1.0)*py))+(((-0.1)*x1225))+(((-1.0)*r10*x1223))+((x1222*x1227))+((x1222*x1241))+(((0.134)*x1221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1247 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1247.valid){
continue;
}
IkReal x1245=((1.0)*(x1247.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1248=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1248.valid){
continue;
}
if( (((-1.0)*(x1248.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1248.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1246=((-1.0)*(IKasin(((-1.0)*(x1248.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1246))+(((-1.0)*x1245)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1245))+(((1.0)*x1246)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1249=cj5*cj5;
IkReal x1250=r21*r21;
IkReal x1251=(sj3*x1249);
IkReal x1252=(((sj3*(r22*r22)))+((x1251*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1250))+(((-1.0)*x1250*x1251)));
j4eval[0]=x1252;
j4eval[1]=IKsign(x1252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1253=cj5*cj5;
IkReal x1254=r21*r21;
IkReal x1255=((1.0)*cj3);
IkReal x1256=(cj3*x1253);
IkReal x1257=((((-1.0)*x1253*x1255*(r20*r20)))+(((-1.0)*x1254*x1255))+((x1254*x1256))+(((-1.0)*x1255*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1257;
j4eval[1]=IKsign(x1257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1258=cj1*cj1;
IkReal x1259=cj2*cj2;
IkReal x1260=(cj2*x1258);
IkReal x1261=(cj1*sj1*sj2);
IkReal x1262=(x1258*x1259);
j0eval[0]=((6.36549089425466)+x1258+(((-5.69949185861059)*x1259))+(((-11.3989837172212)*cj2*x1261))+(((-12.3585920403546)*x1261))+(((11.3989837172212)*x1262))+(((12.3585920403546)*x1260)));
j0eval[1]=IKsign(((42905.0)+(((-38416.0)*x1259))+(((83300.0)*x1260))+(((-76832.0)*cj2*x1261))+(((6740.25)*x1258))+(((-83300.0)*x1261))+(((76832.0)*x1262))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1263=((1.0)*cj5);
IkReal x1264=((1.0)*sj5);
IkReal x1265=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1265;
j0eval[1]=((IKabs(((((-1.0)*r10*x1264))+(((-1.0)*r11*x1263)))))+(IKabs(((((-1.0)*r00*x1264))+(((-1.0)*r01*x1263))))));
j0eval[2]=IKsign(x1265);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1266=cj5*cj5;
IkReal x1267=r21*r21;
IkReal x1268=(sj1*sj2);
IkReal x1269=(r21*sj5);
IkReal x1270=(cj5*r20);
IkReal x1271=(cj1*cj2);
IkReal x1272=(((x1266*(r20*r20)))+x1267+(r22*r22)+(((-2.0)*x1269*x1270))+(((-1.0)*x1266*x1267)));
j4eval[0]=x1272;
j4eval[1]=IKsign(x1272);
j4eval[2]=((IKabs((((r22*x1268))+(((-1.0)*r22*x1271)))))+(IKabs(((((-1.0)*x1269*x1271))+(((-1.0)*x1268*x1270))+((x1268*x1269))+((x1270*x1271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1273=(sj1*sj2);
IkReal x1274=(r00*sj5);
IkReal x1275=(cj1*cj2);
IkReal x1276=(cj5*r01);
IkReal x1277=((212.5)*cj1);
IkReal x1278=((500.0)*px);
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(((((67.0)*x1273))+(((-67.0)*x1275))),-1);
if(!x1279.valid){
continue;
}
CheckValue<IkReal> x1280=IKPowWithIntegerCheck((x1273+(((-1.0)*x1275))),-1);
if(!x1280.valid){
continue;
}
if( IKabs(((x1279.value)*((((x1275*x1278))+(((-146.0)*x1274*x1275))+(((-146.0)*x1275*x1276))+(((-1.0)*x1276*x1277))+(((-1.0)*x1273*x1278))+(((146.0)*x1273*x1274))+(((146.0)*x1273*x1276))+(((-1.0)*x1274*x1277)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1280.value)*(((((-1.0)*x1276))+(((-1.0)*x1274)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1279.value)*((((x1275*x1278))+(((-146.0)*x1274*x1275))+(((-146.0)*x1275*x1276))+(((-1.0)*x1276*x1277))+(((-1.0)*x1273*x1278))+(((146.0)*x1273*x1274))+(((146.0)*x1273*x1276))+(((-1.0)*x1274*x1277))))))+IKsqr(((x1280.value)*(((((-1.0)*x1276))+(((-1.0)*x1274))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1279.value)*((((x1275*x1278))+(((-146.0)*x1274*x1275))+(((-146.0)*x1275*x1276))+(((-1.0)*x1276*x1277))+(((-1.0)*x1273*x1278))+(((146.0)*x1273*x1274))+(((146.0)*x1273*x1276))+(((-1.0)*x1274*x1277))))), ((x1280.value)*(((((-1.0)*x1276))+(((-1.0)*x1274))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1281=IKcos(j0);
IkReal x1282=IKsin(j0);
IkReal x1283=((0.1)*sj5);
IkReal x1284=(cj5*r11);
IkReal x1285=(cj5*r01);
IkReal x1286=(sj1*sj2);
IkReal x1287=(cj1*cj2);
IkReal x1288=((0.392)*x1282);
IkReal x1289=(cj1*x1281);
evalcond[0]=(((r00*sj5))+x1285+(((-1.0)*x1281*x1287))+((x1281*x1286)));
evalcond[1]=(x1284+((r10*sj5))+(((-1.0)*x1282*x1287))+((x1282*x1286)));
evalcond[2]=((((0.425)*x1289))+(((-0.1)*x1285))+(((-1.0)*r00*x1283))+(((-1.0)*px))+(((0.392)*x1281*x1287))+(((-0.134)*x1282))+(((-0.392)*x1281*x1286)));
evalcond[3]=((((-0.1)*x1284))+(((0.425)*cj1*x1282))+(((-1.0)*py))+(((0.134)*x1281))+(((-1.0)*r10*x1283))+((x1287*x1288))+(((-1.0)*x1286*x1288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1290=((1.0)*cj5);
IkReal x1291=((((-1.0)*r01*x1290))+(((-1.0)*r00*sj5)));
j4eval[0]=x1291;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1290))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1292=((1.0)*cj5);
IkReal x1293=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1292)));
j4eval[0]=x1293;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1292))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1293);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1294=((1.0)*sj0);
IkReal x1295=((1.0)*cj0);
IkReal x1296=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1296;
j4eval[1]=((IKabs(((((-1.0)*r12*x1294))+(((-1.0)*r02*x1295)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1295))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1294))))));
j4eval[2]=IKsign(x1296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1297=((1.0)*sj0);
IkReal x1298=((1.0)*cj0);
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1297))+(((-1.0)*r02*x1298)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1298))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1299.value)+(((1.5707963267949)*(x1300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1301=IKsin(j4);
IkReal x1302=IKcos(j4);
IkReal x1303=(cj5*r10);
IkReal x1304=(r01*sj5);
IkReal x1305=((1.0)*cj2);
IkReal x1306=(cj5*r00);
IkReal x1307=((1.0)*sj0);
IkReal x1308=(cj5*r20);
IkReal x1309=(cj1*sj2);
IkReal x1310=((1.0)*x1302);
IkReal x1311=((1.0)*x1301);
IkReal x1312=(sj5*x1301);
evalcond[0]=((((-1.0)*x1308*x1311))+(((-1.0)*r22*x1310))+((r21*x1312)));
evalcond[1]=(cj0+((r11*x1312))+(((-1.0)*r12*x1310))+(((-1.0)*x1303*x1311)));
evalcond[2]=((((-1.0)*x1306*x1311))+(((-1.0)*x1307))+(((-1.0)*r02*x1310))+((x1301*x1304)));
evalcond[3]=((((-1.0)*r22*x1311))+((sj1*sj2))+((x1302*x1308))+(((-1.0)*cj1*x1305))+(((-1.0)*r21*sj5*x1310)));
evalcond[4]=((((-1.0)*x1304*x1310))+(((-1.0)*cj0*x1309))+(((-1.0)*cj0*sj1*x1305))+((x1302*x1306))+(((-1.0)*r02*x1311)));
evalcond[5]=((((-1.0)*x1307*x1309))+(((-1.0)*r12*x1311))+(((-1.0)*r11*sj5*x1310))+(((-1.0)*sj0*sj1*x1305))+((x1302*x1303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1313=((1.0)*cj5);
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1313))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1313)))),-1);
if(!x1315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1314.value)+(((1.5707963267949)*(x1315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1316=IKsin(j4);
IkReal x1317=IKcos(j4);
IkReal x1318=(cj5*r10);
IkReal x1319=(r01*sj5);
IkReal x1320=((1.0)*cj2);
IkReal x1321=(cj5*r00);
IkReal x1322=((1.0)*sj0);
IkReal x1323=(cj5*r20);
IkReal x1324=(cj1*sj2);
IkReal x1325=((1.0)*x1317);
IkReal x1326=((1.0)*x1316);
IkReal x1327=(sj5*x1316);
evalcond[0]=((((-1.0)*x1323*x1326))+(((-1.0)*r22*x1325))+((r21*x1327)));
evalcond[1]=(cj0+((r11*x1327))+(((-1.0)*r12*x1325))+(((-1.0)*x1318*x1326)));
evalcond[2]=(((x1316*x1319))+(((-1.0)*x1322))+(((-1.0)*r02*x1325))+(((-1.0)*x1321*x1326)));
evalcond[3]=((((-1.0)*r22*x1326))+((sj1*sj2))+(((-1.0)*r21*sj5*x1325))+(((-1.0)*cj1*x1320))+((x1317*x1323)));
evalcond[4]=((((-1.0)*cj0*sj1*x1320))+(((-1.0)*x1319*x1325))+(((-1.0)*cj0*x1324))+(((-1.0)*r02*x1326))+((x1317*x1321)));
evalcond[5]=(((x1317*x1318))+(((-1.0)*x1322*x1324))+(((-1.0)*sj0*sj1*x1320))+(((-1.0)*r12*x1326))+(((-1.0)*r11*sj5*x1325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1328=((1.0)*cj5);
CheckValue<IkReal> x1329 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1329.valid){
continue;
}
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1328))+(((-1.0)*r00*sj5)))),-1);
if(!x1330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1329.value)+(((1.5707963267949)*(x1330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1331=IKsin(j4);
IkReal x1332=IKcos(j4);
IkReal x1333=(cj5*r10);
IkReal x1334=(r01*sj5);
IkReal x1335=((1.0)*cj2);
IkReal x1336=(cj5*r00);
IkReal x1337=((1.0)*sj0);
IkReal x1338=(cj5*r20);
IkReal x1339=(cj1*sj2);
IkReal x1340=((1.0)*x1332);
IkReal x1341=((1.0)*x1331);
IkReal x1342=(sj5*x1331);
evalcond[0]=((((-1.0)*x1338*x1341))+(((-1.0)*r22*x1340))+((r21*x1342)));
evalcond[1]=(cj0+(((-1.0)*r12*x1340))+((r11*x1342))+(((-1.0)*x1333*x1341)));
evalcond[2]=((((-1.0)*x1336*x1341))+(((-1.0)*r02*x1340))+((x1331*x1334))+(((-1.0)*x1337)));
evalcond[3]=((((-1.0)*cj1*x1335))+((sj1*sj2))+(((-1.0)*r21*sj5*x1340))+(((-1.0)*r22*x1341))+((x1332*x1338)));
evalcond[4]=((((-1.0)*r02*x1341))+(((-1.0)*cj0*sj1*x1335))+(((-1.0)*cj0*x1339))+(((-1.0)*x1334*x1340))+((x1332*x1336)));
evalcond[5]=((((-1.0)*r12*x1341))+(((-1.0)*x1337*x1339))+(((-1.0)*sj0*sj1*x1335))+(((-1.0)*r11*sj5*x1340))+((x1332*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1343=cj5*cj5;
IkReal x1344=r21*r21;
IkReal x1345=(sj1*sj2);
IkReal x1346=(r21*sj5);
IkReal x1347=(cj1*cj2);
IkReal x1348=(cj5*r20);
CheckValue<IkReal> x1349 = IKatan2WithCheck(IkReal((((r22*x1345))+(((-1.0)*r22*x1347)))),IkReal(((((-1.0)*x1346*x1347))+((x1345*x1346))+((x1347*x1348))+(((-1.0)*x1345*x1348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1349.valid){
continue;
}
CheckValue<IkReal> x1350=IKPowWithIntegerCheck(IKsign((x1344+(r22*r22)+((x1343*(r20*r20)))+(((-1.0)*x1343*x1344))+(((-2.0)*x1346*x1348)))),-1);
if(!x1350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1349.value)+(((1.5707963267949)*(x1350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1351=IKsin(j4);
IkReal x1352=IKcos(j4);
IkReal x1353=(r21*sj5);
IkReal x1354=(cj5*r20);
IkReal x1355=((1.0)*x1352);
IkReal x1356=((1.0)*x1351);
evalcond[0]=((((-1.0)*x1354*x1356))+(((-1.0)*r22*x1355))+((x1351*x1353)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1356))+((x1352*x1354))+(((-1.0)*x1353*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1357=(cj5*sj4);
IkReal x1358=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1357))+(((-1.0)*cj4*r02))+((r01*x1358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1357))+(((-1.0)*r11*x1358))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1357))+(((-1.0)*cj4*r02))+((r01*x1358))))+IKsqr((((r10*x1357))+(((-1.0)*r11*x1358))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1357))+(((-1.0)*cj4*r02))+((r01*x1358))), (((r10*x1357))+(((-1.0)*r11*x1358))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1359=IKcos(j0);
IkReal x1360=IKsin(j0);
IkReal x1361=(cj4*cj5);
IkReal x1362=((0.1)*sj5);
IkReal x1363=((0.392)*sj1);
IkReal x1364=(cj5*r11);
IkReal x1365=(cj5*r01);
IkReal x1366=((1.0)*cj1);
IkReal x1367=(r11*sj5);
IkReal x1368=((1.0)*sj4);
IkReal x1369=((0.392)*cj2);
IkReal x1370=((1.0)*sj1);
IkReal x1371=((1.0)*cj4);
IkReal x1372=(r01*sj5);
IkReal x1373=(sj2*x1360);
IkReal x1374=(sj2*x1359);
IkReal x1375=(cj1*x1359);
IkReal x1376=(cj2*x1359);
IkReal x1377=(cj1*x1360);
IkReal x1378=(cj2*x1360);
evalcond[0]=(x1359+((sj4*x1367))+(((-1.0)*cj5*r10*x1368))+(((-1.0)*r12*x1371)));
evalcond[1]=((((-1.0)*x1360))+(((-1.0)*r02*x1371))+((sj4*x1372))+(((-1.0)*cj5*r00*x1368)));
evalcond[2]=(x1365+((r00*sj5))+(((-1.0)*x1366*x1376))+((sj1*x1374)));
evalcond[3]=(x1364+((r10*sj5))+(((-1.0)*x1366*x1378))+((sj1*x1373)));
evalcond[4]=((((-1.0)*r02*x1368))+(((-1.0)*x1371*x1372))+(((-1.0)*x1370*x1376))+(((-1.0)*x1366*x1374))+((r00*x1361)));
evalcond[5]=(((r10*x1361))+(((-1.0)*r12*x1368))+(((-1.0)*x1370*x1378))+(((-1.0)*x1366*x1373))+(((-1.0)*x1367*x1371)));
evalcond[6]=((((0.425)*x1375))+(((-1.0)*px))+(((-1.0)*r00*x1362))+(((-0.134)*x1360))+((x1369*x1375))+(((-1.0)*x1363*x1374))+(((-0.1)*x1365)));
evalcond[7]=((((0.134)*x1359))+(((0.425)*x1377))+(((-1.0)*py))+((x1369*x1377))+(((-1.0)*x1363*x1373))+(((-1.0)*r10*x1362))+(((-0.1)*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1379=((1.0)*cj5);
IkReal x1380=((1.0)*sj5);
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1381.valid){
continue;
}
CheckValue<IkReal> x1382 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1380))+(((-1.0)*r11*x1379)))),IkReal(((((-1.0)*r01*x1379))+(((-1.0)*r00*x1380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1382.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1381.value)))+(x1382.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1383=IKcos(j0);
IkReal x1384=IKsin(j0);
IkReal x1385=((0.1)*sj5);
IkReal x1386=(cj5*r11);
IkReal x1387=(cj5*r01);
IkReal x1388=(sj1*sj2);
IkReal x1389=(cj1*cj2);
IkReal x1390=((0.392)*x1384);
IkReal x1391=(cj1*x1383);
evalcond[0]=(x1387+(((-1.0)*x1383*x1389))+((r00*sj5))+((x1383*x1388)));
evalcond[1]=(x1386+((r10*sj5))+(((-1.0)*x1384*x1389))+((x1384*x1388)));
evalcond[2]=((((-0.1)*x1387))+(((-1.0)*r00*x1385))+(((-1.0)*px))+(((0.425)*x1391))+(((0.392)*x1383*x1389))+(((-0.134)*x1384))+(((-0.392)*x1383*x1388)));
evalcond[3]=((((-0.1)*x1386))+(((-1.0)*r10*x1385))+(((0.134)*x1383))+(((-1.0)*py))+(((0.425)*cj1*x1384))+((x1389*x1390))+(((-1.0)*x1388*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1392=((1.0)*cj5);
IkReal x1393=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1392)));
j4eval[0]=x1393;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1392))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1393);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1394=((1.0)*cj5);
IkReal x1395=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1394)));
j4eval[0]=x1395;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1394))))));
j4eval[2]=IKsign(x1395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1396=((1.0)*sj0);
IkReal x1397=((1.0)*cj0);
IkReal x1398=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1398;
j4eval[1]=((IKabs(((((-1.0)*r12*x1396))+(((-1.0)*r02*x1397)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1396))+(((-1.0)*r01*sj5*x1397))))));
j4eval[2]=IKsign(x1398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1399=((1.0)*sj0);
IkReal x1400=((1.0)*cj0);
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1399))+(((-1.0)*r02*x1400)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1400))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1401.value)+(((1.5707963267949)*(x1402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1403=IKsin(j4);
IkReal x1404=IKcos(j4);
IkReal x1405=(cj5*r10);
IkReal x1406=(r01*sj5);
IkReal x1407=((1.0)*cj2);
IkReal x1408=(cj5*r00);
IkReal x1409=((1.0)*sj0);
IkReal x1410=(cj5*r20);
IkReal x1411=(cj1*sj2);
IkReal x1412=((1.0)*x1404);
IkReal x1413=((1.0)*x1403);
IkReal x1414=(sj5*x1403);
evalcond[0]=(((r21*x1414))+(((-1.0)*r22*x1412))+(((-1.0)*x1410*x1413)));
evalcond[1]=(cj0+((r11*x1414))+(((-1.0)*r12*x1412))+(((-1.0)*x1405*x1413)));
evalcond[2]=((((-1.0)*r02*x1412))+(((-1.0)*x1409))+(((-1.0)*x1408*x1413))+((x1403*x1406)));
evalcond[3]=((((-1.0)*cj1*x1407))+(((-1.0)*r22*x1413))+(((-1.0)*r21*sj5*x1412))+((sj1*sj2))+((x1404*x1410)));
evalcond[4]=((((-1.0)*cj0*sj1*x1407))+(((-1.0)*r02*x1413))+(((-1.0)*cj0*x1411))+((x1404*x1408))+(((-1.0)*x1406*x1412)));
evalcond[5]=((((-1.0)*r11*sj5*x1412))+(((-1.0)*sj0*sj1*x1407))+(((-1.0)*r12*x1413))+((x1404*x1405))+(((-1.0)*x1409*x1411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1415=((1.0)*cj5);
CheckValue<IkReal> x1416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1415)))),-1);
if(!x1416.valid){
continue;
}
CheckValue<IkReal> x1417 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1415))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1416.value)))+(x1417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1418=IKsin(j4);
IkReal x1419=IKcos(j4);
IkReal x1420=(cj5*r10);
IkReal x1421=(r01*sj5);
IkReal x1422=((1.0)*cj2);
IkReal x1423=(cj5*r00);
IkReal x1424=((1.0)*sj0);
IkReal x1425=(cj5*r20);
IkReal x1426=(cj1*sj2);
IkReal x1427=((1.0)*x1419);
IkReal x1428=((1.0)*x1418);
IkReal x1429=(sj5*x1418);
evalcond[0]=(((r21*x1429))+(((-1.0)*x1425*x1428))+(((-1.0)*r22*x1427)));
evalcond[1]=(((r11*x1429))+cj0+(((-1.0)*x1420*x1428))+(((-1.0)*r12*x1427)));
evalcond[2]=((((-1.0)*x1423*x1428))+((x1418*x1421))+(((-1.0)*r02*x1427))+(((-1.0)*x1424)));
evalcond[3]=((((-1.0)*r21*sj5*x1427))+((sj1*sj2))+((x1419*x1425))+(((-1.0)*r22*x1428))+(((-1.0)*cj1*x1422)));
evalcond[4]=((((-1.0)*x1421*x1427))+(((-1.0)*cj0*x1426))+(((-1.0)*cj0*sj1*x1422))+((x1419*x1423))+(((-1.0)*r02*x1428)));
evalcond[5]=((((-1.0)*r11*sj5*x1427))+(((-1.0)*x1424*x1426))+(((-1.0)*r12*x1428))+((x1419*x1420))+(((-1.0)*sj0*sj1*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=((1.0)*cj5);
CheckValue<IkReal> x1431 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1431.valid){
continue;
}
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1430)))),-1);
if(!x1432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1431.value)+(((1.5707963267949)*(x1432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1433=IKsin(j4);
IkReal x1434=IKcos(j4);
IkReal x1435=(cj5*r10);
IkReal x1436=(r01*sj5);
IkReal x1437=((1.0)*cj2);
IkReal x1438=(cj5*r00);
IkReal x1439=((1.0)*sj0);
IkReal x1440=(cj5*r20);
IkReal x1441=(cj1*sj2);
IkReal x1442=((1.0)*x1434);
IkReal x1443=((1.0)*x1433);
IkReal x1444=(sj5*x1433);
evalcond[0]=((((-1.0)*r22*x1442))+((r21*x1444))+(((-1.0)*x1440*x1443)));
evalcond[1]=(((r11*x1444))+cj0+(((-1.0)*r12*x1442))+(((-1.0)*x1435*x1443)));
evalcond[2]=((((-1.0)*x1438*x1443))+((x1433*x1436))+(((-1.0)*x1439))+(((-1.0)*r02*x1442)));
evalcond[3]=(((x1434*x1440))+(((-1.0)*r22*x1443))+(((-1.0)*r21*sj5*x1442))+(((-1.0)*cj1*x1437))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x1437))+((x1434*x1438))+(((-1.0)*r02*x1443))+(((-1.0)*x1436*x1442))+(((-1.0)*cj0*x1441)));
evalcond[5]=((((-1.0)*r12*x1443))+(((-1.0)*x1439*x1441))+((x1434*x1435))+(((-1.0)*sj0*sj1*x1437))+(((-1.0)*r11*sj5*x1442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1445=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1445;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x1445);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1446=r21*r21;
IkReal x1447=cj5*cj5;
IkReal x1448=(sj1*sj2);
IkReal x1449=(r21*sj5);
IkReal x1450=(cj5*r20);
IkReal x1451=(cj1*cj2);
IkReal x1452=((((-1.0)*x1447*(r20*r20)))+(((-1.0)*x1446))+(((2.0)*x1449*x1450))+(((-1.0)*(r22*r22)))+((x1446*x1447)));
j4eval[0]=x1452;
j4eval[1]=((IKabs((((r22*x1448))+(((-1.0)*r22*x1451)))))+(IKabs((((x1450*x1451))+(((-1.0)*x1448*x1450))+(((-1.0)*x1449*x1451))+((x1448*x1449))))));
j4eval[2]=IKsign(x1452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1453=(sj1*sj2);
IkReal x1454=(r00*sj5);
IkReal x1455=(cj5*r01);
IkReal x1456=((212.5)*cj1);
IkReal x1457=(cj1*cj2);
IkReal x1458=((500.0)*px);
IkReal x1459=((246.0)*x1457);
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(((((-67.0)*x1457))+(((67.0)*x1453))),-1);
if(!x1460.valid){
continue;
}
CheckValue<IkReal> x1461=IKPowWithIntegerCheck(((((-1.0)*x1457))+x1453),-1);
if(!x1461.valid){
continue;
}
if( IKabs(((x1460.value)*(((((-246.0)*x1453*x1455))+(((-246.0)*x1453*x1454))+((x1455*x1456))+((x1455*x1459))+((x1454*x1459))+((x1454*x1456))+(((-1.0)*x1453*x1458))+((x1457*x1458)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1461.value)*((x1454+x1455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1460.value)*(((((-246.0)*x1453*x1455))+(((-246.0)*x1453*x1454))+((x1455*x1456))+((x1455*x1459))+((x1454*x1459))+((x1454*x1456))+(((-1.0)*x1453*x1458))+((x1457*x1458))))))+IKsqr(((x1461.value)*((x1454+x1455))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1460.value)*(((((-246.0)*x1453*x1455))+(((-246.0)*x1453*x1454))+((x1455*x1456))+((x1455*x1459))+((x1454*x1459))+((x1454*x1456))+(((-1.0)*x1453*x1458))+((x1457*x1458))))), ((x1461.value)*((x1454+x1455))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1462=IKcos(j0);
IkReal x1463=IKsin(j0);
IkReal x1464=((0.1)*sj5);
IkReal x1465=(cj5*r11);
IkReal x1466=(sj1*sj2);
IkReal x1467=(cj1*cj2);
IkReal x1468=((1.0)*sj5);
IkReal x1469=(cj5*r01);
IkReal x1470=((0.425)*cj1);
IkReal x1471=((0.392)*x1463);
IkReal x1472=((0.392)*x1462);
evalcond[0]=((((-1.0)*x1462*x1467))+(((-1.0)*r00*x1468))+((x1462*x1466))+(((-1.0)*x1469)));
evalcond[1]=(((x1463*x1466))+(((-1.0)*x1463*x1467))+(((-1.0)*x1465))+(((-1.0)*r10*x1468)));
evalcond[2]=((((-0.134)*x1463))+((x1462*x1470))+((x1467*x1472))+(((-0.1)*x1469))+(((-1.0)*px))+(((-1.0)*r00*x1464))+(((-1.0)*x1466*x1472)));
evalcond[3]=((((0.134)*x1462))+((x1467*x1471))+(((-0.1)*x1465))+(((-1.0)*py))+((x1463*x1470))+(((-1.0)*x1466*x1471))+(((-1.0)*r10*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1473=((1.0)*cj5);
IkReal x1474=((((-1.0)*r01*x1473))+(((-1.0)*r00*sj5)));
j4eval[0]=x1474;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1473))))));
j4eval[2]=IKsign(x1474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1475=((1.0)*cj5);
IkReal x1476=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1475)));
j4eval[0]=x1476;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1475))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1477=((1.0)*sj0);
IkReal x1478=((1.0)*cj0);
IkReal x1479=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1479;
j4eval[1]=((IKabs(((((-1.0)*r12*x1477))+(((-1.0)*r02*x1478)))))+(IKabs(((((-1.0)*r11*sj5*x1477))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1478))))));
j4eval[2]=IKsign(x1479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1480=((1.0)*sj0);
IkReal x1481=((1.0)*cj0);
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1480))+(((-1.0)*r02*x1481)))),IkReal(((((-1.0)*r11*sj5*x1480))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
CheckValue<IkReal> x1483=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1482.value)+(((1.5707963267949)*(x1483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1484=IKsin(j4);
IkReal x1485=IKcos(j4);
IkReal x1486=(cj5*r00);
IkReal x1487=(cj5*r10);
IkReal x1488=(r21*sj5);
IkReal x1489=((1.0)*cj2);
IkReal x1490=((1.0)*sj0);
IkReal x1491=(cj1*sj2);
IkReal x1492=(cj5*r20);
IkReal x1493=((1.0)*x1485);
IkReal x1494=((1.0)*x1484);
IkReal x1495=(sj5*x1484);
IkReal x1496=(sj5*x1485);
evalcond[0]=((((-1.0)*x1492*x1494))+((x1484*x1488))+(((-1.0)*r22*x1493)));
evalcond[1]=((((-1.0)*r12*x1493))+(((-1.0)*x1487*x1494))+cj0+((r11*x1495)));
evalcond[2]=((((-1.0)*x1490))+((r01*x1495))+(((-1.0)*x1486*x1494))+(((-1.0)*r02*x1493)));
evalcond[3]=((((-1.0)*cj1*x1489))+(((-1.0)*x1492*x1493))+((sj1*sj2))+((x1485*x1488))+((r22*x1484)));
evalcond[4]=(((r01*x1496))+(((-1.0)*x1486*x1493))+(((-1.0)*cj0*x1491))+(((-1.0)*cj0*sj1*x1489))+((r02*x1484)));
evalcond[5]=((((-1.0)*sj0*sj1*x1489))+(((-1.0)*x1487*x1493))+((r12*x1484))+((r11*x1496))+(((-1.0)*x1490*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1497=((1.0)*cj5);
CheckValue<IkReal> x1498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1497)))),-1);
if(!x1498.valid){
continue;
}
CheckValue<IkReal> x1499 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1497))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1498.value)))+(x1499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1500=IKsin(j4);
IkReal x1501=IKcos(j4);
IkReal x1502=(cj5*r00);
IkReal x1503=(cj5*r10);
IkReal x1504=(r21*sj5);
IkReal x1505=((1.0)*cj2);
IkReal x1506=((1.0)*sj0);
IkReal x1507=(cj1*sj2);
IkReal x1508=(cj5*r20);
IkReal x1509=((1.0)*x1501);
IkReal x1510=((1.0)*x1500);
IkReal x1511=(sj5*x1500);
IkReal x1512=(sj5*x1501);
evalcond[0]=((((-1.0)*r22*x1509))+((x1500*x1504))+(((-1.0)*x1508*x1510)));
evalcond[1]=(((r11*x1511))+cj0+(((-1.0)*x1503*x1510))+(((-1.0)*r12*x1509)));
evalcond[2]=((((-1.0)*x1506))+((r01*x1511))+(((-1.0)*r02*x1509))+(((-1.0)*x1502*x1510)));
evalcond[3]=((((-1.0)*cj1*x1505))+((sj1*sj2))+((x1501*x1504))+((r22*x1500))+(((-1.0)*x1508*x1509)));
evalcond[4]=(((r01*x1512))+(((-1.0)*cj0*x1507))+((r02*x1500))+(((-1.0)*x1502*x1509))+(((-1.0)*cj0*sj1*x1505)));
evalcond[5]=((((-1.0)*sj0*sj1*x1505))+((r11*x1512))+((r12*x1500))+(((-1.0)*x1506*x1507))+(((-1.0)*x1503*x1509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1513=((1.0)*cj5);
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1513))+(((-1.0)*r00*sj5)))),-1);
if(!x1514.valid){
continue;
}
CheckValue<IkReal> x1515 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1513))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1514.value)))+(x1515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1516=IKsin(j4);
IkReal x1517=IKcos(j4);
IkReal x1518=(cj5*r00);
IkReal x1519=(cj5*r10);
IkReal x1520=(r21*sj5);
IkReal x1521=((1.0)*cj2);
IkReal x1522=((1.0)*sj0);
IkReal x1523=(cj1*sj2);
IkReal x1524=(cj5*r20);
IkReal x1525=((1.0)*x1517);
IkReal x1526=((1.0)*x1516);
IkReal x1527=(sj5*x1516);
IkReal x1528=(sj5*x1517);
evalcond[0]=((((-1.0)*x1524*x1526))+(((-1.0)*r22*x1525))+((x1516*x1520)));
evalcond[1]=((((-1.0)*r12*x1525))+cj0+((r11*x1527))+(((-1.0)*x1519*x1526)));
evalcond[2]=((((-1.0)*x1522))+(((-1.0)*x1518*x1526))+((r01*x1527))+(((-1.0)*r02*x1525)));
evalcond[3]=((((-1.0)*x1524*x1525))+((sj1*sj2))+((x1517*x1520))+((r22*x1516))+(((-1.0)*cj1*x1521)));
evalcond[4]=((((-1.0)*x1518*x1525))+((r01*x1528))+(((-1.0)*cj0*x1523))+((r02*x1516))+(((-1.0)*cj0*sj1*x1521)));
evalcond[5]=(((r12*x1516))+((r11*x1528))+(((-1.0)*x1519*x1525))+(((-1.0)*sj0*sj1*x1521))+(((-1.0)*x1522*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1529=r21*r21;
IkReal x1530=cj5*cj5;
IkReal x1531=(sj1*sj2);
IkReal x1532=(r21*sj5);
IkReal x1533=(cj1*cj2);
IkReal x1534=(cj5*r20);
CheckValue<IkReal> x1535 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1533))+((r22*x1531)))),IkReal(((((-1.0)*x1531*x1534))+(((-1.0)*x1532*x1533))+((x1531*x1532))+((x1533*x1534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1535.valid){
continue;
}
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(IKsign(((((2.0)*x1532*x1534))+((x1529*x1530))+(((-1.0)*(r22*r22)))+(((-1.0)*x1530*(r20*r20)))+(((-1.0)*x1529)))),-1);
if(!x1536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1535.value)+(((1.5707963267949)*(x1536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1537=IKsin(j4);
IkReal x1538=IKcos(j4);
IkReal x1539=(r21*sj5);
IkReal x1540=(cj5*r20);
IkReal x1541=((1.0)*x1538);
evalcond[0]=((((-1.0)*x1537*x1540))+(((-1.0)*r22*x1541))+((x1537*x1539)));
evalcond[1]=(((x1538*x1539))+(((-1.0)*x1540*x1541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1542=(cj5*sj4);
IkReal x1543=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1543))+(((-1.0)*r00*x1542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1542))+(((-1.0)*r11*x1543))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1543))+(((-1.0)*r00*x1542))))+IKsqr((((r10*x1542))+(((-1.0)*r11*x1543))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1543))+(((-1.0)*r00*x1542))), (((r10*x1542))+(((-1.0)*r11*x1543))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1544=IKcos(j0);
IkReal x1545=IKsin(j0);
IkReal x1546=((0.1)*sj5);
IkReal x1547=((0.392)*sj1);
IkReal x1548=(cj5*r11);
IkReal x1549=((1.0)*cj1);
IkReal x1550=(r11*sj5);
IkReal x1551=((1.0)*sj5);
IkReal x1552=((1.0)*sj1);
IkReal x1553=((1.0)*cj5);
IkReal x1554=((0.425)*cj1);
IkReal x1555=((1.0)*cj4);
IkReal x1556=(r01*sj5);
IkReal x1557=(sj2*x1545);
IkReal x1558=(sj2*x1544);
IkReal x1559=(cj4*x1553);
IkReal x1560=((0.392)*cj1*cj2);
IkReal x1561=(cj2*x1544);
IkReal x1562=(cj2*x1545);
evalcond[0]=((((-1.0)*r10*sj4*x1553))+((sj4*x1550))+x1544+(((-1.0)*r12*x1555)));
evalcond[1]=((((-1.0)*x1545))+((sj4*x1556))+(((-1.0)*r02*x1555))+(((-1.0)*r00*sj4*x1553)));
evalcond[2]=((((-1.0)*x1549*x1561))+((sj1*x1558))+(((-1.0)*r00*x1551))+(((-1.0)*r01*x1553)));
evalcond[3]=((((-1.0)*x1548))+(((-1.0)*x1549*x1562))+((sj1*x1557))+(((-1.0)*r10*x1551)));
evalcond[4]=((((-1.0)*x1552*x1561))+(((-1.0)*x1549*x1558))+((r02*sj4))+(((-1.0)*r00*x1559))+((cj4*x1556)));
evalcond[5]=((((-1.0)*x1552*x1562))+(((-1.0)*x1549*x1557))+((r12*sj4))+(((-1.0)*r10*x1559))+((cj4*x1550)));
evalcond[6]=(((x1544*x1554))+((x1544*x1560))+(((-0.134)*x1545))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-1.0)*r00*x1546))+(((-1.0)*x1547*x1558)));
evalcond[7]=((((0.134)*x1544))+(((-1.0)*py))+(((-1.0)*r10*x1546))+(((-1.0)*x1547*x1557))+((x1545*x1560))+(((-0.1)*x1548))+((x1545*x1554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1564.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1563.value)+(((1.5707963267949)*(x1564.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1565=IKcos(j0);
IkReal x1566=IKsin(j0);
IkReal x1567=((0.1)*sj5);
IkReal x1568=(cj5*r11);
IkReal x1569=(sj1*sj2);
IkReal x1570=(cj1*cj2);
IkReal x1571=((1.0)*sj5);
IkReal x1572=(cj5*r01);
IkReal x1573=((0.425)*cj1);
IkReal x1574=((0.392)*x1566);
IkReal x1575=((0.392)*x1565);
evalcond[0]=((((-1.0)*r00*x1571))+(((-1.0)*x1565*x1570))+(((-1.0)*x1572))+((x1565*x1569)));
evalcond[1]=(((x1566*x1569))+(((-1.0)*x1566*x1570))+(((-1.0)*r10*x1571))+(((-1.0)*x1568)));
evalcond[2]=((((-0.134)*x1566))+((x1570*x1575))+(((-1.0)*px))+(((-1.0)*x1569*x1575))+(((-1.0)*r00*x1567))+((x1565*x1573))+(((-0.1)*x1572)));
evalcond[3]=(((x1566*x1573))+((x1570*x1574))+(((0.134)*x1565))+(((-1.0)*py))+(((-1.0)*x1569*x1574))+(((-1.0)*r10*x1567))+(((-0.1)*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1576=((1.0)*cj5);
IkReal x1577=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1576)));
j4eval[0]=x1577;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1576))))));
j4eval[2]=IKsign(x1577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1578=((1.0)*cj5);
IkReal x1579=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1578)));
j4eval[0]=x1579;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1578))))));
j4eval[2]=IKsign(x1579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1580=((1.0)*sj0);
IkReal x1581=((1.0)*cj0);
IkReal x1582=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1582;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1581))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1580)))))+(IKabs(((((-1.0)*r02*x1581))+(((-1.0)*r12*x1580))))));
j4eval[2]=IKsign(x1582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1583=((1.0)*sj0);
IkReal x1584=((1.0)*cj0);
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1584))+(((-1.0)*r12*x1583)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1584))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
CheckValue<IkReal> x1586=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1585.value)+(((1.5707963267949)*(x1586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1587=IKsin(j4);
IkReal x1588=IKcos(j4);
IkReal x1589=(cj5*r00);
IkReal x1590=(cj5*r10);
IkReal x1591=(r21*sj5);
IkReal x1592=((1.0)*cj2);
IkReal x1593=((1.0)*sj0);
IkReal x1594=(cj1*sj2);
IkReal x1595=(cj5*r20);
IkReal x1596=((1.0)*x1588);
IkReal x1597=((1.0)*x1587);
IkReal x1598=(sj5*x1587);
IkReal x1599=(sj5*x1588);
evalcond[0]=(((x1587*x1591))+(((-1.0)*x1595*x1597))+(((-1.0)*r22*x1596)));
evalcond[1]=(cj0+((r11*x1598))+(((-1.0)*x1590*x1597))+(((-1.0)*r12*x1596)));
evalcond[2]=((((-1.0)*x1593))+((r01*x1598))+(((-1.0)*r02*x1596))+(((-1.0)*x1589*x1597)));
evalcond[3]=(((x1588*x1591))+(((-1.0)*x1595*x1596))+((sj1*sj2))+(((-1.0)*cj1*x1592))+((r22*x1587)));
evalcond[4]=(((r01*x1599))+(((-1.0)*cj0*x1594))+(((-1.0)*x1589*x1596))+((r02*x1587))+(((-1.0)*cj0*sj1*x1592)));
evalcond[5]=((((-1.0)*sj0*sj1*x1592))+(((-1.0)*x1593*x1594))+((r12*x1587))+((r11*x1599))+(((-1.0)*x1590*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1600=((1.0)*cj5);
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1600)))),-1);
if(!x1601.valid){
continue;
}
CheckValue<IkReal> x1602 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1601.value)))+(x1602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1603=IKsin(j4);
IkReal x1604=IKcos(j4);
IkReal x1605=(cj5*r00);
IkReal x1606=(cj5*r10);
IkReal x1607=(r21*sj5);
IkReal x1608=((1.0)*cj2);
IkReal x1609=((1.0)*sj0);
IkReal x1610=(cj1*sj2);
IkReal x1611=(cj5*r20);
IkReal x1612=((1.0)*x1604);
IkReal x1613=((1.0)*x1603);
IkReal x1614=(sj5*x1603);
IkReal x1615=(sj5*x1604);
evalcond[0]=((((-1.0)*x1611*x1613))+(((-1.0)*r22*x1612))+((x1603*x1607)));
evalcond[1]=((((-1.0)*x1606*x1613))+(((-1.0)*r12*x1612))+cj0+((r11*x1614)));
evalcond[2]=(((r01*x1614))+(((-1.0)*x1609))+(((-1.0)*r02*x1612))+(((-1.0)*x1605*x1613)));
evalcond[3]=((((-1.0)*cj1*x1608))+(((-1.0)*x1611*x1612))+((sj1*sj2))+((r22*x1603))+((x1604*x1607)));
evalcond[4]=(((r01*x1615))+(((-1.0)*cj0*sj1*x1608))+(((-1.0)*x1605*x1612))+(((-1.0)*cj0*x1610))+((r02*x1603)));
evalcond[5]=((((-1.0)*x1606*x1612))+((r11*x1615))+(((-1.0)*sj0*sj1*x1608))+((r12*x1603))+(((-1.0)*x1609*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1616=((1.0)*cj5);
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1616))+(((-1.0)*r00*sj5)))),-1);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1617.value)))+(x1618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1619=IKsin(j4);
IkReal x1620=IKcos(j4);
IkReal x1621=(cj5*r00);
IkReal x1622=(cj5*r10);
IkReal x1623=(r21*sj5);
IkReal x1624=((1.0)*cj2);
IkReal x1625=((1.0)*sj0);
IkReal x1626=(cj1*sj2);
IkReal x1627=(cj5*r20);
IkReal x1628=((1.0)*x1620);
IkReal x1629=((1.0)*x1619);
IkReal x1630=(sj5*x1619);
IkReal x1631=(sj5*x1620);
evalcond[0]=((((-1.0)*r22*x1628))+((x1619*x1623))+(((-1.0)*x1627*x1629)));
evalcond[1]=((((-1.0)*r12*x1628))+cj0+((r11*x1630))+(((-1.0)*x1622*x1629)));
evalcond[2]=((((-1.0)*x1625))+(((-1.0)*r02*x1628))+((r01*x1630))+(((-1.0)*x1621*x1629)));
evalcond[3]=(((x1620*x1623))+((sj1*sj2))+(((-1.0)*x1627*x1628))+((r22*x1619))+(((-1.0)*cj1*x1624)));
evalcond[4]=((((-1.0)*cj0*sj1*x1624))+((r01*x1631))+(((-1.0)*x1621*x1628))+(((-1.0)*cj0*x1626))+((r02*x1619)));
evalcond[5]=(((r11*x1631))+((r12*x1619))+(((-1.0)*x1625*x1626))+(((-1.0)*x1622*x1628))+(((-1.0)*sj0*sj1*x1624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1632=((1.0)*cj5);
IkReal x1633=((1.0)*sj5);
IkReal x1634=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1634;
j0eval[1]=((IKabs(((((-1.0)*r11*x1632))+(((-1.0)*r10*x1633)))))+(IKabs(((((-1.0)*r01*x1632))+(((-1.0)*r00*x1633))))));
j0eval[2]=IKsign(x1634);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1635=r21*r21;
IkReal x1636=cj5*cj5;
IkReal x1637=(cj2*sj1);
IkReal x1638=(cj1*sj2);
IkReal x1639=(r21*sj5);
IkReal x1640=((1.0)*cj5*r20);
IkReal x1641=((((-1.0)*x1636*(r20*r20)))+(((2.0)*cj5*r20*x1639))+(((-1.0)*x1635))+(((-1.0)*(r22*r22)))+((x1635*x1636)));
j4eval[0]=x1641;
j4eval[1]=((IKabs((((r22*x1637))+((r22*x1638)))))+(IKabs((((x1637*x1639))+(((-1.0)*x1638*x1640))+(((-1.0)*x1637*x1640))+((x1638*x1639))))));
j4eval[2]=IKsign(x1641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1642=cj1*cj1;
IkReal x1643=(cj2*sj2);
IkReal x1644=(cj2*sj1);
IkReal x1645=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x1644))+x1645+x1643+(((-1.08418367346939)*sj2*x1642))+(((-1.08418367346939)*cj1*x1644))+(((-2.0)*x1642*x1643)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x1644)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1646=cj1*cj1;
IkReal x1647=((500.0)*py);
IkReal x1648=(cj1*sj2);
IkReal x1649=(cj2*sj2);
IkReal x1650=(cj5*r01);
IkReal x1651=(cj2*sj1);
IkReal x1652=(cj1*sj1);
IkReal x1653=(r00*sj5);
IkReal x1654=((50.0)*r10*sj5);
IkReal x1655=((50.0)*cj5*r11);
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(((((-212.5)*cj1*x1651))+(((196.0)*x1649))+(((196.0)*x1652))+(((-392.0)*x1646*x1649))+(((-392.0)*cj1*cj2*x1651))+(((-212.5)*sj2*x1646))),-1);
if(!x1656.valid){
continue;
}
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(((((-1.0)*x1651))+(((-1.0)*x1648))),-1);
if(!x1657.valid){
continue;
}
if( IKabs(((x1656.value)*(((((-1.0)*x1647*x1648))+(((67.0)*x1653))+(((67.0)*x1650))+(((-1.0)*x1647*x1651))+(((-1.0)*x1648*x1655))+(((-1.0)*x1648*x1654))+(((-1.0)*x1651*x1654))+(((-1.0)*x1651*x1655)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1657.value)*(((((-1.0)*x1653))+(((-1.0)*x1650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1656.value)*(((((-1.0)*x1647*x1648))+(((67.0)*x1653))+(((67.0)*x1650))+(((-1.0)*x1647*x1651))+(((-1.0)*x1648*x1655))+(((-1.0)*x1648*x1654))+(((-1.0)*x1651*x1654))+(((-1.0)*x1651*x1655))))))+IKsqr(((x1657.value)*(((((-1.0)*x1653))+(((-1.0)*x1650))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1656.value)*(((((-1.0)*x1647*x1648))+(((67.0)*x1653))+(((67.0)*x1650))+(((-1.0)*x1647*x1651))+(((-1.0)*x1648*x1655))+(((-1.0)*x1648*x1654))+(((-1.0)*x1651*x1654))+(((-1.0)*x1651*x1655))))), ((x1657.value)*(((((-1.0)*x1653))+(((-1.0)*x1650))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1658=IKcos(j0);
IkReal x1659=IKsin(j0);
IkReal x1660=((0.1)*sj5);
IkReal x1661=(cj5*r11);
IkReal x1662=(cj5*r01);
IkReal x1663=((0.392)*cj2);
IkReal x1664=((1.0)*cj2);
IkReal x1665=((0.392)*sj2);
IkReal x1666=((1.0)*cj1*sj2);
IkReal x1667=(cj1*x1658);
IkReal x1668=(cj1*x1659);
IkReal x1669=(sj1*x1658);
IkReal x1670=(sj1*x1659);
evalcond[0]=(((r00*sj5))+x1662+(((-1.0)*x1658*x1666))+(((-1.0)*x1664*x1669)));
evalcond[1]=(((r10*sj5))+x1661+(((-1.0)*x1664*x1670))+(((-1.0)*x1659*x1666)));
evalcond[2]=((((-1.0)*r00*x1660))+(((-0.1)*x1662))+(((-1.0)*px))+(((-0.134)*x1659))+(((0.425)*x1667))+(((-1.0)*x1665*x1669))+((x1663*x1667)));
evalcond[3]=((((-0.1)*x1661))+(((0.134)*x1658))+(((-1.0)*r10*x1660))+(((-1.0)*py))+(((0.425)*x1668))+(((-1.0)*x1665*x1670))+((x1663*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1671=((1.0)*cj5);
IkReal x1672=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1671)));
j4eval[0]=x1672;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1671)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1673=((1.0)*cj5);
IkReal x1674=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1673)));
j4eval[0]=x1674;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1673))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1675=((1.0)*sj0);
IkReal x1676=((1.0)*cj0);
IkReal x1677=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1677;
j4eval[1]=((IKabs(((((-1.0)*r02*x1676))+(((-1.0)*r12*x1675)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1675))+(((-1.0)*r01*sj5*x1676))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1678=((1.0)*sj0);
IkReal x1679=((1.0)*cj0);
CheckValue<IkReal> x1680 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1679))+(((-1.0)*r12*x1678)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1678))+(((-1.0)*r01*sj5*x1679))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1680.valid){
continue;
}
CheckValue<IkReal> x1681=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1680.value)+(((1.5707963267949)*(x1681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1682=IKsin(j4);
IkReal x1683=IKcos(j4);
IkReal x1684=(cj5*r00);
IkReal x1685=(cj5*r10);
IkReal x1686=(r21*sj5);
IkReal x1687=(sj1*sj2);
IkReal x1688=(cj5*r20);
IkReal x1689=((1.0)*x1683);
IkReal x1690=((1.0)*cj1*cj2);
IkReal x1691=((1.0)*x1682);
IkReal x1692=(sj5*x1682);
IkReal x1693=(sj5*x1683);
evalcond[0]=((((-1.0)*x1688*x1691))+(((-1.0)*r22*x1689))+((x1682*x1686)));
evalcond[1]=((((-1.0)*r12*x1689))+cj0+((r11*x1692))+(((-1.0)*x1685*x1691)));
evalcond[2]=(((r01*x1692))+(((-1.0)*sj0))+(((-1.0)*x1684*x1691))+(((-1.0)*r02*x1689)));
evalcond[3]=(((cj2*sj1))+((r22*x1682))+((cj1*sj2))+((x1683*x1686))+(((-1.0)*x1688*x1689)));
evalcond[4]=(((r01*x1693))+(((-1.0)*cj0*x1690))+((r02*x1682))+((cj0*x1687))+(((-1.0)*x1684*x1689)));
evalcond[5]=((((-1.0)*sj0*x1690))+(((-1.0)*x1685*x1689))+((r11*x1693))+((r12*x1682))+((sj0*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1694=((1.0)*cj5);
CheckValue<IkReal> x1695 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1694))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1695.valid){
continue;
}
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1694)))),-1);
if(!x1696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1695.value)+(((1.5707963267949)*(x1696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1697=IKsin(j4);
IkReal x1698=IKcos(j4);
IkReal x1699=(cj5*r00);
IkReal x1700=(cj5*r10);
IkReal x1701=(r21*sj5);
IkReal x1702=(sj1*sj2);
IkReal x1703=(cj5*r20);
IkReal x1704=((1.0)*x1698);
IkReal x1705=((1.0)*cj1*cj2);
IkReal x1706=((1.0)*x1697);
IkReal x1707=(sj5*x1697);
IkReal x1708=(sj5*x1698);
evalcond[0]=(((x1697*x1701))+(((-1.0)*x1703*x1706))+(((-1.0)*r22*x1704)));
evalcond[1]=(cj0+((r11*x1707))+(((-1.0)*x1700*x1706))+(((-1.0)*r12*x1704)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1699*x1706))+((r01*x1707))+(((-1.0)*r02*x1704)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1697))+(((-1.0)*x1703*x1704))+((x1698*x1701)));
evalcond[4]=((((-1.0)*x1699*x1704))+((cj0*x1702))+((r01*x1708))+((r02*x1697))+(((-1.0)*cj0*x1705)));
evalcond[5]=(((r12*x1697))+((r11*x1708))+(((-1.0)*sj0*x1705))+(((-1.0)*x1700*x1704))+((sj0*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1709=((1.0)*cj5);
CheckValue<IkReal> x1710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1709)))),-1);
if(!x1710.valid){
continue;
}
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1710.value)))+(x1711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1712=IKsin(j4);
IkReal x1713=IKcos(j4);
IkReal x1714=(cj5*r00);
IkReal x1715=(cj5*r10);
IkReal x1716=(r21*sj5);
IkReal x1717=(sj1*sj2);
IkReal x1718=(cj5*r20);
IkReal x1719=((1.0)*x1713);
IkReal x1720=((1.0)*cj1*cj2);
IkReal x1721=((1.0)*x1712);
IkReal x1722=(sj5*x1712);
IkReal x1723=(sj5*x1713);
evalcond[0]=(((x1712*x1716))+(((-1.0)*r22*x1719))+(((-1.0)*x1718*x1721)));
evalcond[1]=((((-1.0)*x1715*x1721))+cj0+((r11*x1722))+(((-1.0)*r12*x1719)));
evalcond[2]=(((r01*x1722))+(((-1.0)*sj0))+(((-1.0)*r02*x1719))+(((-1.0)*x1714*x1721)));
evalcond[3]=(((cj2*sj1))+((r22*x1712))+((x1713*x1716))+((cj1*sj2))+(((-1.0)*x1718*x1719)));
evalcond[4]=((((-1.0)*x1714*x1719))+((r02*x1712))+((r01*x1723))+(((-1.0)*cj0*x1720))+((cj0*x1717)));
evalcond[5]=((((-1.0)*sj0*x1720))+((r12*x1712))+(((-1.0)*x1715*x1719))+((r11*x1723))+((sj0*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1724=r21*r21;
IkReal x1725=cj5*cj5;
IkReal x1726=(cj2*sj1);
IkReal x1727=(cj1*sj2);
IkReal x1728=(r21*sj5);
IkReal x1729=((1.0)*cj5*r20);
CheckValue<IkReal> x1730=IKPowWithIntegerCheck(IKsign((((x1724*x1725))+(((-1.0)*(r22*r22)))+(((-1.0)*x1725*(r20*r20)))+(((2.0)*cj5*r20*x1728))+(((-1.0)*x1724)))),-1);
if(!x1730.valid){
continue;
}
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((((r22*x1726))+((r22*x1727)))),IkReal(((((-1.0)*x1726*x1729))+((x1726*x1728))+((x1727*x1728))+(((-1.0)*x1727*x1729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1730.value)))+(x1731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1732=IKsin(j4);
IkReal x1733=IKcos(j4);
IkReal x1734=(r21*sj5);
IkReal x1735=(cj5*r20);
IkReal x1736=((1.0)*x1733);
evalcond[0]=((((-1.0)*x1732*x1735))+((x1732*x1734))+(((-1.0)*r22*x1736)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x1732))+((x1733*x1734))+(((-1.0)*x1735*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1737=(cj5*sj4);
IkReal x1738=(sj4*sj5);
if( IKabs((((r01*x1738))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1738))+((r10*x1737))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1738))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1737))))+IKsqr(((((-1.0)*r11*x1738))+((r10*x1737))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1738))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1737))), ((((-1.0)*r11*x1738))+((r10*x1737))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1739=IKcos(j0);
IkReal x1740=IKsin(j0);
IkReal x1741=((0.1)*sj5);
IkReal x1742=((0.392)*sj1);
IkReal x1743=(cj5*r11);
IkReal x1744=(cj5*r01);
IkReal x1745=((1.0)*cj1);
IkReal x1746=(r11*sj5);
IkReal x1747=((0.392)*cj2);
IkReal x1748=((1.0)*sj1);
IkReal x1749=((1.0)*cj4);
IkReal x1750=(r01*sj5);
IkReal x1751=(sj2*x1740);
IkReal x1752=(sj2*x1739);
IkReal x1753=(cj5*x1749);
IkReal x1754=(cj1*x1739);
IkReal x1755=(cj1*x1740);
IkReal x1756=(cj2*x1739);
IkReal x1757=((1.0)*cj5*sj4);
IkReal x1758=(cj2*x1740);
evalcond[0]=((((-1.0)*r12*x1749))+x1739+((sj4*x1746))+(((-1.0)*r10*x1757)));
evalcond[1]=(((sj4*x1750))+(((-1.0)*x1740))+(((-1.0)*r00*x1757))+(((-1.0)*r02*x1749)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x1748*x1756))+x1744+(((-1.0)*x1745*x1752)));
evalcond[3]=((((-1.0)*x1748*x1758))+((r10*sj5))+x1743+(((-1.0)*x1745*x1751)));
evalcond[4]=(((r02*sj4))+(((-1.0)*x1745*x1756))+(((-1.0)*r00*x1753))+((sj1*x1752))+((cj4*x1750)));
evalcond[5]=(((cj4*x1746))+(((-1.0)*r10*x1753))+(((-1.0)*x1745*x1758))+((r12*sj4))+((sj1*x1751)));
evalcond[6]=((((-0.134)*x1740))+((x1747*x1754))+(((-1.0)*px))+(((0.425)*x1754))+(((-1.0)*r00*x1741))+(((-0.1)*x1744))+(((-1.0)*x1742*x1752)));
evalcond[7]=(((x1747*x1755))+(((-1.0)*r10*x1741))+(((-1.0)*py))+(((0.425)*x1755))+(((0.134)*x1739))+(((-0.1)*x1743))+(((-1.0)*x1742*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1759=((1.0)*cj5);
IkReal x1760=((1.0)*sj5);
CheckValue<IkReal> x1761 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1759))+(((-1.0)*r10*x1760)))),IkReal(((((-1.0)*r00*x1760))+(((-1.0)*r01*x1759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1761.valid){
continue;
}
CheckValue<IkReal> x1762=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1762.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1761.value)+(((1.5707963267949)*(x1762.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1763=IKcos(j0);
IkReal x1764=IKsin(j0);
IkReal x1765=((0.1)*sj5);
IkReal x1766=(cj5*r11);
IkReal x1767=(cj5*r01);
IkReal x1768=((0.392)*cj2);
IkReal x1769=((1.0)*cj2);
IkReal x1770=((0.392)*sj2);
IkReal x1771=((1.0)*cj1*sj2);
IkReal x1772=(cj1*x1763);
IkReal x1773=(cj1*x1764);
IkReal x1774=(sj1*x1763);
IkReal x1775=(sj1*x1764);
evalcond[0]=(((r00*sj5))+x1767+(((-1.0)*x1763*x1771))+(((-1.0)*x1769*x1774)));
evalcond[1]=(((r10*sj5))+x1766+(((-1.0)*x1764*x1771))+(((-1.0)*x1769*x1775)));
evalcond[2]=((((-1.0)*r00*x1765))+(((-0.1)*x1767))+(((0.425)*x1772))+(((-1.0)*px))+(((-1.0)*x1770*x1774))+(((-0.134)*x1764))+((x1768*x1772)));
evalcond[3]=((((-0.1)*x1766))+(((0.134)*x1763))+(((0.425)*x1773))+(((-1.0)*py))+(((-1.0)*x1770*x1775))+(((-1.0)*r10*x1765))+((x1768*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1776=((1.0)*cj5);
IkReal x1777=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1776)));
j4eval[0]=x1777;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1776))))));
j4eval[2]=IKsign(x1777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1778=((1.0)*cj5);
IkReal x1779=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1778)));
j4eval[0]=x1779;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1778))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1780=((1.0)*sj0);
IkReal x1781=((1.0)*cj0);
IkReal x1782=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1782;
j4eval[1]=((IKabs(((((-1.0)*r12*x1780))+(((-1.0)*r02*x1781)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1781))+(((-1.0)*r11*sj5*x1780))))));
j4eval[2]=IKsign(x1782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1783=((1.0)*sj0);
IkReal x1784=((1.0)*cj0);
CheckValue<IkReal> x1785 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1783))+(((-1.0)*r02*x1784)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1784))+(((-1.0)*r11*sj5*x1783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1785.valid){
continue;
}
CheckValue<IkReal> x1786=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1785.value)+(((1.5707963267949)*(x1786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1787=IKsin(j4);
IkReal x1788=IKcos(j4);
IkReal x1789=(cj5*r00);
IkReal x1790=(cj5*r10);
IkReal x1791=(r21*sj5);
IkReal x1792=(sj1*sj2);
IkReal x1793=(cj5*r20);
IkReal x1794=((1.0)*x1788);
IkReal x1795=((1.0)*cj1*cj2);
IkReal x1796=((1.0)*x1787);
IkReal x1797=(sj5*x1787);
IkReal x1798=(sj5*x1788);
evalcond[0]=((((-1.0)*r22*x1794))+(((-1.0)*x1793*x1796))+((x1787*x1791)));
evalcond[1]=((((-1.0)*x1790*x1796))+cj0+(((-1.0)*r12*x1794))+((r11*x1797)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1789*x1796))+(((-1.0)*r02*x1794))+((r01*x1797)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1793*x1794))+((r22*x1787))+((x1788*x1791)));
evalcond[4]=((((-1.0)*cj0*x1795))+(((-1.0)*x1789*x1794))+((r02*x1787))+((cj0*x1792))+((r01*x1798)));
evalcond[5]=((((-1.0)*sj0*x1795))+(((-1.0)*x1790*x1794))+((sj0*x1792))+((r12*x1787))+((r11*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1799=((1.0)*cj5);
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1799)))),-1);
if(!x1800.valid){
continue;
}
CheckValue<IkReal> x1801 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1800.value)))+(x1801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1802=IKsin(j4);
IkReal x1803=IKcos(j4);
IkReal x1804=(cj5*r00);
IkReal x1805=(cj5*r10);
IkReal x1806=(r21*sj5);
IkReal x1807=(sj1*sj2);
IkReal x1808=(cj5*r20);
IkReal x1809=((1.0)*x1803);
IkReal x1810=((1.0)*cj1*cj2);
IkReal x1811=((1.0)*x1802);
IkReal x1812=(sj5*x1802);
IkReal x1813=(sj5*x1803);
evalcond[0]=(((x1802*x1806))+(((-1.0)*x1808*x1811))+(((-1.0)*r22*x1809)));
evalcond[1]=(cj0+(((-1.0)*x1805*x1811))+((r11*x1812))+(((-1.0)*r12*x1809)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1804*x1811))+(((-1.0)*r02*x1809))+((r01*x1812)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1802))+((x1803*x1806))+(((-1.0)*x1808*x1809)));
evalcond[4]=((((-1.0)*cj0*x1810))+((cj0*x1807))+(((-1.0)*x1804*x1809))+((r02*x1802))+((r01*x1813)));
evalcond[5]=(((sj0*x1807))+(((-1.0)*x1805*x1809))+((r12*x1802))+(((-1.0)*sj0*x1810))+((r11*x1813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1814=((1.0)*cj5);
CheckValue<IkReal> x1815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1814))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1815.valid){
continue;
}
CheckValue<IkReal> x1816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1814)))),-1);
if(!x1816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1815.value)+(((1.5707963267949)*(x1816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1817=IKsin(j4);
IkReal x1818=IKcos(j4);
IkReal x1819=(cj5*r00);
IkReal x1820=(cj5*r10);
IkReal x1821=(r21*sj5);
IkReal x1822=(sj1*sj2);
IkReal x1823=(cj5*r20);
IkReal x1824=((1.0)*x1818);
IkReal x1825=((1.0)*cj1*cj2);
IkReal x1826=((1.0)*x1817);
IkReal x1827=(sj5*x1817);
IkReal x1828=(sj5*x1818);
evalcond[0]=((((-1.0)*r22*x1824))+(((-1.0)*x1823*x1826))+((x1817*x1821)));
evalcond[1]=(cj0+(((-1.0)*r12*x1824))+((r11*x1827))+(((-1.0)*x1820*x1826)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1827))+(((-1.0)*x1819*x1826))+(((-1.0)*r02*x1824)));
evalcond[3]=(((r22*x1817))+((cj2*sj1))+((cj1*sj2))+((x1818*x1821))+(((-1.0)*x1823*x1824)));
evalcond[4]=(((cj0*x1822))+((r02*x1817))+((r01*x1828))+(((-1.0)*x1819*x1824))+(((-1.0)*cj0*x1825)));
evalcond[5]=(((sj0*x1822))+((r11*x1828))+(((-1.0)*sj0*x1825))+(((-1.0)*x1820*x1824))+((r12*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1829=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1829;
j0eval[1]=IKsign(x1829);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1830=cj5*cj5;
IkReal x1831=r21*r21;
IkReal x1832=(cj2*sj1);
IkReal x1833=(cj1*sj2);
IkReal x1834=(r21*sj5);
IkReal x1835=((1.0)*cj5*r20);
IkReal x1836=((r22*r22)+(((-1.0)*x1830*x1831))+((x1830*(r20*r20)))+x1831+(((-2.0)*cj5*r20*x1834)));
j4eval[0]=x1836;
j4eval[1]=IKsign(x1836);
j4eval[2]=((IKabs((((r22*x1832))+((r22*x1833)))))+(IKabs(((((-1.0)*x1832*x1835))+(((-1.0)*x1833*x1835))+((x1832*x1834))+((x1833*x1834))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1837=cj1*cj1;
IkReal x1838=(cj2*sj2);
IkReal x1839=(cj2*sj1);
IkReal x1840=(cj1*sj1);
j0eval[0]=((((-1.08418367346939)*cj1*x1839))+(((-2.0)*x1837*x1838))+(((-2.0)*cj1*cj2*x1839))+(((-1.08418367346939)*sj2*x1837))+x1840+x1838);
j0eval[1]=((((-1.0)*x1839))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1841=cj1*cj1;
IkReal x1842=((500.0)*py);
IkReal x1843=(cj1*sj2);
IkReal x1844=(cj2*sj2);
IkReal x1845=(cj5*r01);
IkReal x1846=(cj2*sj1);
IkReal x1847=(cj1*sj1);
IkReal x1848=(r00*sj5);
IkReal x1849=((50.0)*r10*sj5);
IkReal x1850=((50.0)*cj5*r11);
CheckValue<IkReal> x1851=IKPowWithIntegerCheck(((((-392.0)*x1841*x1844))+(((-392.0)*cj1*cj2*x1846))+(((-212.5)*sj2*x1841))+(((196.0)*x1844))+(((196.0)*x1847))+(((-212.5)*cj1*x1846))),-1);
if(!x1851.valid){
continue;
}
CheckValue<IkReal> x1852=IKPowWithIntegerCheck(((((-1.0)*x1846))+(((-1.0)*x1843))),-1);
if(!x1852.valid){
continue;
}
if( IKabs(((x1851.value)*(((((-1.0)*x1843*x1849))+(((-1.0)*x1842*x1843))+(((-1.0)*x1842*x1846))+(((-67.0)*x1845))+(((-67.0)*x1848))+(((-1.0)*x1843*x1850))+(((-1.0)*x1846*x1849))+(((-1.0)*x1846*x1850)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1852.value)*((x1848+x1845)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1851.value)*(((((-1.0)*x1843*x1849))+(((-1.0)*x1842*x1843))+(((-1.0)*x1842*x1846))+(((-67.0)*x1845))+(((-67.0)*x1848))+(((-1.0)*x1843*x1850))+(((-1.0)*x1846*x1849))+(((-1.0)*x1846*x1850))))))+IKsqr(((x1852.value)*((x1848+x1845))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1851.value)*(((((-1.0)*x1843*x1849))+(((-1.0)*x1842*x1843))+(((-1.0)*x1842*x1846))+(((-67.0)*x1845))+(((-67.0)*x1848))+(((-1.0)*x1843*x1850))+(((-1.0)*x1846*x1849))+(((-1.0)*x1846*x1850))))), ((x1852.value)*((x1848+x1845))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1853=IKcos(j0);
IkReal x1854=IKsin(j0);
IkReal x1855=(r00*sj5);
IkReal x1856=(cj5*r11);
IkReal x1857=(r10*sj5);
IkReal x1858=((1.0)*cj2);
IkReal x1859=(cj5*r01);
IkReal x1860=((0.392)*sj2);
IkReal x1861=((0.425)*cj1);
IkReal x1862=((1.0)*cj1*sj2);
IkReal x1863=((0.392)*cj1*cj2);
IkReal x1864=(sj1*x1853);
IkReal x1865=(sj1*x1854);
evalcond[0]=((((-1.0)*x1853*x1862))+(((-1.0)*x1855))+(((-1.0)*x1859))+(((-1.0)*x1858*x1864)));
evalcond[1]=((((-1.0)*x1854*x1862))+(((-1.0)*x1856))+(((-1.0)*x1857))+(((-1.0)*x1858*x1865)));
evalcond[2]=((((-1.0)*x1860*x1864))+(((-0.134)*x1854))+(((-1.0)*px))+((x1853*x1863))+((x1853*x1861))+(((-0.1)*x1855))+(((-0.1)*x1859)));
evalcond[3]=((((-1.0)*x1860*x1865))+(((-1.0)*py))+((x1854*x1863))+((x1854*x1861))+(((0.134)*x1853))+(((-0.1)*x1857))+(((-0.1)*x1856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1866=((1.0)*cj5);
IkReal x1867=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1866)));
j4eval[0]=x1867;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1866)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1868=((1.0)*cj5);
IkReal x1869=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1868)));
j4eval[0]=x1869;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1868))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1869);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1870=((1.0)*sj0);
IkReal x1871=((1.0)*cj0);
IkReal x1872=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1872;
j4eval[1]=((IKabs(((((-1.0)*r02*x1871))+(((-1.0)*r12*x1870)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1870))+(((-1.0)*r01*sj5*x1871))))));
j4eval[2]=IKsign(x1872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1873=((1.0)*sj0);
IkReal x1874=((1.0)*cj0);
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1875.valid){
continue;
}
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1874))+(((-1.0)*r12*x1873)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1873))+(((-1.0)*r01*sj5*x1874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1875.value)))+(x1876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1877=IKsin(j4);
IkReal x1878=IKcos(j4);
IkReal x1879=(cj5*r10);
IkReal x1880=(sj1*sj2);
IkReal x1881=(r01*sj5);
IkReal x1882=(cj5*r00);
IkReal x1883=(cj5*r20);
IkReal x1884=((1.0)*x1878);
IkReal x1885=((1.0)*cj1*cj2);
IkReal x1886=((1.0)*x1877);
IkReal x1887=(sj5*x1877);
evalcond[0]=(((r21*x1887))+(((-1.0)*x1883*x1886))+(((-1.0)*r22*x1884)));
evalcond[1]=((((-1.0)*x1879*x1886))+cj0+(((-1.0)*r12*x1884))+((r11*x1887)));
evalcond[2]=(((x1877*x1881))+(((-1.0)*x1882*x1886))+(((-1.0)*sj0))+(((-1.0)*r02*x1884)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1884))+((cj1*sj2))+((x1878*x1883))+(((-1.0)*r22*x1886)));
evalcond[4]=((((-1.0)*cj0*x1885))+(((-1.0)*r02*x1886))+((x1878*x1882))+((cj0*x1880))+(((-1.0)*x1881*x1884)));
evalcond[5]=((((-1.0)*r12*x1886))+(((-1.0)*r11*sj5*x1884))+(((-1.0)*sj0*x1885))+((x1878*x1879))+((sj0*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1888=((1.0)*cj5);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1888))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1888)))),-1);
if(!x1890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1889.value)+(((1.5707963267949)*(x1890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1891=IKsin(j4);
IkReal x1892=IKcos(j4);
IkReal x1893=(cj5*r10);
IkReal x1894=(sj1*sj2);
IkReal x1895=(r01*sj5);
IkReal x1896=(cj5*r00);
IkReal x1897=(cj5*r20);
IkReal x1898=((1.0)*x1892);
IkReal x1899=((1.0)*cj1*cj2);
IkReal x1900=((1.0)*x1891);
IkReal x1901=(sj5*x1891);
evalcond[0]=(((r21*x1901))+(((-1.0)*r22*x1898))+(((-1.0)*x1897*x1900)));
evalcond[1]=(cj0+(((-1.0)*x1893*x1900))+(((-1.0)*r12*x1898))+((r11*x1901)));
evalcond[2]=((((-1.0)*r02*x1898))+(((-1.0)*sj0))+((x1891*x1895))+(((-1.0)*x1896*x1900)));
evalcond[3]=(((cj2*sj1))+((x1892*x1897))+((cj1*sj2))+(((-1.0)*r21*sj5*x1898))+(((-1.0)*r22*x1900)));
evalcond[4]=(((x1892*x1896))+(((-1.0)*x1895*x1898))+((cj0*x1894))+(((-1.0)*cj0*x1899))+(((-1.0)*r02*x1900)));
evalcond[5]=(((x1892*x1893))+(((-1.0)*r12*x1900))+(((-1.0)*sj0*x1899))+((sj0*x1894))+(((-1.0)*r11*sj5*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1902=((1.0)*cj5);
CheckValue<IkReal> x1903 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1903.valid){
continue;
}
CheckValue<IkReal> x1904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1902)))),-1);
if(!x1904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1903.value)+(((1.5707963267949)*(x1904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1905=IKsin(j4);
IkReal x1906=IKcos(j4);
IkReal x1907=(cj5*r10);
IkReal x1908=(sj1*sj2);
IkReal x1909=(r01*sj5);
IkReal x1910=(cj5*r00);
IkReal x1911=(cj5*r20);
IkReal x1912=((1.0)*x1906);
IkReal x1913=((1.0)*cj1*cj2);
IkReal x1914=((1.0)*x1905);
IkReal x1915=(sj5*x1905);
evalcond[0]=((((-1.0)*x1911*x1914))+(((-1.0)*r22*x1912))+((r21*x1915)));
evalcond[1]=(cj0+(((-1.0)*r12*x1912))+(((-1.0)*x1907*x1914))+((r11*x1915)));
evalcond[2]=((((-1.0)*x1910*x1914))+(((-1.0)*sj0))+((x1905*x1909))+(((-1.0)*r02*x1912)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1914))+((cj1*sj2))+((x1906*x1911))+(((-1.0)*r21*sj5*x1912)));
evalcond[4]=((((-1.0)*cj0*x1913))+(((-1.0)*r02*x1914))+((cj0*x1908))+((x1906*x1910))+(((-1.0)*x1909*x1912)));
evalcond[5]=((((-1.0)*r11*sj5*x1912))+(((-1.0)*r12*x1914))+((sj0*x1908))+((x1906*x1907))+(((-1.0)*sj0*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1916=cj5*cj5;
IkReal x1917=r21*r21;
IkReal x1918=(cj2*sj1);
IkReal x1919=(cj1*sj2);
IkReal x1920=(r21*sj5);
IkReal x1921=((1.0)*cj5*r20);
CheckValue<IkReal> x1922=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x1916*(r20*r20)))+x1917+(((-2.0)*cj5*r20*x1920))+(((-1.0)*x1916*x1917)))),-1);
if(!x1922.valid){
continue;
}
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal((((r22*x1919))+((r22*x1918)))),IkReal(((((-1.0)*x1918*x1921))+((x1918*x1920))+(((-1.0)*x1919*x1921))+((x1919*x1920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1922.value)))+(x1923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1924=IKsin(j4);
IkReal x1925=IKcos(j4);
IkReal x1926=(r21*sj5);
IkReal x1927=(cj5*r20);
IkReal x1928=((1.0)*x1925);
IkReal x1929=((1.0)*x1924);
evalcond[0]=((((-1.0)*r22*x1928))+(((-1.0)*x1927*x1929))+((x1924*x1926)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1929))+(((-1.0)*x1926*x1928))+((x1925*x1927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1930=(cj5*sj4);
IkReal x1931=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1930))+(((-1.0)*cj4*r02))+((r01*x1931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1931))+((r10*x1930))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1930))+(((-1.0)*cj4*r02))+((r01*x1931))))+IKsqr(((((-1.0)*r11*x1931))+((r10*x1930))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1930))+(((-1.0)*cj4*r02))+((r01*x1931))), ((((-1.0)*r11*x1931))+((r10*x1930))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1932=IKcos(j0);
IkReal x1933=IKsin(j0);
IkReal x1934=(cj4*cj5);
IkReal x1935=((0.1)*sj5);
IkReal x1936=((0.392)*sj1);
IkReal x1937=(cj5*r11);
IkReal x1938=((1.0)*cj1);
IkReal x1939=(r11*sj5);
IkReal x1940=((1.0)*sj5);
IkReal x1941=((1.0)*sj4);
IkReal x1942=((0.392)*cj1);
IkReal x1943=((1.0)*sj1);
IkReal x1944=(cj5*r01);
IkReal x1945=((0.425)*cj1);
IkReal x1946=((1.0)*cj4);
IkReal x1947=(sj2*x1933);
IkReal x1948=(sj2*x1932);
IkReal x1949=(cj2*x1932);
IkReal x1950=(cj2*x1933);
evalcond[0]=((((-1.0)*cj5*r10*x1941))+((sj4*x1939))+x1932+(((-1.0)*r12*x1946)));
evalcond[1]=((((-1.0)*x1933))+(((-1.0)*r02*x1946))+(((-1.0)*cj5*r00*x1941))+((r01*sj4*sj5)));
evalcond[2]=((((-1.0)*x1943*x1949))+(((-1.0)*x1944))+(((-1.0)*x1938*x1948))+(((-1.0)*r00*x1940)));
evalcond[3]=((((-1.0)*x1943*x1950))+(((-1.0)*x1937))+(((-1.0)*x1938*x1947))+(((-1.0)*r10*x1940)));
evalcond[4]=((((-1.0)*cj4*r01*x1940))+((r00*x1934))+(((-1.0)*r02*x1941))+((sj1*x1948))+(((-1.0)*x1938*x1949)));
evalcond[5]=(((sj1*x1947))+(((-1.0)*r12*x1941))+(((-1.0)*x1938*x1950))+(((-1.0)*x1939*x1946))+((r10*x1934)));
evalcond[6]=((((-0.134)*x1933))+(((-1.0)*px))+((x1942*x1949))+(((-1.0)*x1936*x1948))+((x1932*x1945))+(((-0.1)*x1944))+(((-1.0)*r00*x1935)));
evalcond[7]=((((-0.1)*x1937))+(((-1.0)*py))+(((-1.0)*r10*x1935))+(((0.134)*x1932))+(((-1.0)*x1936*x1947))+((x1942*x1950))+((x1933*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
CheckValue<IkReal> x1952=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x1952.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1951.value)+(((1.5707963267949)*(x1952.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1953=IKcos(j0);
IkReal x1954=IKsin(j0);
IkReal x1955=(r00*sj5);
IkReal x1956=(cj5*r11);
IkReal x1957=(r10*sj5);
IkReal x1958=((1.0)*cj2);
IkReal x1959=(cj5*r01);
IkReal x1960=((0.392)*sj2);
IkReal x1961=((0.425)*cj1);
IkReal x1962=((1.0)*cj1*sj2);
IkReal x1963=((0.392)*cj1*cj2);
IkReal x1964=(sj1*x1953);
IkReal x1965=(sj1*x1954);
evalcond[0]=((((-1.0)*x1958*x1964))+(((-1.0)*x1955))+(((-1.0)*x1959))+(((-1.0)*x1953*x1962)));
evalcond[1]=((((-1.0)*x1958*x1965))+(((-1.0)*x1956))+(((-1.0)*x1957))+(((-1.0)*x1954*x1962)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*x1960*x1964))+(((-0.134)*x1954))+((x1953*x1961))+((x1953*x1963))+(((-0.1)*x1955))+(((-0.1)*x1959)));
evalcond[3]=((((0.134)*x1953))+((x1954*x1961))+((x1954*x1963))+(((-1.0)*py))+(((-1.0)*x1960*x1965))+(((-0.1)*x1956))+(((-0.1)*x1957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1966=((1.0)*cj5);
IkReal x1967=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1966)));
j4eval[0]=x1967;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1966)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1968=((1.0)*cj5);
IkReal x1969=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1968)));
j4eval[0]=x1969;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1968))))));
j4eval[2]=IKsign(x1969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1970=((1.0)*sj0);
IkReal x1971=((1.0)*cj0);
IkReal x1972=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1972;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1970))+(((-1.0)*r01*sj5*x1971)))))+(IKabs(((((-1.0)*r02*x1971))+(((-1.0)*r12*x1970))))));
j4eval[2]=IKsign(x1972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1973=((1.0)*sj0);
IkReal x1974=((1.0)*cj0);
CheckValue<IkReal> x1975 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1974))+(((-1.0)*r12*x1973)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1973))+(((-1.0)*r01*sj5*x1974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1975.valid){
continue;
}
CheckValue<IkReal> x1976=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1975.value)+(((1.5707963267949)*(x1976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1977=IKsin(j4);
IkReal x1978=IKcos(j4);
IkReal x1979=(cj5*r10);
IkReal x1980=(sj1*sj2);
IkReal x1981=(r01*sj5);
IkReal x1982=(cj5*r00);
IkReal x1983=(cj5*r20);
IkReal x1984=((1.0)*x1978);
IkReal x1985=((1.0)*cj1*cj2);
IkReal x1986=((1.0)*x1977);
IkReal x1987=(sj5*x1977);
evalcond[0]=((((-1.0)*x1983*x1986))+((r21*x1987))+(((-1.0)*r22*x1984)));
evalcond[1]=(cj0+(((-1.0)*x1979*x1986))+((r11*x1987))+(((-1.0)*r12*x1984)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1984))+(((-1.0)*x1982*x1986))+((x1977*x1981)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1978*x1983))+(((-1.0)*r21*sj5*x1984))+(((-1.0)*r22*x1986)));
evalcond[4]=((((-1.0)*x1981*x1984))+(((-1.0)*cj0*x1985))+(((-1.0)*r02*x1986))+((x1978*x1982))+((cj0*x1980)));
evalcond[5]=((((-1.0)*r11*sj5*x1984))+((sj0*x1980))+(((-1.0)*r12*x1986))+((x1978*x1979))+(((-1.0)*sj0*x1985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1988=((1.0)*cj5);
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1988))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
CheckValue<IkReal> x1990=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1988)))),-1);
if(!x1990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1989.value)+(((1.5707963267949)*(x1990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1991=IKsin(j4);
IkReal x1992=IKcos(j4);
IkReal x1993=(cj5*r10);
IkReal x1994=(sj1*sj2);
IkReal x1995=(r01*sj5);
IkReal x1996=(cj5*r00);
IkReal x1997=(cj5*r20);
IkReal x1998=((1.0)*x1992);
IkReal x1999=((1.0)*cj1*cj2);
IkReal x2000=((1.0)*x1991);
IkReal x2001=(sj5*x1991);
evalcond[0]=(((r21*x2001))+(((-1.0)*x1997*x2000))+(((-1.0)*r22*x1998)));
evalcond[1]=(((r11*x2001))+cj0+(((-1.0)*r12*x1998))+(((-1.0)*x1993*x2000)));
evalcond[2]=((((-1.0)*sj0))+((x1991*x1995))+(((-1.0)*r02*x1998))+(((-1.0)*x1996*x2000)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2000))+(((-1.0)*r21*sj5*x1998))+((cj1*sj2))+((x1992*x1997)));
evalcond[4]=(((cj0*x1994))+(((-1.0)*cj0*x1999))+(((-1.0)*r02*x2000))+(((-1.0)*x1995*x1998))+((x1992*x1996)));
evalcond[5]=(((sj0*x1994))+(((-1.0)*r12*x2000))+(((-1.0)*sj0*x1999))+((x1992*x1993))+(((-1.0)*r11*sj5*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2002=((1.0)*cj5);
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2002))+(((-1.0)*r00*sj5)))),-1);
if(!x2003.valid){
continue;
}
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2003.value)))+(x2004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2005=IKsin(j4);
IkReal x2006=IKcos(j4);
IkReal x2007=(cj5*r10);
IkReal x2008=(sj1*sj2);
IkReal x2009=(r01*sj5);
IkReal x2010=(cj5*r00);
IkReal x2011=(cj5*r20);
IkReal x2012=((1.0)*x2006);
IkReal x2013=((1.0)*cj1*cj2);
IkReal x2014=((1.0)*x2005);
IkReal x2015=(sj5*x2005);
evalcond[0]=((((-1.0)*x2011*x2014))+((r21*x2015))+(((-1.0)*r22*x2012)));
evalcond[1]=(cj0+(((-1.0)*x2007*x2014))+(((-1.0)*r12*x2012))+((r11*x2015)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2010*x2014))+((x2005*x2009))+(((-1.0)*r02*x2012)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x2012))+((x2006*x2011))+(((-1.0)*r22*x2014)));
evalcond[4]=((((-1.0)*x2009*x2012))+((cj0*x2008))+(((-1.0)*r02*x2014))+((x2006*x2010))+(((-1.0)*cj0*x2013)));
evalcond[5]=((((-1.0)*r11*sj5*x2012))+(((-1.0)*sj0*x2013))+((sj0*x2008))+(((-1.0)*r12*x2014))+((x2006*x2007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2016=cj1*cj1;
IkReal x2017=cj2*cj2;
IkReal x2018=(r10*sj5);
IkReal x2019=(cj1*px);
IkReal x2020=((98000.0)*cj2);
IkReal x2021=(r00*sj5);
IkReal x2022=(cj5*r11);
IkReal x2023=(cj5*r01);
IkReal x2024=((10625.0)*cj1);
IkReal x2025=(sj1*sj2);
IkReal x2026=(cj1*py);
IkReal x2027=((9800.0)*x2025);
IkReal x2028=((9800.0)*cj1*cj2);
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(IKsign(((42905.0)+(((6740.25)*x2016))+(((-83300.0)*cj1*x2025))+(((76832.0)*x2016*x2017))+(((-38416.0)*x2017))+(((-76832.0)*cj1*cj2*x2025))+(((83300.0)*cj2*x2016)))),-1);
if(!x2029.valid){
continue;
}
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal(((((106250.0)*x2026))+((x2020*x2026))+(((-1.0)*x2022*x2027))+((x2018*x2024))+((x2018*x2028))+((x2022*x2028))+((x2022*x2024))+(((-1.0)*x2018*x2027))+(((-33500.0)*px))+(((-98000.0)*py*x2025))+(((-3350.0)*x2021))+(((-3350.0)*x2023)))),IkReal(((((-1.0)*x2021*x2027))+(((-1.0)*x2023*x2027))+((x2019*x2020))+(((3350.0)*x2018))+(((33500.0)*py))+(((3350.0)*x2022))+(((106250.0)*x2019))+((x2023*x2028))+((x2023*x2024))+(((-98000.0)*px*x2025))+((x2021*x2024))+((x2021*x2028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2029.value)))+(x2030.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2031=IKcos(j0);
IkReal x2032=IKsin(j0);
IkReal x2033=((0.1)*sj5);
IkReal x2034=((0.425)*cj1);
IkReal x2035=((0.1)*cj5);
IkReal x2036=((0.392)*cj1*cj2);
IkReal x2037=((0.392)*sj1*sj2);
evalcond[0]=(((x2031*x2034))+((x2031*x2036))+(((-0.134)*x2032))+(((-1.0)*r00*x2033))+(((-1.0)*r01*x2035))+(((-1.0)*px))+(((-1.0)*x2031*x2037)));
evalcond[1]=((((-1.0)*r11*x2035))+((x2032*x2034))+((x2032*x2036))+(((-1.0)*r10*x2033))+(((-1.0)*py))+(((0.134)*x2031))+(((-1.0)*x2032*x2037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2038=((1.0)*cj5);
IkReal x2039=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2038)));
j4eval[0]=x2039;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2038)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2040=((1.0)*cj5);
IkReal x2041=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2040)));
j4eval[0]=x2041;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2040))))));
j4eval[2]=IKsign(x2041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2042=((1.0)*sj0);
IkReal x2043=((1.0)*cj0);
IkReal x2044=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2044;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x2042))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2043)))))+(IKabs(((((-1.0)*r02*x2043))+(((-1.0)*r12*x2042))))));
j4eval[2]=IKsign(x2044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2045=((-1.0)*r20);
IkReal x2047 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2047)==0){
continue;
}
IkReal x2046=pow(x2047,-0.5);
CheckValue<IkReal> x2048 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2045),IKFAST_ATAN2_MAGTHRESH);
if(!x2048.valid){
continue;
}
IkReal gconst0=((-1.0)*(x2048.value));
IkReal gconst1=(r21*x2046);
IkReal gconst2=(x2045*x2046);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2049.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2050=((-1.0)*r20);
IkReal x2051=x2046;
CheckValue<IkReal> x2053 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2050),IKFAST_ATAN2_MAGTHRESH);
if(!x2053.valid){
continue;
}
IkReal x2052=((-1.0)*(x2053.value));
sj5=gconst1;
cj5=gconst2;
j5=x2052;
IkReal gconst0=x2052;
IkReal gconst1=(r21*x2051);
IkReal gconst2=(x2050*x2051);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2054=((-1.0)*r20);
IkReal x2055=x2046;
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2054),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
IkReal x2056=((-1.0)*(x2057.value));
sj5=gconst1;
cj5=gconst2;
j5=x2056;
IkReal gconst0=x2056;
IkReal gconst1=(r21*x2055);
IkReal gconst2=(x2054*x2055);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2058=((-1.0)*r20);
IkReal x2059=x2046;
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2058),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
IkReal x2060=((-1.0)*(x2061.value));
sj5=gconst1;
cj5=gconst2;
j5=x2060;
IkReal gconst0=x2060;
IkReal gconst1=(r21*x2059);
IkReal gconst2=(x2058*x2059);
IkReal x2062=r22*r22;
CheckValue<IkReal> x2066=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2062))),-1);
if(!x2066.valid){
continue;
}
IkReal x2063=x2066.value;
IkReal x2064=(sj3*x2063);
IkReal x2065=(((sj3*x2062))+((x2064*(r20*r20*r20*r20)))+(((2.0)*x2064*(r20*r20)*(r21*r21)))+((x2064*(r21*r21*r21*r21))));
j4eval[0]=x2065;
j4eval[1]=IKsign(x2065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2067=gconst1*gconst1;
IkReal x2068=r21*r21;
IkReal x2069=gconst2*gconst2;
IkReal x2070=r20*r20;
IkReal x2071=(gconst2*r20);
IkReal x2072=(cj1*cj2);
IkReal x2073=(sj1*sj2);
IkReal x2074=(gconst1*r21);
IkReal x2075=(cj3*gconst2);
IkReal x2076=(cj3*r20);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2072))+((r22*x2073))+((r21*r22*x2075))+((gconst1*r22*x2076)))),IkReal(((((-1.0)*gconst1*x2070*x2075))+((gconst1*x2068*x2075))+(((-1.0)*x2071*x2073))+((x2071*x2072))+(((-1.0)*x2072*x2074))+((x2073*x2074))+((r21*x2067*x2076))+(((-1.0)*r21*x2069*x2076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x2071*x2074))+((sj3*x2069*x2070))+((sj3*x2067*x2068)))),-1);
if(!x2078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2077.value)+(((1.5707963267949)*(x2078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2079=IKsin(j4);
IkReal x2080=IKcos(j4);
IkReal x2081=(cj3*gconst1);
IkReal x2082=(gconst1*r01);
IkReal x2083=(gconst1*r11);
IkReal x2084=(sj1*sj2);
IkReal x2085=(cj3*gconst2);
IkReal x2086=(gconst1*sj3);
IkReal x2087=(gconst2*sj3);
IkReal x2088=((1.0)*sj0);
IkReal x2089=(cj1*sj2);
IkReal x2090=((1.0)*x2080);
IkReal x2091=((1.0)*x2079);
IkReal x2092=((1.0)*cj1*cj2);
IkReal x2093=(cj3*x2079);
IkReal x2094=((1.0)*cj2*sj1);
IkReal x2095=(x2080*x2087);
evalcond[0]=((((-1.0)*gconst2*r20*x2091))+((gconst1*r21*x2079))+(((-1.0)*r22*x2090)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x2091))+(((-1.0)*r12*x2090))+((x2079*x2083)));
evalcond[2]=((((-1.0)*x2088))+(((-1.0)*gconst2*r00*x2091))+(((-1.0)*r02*x2090))+((x2079*x2082)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x2085*x2090))+x2089+((r20*x2086))+((r22*x2093))+((r21*x2080*x2081))+((r21*x2087)));
evalcond[4]=((((-1.0)*x2092))+(((-1.0)*r21*x2086*x2090))+((r20*x2095))+(((-1.0)*r22*sj3*x2091))+x2084+((r20*x2081))+((r21*x2085)));
evalcond[5]=(((r01*x2080*x2081))+(((-1.0)*r00*x2085*x2090))+((r01*x2087))+((cj0*x2084))+((r02*x2093))+((r00*x2086))+(((-1.0)*cj0*x2092)));
evalcond[6]=(((r11*x2080*x2081))+((sj0*x2084))+(((-1.0)*cj1*cj2*x2088))+((r10*x2086))+((r12*x2093))+(((-1.0)*r10*x2085*x2090))+((r11*x2087)));
evalcond[7]=((((-1.0)*r02*sj3*x2091))+((r00*x2095))+(((-1.0)*cj0*x2089))+((r01*x2085))+(((-1.0)*sj3*x2082*x2090))+((r00*x2081))+(((-1.0)*cj0*x2094)));
evalcond[8]=((((-1.0)*x2088*x2089))+(((-1.0)*r12*sj3*x2091))+((r10*x2095))+(((-1.0)*cj2*sj1*x2088))+((r10*x2081))+(((-1.0)*sj3*x2083*x2090))+((r11*x2085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2096=((1.0)*gconst2);
CheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2096))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2097.valid){
continue;
}
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x2096)))),-1);
if(!x2098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2097.value)+(((1.5707963267949)*(x2098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2099=IKsin(j4);
IkReal x2100=IKcos(j4);
IkReal x2101=(cj3*gconst1);
IkReal x2102=(gconst1*r01);
IkReal x2103=(gconst1*r11);
IkReal x2104=(sj1*sj2);
IkReal x2105=(cj3*gconst2);
IkReal x2106=(gconst1*sj3);
IkReal x2107=(gconst2*sj3);
IkReal x2108=((1.0)*sj0);
IkReal x2109=(cj1*sj2);
IkReal x2110=((1.0)*x2100);
IkReal x2111=((1.0)*x2099);
IkReal x2112=((1.0)*cj1*cj2);
IkReal x2113=(cj3*x2099);
IkReal x2114=((1.0)*cj2*sj1);
IkReal x2115=(x2100*x2107);
evalcond[0]=((((-1.0)*gconst2*r20*x2111))+((gconst1*r21*x2099))+(((-1.0)*r22*x2110)));
evalcond[1]=(((x2099*x2103))+(((-1.0)*gconst2*r10*x2111))+cj0+(((-1.0)*r12*x2110)));
evalcond[2]=(((x2099*x2102))+(((-1.0)*x2108))+(((-1.0)*gconst2*r00*x2111))+(((-1.0)*r02*x2110)));
evalcond[3]=(((r20*x2106))+((cj2*sj1))+((r21*x2107))+x2109+((r21*x2100*x2101))+(((-1.0)*r20*x2105*x2110))+((r22*x2113)));
evalcond[4]=(((r20*x2101))+((r21*x2105))+x2104+((r20*x2115))+(((-1.0)*x2112))+(((-1.0)*r21*x2106*x2110))+(((-1.0)*r22*sj3*x2111)));
evalcond[5]=(((cj0*x2104))+(((-1.0)*cj0*x2112))+((r00*x2106))+((r01*x2107))+((r02*x2113))+(((-1.0)*r00*x2105*x2110))+((r01*x2100*x2101)));
evalcond[6]=(((r12*x2113))+(((-1.0)*r10*x2105*x2110))+(((-1.0)*cj1*cj2*x2108))+((r11*x2107))+((r11*x2100*x2101))+((r10*x2106))+((sj0*x2104)));
evalcond[7]=((((-1.0)*r02*sj3*x2111))+((r00*x2115))+(((-1.0)*cj0*x2109))+(((-1.0)*cj0*x2114))+(((-1.0)*sj3*x2102*x2110))+((r00*x2101))+((r01*x2105)));
evalcond[8]=(((r11*x2105))+(((-1.0)*sj3*x2103*x2110))+((r10*x2101))+(((-1.0)*r12*sj3*x2111))+((r10*x2115))+(((-1.0)*x2108*x2109))+(((-1.0)*cj2*sj1*x2108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2116=((1.0)*gconst2);
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x2116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2116))+(((-1.0)*gconst1*r00)))),-1);
if(!x2118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2117.value)+(((1.5707963267949)*(x2118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2119=IKsin(j4);
IkReal x2120=IKcos(j4);
IkReal x2121=(cj3*gconst1);
IkReal x2122=(gconst1*r01);
IkReal x2123=(gconst1*r11);
IkReal x2124=(sj1*sj2);
IkReal x2125=(cj3*gconst2);
IkReal x2126=(gconst1*sj3);
IkReal x2127=(gconst2*sj3);
IkReal x2128=((1.0)*sj0);
IkReal x2129=(cj1*sj2);
IkReal x2130=((1.0)*x2120);
IkReal x2131=((1.0)*x2119);
IkReal x2132=((1.0)*cj1*cj2);
IkReal x2133=(cj3*x2119);
IkReal x2134=((1.0)*cj2*sj1);
IkReal x2135=(x2120*x2127);
evalcond[0]=((((-1.0)*r22*x2130))+((gconst1*r21*x2119))+(((-1.0)*gconst2*r20*x2131)));
evalcond[1]=(cj0+(((-1.0)*r12*x2130))+((x2119*x2123))+(((-1.0)*gconst2*r10*x2131)));
evalcond[2]=((((-1.0)*x2128))+((x2119*x2122))+(((-1.0)*gconst2*r00*x2131))+(((-1.0)*r02*x2130)));
evalcond[3]=(((cj2*sj1))+((r20*x2126))+x2129+((r21*x2127))+((r22*x2133))+((r21*x2120*x2121))+(((-1.0)*r20*x2125*x2130)));
evalcond[4]=((((-1.0)*x2132))+((r20*x2121))+x2124+(((-1.0)*r21*x2126*x2130))+((r21*x2125))+(((-1.0)*r22*sj3*x2131))+((r20*x2135)));
evalcond[5]=(((r02*x2133))+(((-1.0)*r00*x2125*x2130))+((r01*x2120*x2121))+(((-1.0)*cj0*x2132))+((r01*x2127))+((r00*x2126))+((cj0*x2124)));
evalcond[6]=(((r11*x2120*x2121))+((r12*x2133))+(((-1.0)*cj1*cj2*x2128))+((sj0*x2124))+((r10*x2126))+((r11*x2127))+(((-1.0)*r10*x2125*x2130)));
evalcond[7]=((((-1.0)*sj3*x2122*x2130))+(((-1.0)*cj0*x2129))+((r00*x2135))+(((-1.0)*cj0*x2134))+((r01*x2125))+((r00*x2121))+(((-1.0)*r02*sj3*x2131)));
evalcond[8]=((((-1.0)*sj3*x2123*x2130))+((r10*x2121))+((r11*x2125))+((r10*x2135))+(((-1.0)*x2128*x2129))+(((-1.0)*cj2*sj1*x2128))+(((-1.0)*r12*sj3*x2131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2136=((-1.0)*r21);
IkReal x2138 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2138)==0){
continue;
}
IkReal x2137=pow(x2138,-0.5);
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(x2136),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2139.value))));
IkReal gconst4=(x2136*x2137);
IkReal gconst5=((1.0)*r20*x2137);
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2140.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2141=((-1.0)*r21);
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal(x2141),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
IkReal x2142=((1.0)*(x2144.value));
IkReal x2143=x2137;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2142)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2142)));
IkReal gconst4=(x2141*x2143);
IkReal gconst5=((1.0)*r20*x2143);
IkReal x2145=r22*r22;
IkReal x2146=((1.0)*x2145);
CheckValue<IkReal> x2150=IKPowWithIntegerCheck(((-1.0)+x2145),-1);
if(!x2150.valid){
continue;
}
IkReal x2147=x2150.value;
if((((1.0)+(((-1.0)*x2146)))) < -0.00001)
continue;
IkReal x2148=IKsqrt(((1.0)+(((-1.0)*x2146))));
IkReal x2149=(cj0*x2147*x2148);
j4eval[0]=((IKabs((x2149+(((-1.0)*x2146*x2149)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2151=((-1.0)*r21);
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(x2151),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
IkReal x2152=((1.0)*(x2154.value));
IkReal x2153=x2137;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2152)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2152)));
IkReal gconst4=(x2151*x2153);
IkReal gconst5=((1.0)*r20*x2153);
IkReal x2155=r22*r22;
IkReal x2156=((1.0)*x2155);
CheckValue<IkReal> x2160=IKPowWithIntegerCheck(((-1.0)+x2155),-1);
if(!x2160.valid){
continue;
}
IkReal x2157=x2160.value;
if((((1.0)+(((-1.0)*x2156)))) < -0.00001)
continue;
IkReal x2158=IKsqrt(((1.0)+(((-1.0)*x2156))));
IkReal x2159=(sj0*x2157*x2158);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2159+(((-1.0)*x2156*x2159))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2161=((-1.0)*r21);
CheckValue<IkReal> x2164 = IKatan2WithCheck(IkReal(x2161),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2164.valid){
continue;
}
IkReal x2162=((1.0)*(x2164.value));
IkReal x2163=x2137;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2162)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2162)));
IkReal gconst4=(x2161*x2163);
IkReal gconst5=((1.0)*r20*x2163);
IkReal x2165=r22*r22;
IkReal x2166=(r12*sj0);
IkReal x2167=(cj0*r02);
CheckValue<IkReal> x2171=IKPowWithIntegerCheck(((-1.0)+x2165),-1);
if(!x2171.valid){
continue;
}
IkReal x2168=x2171.value;
if((((1.0)+(((-1.0)*x2165)))) < -0.00001)
continue;
IkReal x2169=IKsqrt(((1.0)+(((-1.0)*x2165))));
IkReal x2170=(r22*x2168*x2169);
j4eval[0]=0;
j4eval[1]=((IKabs((((x2166*x2170))+((x2167*x2170)))))+(IKabs(((((-1.0)*x2167))+(((-1.0)*x2166))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2172=((1.0)*sj0);
IkReal x2173=((1.0)*gconst4);
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2173))+(((-1.0)*gconst5*r21)))),-1);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2172)))),IkReal(((((-1.0)*gconst4*r11*x2172))+((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x2173))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2174.value)))+(x2175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=(gconst5*sj3);
IkReal x2179=(cj3*gconst5);
IkReal x2180=(gconst4*r11);
IkReal x2181=(sj1*sj2);
IkReal x2182=(cj2*sj1);
IkReal x2183=((1.0)*sj0);
IkReal x2184=(gconst4*r01);
IkReal x2185=(gconst4*r21);
IkReal x2186=((1.0)*cj0);
IkReal x2187=(cj1*sj2);
IkReal x2188=(gconst4*sj3);
IkReal x2189=(cj3*gconst4);
IkReal x2190=((1.0)*x2177);
IkReal x2191=((1.0)*cj1*cj2);
IkReal x2192=(cj3*x2176);
IkReal x2193=(cj3*x2177);
IkReal x2194=((1.0)*gconst5*x2176);
IkReal x2195=((1.0)*sj3*x2176);
evalcond[0]=((((-1.0)*r20*x2194))+((x2176*x2185))+(((-1.0)*r22*x2190)));
evalcond[1]=(cj0+(((-1.0)*r10*x2194))+((x2176*x2180))+(((-1.0)*r12*x2190)));
evalcond[2]=(((x2176*x2184))+(((-1.0)*r02*x2190))+(((-1.0)*x2183))+(((-1.0)*r00*x2194)));
evalcond[3]=(((r22*x2192))+((r21*x2178))+x2182+x2187+((r20*x2188))+(((-1.0)*r20*x2179*x2190))+((x2185*x2193)));
evalcond[4]=(((r21*x2179))+x2181+((r20*x2189))+(((-1.0)*r22*x2195))+(((-1.0)*x2191))+(((-1.0)*sj3*x2185*x2190))+((r20*x2177*x2178)));
evalcond[5]=(((r01*x2178))+(((-1.0)*cj1*cj2*x2186))+((cj0*x2181))+((r02*x2192))+((x2184*x2193))+(((-1.0)*r00*x2179*x2190))+((r00*x2188)));
evalcond[6]=(((r11*x2178))+(((-1.0)*r10*x2179*x2190))+((x2180*x2193))+((sj0*x2181))+(((-1.0)*cj1*cj2*x2183))+((r12*x2192))+((r10*x2188)));
evalcond[7]=(((r01*x2179))+(((-1.0)*x2186*x2187))+(((-1.0)*r02*x2195))+((r00*x2177*x2178))+(((-1.0)*x2182*x2186))+(((-1.0)*sj3*x2184*x2190))+((r00*x2189)));
evalcond[8]=(((r11*x2179))+(((-1.0)*sj3*x2180*x2190))+((r10*x2177*x2178))+(((-1.0)*x2183*x2187))+(((-1.0)*x2182*x2183))+(((-1.0)*r12*x2195))+((r10*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2196=((1.0)*gconst5);
CheckValue<IkReal> x2197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2196))+(((-1.0)*gconst4*r10)))),-1);
if(!x2197.valid){
continue;
}
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2196))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2197.value)))+(x2198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2199=IKsin(j4);
IkReal x2200=IKcos(j4);
IkReal x2201=(gconst5*sj3);
IkReal x2202=(cj3*gconst5);
IkReal x2203=(gconst4*r11);
IkReal x2204=(sj1*sj2);
IkReal x2205=(cj2*sj1);
IkReal x2206=((1.0)*sj0);
IkReal x2207=(gconst4*r01);
IkReal x2208=(gconst4*r21);
IkReal x2209=((1.0)*cj0);
IkReal x2210=(cj1*sj2);
IkReal x2211=(gconst4*sj3);
IkReal x2212=(cj3*gconst4);
IkReal x2213=((1.0)*x2200);
IkReal x2214=((1.0)*cj1*cj2);
IkReal x2215=(cj3*x2199);
IkReal x2216=(cj3*x2200);
IkReal x2217=((1.0)*gconst5*x2199);
IkReal x2218=((1.0)*sj3*x2199);
evalcond[0]=((((-1.0)*r22*x2213))+(((-1.0)*r20*x2217))+((x2199*x2208)));
evalcond[1]=(cj0+(((-1.0)*r10*x2217))+(((-1.0)*r12*x2213))+((x2199*x2203)));
evalcond[2]=((((-1.0)*x2206))+((x2199*x2207))+(((-1.0)*r02*x2213))+(((-1.0)*r00*x2217)));
evalcond[3]=(((r20*x2211))+x2205+x2210+((r21*x2201))+(((-1.0)*r20*x2202*x2213))+((r22*x2215))+((x2208*x2216)));
evalcond[4]=((((-1.0)*sj3*x2208*x2213))+((r20*x2200*x2201))+((r20*x2212))+x2204+(((-1.0)*x2214))+(((-1.0)*r22*x2218))+((r21*x2202)));
evalcond[5]=(((r01*x2201))+((r00*x2211))+(((-1.0)*cj1*cj2*x2209))+((cj0*x2204))+((x2207*x2216))+(((-1.0)*r00*x2202*x2213))+((r02*x2215)));
evalcond[6]=(((r12*x2215))+(((-1.0)*cj1*cj2*x2206))+((x2203*x2216))+((r11*x2201))+((r10*x2211))+((sj0*x2204))+(((-1.0)*r10*x2202*x2213)));
evalcond[7]=(((r01*x2202))+(((-1.0)*x2205*x2209))+((r00*x2212))+(((-1.0)*sj3*x2207*x2213))+((r00*x2200*x2201))+(((-1.0)*x2209*x2210))+(((-1.0)*r02*x2218)));
evalcond[8]=((((-1.0)*x2205*x2206))+((r11*x2202))+(((-1.0)*r12*x2218))+(((-1.0)*sj3*x2203*x2213))+(((-1.0)*x2206*x2210))+((r10*x2212))+((r10*x2200*x2201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2219=((1.0)*gconst5);
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x2219)))),-1);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2219))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2220.value)))+(x2221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2222=IKsin(j4);
IkReal x2223=IKcos(j4);
IkReal x2224=(gconst5*sj3);
IkReal x2225=(cj3*gconst5);
IkReal x2226=(gconst4*r11);
IkReal x2227=(sj1*sj2);
IkReal x2228=(cj2*sj1);
IkReal x2229=((1.0)*sj0);
IkReal x2230=(gconst4*r01);
IkReal x2231=(gconst4*r21);
IkReal x2232=((1.0)*cj0);
IkReal x2233=(cj1*sj2);
IkReal x2234=(gconst4*sj3);
IkReal x2235=(cj3*gconst4);
IkReal x2236=((1.0)*x2223);
IkReal x2237=((1.0)*cj1*cj2);
IkReal x2238=(cj3*x2222);
IkReal x2239=(cj3*x2223);
IkReal x2240=((1.0)*gconst5*x2222);
IkReal x2241=((1.0)*sj3*x2222);
evalcond[0]=(((x2222*x2231))+(((-1.0)*r22*x2236))+(((-1.0)*r20*x2240)));
evalcond[1]=(cj0+(((-1.0)*r10*x2240))+((x2222*x2226))+(((-1.0)*r12*x2236)));
evalcond[2]=((((-1.0)*r02*x2236))+((x2222*x2230))+(((-1.0)*r00*x2240))+(((-1.0)*x2229)));
evalcond[3]=(x2228+x2233+((r22*x2238))+((r21*x2224))+((r20*x2234))+(((-1.0)*r20*x2225*x2236))+((x2231*x2239)));
evalcond[4]=(x2227+(((-1.0)*r22*x2241))+(((-1.0)*sj3*x2231*x2236))+((r21*x2225))+((r20*x2235))+(((-1.0)*x2237))+((r20*x2223*x2224)));
evalcond[5]=((((-1.0)*cj1*cj2*x2232))+(((-1.0)*r00*x2225*x2236))+((r02*x2238))+((cj0*x2227))+((x2230*x2239))+((r00*x2234))+((r01*x2224)));
evalcond[6]=((((-1.0)*cj1*cj2*x2229))+((x2226*x2239))+((sj0*x2227))+((r10*x2234))+((r11*x2224))+(((-1.0)*r10*x2225*x2236))+((r12*x2238)));
evalcond[7]=(((r00*x2223*x2224))+(((-1.0)*r02*x2241))+(((-1.0)*x2232*x2233))+(((-1.0)*x2228*x2232))+(((-1.0)*sj3*x2230*x2236))+((r00*x2235))+((r01*x2225)));
evalcond[8]=(((r10*x2223*x2224))+((r10*x2235))+(((-1.0)*x2228*x2229))+(((-1.0)*x2229*x2233))+(((-1.0)*r12*x2241))+((r11*x2225))+(((-1.0)*sj3*x2226*x2236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2242=((-1.0)*r10);
IkReal x2244 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2244)==0){
continue;
}
IkReal x2243=pow(x2244,-0.5);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2242),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2245.value));
IkReal gconst7=(r11*x2243);
IkReal gconst8=(x2242*x2243);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2246.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2247=((-1.0)*r10);
IkReal x2248=x2243;
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2247),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
IkReal x2249=((-1.0)*(x2250.value));
sj5=gconst7;
cj5=gconst8;
j5=x2249;
IkReal gconst6=x2249;
IkReal gconst7=(r11*x2248);
IkReal gconst8=(x2247*x2248);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2251=((1.0)*sj0);
IkReal x2252=((1.0)*gconst7);
CheckValue<IkReal> x2253 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2251))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x2251))+(((-1.0)*cj0*r01*x2252))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2253.valid){
continue;
}
CheckValue<IkReal> x2254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x2252)))),-1);
if(!x2254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2253.value)+(((1.5707963267949)*(x2254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2255=IKsin(j4);
IkReal x2256=IKcos(j4);
IkReal x2257=(gconst7*sj3);
IkReal x2258=(cj3*gconst8);
IkReal x2259=(cj3*gconst7);
IkReal x2260=(sj1*sj2);
IkReal x2261=(cj2*sj1);
IkReal x2262=((1.0)*sj0);
IkReal x2263=((1.0)*cj0);
IkReal x2264=(gconst8*sj3);
IkReal x2265=(cj1*sj2);
IkReal x2266=((1.0)*x2256);
IkReal x2267=((1.0)*x2255);
IkReal x2268=((1.0)*cj1*cj2);
IkReal x2269=(cj3*x2255);
IkReal x2270=(gconst7*x2255);
IkReal x2271=(x2256*x2264);
evalcond[0]=(((r21*x2270))+(((-1.0)*gconst8*r20*x2267))+(((-1.0)*r22*x2266)));
evalcond[1]=(cj0+((r11*x2270))+(((-1.0)*gconst8*r10*x2267))+(((-1.0)*r12*x2266)));
evalcond[2]=(((r01*x2270))+(((-1.0)*gconst8*r00*x2267))+(((-1.0)*r02*x2266))+(((-1.0)*x2262)));
evalcond[3]=(x2261+x2265+((r21*x2264))+((r22*x2269))+((r20*x2257))+((r21*x2256*x2259))+(((-1.0)*r20*x2258*x2266)));
evalcond[4]=(x2260+((r20*x2259))+(((-1.0)*r21*x2257*x2266))+((r20*x2271))+(((-1.0)*r22*sj3*x2267))+(((-1.0)*x2268))+((r21*x2258)));
evalcond[5]=(((r01*x2264))+(((-1.0)*cj1*cj2*x2263))+((r01*x2256*x2259))+((cj0*x2260))+((r02*x2269))+((r00*x2257))+(((-1.0)*r00*x2258*x2266)));
evalcond[6]=(((r11*x2256*x2259))+(((-1.0)*cj1*cj2*x2262))+((r10*x2257))+((sj0*x2260))+(((-1.0)*r10*x2258*x2266))+((r11*x2264))+((r12*x2269)));
evalcond[7]=((((-1.0)*r02*sj3*x2267))+((r00*x2271))+(((-1.0)*x2263*x2265))+(((-1.0)*x2261*x2263))+((r00*x2259))+((r01*x2258))+(((-1.0)*r01*x2257*x2266)));
evalcond[8]=(((r10*x2259))+(((-1.0)*r12*sj3*x2267))+(((-1.0)*r11*x2257*x2266))+((r10*x2271))+(((-1.0)*x2261*x2262))+(((-1.0)*x2262*x2265))+((r11*x2258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2272=((1.0)*gconst8);
CheckValue<IkReal> x2273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2272))+(((-1.0)*gconst7*r00)))),-1);
if(!x2273.valid){
continue;
}
CheckValue<IkReal> x2274 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x2272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2273.value)))+(x2274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2275=IKsin(j4);
IkReal x2276=IKcos(j4);
IkReal x2277=(gconst7*sj3);
IkReal x2278=(cj3*gconst8);
IkReal x2279=(cj3*gconst7);
IkReal x2280=(sj1*sj2);
IkReal x2281=(cj2*sj1);
IkReal x2282=((1.0)*sj0);
IkReal x2283=((1.0)*cj0);
IkReal x2284=(gconst8*sj3);
IkReal x2285=(cj1*sj2);
IkReal x2286=((1.0)*x2276);
IkReal x2287=((1.0)*x2275);
IkReal x2288=((1.0)*cj1*cj2);
IkReal x2289=(cj3*x2275);
IkReal x2290=(gconst7*x2275);
IkReal x2291=(x2276*x2284);
evalcond[0]=(((r21*x2290))+(((-1.0)*gconst8*r20*x2287))+(((-1.0)*r22*x2286)));
evalcond[1]=((((-1.0)*gconst8*r10*x2287))+cj0+(((-1.0)*r12*x2286))+((r11*x2290)));
evalcond[2]=((((-1.0)*r02*x2286))+(((-1.0)*gconst8*r00*x2287))+(((-1.0)*x2282))+((r01*x2290)));
evalcond[3]=(x2281+x2285+((r21*x2284))+((r21*x2276*x2279))+((r20*x2277))+(((-1.0)*r20*x2278*x2286))+((r22*x2289)));
evalcond[4]=((((-1.0)*r22*sj3*x2287))+((r21*x2278))+x2280+(((-1.0)*x2288))+((r20*x2279))+(((-1.0)*r21*x2277*x2286))+((r20*x2291)));
evalcond[5]=(((cj0*x2280))+((r00*x2277))+(((-1.0)*r00*x2278*x2286))+((r01*x2284))+(((-1.0)*cj1*cj2*x2283))+((r01*x2276*x2279))+((r02*x2289)));
evalcond[6]=(((r11*x2284))+((r12*x2289))+((sj0*x2280))+((r10*x2277))+(((-1.0)*cj1*cj2*x2282))+(((-1.0)*r10*x2278*x2286))+((r11*x2276*x2279)));
evalcond[7]=(((r01*x2278))+((r00*x2279))+(((-1.0)*x2281*x2283))+((r00*x2291))+(((-1.0)*r02*sj3*x2287))+(((-1.0)*r01*x2277*x2286))+(((-1.0)*x2283*x2285)));
evalcond[8]=((((-1.0)*x2282*x2285))+(((-1.0)*r12*sj3*x2287))+((r10*x2291))+(((-1.0)*x2281*x2282))+((r10*x2279))+((r11*x2278))+(((-1.0)*r11*x2277*x2286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2292=((-1.0)*r11);
IkReal x2294 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2294)==0){
continue;
}
IkReal x2293=pow(x2294,-0.5);
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal(x2292),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2295.value))));
IkReal gconst10=(x2292*x2293);
IkReal gconst11=((1.0)*r10*x2293);
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2296.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2297=((-1.0)*r11);
CheckValue<IkReal> x2300 = IKatan2WithCheck(IkReal(x2297),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2300.valid){
continue;
}
IkReal x2298=((1.0)*(x2300.value));
IkReal x2299=x2293;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2298)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2298)));
IkReal gconst10=(x2297*x2299);
IkReal gconst11=((1.0)*r10*x2299);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2301=((-1.0)*r11);
CheckValue<IkReal> x2304 = IKatan2WithCheck(IkReal(x2301),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2304.valid){
continue;
}
IkReal x2302=((1.0)*(x2304.value));
IkReal x2303=x2293;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2302)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2302)));
IkReal gconst10=(x2301*x2303);
IkReal gconst11=((1.0)*r10*x2303);
IkReal x2305=r12*r12;
IkReal x2306=((1.0)*sj0);
IkReal x2307=(cj0*r02);
IkReal x2308=x2293;
j4eval[0]=((IKabs(((((-1.0)*x2307))+(((-1.0)*r12*x2306)))))+(IKabs(((((-1.0)*x2306*x2308))+((r12*x2307*x2308))+((sj0*x2305*x2308))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2309=((-1.0)*r11);
CheckValue<IkReal> x2312 = IKatan2WithCheck(IkReal(x2309),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2312.valid){
continue;
}
IkReal x2310=((1.0)*(x2312.value));
IkReal x2311=x2293;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2310)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2310)));
IkReal gconst10=(x2309*x2311);
IkReal gconst11=((1.0)*r10*x2311);
IkReal x2313=((1.0)*cj3);
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2318.valid){
continue;
}
IkReal x2314=x2318.value;
IkReal x2315=(cj3*x2314);
IkReal x2316=(x2313*x2314);
IkReal x2317=((((-2.0)*r10*r11*r20*r21*x2315))+(((-1.0)*x2316*(r10*r10)*(r20*r20)))+(((-1.0)*x2313*(r22*r22)))+(((-1.0)*x2316*(r11*r11)*(r21*r21))));
j4eval[0]=x2317;
j4eval[1]=IKsign(x2317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2319=gconst10*gconst10;
IkReal x2320=r21*r21;
IkReal x2321=gconst11*gconst11;
IkReal x2322=r20*r20;
IkReal x2323=((1.0)*cj3);
IkReal x2324=(r20*sj3);
IkReal x2325=(gconst10*gconst11);
IkReal x2326=(cj2*sj1);
IkReal x2327=(gconst10*r21);
IkReal x2328=(cj1*sj2);
IkReal x2329=((1.0)*gconst11*r20);
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2319*x2320*x2323))+(((-1.0)*x2321*x2322*x2323))+(((-1.0)*x2323*(r22*r22)))+(((2.0)*cj3*r20*r21*x2325)))),-1);
if(!x2330.valid){
continue;
}
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal((((r22*x2326))+((r22*x2328))+((gconst11*r21*r22*sj3))+((gconst10*r22*x2324)))),IkReal(((((-1.0)*x2328*x2329))+((r21*x2319*x2324))+((x2327*x2328))+(((-1.0)*sj3*x2322*x2325))+((sj3*x2320*x2325))+(((-1.0)*x2326*x2329))+((x2326*x2327))+(((-1.0)*r21*x2321*x2324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2330.value)))+(x2331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2332=IKsin(j4);
IkReal x2333=IKcos(j4);
IkReal x2334=(cj3*r10);
IkReal x2335=(gconst11*r20);
IkReal x2336=(gconst11*sj3);
IkReal x2337=(sj1*sj2);
IkReal x2338=(gconst11*r00);
IkReal x2339=(cj3*r11);
IkReal x2340=(gconst10*sj3);
IkReal x2341=(cj2*sj1);
IkReal x2342=(cj3*r01);
IkReal x2343=((1.0)*sj0);
IkReal x2344=(cj1*sj2);
IkReal x2345=(cj3*r21);
IkReal x2346=(cj3*gconst10);
IkReal x2347=((1.0)*cj0);
IkReal x2348=((1.0)*x2333);
IkReal x2349=((1.0)*x2332);
IkReal x2350=((1.0)*cj1*cj2);
IkReal x2351=(cj3*x2332);
IkReal x2352=(gconst10*x2332);
IkReal x2353=(gconst10*x2333);
evalcond[0]=((((-1.0)*x2335*x2349))+(((-1.0)*r22*x2348))+((r21*x2352)));
evalcond[1]=((((-1.0)*gconst11*r10*x2349))+cj0+((r11*x2352))+(((-1.0)*r12*x2348)));
evalcond[2]=(((r01*x2352))+(((-1.0)*r02*x2348))+(((-1.0)*x2343))+(((-1.0)*x2338*x2349)));
evalcond[3]=(((r21*x2336))+x2344+x2341+((r22*x2351))+((x2345*x2353))+((r20*x2340))+(((-1.0)*cj3*x2335*x2348)));
evalcond[4]=(x2337+((sj3*x2333*x2335))+((gconst11*x2345))+((r20*x2346))+(((-1.0)*r22*sj3*x2349))+(((-1.0)*r21*x2340*x2348))+(((-1.0)*x2350)));
evalcond[5]=(((r00*x2340))+(((-1.0)*cj3*x2338*x2348))+((r01*x2336))+((x2342*x2353))+((cj0*x2337))+((r02*x2351))+(((-1.0)*cj1*cj2*x2347)));
evalcond[6]=(((r10*x2340))+((r12*x2351))+((sj0*x2337))+((r11*x2336))+((x2339*x2353))+(((-1.0)*cj1*cj2*x2343))+(((-1.0)*gconst11*x2334*x2348)));
evalcond[7]=((((-1.0)*r02*sj3*x2349))+(((-1.0)*x2344*x2347))+((r00*x2346))+(((-1.0)*x2341*x2347))+((gconst11*x2342))+((r00*x2333*x2336))+(((-1.0)*r01*x2340*x2348)));
evalcond[8]=((((-1.0)*r11*x2340*x2348))+(((-1.0)*x2341*x2343))+((r10*x2333*x2336))+((gconst10*x2334))+((gconst11*x2339))+(((-1.0)*x2343*x2344))+(((-1.0)*r12*sj3*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2354=((1.0)*sj0);
IkReal x2355=((1.0)*gconst10);
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2354)))),IkReal(((((-1.0)*gconst10*r11*x2354))+(((-1.0)*cj0*r01*x2355))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2355))+(((-1.0)*gconst11*r21)))),-1);
if(!x2357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2356.value)+(((1.5707963267949)*(x2357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2358=IKsin(j4);
IkReal x2359=IKcos(j4);
IkReal x2360=(cj3*r10);
IkReal x2361=(gconst11*r20);
IkReal x2362=(gconst11*sj3);
IkReal x2363=(sj1*sj2);
IkReal x2364=(gconst11*r00);
IkReal x2365=(cj3*r11);
IkReal x2366=(gconst10*sj3);
IkReal x2367=(cj2*sj1);
IkReal x2368=(cj3*r01);
IkReal x2369=((1.0)*sj0);
IkReal x2370=(cj1*sj2);
IkReal x2371=(cj3*r21);
IkReal x2372=(cj3*gconst10);
IkReal x2373=((1.0)*cj0);
IkReal x2374=((1.0)*x2359);
IkReal x2375=((1.0)*x2358);
IkReal x2376=((1.0)*cj1*cj2);
IkReal x2377=(cj3*x2358);
IkReal x2378=(gconst10*x2358);
IkReal x2379=(gconst10*x2359);
evalcond[0]=((((-1.0)*x2361*x2375))+(((-1.0)*r22*x2374))+((r21*x2378)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x2375))+(((-1.0)*r12*x2374))+((r11*x2378)));
evalcond[2]=((((-1.0)*r02*x2374))+(((-1.0)*x2369))+(((-1.0)*x2364*x2375))+((r01*x2378)));
evalcond[3]=(((r20*x2366))+((x2371*x2379))+x2370+x2367+((r22*x2377))+(((-1.0)*cj3*x2361*x2374))+((r21*x2362)));
evalcond[4]=(((r20*x2372))+(((-1.0)*r22*sj3*x2375))+x2363+(((-1.0)*x2376))+(((-1.0)*r21*x2366*x2374))+((sj3*x2359*x2361))+((gconst11*x2371)));
evalcond[5]=(((x2368*x2379))+((cj0*x2363))+(((-1.0)*cj3*x2364*x2374))+((r02*x2377))+(((-1.0)*cj1*cj2*x2373))+((r01*x2362))+((r00*x2366)));
evalcond[6]=(((r11*x2362))+((x2365*x2379))+((r12*x2377))+((sj0*x2363))+(((-1.0)*gconst11*x2360*x2374))+((r10*x2366))+(((-1.0)*cj1*cj2*x2369)));
evalcond[7]=(((gconst11*x2368))+(((-1.0)*r01*x2366*x2374))+(((-1.0)*r02*sj3*x2375))+((r00*x2359*x2362))+(((-1.0)*x2370*x2373))+(((-1.0)*x2367*x2373))+((r00*x2372)));
evalcond[8]=(((gconst11*x2365))+((gconst10*x2360))+(((-1.0)*r12*sj3*x2375))+((r10*x2359*x2362))+(((-1.0)*x2369*x2370))+(((-1.0)*x2367*x2369))+(((-1.0)*r11*x2366*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2380=((1.0)*gconst11);
CheckValue<IkReal> x2381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2380))+(((-1.0)*gconst10*r00)))),-1);
if(!x2381.valid){
continue;
}
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x2380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2381.value)))+(x2382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2383=IKsin(j4);
IkReal x2384=IKcos(j4);
IkReal x2385=(cj3*r10);
IkReal x2386=(gconst11*r20);
IkReal x2387=(gconst11*sj3);
IkReal x2388=(sj1*sj2);
IkReal x2389=(gconst11*r00);
IkReal x2390=(cj3*r11);
IkReal x2391=(gconst10*sj3);
IkReal x2392=(cj2*sj1);
IkReal x2393=(cj3*r01);
IkReal x2394=((1.0)*sj0);
IkReal x2395=(cj1*sj2);
IkReal x2396=(cj3*r21);
IkReal x2397=(cj3*gconst10);
IkReal x2398=((1.0)*cj0);
IkReal x2399=((1.0)*x2384);
IkReal x2400=((1.0)*x2383);
IkReal x2401=((1.0)*cj1*cj2);
IkReal x2402=(cj3*x2383);
IkReal x2403=(gconst10*x2383);
IkReal x2404=(gconst10*x2384);
evalcond[0]=((((-1.0)*x2386*x2400))+(((-1.0)*r22*x2399))+((r21*x2403)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x2400))+((r11*x2403))+(((-1.0)*r12*x2399)));
evalcond[2]=(((r01*x2403))+(((-1.0)*r02*x2399))+(((-1.0)*x2389*x2400))+(((-1.0)*x2394)));
evalcond[3]=(x2395+x2392+((r20*x2391))+((r22*x2402))+(((-1.0)*cj3*x2386*x2399))+((x2396*x2404))+((r21*x2387)));
evalcond[4]=(((gconst11*x2396))+((sj3*x2384*x2386))+(((-1.0)*x2401))+x2388+(((-1.0)*r21*x2391*x2399))+((r20*x2397))+(((-1.0)*r22*sj3*x2400)));
evalcond[5]=(((r01*x2387))+((r00*x2391))+((r02*x2402))+((x2393*x2404))+((cj0*x2388))+(((-1.0)*cj3*x2389*x2399))+(((-1.0)*cj1*cj2*x2398)));
evalcond[6]=((((-1.0)*gconst11*x2385*x2399))+((r12*x2402))+((x2390*x2404))+((r10*x2391))+((sj0*x2388))+(((-1.0)*cj1*cj2*x2394))+((r11*x2387)));
evalcond[7]=((((-1.0)*r02*sj3*x2400))+((gconst11*x2393))+((r00*x2397))+((r00*x2384*x2387))+(((-1.0)*x2392*x2398))+(((-1.0)*x2395*x2398))+(((-1.0)*r01*x2391*x2399)));
evalcond[8]=(((gconst11*x2390))+(((-1.0)*r12*sj3*x2400))+((r10*x2384*x2387))+(((-1.0)*x2394*x2395))+(((-1.0)*x2392*x2394))+(((-1.0)*r11*x2391*x2399))+((gconst10*x2385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2405=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2405;
j4eval[1]=IKsign(x2405);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2406=((1.0)*cj5);
IkReal x2407=((((-1.0)*r01*x2406))+(((-1.0)*r00*sj5)));
j4eval[0]=x2407;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2406)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2408=cj5*cj5;
IkReal x2409=(cj3*r21);
IkReal x2410=(cj5*sj5);
IkReal x2411=((1.0)*cj3);
IkReal x2412=(((r10*x2409*x2410))+(((-1.0)*r12*r22*x2411))+(((-1.0)*r11*x2409))+((r11*x2408*x2409))+(((-1.0)*r10*r20*x2408*x2411))+((cj3*r11*r20*x2410)));
j4eval[0]=x2412;
j4eval[1]=IKsign(x2412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2413=cj5*cj5;
IkReal x2414=((1.0)*cj3);
IkReal x2415=(r10*r21);
IkReal x2416=(cj5*sj5);
IkReal x2417=(r11*r21);
IkReal x2418=(r11*r20);
IkReal x2419=(r22*sj3);
IkReal x2420=(r10*r20);
IkReal x2421=((1.0)*sj3*x2413);
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal((((r10*sj5*x2419))+((cj5*r11*x2419)))),IkReal((((sj3*x2416*x2417))+(((-1.0)*x2418*x2421))+(((-1.0)*sj3*x2416*x2420))+((sj3*x2415))+(((-1.0)*x2415*x2421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(IKsign((((cj3*x2415*x2416))+(((-1.0)*x2414*x2417))+(((-1.0)*r12*r22*x2414))+((cj3*x2413*x2417))+((cj3*x2416*x2418))+(((-1.0)*x2413*x2414*x2420)))),-1);
if(!x2423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2422.value)+(((1.5707963267949)*(x2423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2424=IKsin(j4);
IkReal x2425=IKcos(j4);
IkReal x2426=(sj1*sj2);
IkReal x2427=(cj5*sj3);
IkReal x2428=(cj5*r10);
IkReal x2429=(r00*sj5);
IkReal x2430=(r11*sj5);
IkReal x2431=(cj3*cj5);
IkReal x2432=((1.0)*cj1);
IkReal x2433=(cj3*sj5);
IkReal x2434=(r21*sj5);
IkReal x2435=(cj2*sj1);
IkReal x2436=(sj3*sj5);
IkReal x2437=(r01*sj5);
IkReal x2438=(cj2*x2432);
IkReal x2439=((1.0)*x2425);
IkReal x2440=((1.0)*x2424);
IkReal x2441=(cj3*x2424);
IkReal x2442=(cj3*x2425);
evalcond[0]=((((-1.0)*r22*x2439))+((x2424*x2434))+(((-1.0)*cj5*r20*x2440)));
evalcond[1]=(((x2424*x2437))+(((-1.0)*cj5*r00*x2440))+(((-1.0)*r02*x2439)));
evalcond[2]=((1.0)+(((-1.0)*x2428*x2440))+((x2424*x2430))+(((-1.0)*r12*x2439)));
evalcond[3]=(((x2430*x2442))+((r11*x2427))+((r12*x2441))+(((-1.0)*cj3*x2428*x2439))+((r10*x2436)));
evalcond[4]=(((r10*x2425*x2427))+((r11*x2431))+(((-1.0)*r12*sj3*x2440))+(((-1.0)*sj3*x2430*x2439))+((r10*x2433)));
evalcond[5]=((((-1.0)*r20*x2431*x2439))+x2435+((r21*x2427))+((r22*x2441))+((r20*x2436))+((cj1*sj2))+((r21*x2425*x2433)));
evalcond[6]=(((r02*x2441))+x2426+(((-1.0)*x2438))+(((-1.0)*r00*x2431*x2439))+((r01*x2427))+((sj3*x2429))+((r01*x2425*x2433)));
evalcond[7]=(x2426+((r20*x2433))+(((-1.0)*x2438))+(((-1.0)*r22*sj3*x2440))+((r21*x2431))+(((-1.0)*sj3*x2434*x2439))+((r20*x2425*x2427)));
evalcond[8]=((((-1.0)*x2435))+((r01*x2431))+(((-1.0)*r02*sj3*x2440))+(((-1.0)*r01*x2436*x2439))+(((-1.0)*sj2*x2432))+((r00*x2425*x2427))+((cj3*x2429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2443=((1.0)*cj5);
CheckValue<IkReal> x2444=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2443)))),-1);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2443))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2444.value)))+(x2445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2446=IKsin(j4);
IkReal x2447=IKcos(j4);
IkReal x2448=(sj1*sj2);
IkReal x2449=(cj5*sj3);
IkReal x2450=(cj5*r10);
IkReal x2451=(r00*sj5);
IkReal x2452=(r11*sj5);
IkReal x2453=(cj3*cj5);
IkReal x2454=((1.0)*cj1);
IkReal x2455=(cj3*sj5);
IkReal x2456=(r21*sj5);
IkReal x2457=(cj2*sj1);
IkReal x2458=(sj3*sj5);
IkReal x2459=(r01*sj5);
IkReal x2460=(cj2*x2454);
IkReal x2461=((1.0)*x2447);
IkReal x2462=((1.0)*x2446);
IkReal x2463=(cj3*x2446);
IkReal x2464=(cj3*x2447);
evalcond[0]=((((-1.0)*r22*x2461))+(((-1.0)*cj5*r20*x2462))+((x2446*x2456)));
evalcond[1]=((((-1.0)*cj5*r00*x2462))+(((-1.0)*r02*x2461))+((x2446*x2459)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2461))+(((-1.0)*x2450*x2462))+((x2446*x2452)));
evalcond[3]=(((r10*x2458))+((r12*x2463))+((x2452*x2464))+(((-1.0)*cj3*x2450*x2461))+((r11*x2449)));
evalcond[4]=((((-1.0)*sj3*x2452*x2461))+((r10*x2455))+((r11*x2453))+(((-1.0)*r12*sj3*x2462))+((r10*x2447*x2449)));
evalcond[5]=(x2457+((cj1*sj2))+((r21*x2447*x2455))+((r22*x2463))+(((-1.0)*r20*x2453*x2461))+((r20*x2458))+((r21*x2449)));
evalcond[6]=(x2448+((sj3*x2451))+(((-1.0)*r00*x2453*x2461))+((r01*x2449))+((r02*x2463))+(((-1.0)*x2460))+((r01*x2447*x2455)));
evalcond[7]=(x2448+((r20*x2447*x2449))+(((-1.0)*sj3*x2456*x2461))+(((-1.0)*r22*sj3*x2462))+(((-1.0)*x2460))+((r20*x2455))+((r21*x2453)));
evalcond[8]=(((cj3*x2451))+((r01*x2453))+((r00*x2447*x2449))+(((-1.0)*x2457))+(((-1.0)*r02*sj3*x2462))+(((-1.0)*r01*x2458*x2461))+(((-1.0)*sj2*x2454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2465.valid){
continue;
}
CheckValue<IkReal> x2466 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2465.value)))+(x2466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2467=IKsin(j4);
IkReal x2468=IKcos(j4);
IkReal x2469=(sj1*sj2);
IkReal x2470=(cj5*sj3);
IkReal x2471=(cj5*r10);
IkReal x2472=(r00*sj5);
IkReal x2473=(r11*sj5);
IkReal x2474=(cj3*cj5);
IkReal x2475=((1.0)*cj1);
IkReal x2476=(cj3*sj5);
IkReal x2477=(r21*sj5);
IkReal x2478=(cj2*sj1);
IkReal x2479=(sj3*sj5);
IkReal x2480=(r01*sj5);
IkReal x2481=(cj2*x2475);
IkReal x2482=((1.0)*x2468);
IkReal x2483=((1.0)*x2467);
IkReal x2484=(cj3*x2467);
IkReal x2485=(cj3*x2468);
evalcond[0]=((((-1.0)*r22*x2482))+((x2467*x2477))+(((-1.0)*cj5*r20*x2483)));
evalcond[1]=((((-1.0)*cj5*r00*x2483))+(((-1.0)*r02*x2482))+((x2467*x2480)));
evalcond[2]=((1.0)+((x2467*x2473))+(((-1.0)*x2471*x2483))+(((-1.0)*r12*x2482)));
evalcond[3]=(((r10*x2479))+((x2473*x2485))+(((-1.0)*cj3*x2471*x2482))+((r12*x2484))+((r11*x2470)));
evalcond[4]=((((-1.0)*r12*sj3*x2483))+(((-1.0)*sj3*x2473*x2482))+((r10*x2476))+((r10*x2468*x2470))+((r11*x2474)));
evalcond[5]=(x2478+((r22*x2484))+((cj1*sj2))+((r21*x2470))+((r20*x2479))+((r21*x2468*x2476))+(((-1.0)*r20*x2474*x2482)));
evalcond[6]=(x2469+((r02*x2484))+(((-1.0)*x2481))+((r01*x2470))+((r01*x2468*x2476))+(((-1.0)*r00*x2474*x2482))+((sj3*x2472)));
evalcond[7]=((((-1.0)*sj3*x2477*x2482))+x2469+((r21*x2474))+((r20*x2468*x2470))+(((-1.0)*x2481))+((r20*x2476))+(((-1.0)*r22*sj3*x2483)));
evalcond[8]=(((r00*x2468*x2470))+((cj3*x2472))+(((-1.0)*r02*sj3*x2483))+(((-1.0)*r01*x2479*x2482))+(((-1.0)*x2478))+((r01*x2474))+(((-1.0)*sj2*x2475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2486=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2486;
j4eval[1]=IKsign(x2486);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2487=((1.0)*cj5);
IkReal x2488=((((-1.0)*r21*x2487))+(((-1.0)*r20*sj5)));
j4eval[0]=x2488;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2487))))));
j4eval[2]=IKsign(x2488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2489=cj5*cj5;
IkReal x2490=(cj3*r21);
IkReal x2491=(cj5*sj5);
IkReal x2492=((1.0)*cj3);
IkReal x2493=((((-1.0)*r11*x2490))+((cj3*r11*r20*x2491))+(((-1.0)*r12*r22*x2492))+(((-1.0)*r10*r20*x2489*x2492))+((r10*x2490*x2491))+((r11*x2489*x2490)));
j4eval[0]=x2493;
j4eval[1]=IKsign(x2493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2494=cj5*cj5;
IkReal x2495=((1.0)*cj3);
IkReal x2496=(r10*r21);
IkReal x2497=(cj5*sj5);
IkReal x2498=(r11*r21);
IkReal x2499=(r11*r20);
IkReal x2500=(r22*sj3);
IkReal x2501=(r10*r20);
IkReal x2502=((1.0)*sj3*x2494);
CheckValue<IkReal> x2503 = IKatan2WithCheck(IkReal((((cj5*r11*x2500))+((r10*sj5*x2500)))),IkReal((((sj3*x2496))+(((-1.0)*x2496*x2502))+(((-1.0)*x2499*x2502))+(((-1.0)*sj3*x2497*x2501))+((sj3*x2497*x2498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2503.valid){
continue;
}
CheckValue<IkReal> x2504=IKPowWithIntegerCheck(IKsign((((cj3*x2496*x2497))+(((-1.0)*x2495*x2498))+((cj3*x2497*x2499))+(((-1.0)*r12*r22*x2495))+((cj3*x2494*x2498))+(((-1.0)*x2494*x2495*x2501)))),-1);
if(!x2504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2503.value)+(((1.5707963267949)*(x2504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2505=IKsin(j4);
IkReal x2506=IKcos(j4);
IkReal x2507=(cj2*sj1);
IkReal x2508=(cj1*sj2);
IkReal x2509=(cj5*sj3);
IkReal x2510=(cj5*r10);
IkReal x2511=(r00*sj5);
IkReal x2512=(sj1*sj2);
IkReal x2513=(r11*sj5);
IkReal x2514=(cj3*cj5);
IkReal x2515=(cj3*sj5);
IkReal x2516=(r21*sj5);
IkReal x2517=(cj1*cj2);
IkReal x2518=(sj3*sj5);
IkReal x2519=(r01*sj5);
IkReal x2520=((1.0)*x2506);
IkReal x2521=((1.0)*x2505);
IkReal x2522=(cj3*x2505);
IkReal x2523=(cj3*x2506);
IkReal x2524=(x2508+x2507);
evalcond[0]=(((x2505*x2516))+(((-1.0)*cj5*r20*x2521))+(((-1.0)*r22*x2520)));
evalcond[1]=(((x2505*x2519))+(((-1.0)*cj5*r00*x2521))+(((-1.0)*r02*x2520)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2520))+((x2505*x2513))+(((-1.0)*x2510*x2521)));
evalcond[3]=(((r10*x2518))+((r12*x2522))+(((-1.0)*cj3*x2510*x2520))+((r11*x2509))+((x2513*x2523)));
evalcond[4]=((((-1.0)*sj3*x2513*x2520))+((r11*x2514))+((r10*x2515))+((r10*x2506*x2509))+(((-1.0)*r12*sj3*x2521)));
evalcond[5]=(((r22*x2522))+x2524+((r21*x2506*x2515))+(((-1.0)*r20*x2514*x2520))+((r21*x2509))+((r20*x2518)));
evalcond[6]=(((r02*x2522))+((r01*x2506*x2515))+x2517+(((-1.0)*x2512))+((sj3*x2511))+(((-1.0)*r00*x2514*x2520))+((r01*x2509)));
evalcond[7]=(((r00*x2506*x2509))+x2524+((r01*x2514))+(((-1.0)*r02*sj3*x2521))+(((-1.0)*r01*x2518*x2520))+((cj3*x2511)));
evalcond[8]=(x2512+(((-1.0)*sj3*x2516*x2520))+((r21*x2514))+(((-1.0)*x2517))+(((-1.0)*r22*sj3*x2521))+((r20*x2506*x2509))+((r20*x2515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2525=((1.0)*cj5);
CheckValue<IkReal> x2526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2525))+(((-1.0)*r20*sj5)))),-1);
if(!x2526.valid){
continue;
}
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2526.value)))+(x2527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2528=IKsin(j4);
IkReal x2529=IKcos(j4);
IkReal x2530=(cj2*sj1);
IkReal x2531=(cj1*sj2);
IkReal x2532=(cj5*sj3);
IkReal x2533=(cj5*r10);
IkReal x2534=(r00*sj5);
IkReal x2535=(sj1*sj2);
IkReal x2536=(r11*sj5);
IkReal x2537=(cj3*cj5);
IkReal x2538=(cj3*sj5);
IkReal x2539=(r21*sj5);
IkReal x2540=(cj1*cj2);
IkReal x2541=(sj3*sj5);
IkReal x2542=(r01*sj5);
IkReal x2543=((1.0)*x2529);
IkReal x2544=((1.0)*x2528);
IkReal x2545=(cj3*x2528);
IkReal x2546=(cj3*x2529);
IkReal x2547=(x2530+x2531);
evalcond[0]=((((-1.0)*cj5*r20*x2544))+(((-1.0)*r22*x2543))+((x2528*x2539)));
evalcond[1]=(((x2528*x2542))+(((-1.0)*cj5*r00*x2544))+(((-1.0)*r02*x2543)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2543))+(((-1.0)*x2533*x2544))+((x2528*x2536)));
evalcond[3]=((((-1.0)*cj3*x2533*x2543))+((r12*x2545))+((x2536*x2546))+((r11*x2532))+((r10*x2541)));
evalcond[4]=(((r10*x2529*x2532))+((r10*x2538))+(((-1.0)*sj3*x2536*x2543))+(((-1.0)*r12*sj3*x2544))+((r11*x2537)));
evalcond[5]=(x2547+(((-1.0)*r20*x2537*x2543))+((r21*x2532))+((r20*x2541))+((r21*x2529*x2538))+((r22*x2545)));
evalcond[6]=(((sj3*x2534))+((r01*x2532))+x2540+(((-1.0)*r00*x2537*x2543))+((r01*x2529*x2538))+(((-1.0)*x2535))+((r02*x2545)));
evalcond[7]=(((r01*x2537))+x2547+((cj3*x2534))+(((-1.0)*r01*x2541*x2543))+((r00*x2529*x2532))+(((-1.0)*r02*sj3*x2544)));
evalcond[8]=(x2535+((r20*x2529*x2532))+((r20*x2538))+(((-1.0)*sj3*x2539*x2543))+((r21*x2537))+(((-1.0)*x2540))+(((-1.0)*r22*sj3*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2548.value)+(((1.5707963267949)*(x2549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2550=IKsin(j4);
IkReal x2551=IKcos(j4);
IkReal x2552=(cj2*sj1);
IkReal x2553=(cj1*sj2);
IkReal x2554=(cj5*sj3);
IkReal x2555=(cj5*r10);
IkReal x2556=(r00*sj5);
IkReal x2557=(sj1*sj2);
IkReal x2558=(r11*sj5);
IkReal x2559=(cj3*cj5);
IkReal x2560=(cj3*sj5);
IkReal x2561=(r21*sj5);
IkReal x2562=(cj1*cj2);
IkReal x2563=(sj3*sj5);
IkReal x2564=(r01*sj5);
IkReal x2565=((1.0)*x2551);
IkReal x2566=((1.0)*x2550);
IkReal x2567=(cj3*x2550);
IkReal x2568=(cj3*x2551);
IkReal x2569=(x2552+x2553);
evalcond[0]=((((-1.0)*r22*x2565))+((x2550*x2561))+(((-1.0)*cj5*r20*x2566)));
evalcond[1]=((((-1.0)*r02*x2565))+((x2550*x2564))+(((-1.0)*cj5*r00*x2566)));
evalcond[2]=((-1.0)+(((-1.0)*x2555*x2566))+((x2550*x2558))+(((-1.0)*r12*x2565)));
evalcond[3]=(((x2558*x2568))+((r10*x2563))+((r11*x2554))+((r12*x2567))+(((-1.0)*cj3*x2555*x2565)));
evalcond[4]=((((-1.0)*sj3*x2558*x2565))+((r10*x2560))+((r11*x2559))+((r10*x2551*x2554))+(((-1.0)*r12*sj3*x2566)));
evalcond[5]=(((r22*x2567))+x2569+((r21*x2551*x2560))+((r20*x2563))+(((-1.0)*r20*x2559*x2565))+((r21*x2554)));
evalcond[6]=(x2562+(((-1.0)*x2557))+((r01*x2554))+((sj3*x2556))+(((-1.0)*r00*x2559*x2565))+((r01*x2551*x2560))+((r02*x2567)));
evalcond[7]=(x2569+((r00*x2551*x2554))+(((-1.0)*r02*sj3*x2566))+(((-1.0)*r01*x2563*x2565))+((cj3*x2556))+((r01*x2559)));
evalcond[8]=(x2557+(((-1.0)*x2562))+((r20*x2560))+(((-1.0)*sj3*x2561*x2565))+(((-1.0)*r22*sj3*x2566))+((r21*x2559))+((r20*x2551*x2554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2570=((-1.0)*r00);
IkReal x2572 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2572)==0){
continue;
}
IkReal x2571=pow(x2572,-0.5);
CheckValue<IkReal> x2573 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2570),IKFAST_ATAN2_MAGTHRESH);
if(!x2573.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2573.value));
IkReal gconst13=(r01*x2571);
IkReal gconst14=(x2570*x2571);
CheckValue<IkReal> x2574 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2574.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2574.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2575=((-1.0)*r00);
IkReal x2576=x2571;
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2575),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
IkReal x2577=((-1.0)*(x2578.value));
sj5=gconst13;
cj5=gconst14;
j5=x2577;
IkReal gconst12=x2577;
IkReal gconst13=(r01*x2576);
IkReal gconst14=(x2575*x2576);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2579=((1.0)*sj0);
IkReal x2580=((1.0)*cj0);
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2579))+(((-1.0)*r02*x2580)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x2579))+(((-1.0)*gconst13*r01*x2580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
CheckValue<IkReal> x2582=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x2582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2581.value)+(((1.5707963267949)*(x2582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2583=IKsin(j4);
IkReal x2584=IKcos(j4);
IkReal x2585=((1.0)*r22);
IkReal x2586=((1.0)*r12);
IkReal x2587=(gconst13*sj3);
IkReal x2588=(gconst13*r01);
IkReal x2589=(sj1*sj2);
IkReal x2590=(gconst14*sj3);
IkReal x2591=(cj2*sj1);
IkReal x2592=((1.0)*sj0);
IkReal x2593=(cj3*gconst13);
IkReal x2594=(cj3*gconst14);
IkReal x2595=((1.0)*cj0);
IkReal x2596=((1.0)*gconst14);
IkReal x2597=(cj1*sj2);
IkReal x2598=(sj3*x2583);
IkReal x2599=((1.0)*cj1*cj2);
IkReal x2600=(cj3*x2584);
IkReal x2601=(cj3*x2583);
IkReal x2602=(gconst13*x2583);
IkReal x2603=((1.0)*x2584);
IkReal x2604=(x2583*x2596);
evalcond[0]=((((-1.0)*x2584*x2585))+((r21*x2602))+(((-1.0)*r20*x2604)));
evalcond[1]=(cj0+(((-1.0)*r10*x2604))+(((-1.0)*x2584*x2586))+((r11*x2602)));
evalcond[2]=((((-1.0)*x2592))+(((-1.0)*r02*x2603))+((x2583*x2588))+(((-1.0)*r00*x2604)));
evalcond[3]=(x2597+x2591+((r20*x2587))+(((-1.0)*r20*x2594*x2603))+((r21*x2584*x2593))+((r22*x2601))+((r21*x2590)));
evalcond[4]=(x2589+(((-1.0)*x2585*x2598))+(((-1.0)*r21*x2587*x2603))+((r20*x2593))+(((-1.0)*x2599))+((r20*x2584*x2590))+((r21*x2594)));
evalcond[5]=((((-1.0)*r00*x2594*x2603))+((r01*x2590))+((r00*x2587))+((x2588*x2600))+((cj0*x2589))+(((-1.0)*cj1*cj2*x2595))+((r02*x2601)));
evalcond[6]=((((-1.0)*cj1*cj2*x2592))+((r10*x2587))+(((-1.0)*r10*x2594*x2603))+((r11*x2590))+((r12*x2601))+((sj0*x2589))+((r11*x2584*x2593)));
evalcond[7]=(((r00*x2593))+((r01*x2594))+(((-1.0)*r02*x2598))+(((-1.0)*r01*x2587*x2603))+(((-1.0)*x2595*x2597))+(((-1.0)*x2591*x2595))+((r00*x2584*x2590)));
evalcond[8]=((((-1.0)*r11*x2587*x2603))+((r10*x2593))+(((-1.0)*x2586*x2598))+((r11*x2594))+(((-1.0)*x2591*x2592))+(((-1.0)*x2592*x2597))+((r10*x2584*x2590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2605=((1.0)*gconst14);
CheckValue<IkReal> x2606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x2605)))),-1);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x2605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2606.value)))+(x2607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2608=IKsin(j4);
IkReal x2609=IKcos(j4);
IkReal x2610=((1.0)*r22);
IkReal x2611=((1.0)*r12);
IkReal x2612=(gconst13*sj3);
IkReal x2613=(gconst13*r01);
IkReal x2614=(sj1*sj2);
IkReal x2615=(gconst14*sj3);
IkReal x2616=(cj2*sj1);
IkReal x2617=((1.0)*sj0);
IkReal x2618=(cj3*gconst13);
IkReal x2619=(cj3*gconst14);
IkReal x2620=((1.0)*cj0);
IkReal x2621=((1.0)*gconst14);
IkReal x2622=(cj1*sj2);
IkReal x2623=(sj3*x2608);
IkReal x2624=((1.0)*cj1*cj2);
IkReal x2625=(cj3*x2609);
IkReal x2626=(cj3*x2608);
IkReal x2627=(gconst13*x2608);
IkReal x2628=((1.0)*x2609);
IkReal x2629=(x2608*x2621);
evalcond[0]=((((-1.0)*x2609*x2610))+((r21*x2627))+(((-1.0)*r20*x2629)));
evalcond[1]=((((-1.0)*x2609*x2611))+cj0+(((-1.0)*r10*x2629))+((r11*x2627)));
evalcond[2]=((((-1.0)*r00*x2629))+((x2608*x2613))+(((-1.0)*r02*x2628))+(((-1.0)*x2617)));
evalcond[3]=(((r21*x2609*x2618))+((r20*x2612))+((r22*x2626))+(((-1.0)*r20*x2619*x2628))+((r21*x2615))+x2616+x2622);
evalcond[4]=((((-1.0)*x2610*x2623))+((r20*x2609*x2615))+((r20*x2618))+(((-1.0)*r21*x2612*x2628))+(((-1.0)*x2624))+((r21*x2619))+x2614);
evalcond[5]=(((r00*x2612))+(((-1.0)*cj1*cj2*x2620))+((r01*x2615))+((r02*x2626))+(((-1.0)*r00*x2619*x2628))+((cj0*x2614))+((x2613*x2625)));
evalcond[6]=((((-1.0)*r10*x2619*x2628))+(((-1.0)*cj1*cj2*x2617))+((r11*x2615))+((r10*x2612))+((r12*x2626))+((r11*x2609*x2618))+((sj0*x2614)));
evalcond[7]=(((r00*x2618))+(((-1.0)*r02*x2623))+((r01*x2619))+((r00*x2609*x2615))+(((-1.0)*x2616*x2620))+(((-1.0)*r01*x2612*x2628))+(((-1.0)*x2620*x2622)));
evalcond[8]=((((-1.0)*x2617*x2622))+(((-1.0)*x2611*x2623))+(((-1.0)*r11*x2612*x2628))+((r11*x2619))+((r10*x2609*x2615))+((r10*x2618))+(((-1.0)*x2616*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2630=((-1.0)*r01);
IkReal x2632 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2632)==0){
continue;
}
IkReal x2631=pow(x2632,-0.5);
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(x2630),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2633.value))));
IkReal gconst16=(x2630*x2631);
IkReal gconst17=((1.0)*r00*x2631);
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2635=((-1.0)*r01);
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(x2635),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
IkReal x2636=((1.0)*(x2638.value));
IkReal x2637=x2631;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2636)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2636)));
IkReal gconst16=(x2635*x2637);
IkReal gconst17=((1.0)*r00*x2637);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2639=((-1.0)*r01);
CheckValue<IkReal> x2642 = IKatan2WithCheck(IkReal(x2639),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2642.valid){
continue;
}
IkReal x2640=((1.0)*(x2642.value));
IkReal x2641=x2631;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2640)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2640)));
IkReal gconst16=(x2639*x2641);
IkReal gconst17=((1.0)*r00*x2641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2643=((-1.0)*r01);
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(x2643),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
IkReal x2644=((1.0)*(x2646.value));
IkReal x2645=x2631;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2644)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2644)));
IkReal gconst16=(x2643*x2645);
IkReal gconst17=((1.0)*r00*x2645);
IkReal x2647=r02*r02;
IkReal x2648=(r12*sj0);
IkReal x2649=((1.0)*cj0);
IkReal x2650=x2631;
j4eval[0]=((IKabs(((((-1.0)*r02*x2649))+(((-1.0)*x2648)))))+(IKabs((((cj0*x2647*x2650))+((r02*x2648*x2650))+(((-1.0)*x2649*x2650))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2651=((1.0)*sj0);
IkReal x2652=((1.0)*cj0);
CheckValue<IkReal> x2653=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x2653.valid){
continue;
}
CheckValue<IkReal> x2654 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2651))+(((-1.0)*r02*x2652)))),IkReal(((((-1.0)*gconst16*r11*x2651))+(((-1.0)*gconst16*r01*x2652))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2653.value)))+(x2654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2655=IKsin(j4);
IkReal x2656=IKcos(j4);
IkReal x2657=(cj3*gconst17);
IkReal x2658=(gconst16*r21);
IkReal x2659=(gconst17*sj3);
IkReal x2660=(gconst16*r20);
IkReal x2661=(sj1*sj2);
IkReal x2662=(gconst16*r10);
IkReal x2663=(cj2*sj1);
IkReal x2664=(gconst16*sj3);
IkReal x2665=((1.0)*cj0);
IkReal x2666=((1.0)*sj0);
IkReal x2667=(cj1*sj2);
IkReal x2668=((1.0)*x2656);
IkReal x2669=(gconst16*x2655);
IkReal x2670=(cj3*x2656);
IkReal x2671=(cj3*x2655);
IkReal x2672=((1.0)*cj1*cj2);
IkReal x2673=((1.0)*gconst17*x2655);
IkReal x2674=((1.0)*sj3*x2655);
evalcond[0]=(((x2655*x2658))+(((-1.0)*r20*x2673))+(((-1.0)*r22*x2668)));
evalcond[1]=((((-1.0)*r12*x2668))+cj0+(((-1.0)*r10*x2673))+((r11*x2669)));
evalcond[2]=((((-1.0)*r00*x2673))+(((-1.0)*r02*x2668))+(((-1.0)*x2666))+((r01*x2669)));
evalcond[3]=(((r21*x2659))+((x2658*x2670))+((r22*x2671))+(((-1.0)*r20*x2657*x2668))+((sj3*x2660))+x2667+x2663);
evalcond[4]=(((r21*x2657))+(((-1.0)*sj3*x2658*x2668))+((r20*x2656*x2659))+(((-1.0)*x2672))+((cj3*x2660))+(((-1.0)*r22*x2674))+x2661);
evalcond[5]=((((-1.0)*r00*x2657*x2668))+((r02*x2671))+((r01*x2659))+((cj0*x2661))+((gconst16*r01*x2670))+((r00*x2664))+(((-1.0)*cj1*cj2*x2665)));
evalcond[6]=(((r11*x2659))+((r12*x2671))+((sj0*x2661))+(((-1.0)*r10*x2657*x2668))+((sj3*x2662))+(((-1.0)*cj1*cj2*x2666))+((gconst16*r11*x2670)));
evalcond[7]=(((r00*x2656*x2659))+(((-1.0)*x2663*x2665))+(((-1.0)*r02*x2674))+(((-1.0)*x2665*x2667))+((r01*x2657))+(((-1.0)*r01*x2664*x2668))+((cj3*gconst16*r00)));
evalcond[8]=(((r10*x2656*x2659))+(((-1.0)*r12*x2674))+((r11*x2657))+(((-1.0)*x2663*x2666))+((cj3*x2662))+(((-1.0)*x2666*x2667))+(((-1.0)*r11*x2664*x2668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2675=((1.0)*gconst17);
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2675))+(((-1.0)*gconst16*r10)))),-1);
if(!x2676.valid){
continue;
}
CheckValue<IkReal> x2677 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x2675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2676.value)))+(x2677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2678=IKsin(j4);
IkReal x2679=IKcos(j4);
IkReal x2680=(cj3*gconst17);
IkReal x2681=(gconst16*r21);
IkReal x2682=(gconst17*sj3);
IkReal x2683=(gconst16*r20);
IkReal x2684=(sj1*sj2);
IkReal x2685=(gconst16*r10);
IkReal x2686=(cj2*sj1);
IkReal x2687=(gconst16*sj3);
IkReal x2688=((1.0)*cj0);
IkReal x2689=((1.0)*sj0);
IkReal x2690=(cj1*sj2);
IkReal x2691=((1.0)*x2679);
IkReal x2692=(gconst16*x2678);
IkReal x2693=(cj3*x2679);
IkReal x2694=(cj3*x2678);
IkReal x2695=((1.0)*cj1*cj2);
IkReal x2696=((1.0)*gconst17*x2678);
IkReal x2697=((1.0)*sj3*x2678);
evalcond[0]=((((-1.0)*r22*x2691))+((x2678*x2681))+(((-1.0)*r20*x2696)));
evalcond[1]=((((-1.0)*r10*x2696))+cj0+(((-1.0)*r12*x2691))+((r11*x2692)));
evalcond[2]=((((-1.0)*r02*x2691))+(((-1.0)*r00*x2696))+(((-1.0)*x2689))+((r01*x2692)));
evalcond[3]=(((r22*x2694))+(((-1.0)*r20*x2680*x2691))+((r21*x2682))+((x2681*x2693))+((sj3*x2683))+x2686+x2690);
evalcond[4]=(((cj3*x2683))+((r21*x2680))+(((-1.0)*r22*x2697))+(((-1.0)*x2695))+((r20*x2679*x2682))+(((-1.0)*sj3*x2681*x2691))+x2684);
evalcond[5]=(((cj0*x2684))+(((-1.0)*cj1*cj2*x2688))+((r01*x2682))+((r00*x2687))+((gconst16*r01*x2693))+(((-1.0)*r00*x2680*x2691))+((r02*x2694)));
evalcond[6]=(((r12*x2694))+((r11*x2682))+(((-1.0)*cj1*cj2*x2689))+(((-1.0)*r10*x2680*x2691))+((gconst16*r11*x2693))+((sj0*x2684))+((sj3*x2685)));
evalcond[7]=((((-1.0)*r01*x2687*x2691))+((r00*x2679*x2682))+(((-1.0)*r02*x2697))+((r01*x2680))+(((-1.0)*x2688*x2690))+(((-1.0)*x2686*x2688))+((cj3*gconst16*r00)));
evalcond[8]=(((r10*x2679*x2682))+((r11*x2680))+((cj3*x2685))+(((-1.0)*r11*x2687*x2691))+(((-1.0)*x2689*x2690))+(((-1.0)*x2686*x2689))+(((-1.0)*r12*x2697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2698=((1.0)*gconst17);
CheckValue<IkReal> x2699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x2698)))),-1);
if(!x2699.valid){
continue;
}
CheckValue<IkReal> x2700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2698))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2699.value)))+(x2700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2701=IKsin(j4);
IkReal x2702=IKcos(j4);
IkReal x2703=(cj3*gconst17);
IkReal x2704=(gconst16*r21);
IkReal x2705=(gconst17*sj3);
IkReal x2706=(gconst16*r20);
IkReal x2707=(sj1*sj2);
IkReal x2708=(gconst16*r10);
IkReal x2709=(cj2*sj1);
IkReal x2710=(gconst16*sj3);
IkReal x2711=((1.0)*cj0);
IkReal x2712=((1.0)*sj0);
IkReal x2713=(cj1*sj2);
IkReal x2714=((1.0)*x2702);
IkReal x2715=(gconst16*x2701);
IkReal x2716=(cj3*x2702);
IkReal x2717=(cj3*x2701);
IkReal x2718=((1.0)*cj1*cj2);
IkReal x2719=((1.0)*gconst17*x2701);
IkReal x2720=((1.0)*sj3*x2701);
evalcond[0]=((((-1.0)*r20*x2719))+(((-1.0)*r22*x2714))+((x2701*x2704)));
evalcond[1]=(cj0+(((-1.0)*r10*x2719))+((r11*x2715))+(((-1.0)*r12*x2714)));
evalcond[2]=((((-1.0)*x2712))+(((-1.0)*r02*x2714))+(((-1.0)*r00*x2719))+((r01*x2715)));
evalcond[3]=(x2713+x2709+((r22*x2717))+((r21*x2705))+((sj3*x2706))+((x2704*x2716))+(((-1.0)*r20*x2703*x2714)));
evalcond[4]=(x2707+(((-1.0)*x2718))+(((-1.0)*r22*x2720))+((r21*x2703))+((cj3*x2706))+((r20*x2702*x2705))+(((-1.0)*sj3*x2704*x2714)));
evalcond[5]=(((r01*x2705))+((r02*x2717))+((cj0*x2707))+(((-1.0)*r00*x2703*x2714))+((gconst16*r01*x2716))+(((-1.0)*cj1*cj2*x2711))+((r00*x2710)));
evalcond[6]=(((r12*x2717))+((sj0*x2707))+((gconst16*r11*x2716))+((r11*x2705))+(((-1.0)*r10*x2703*x2714))+(((-1.0)*cj1*cj2*x2712))+((sj3*x2708)));
evalcond[7]=(((r00*x2702*x2705))+((r01*x2703))+(((-1.0)*x2709*x2711))+(((-1.0)*r01*x2710*x2714))+(((-1.0)*r02*x2720))+((cj3*gconst16*r00))+(((-1.0)*x2711*x2713)));
evalcond[8]=((((-1.0)*x2712*x2713))+((r11*x2703))+(((-1.0)*r12*x2720))+(((-1.0)*x2709*x2712))+((cj3*x2708))+(((-1.0)*r11*x2710*x2714))+((r10*x2702*x2705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2721=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2721;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2722=((1.0)*cj5);
IkReal x2723=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2722)));
j4eval[0]=x2723;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2722)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2724=cj5*cj5;
IkReal x2725=(cj3*r01);
IkReal x2726=(cj5*sj5);
IkReal x2727=((1.0)*cj3);
IkReal x2728=(((r21*x2724*x2725))+(((-1.0)*r02*r22*x2727))+((r20*x2725*x2726))+((cj3*r00*r21*x2726))+(((-1.0)*r21*x2725))+(((-1.0)*r00*r20*x2724*x2727)));
j4eval[0]=x2728;
j4eval[1]=IKsign(x2728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2729=cj5*cj5;
IkReal x2730=(cj3*r20);
IkReal x2731=(r21*sj3);
IkReal x2732=((1.0)*cj3);
IkReal x2733=(r01*r21);
IkReal x2734=(r01*sj3);
IkReal x2735=(r00*sj5);
IkReal x2736=(cj5*r01*sj5);
IkReal x2737=((1.0)*x2729);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal((((r22*sj3*x2735))+((cj5*r22*x2734)))),IkReal(((((-1.0)*r20*x2734*x2737))+((x2731*x2736))+((r00*x2731))+(((-1.0)*r00*x2731*x2737))+(((-1.0)*cj5*r20*sj3*x2735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
CheckValue<IkReal> x2739=IKPowWithIntegerCheck(IKsign((((cj3*x2729*x2733))+(((-1.0)*r02*r22*x2732))+((cj3*cj5*r21*x2735))+(((-1.0)*r00*x2730*x2737))+((x2730*x2736))+(((-1.0)*x2732*x2733)))),-1);
if(!x2739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2738.value)+(((1.5707963267949)*(x2739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2740=IKsin(j4);
IkReal x2741=IKcos(j4);
IkReal x2742=(sj1*sj2);
IkReal x2743=(r11*sj5);
IkReal x2744=(cj5*r10);
IkReal x2745=(cj5*r01);
IkReal x2746=(cj5*r00);
IkReal x2747=((1.0)*cj1);
IkReal x2748=(cj3*sj5);
IkReal x2749=(r21*sj5);
IkReal x2750=(cj5*sj3);
IkReal x2751=(sj3*sj5);
IkReal x2752=(cj2*sj1);
IkReal x2753=(r01*sj5);
IkReal x2754=(cj3*cj5);
IkReal x2755=(cj5*r20);
IkReal x2756=(cj2*x2747);
IkReal x2757=((1.0)*x2741);
IkReal x2758=((1.0)*x2740);
IkReal x2759=(cj3*x2741);
IkReal x2760=(sj3*x2741);
IkReal x2761=(cj3*x2740);
evalcond[0]=((((-1.0)*r22*x2757))+((x2740*x2749))+(((-1.0)*x2755*x2758)));
evalcond[1]=((((-1.0)*x2744*x2758))+(((-1.0)*r12*x2757))+((x2740*x2743)));
evalcond[2]=((-1.0)+((x2740*x2753))+(((-1.0)*x2746*x2758))+(((-1.0)*r02*x2757)));
evalcond[3]=(((sj3*x2745))+(((-1.0)*cj3*x2746*x2757))+((r00*x2751))+((r01*x2741*x2748))+((r02*x2761)));
evalcond[4]=((((-1.0)*r02*sj3*x2758))+(((-1.0)*r01*x2751*x2757))+((cj3*x2745))+((r00*x2748))+((x2746*x2760)));
evalcond[5]=(x2752+((r21*x2750))+((cj1*sj2))+((r21*x2741*x2748))+(((-1.0)*r20*x2754*x2757))+((r20*x2751))+((r22*x2761)));
evalcond[6]=(x2742+((r11*x2750))+((r12*x2761))+((x2743*x2759))+((r10*x2751))+(((-1.0)*x2756))+(((-1.0)*cj3*x2744*x2757)));
evalcond[7]=(x2742+((r21*x2754))+((r20*x2748))+(((-1.0)*sj3*x2749*x2757))+(((-1.0)*r22*sj3*x2758))+(((-1.0)*x2756))+((r20*x2741*x2750)));
evalcond[8]=(((r11*x2754))+((x2744*x2760))+((r10*x2748))+(((-1.0)*sj2*x2747))+(((-1.0)*r12*sj3*x2758))+(((-1.0)*x2752))+(((-1.0)*sj3*x2743*x2757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2762=((1.0)*cj5);
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2762)))),-1);
if(!x2763.valid){
continue;
}
CheckValue<IkReal> x2764 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2763.value)))+(x2764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2765=IKsin(j4);
IkReal x2766=IKcos(j4);
IkReal x2767=(sj1*sj2);
IkReal x2768=(r11*sj5);
IkReal x2769=(cj5*r10);
IkReal x2770=(cj5*r01);
IkReal x2771=(cj5*r00);
IkReal x2772=((1.0)*cj1);
IkReal x2773=(cj3*sj5);
IkReal x2774=(r21*sj5);
IkReal x2775=(cj5*sj3);
IkReal x2776=(sj3*sj5);
IkReal x2777=(cj2*sj1);
IkReal x2778=(r01*sj5);
IkReal x2779=(cj3*cj5);
IkReal x2780=(cj5*r20);
IkReal x2781=(cj2*x2772);
IkReal x2782=((1.0)*x2766);
IkReal x2783=((1.0)*x2765);
IkReal x2784=(cj3*x2766);
IkReal x2785=(sj3*x2766);
IkReal x2786=(cj3*x2765);
evalcond[0]=((((-1.0)*x2780*x2783))+(((-1.0)*r22*x2782))+((x2765*x2774)));
evalcond[1]=((((-1.0)*r12*x2782))+((x2765*x2768))+(((-1.0)*x2769*x2783)));
evalcond[2]=((-1.0)+((x2765*x2778))+(((-1.0)*r02*x2782))+(((-1.0)*x2771*x2783)));
evalcond[3]=(((r00*x2776))+((r02*x2786))+((r01*x2766*x2773))+(((-1.0)*cj3*x2771*x2782))+((sj3*x2770)));
evalcond[4]=((((-1.0)*r02*sj3*x2783))+((r00*x2773))+(((-1.0)*r01*x2776*x2782))+((x2771*x2785))+((cj3*x2770)));
evalcond[5]=(x2777+((r21*x2766*x2773))+((cj1*sj2))+((r20*x2776))+((r21*x2775))+((r22*x2786))+(((-1.0)*r20*x2779*x2782)));
evalcond[6]=((((-1.0)*x2781))+x2767+((r11*x2775))+((r12*x2786))+((r10*x2776))+(((-1.0)*cj3*x2769*x2782))+((x2768*x2784)));
evalcond[7]=((((-1.0)*x2781))+x2767+(((-1.0)*r22*sj3*x2783))+((r20*x2773))+((r20*x2766*x2775))+((r21*x2779))+(((-1.0)*sj3*x2774*x2782)));
evalcond[8]=((((-1.0)*x2777))+(((-1.0)*sj3*x2768*x2782))+((r11*x2779))+((r10*x2773))+((x2769*x2785))+(((-1.0)*r12*sj3*x2783))+(((-1.0)*sj2*x2772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2787.valid){
continue;
}
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2787.value)))+(x2788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2789=IKsin(j4);
IkReal x2790=IKcos(j4);
IkReal x2791=(sj1*sj2);
IkReal x2792=(r11*sj5);
IkReal x2793=(cj5*r10);
IkReal x2794=(cj5*r01);
IkReal x2795=(cj5*r00);
IkReal x2796=((1.0)*cj1);
IkReal x2797=(cj3*sj5);
IkReal x2798=(r21*sj5);
IkReal x2799=(cj5*sj3);
IkReal x2800=(sj3*sj5);
IkReal x2801=(cj2*sj1);
IkReal x2802=(r01*sj5);
IkReal x2803=(cj3*cj5);
IkReal x2804=(cj5*r20);
IkReal x2805=(cj2*x2796);
IkReal x2806=((1.0)*x2790);
IkReal x2807=((1.0)*x2789);
IkReal x2808=(cj3*x2790);
IkReal x2809=(sj3*x2790);
IkReal x2810=(cj3*x2789);
evalcond[0]=(((x2789*x2798))+(((-1.0)*r22*x2806))+(((-1.0)*x2804*x2807)));
evalcond[1]=(((x2789*x2792))+(((-1.0)*x2793*x2807))+(((-1.0)*r12*x2806)));
evalcond[2]=((-1.0)+((x2789*x2802))+(((-1.0)*x2795*x2807))+(((-1.0)*r02*x2806)));
evalcond[3]=(((sj3*x2794))+(((-1.0)*cj3*x2795*x2806))+((r01*x2790*x2797))+((r02*x2810))+((r00*x2800)));
evalcond[4]=((((-1.0)*r01*x2800*x2806))+((cj3*x2794))+((r00*x2797))+(((-1.0)*r02*sj3*x2807))+((x2795*x2809)));
evalcond[5]=(((r21*x2799))+(((-1.0)*r20*x2803*x2806))+((r21*x2790*x2797))+((r22*x2810))+((cj1*sj2))+((r20*x2800))+x2801);
evalcond[6]=(x2791+(((-1.0)*x2805))+((r10*x2800))+(((-1.0)*cj3*x2793*x2806))+((r11*x2799))+((r12*x2810))+((x2792*x2808)));
evalcond[7]=(x2791+(((-1.0)*x2805))+((r20*x2790*x2799))+(((-1.0)*sj3*x2798*x2806))+((r21*x2803))+((r20*x2797))+(((-1.0)*r22*sj3*x2807)));
evalcond[8]=((((-1.0)*x2801))+(((-1.0)*sj2*x2796))+((x2793*x2809))+(((-1.0)*r12*sj3*x2807))+((r10*x2797))+(((-1.0)*sj3*x2792*x2806))+((r11*x2803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2811=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2811;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2812=((1.0)*cj5);
IkReal x2813=((((-1.0)*r21*x2812))+(((-1.0)*r20*sj5)));
j4eval[0]=x2813;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2812))))));
j4eval[2]=IKsign(x2813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2814=cj5*cj5;
IkReal x2815=(cj3*r01);
IkReal x2816=(cj5*sj5);
IkReal x2817=((1.0)*cj3);
IkReal x2818=(((r20*x2815*x2816))+(((-1.0)*r02*r22*x2817))+(((-1.0)*r00*r20*x2814*x2817))+((r21*x2814*x2815))+(((-1.0)*r21*x2815))+((cj3*r00*r21*x2816)));
j4eval[0]=x2818;
j4eval[1]=IKsign(x2818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2819=cj5*cj5;
IkReal x2820=(cj3*r20);
IkReal x2821=(r21*sj3);
IkReal x2822=((1.0)*cj3);
IkReal x2823=(r01*r21);
IkReal x2824=(r01*sj3);
IkReal x2825=(r00*sj5);
IkReal x2826=(cj5*r01*sj5);
IkReal x2827=((1.0)*x2819);
CheckValue<IkReal> x2828=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2822*x2823))+(((-1.0)*r00*x2820*x2827))+(((-1.0)*r02*r22*x2822))+((cj3*x2819*x2823))+((cj3*cj5*r21*x2825))+((x2820*x2826)))),-1);
if(!x2828.valid){
continue;
}
CheckValue<IkReal> x2829 = IKatan2WithCheck(IkReal((((r22*sj3*x2825))+((cj5*r22*x2824)))),IkReal((((x2821*x2826))+(((-1.0)*r00*x2821*x2827))+((r00*x2821))+(((-1.0)*r20*x2824*x2827))+(((-1.0)*cj5*r20*sj3*x2825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2828.value)))+(x2829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2830=IKsin(j4);
IkReal x2831=IKcos(j4);
IkReal x2832=(cj2*sj1);
IkReal x2833=(cj1*sj2);
IkReal x2834=(r11*sj5);
IkReal x2835=(cj5*r10);
IkReal x2836=(sj1*sj2);
IkReal x2837=(cj5*r01);
IkReal x2838=(cj5*r00);
IkReal x2839=(cj3*sj5);
IkReal x2840=(r21*sj5);
IkReal x2841=(cj1*cj2);
IkReal x2842=(cj5*sj3);
IkReal x2843=(sj3*sj5);
IkReal x2844=(r01*sj5);
IkReal x2845=(cj3*cj5);
IkReal x2846=(cj5*r20);
IkReal x2847=((1.0)*x2831);
IkReal x2848=((1.0)*x2830);
IkReal x2849=(cj3*x2831);
IkReal x2850=(sj3*x2831);
IkReal x2851=(cj3*x2830);
IkReal x2852=(x2833+x2832);
evalcond[0]=((((-1.0)*x2846*x2848))+((x2830*x2840))+(((-1.0)*r22*x2847)));
evalcond[1]=((((-1.0)*r12*x2847))+((x2830*x2834))+(((-1.0)*x2835*x2848)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2847))+(((-1.0)*x2838*x2848))+((x2830*x2844)));
evalcond[3]=(((r01*x2831*x2839))+((sj3*x2837))+((r00*x2843))+(((-1.0)*cj3*x2838*x2847))+((r02*x2851)));
evalcond[4]=((((-1.0)*r02*sj3*x2848))+((x2838*x2850))+(((-1.0)*r01*x2843*x2847))+((cj3*x2837))+((r00*x2839)));
evalcond[5]=(((r21*x2842))+((r20*x2843))+(((-1.0)*r20*x2845*x2847))+((r22*x2851))+((r21*x2831*x2839))+x2852);
evalcond[6]=((((-1.0)*x2836))+((r11*x2842))+(((-1.0)*cj3*x2835*x2847))+((r12*x2851))+((x2834*x2849))+x2841+((r10*x2843)));
evalcond[7]=(((r10*x2839))+((x2835*x2850))+((r11*x2845))+(((-1.0)*r12*sj3*x2848))+(((-1.0)*sj3*x2834*x2847))+x2852);
evalcond[8]=(((r21*x2845))+((r20*x2839))+((r20*x2831*x2842))+(((-1.0)*sj3*x2840*x2847))+(((-1.0)*r22*sj3*x2848))+(((-1.0)*x2841))+x2836);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2853=((1.0)*cj5);
CheckValue<IkReal> x2854 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2854.valid){
continue;
}
CheckValue<IkReal> x2855=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2853))+(((-1.0)*r20*sj5)))),-1);
if(!x2855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2854.value)+(((1.5707963267949)*(x2855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2856=IKsin(j4);
IkReal x2857=IKcos(j4);
IkReal x2858=(cj2*sj1);
IkReal x2859=(cj1*sj2);
IkReal x2860=(r11*sj5);
IkReal x2861=(cj5*r10);
IkReal x2862=(sj1*sj2);
IkReal x2863=(cj5*r01);
IkReal x2864=(cj5*r00);
IkReal x2865=(cj3*sj5);
IkReal x2866=(r21*sj5);
IkReal x2867=(cj1*cj2);
IkReal x2868=(cj5*sj3);
IkReal x2869=(sj3*sj5);
IkReal x2870=(r01*sj5);
IkReal x2871=(cj3*cj5);
IkReal x2872=(cj5*r20);
IkReal x2873=((1.0)*x2857);
IkReal x2874=((1.0)*x2856);
IkReal x2875=(cj3*x2857);
IkReal x2876=(sj3*x2857);
IkReal x2877=(cj3*x2856);
IkReal x2878=(x2859+x2858);
evalcond[0]=((((-1.0)*r22*x2873))+((x2856*x2866))+(((-1.0)*x2872*x2874)));
evalcond[1]=((((-1.0)*x2861*x2874))+((x2856*x2860))+(((-1.0)*r12*x2873)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2873))+((x2856*x2870))+(((-1.0)*x2864*x2874)));
evalcond[3]=(((sj3*x2863))+(((-1.0)*cj3*x2864*x2873))+((r00*x2869))+((r02*x2877))+((r01*x2857*x2865)));
evalcond[4]=((((-1.0)*r01*x2869*x2873))+((r00*x2865))+((x2864*x2876))+(((-1.0)*r02*sj3*x2874))+((cj3*x2863)));
evalcond[5]=(((r22*x2877))+(((-1.0)*r20*x2871*x2873))+((r21*x2857*x2865))+((r21*x2868))+((r20*x2869))+x2878);
evalcond[6]=((((-1.0)*x2862))+((r10*x2869))+(((-1.0)*cj3*x2861*x2873))+((r11*x2868))+((r12*x2877))+x2867+((x2860*x2875)));
evalcond[7]=(((r10*x2865))+((r11*x2871))+((x2861*x2876))+(((-1.0)*sj3*x2860*x2873))+x2878+(((-1.0)*r12*sj3*x2874)));
evalcond[8]=(((r20*x2857*x2868))+(((-1.0)*x2867))+(((-1.0)*r22*sj3*x2874))+((r21*x2871))+((r20*x2865))+x2862+(((-1.0)*sj3*x2866*x2873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2879.value)+(((1.5707963267949)*(x2880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2881=IKsin(j4);
IkReal x2882=IKcos(j4);
IkReal x2883=(cj2*sj1);
IkReal x2884=(cj1*sj2);
IkReal x2885=(r11*sj5);
IkReal x2886=(cj5*r10);
IkReal x2887=(sj1*sj2);
IkReal x2888=(cj5*r01);
IkReal x2889=(cj5*r00);
IkReal x2890=(cj3*sj5);
IkReal x2891=(r21*sj5);
IkReal x2892=(cj1*cj2);
IkReal x2893=(cj5*sj3);
IkReal x2894=(sj3*sj5);
IkReal x2895=(r01*sj5);
IkReal x2896=(cj3*cj5);
IkReal x2897=(cj5*r20);
IkReal x2898=((1.0)*x2882);
IkReal x2899=((1.0)*x2881);
IkReal x2900=(cj3*x2882);
IkReal x2901=(sj3*x2882);
IkReal x2902=(cj3*x2881);
IkReal x2903=(x2883+x2884);
evalcond[0]=((((-1.0)*r22*x2898))+((x2881*x2891))+(((-1.0)*x2897*x2899)));
evalcond[1]=(((x2881*x2885))+(((-1.0)*x2886*x2899))+(((-1.0)*r12*x2898)));
evalcond[2]=((1.0)+(((-1.0)*x2889*x2899))+(((-1.0)*r02*x2898))+((x2881*x2895)));
evalcond[3]=(((sj3*x2888))+((r02*x2902))+((r01*x2882*x2890))+((r00*x2894))+(((-1.0)*cj3*x2889*x2898)));
evalcond[4]=(((cj3*x2888))+(((-1.0)*r02*sj3*x2899))+((r00*x2890))+((x2889*x2901))+(((-1.0)*r01*x2894*x2898)));
evalcond[5]=(((r22*x2902))+(((-1.0)*r20*x2896*x2898))+((r21*x2893))+((r21*x2882*x2890))+x2903+((r20*x2894)));
evalcond[6]=(((x2885*x2900))+(((-1.0)*x2887))+((r11*x2893))+((r10*x2894))+((r12*x2902))+x2892+(((-1.0)*cj3*x2886*x2898)));
evalcond[7]=((((-1.0)*r12*sj3*x2899))+((r11*x2896))+((r10*x2890))+((x2886*x2901))+x2903+(((-1.0)*sj3*x2885*x2898)));
evalcond[8]=(((r21*x2896))+(((-1.0)*r22*sj3*x2899))+((r20*x2882*x2893))+(((-1.0)*x2892))+(((-1.0)*sj3*x2891*x2898))+x2887+((r20*x2890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2904=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2904);
rxp1_1=(px*r21);
rxp1_2=(r11*x2904);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2905=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2905);
rxp1_1=(px*r21);
rxp1_2=(r11*x2905);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2906=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x2906))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2906)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2907=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2907);
rxp1_1=(px*r21);
rxp1_2=(r11*x2907);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2909=IKPowWithIntegerCheck(r02,-1);
if(!x2909.valid){
continue;
}
IkReal x2908=x2909.value;
CheckValue<IkReal> x2910=IKPowWithIntegerCheck(cj3,-1);
if(!x2910.valid){
continue;
}
if( IKabs((x2908*(x2910.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x2908)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2908*(x2910.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x2908))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2908*(x2910.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x2908));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2911=IKsin(j4);
IkReal x2912=IKcos(j4);
IkReal x2913=(cj5*r10);
IkReal x2914=(sj1*sj2);
IkReal x2915=(cj5*sj3);
IkReal x2916=(r11*sj5);
IkReal x2917=(cj3*cj5);
IkReal x2918=(cj3*sj5);
IkReal x2919=(r21*sj5);
IkReal x2920=(cj2*sj1);
IkReal x2921=((1.0)*sj0);
IkReal x2922=((1.0)*cj0);
IkReal x2923=(sj3*sj5);
IkReal x2924=(cj1*sj2);
IkReal x2925=((1.0)*cj1*cj2);
IkReal x2926=((1.0)*x2911);
IkReal x2927=(r20*x2912);
IkReal x2928=(cj3*x2912);
IkReal x2929=(sj3*x2912);
evalcond[0]=((((-1.0)*x2921))+(((-1.0)*r02*x2912)));
evalcond[1]=((((-1.0)*cj5*r20*x2926))+((x2911*x2919)));
evalcond[2]=(cj0+((x2911*x2916))+(((-1.0)*x2913*x2926)));
evalcond[3]=(((cj0*x2914))+(((-1.0)*cj1*cj2*x2922))+((cj3*r02*x2911)));
evalcond[4]=((((-1.0)*x2920*x2922))+(((-1.0)*r02*sj3*x2926))+(((-1.0)*x2922*x2924)));
evalcond[5]=(((r21*x2912*x2918))+((r20*x2923))+((r21*x2915))+(((-1.0)*x2917*x2927))+x2920+x2924);
evalcond[6]=(((x2915*x2927))+((r20*x2918))+(((-1.0)*x2925))+((r21*x2917))+(((-1.0)*x2919*x2929))+x2914);
evalcond[7]=(((x2916*x2928))+((r11*x2915))+((r10*x2923))+(((-1.0)*x2913*x2928))+(((-1.0)*cj1*cj2*x2921))+((sj0*x2914)));
evalcond[8]=(((r11*x2917))+((x2913*x2929))+(((-1.0)*x2916*x2929))+(((-1.0)*x2920*x2921))+(((-1.0)*x2921*x2924))+((r10*x2918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2930=((1.0)*sj3);
IkReal x2931=((1.0)*cj5);
CheckValue<IkReal> x2932=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x2931))),-1);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2931))),-1);
if(!x2933.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2932.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2933.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2930))+(((-1.0)*r20*sj5*x2930)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2932.value)))+IKsqr(((x2933.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2930))+(((-1.0)*r20*sj5*x2930))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2932.value)), ((x2933.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2930))+(((-1.0)*r20*sj5*x2930))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2934=IKsin(j4);
IkReal x2935=IKcos(j4);
IkReal x2936=(cj5*r10);
IkReal x2937=(sj1*sj2);
IkReal x2938=(cj5*sj3);
IkReal x2939=(r11*sj5);
IkReal x2940=(cj3*cj5);
IkReal x2941=(cj3*sj5);
IkReal x2942=(r21*sj5);
IkReal x2943=(cj2*sj1);
IkReal x2944=((1.0)*sj0);
IkReal x2945=((1.0)*cj0);
IkReal x2946=(sj3*sj5);
IkReal x2947=(cj1*sj2);
IkReal x2948=((1.0)*cj1*cj2);
IkReal x2949=((1.0)*x2934);
IkReal x2950=(r20*x2935);
IkReal x2951=(cj3*x2935);
IkReal x2952=(sj3*x2935);
evalcond[0]=((((-1.0)*r02*x2935))+(((-1.0)*x2944)));
evalcond[1]=((((-1.0)*cj5*r20*x2949))+((x2934*x2942)));
evalcond[2]=((((-1.0)*x2936*x2949))+cj0+((x2934*x2939)));
evalcond[3]=((((-1.0)*cj1*cj2*x2945))+((cj0*x2937))+((cj3*r02*x2934)));
evalcond[4]=((((-1.0)*x2943*x2945))+(((-1.0)*x2945*x2947))+(((-1.0)*r02*sj3*x2949)));
evalcond[5]=(((r21*x2938))+((r21*x2935*x2941))+(((-1.0)*x2940*x2950))+x2947+x2943+((r20*x2946)));
evalcond[6]=(((r21*x2940))+(((-1.0)*x2942*x2952))+((x2938*x2950))+(((-1.0)*x2948))+x2937+((r20*x2941)));
evalcond[7]=((((-1.0)*cj1*cj2*x2944))+((r10*x2946))+((x2939*x2951))+(((-1.0)*x2936*x2951))+((sj0*x2937))+((r11*x2938)));
evalcond[8]=(((r10*x2941))+((x2936*x2952))+(((-1.0)*x2939*x2952))+(((-1.0)*x2943*x2944))+((r11*x2940))+(((-1.0)*x2944*x2947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2953.valid){
continue;
}
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(r02,-1);
if(!x2954.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x2953.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x2954.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x2953.value)))+IKsqr(((-1.0)*sj0*(x2954.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x2953.value)), ((-1.0)*sj0*(x2954.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2955=IKsin(j4);
IkReal x2956=IKcos(j4);
IkReal x2957=(cj5*r10);
IkReal x2958=(sj1*sj2);
IkReal x2959=(cj5*sj3);
IkReal x2960=(r11*sj5);
IkReal x2961=(cj3*cj5);
IkReal x2962=(cj3*sj5);
IkReal x2963=(r21*sj5);
IkReal x2964=(cj2*sj1);
IkReal x2965=((1.0)*sj0);
IkReal x2966=((1.0)*cj0);
IkReal x2967=(sj3*sj5);
IkReal x2968=(cj1*sj2);
IkReal x2969=((1.0)*cj1*cj2);
IkReal x2970=((1.0)*x2955);
IkReal x2971=(r20*x2956);
IkReal x2972=(cj3*x2956);
IkReal x2973=(sj3*x2956);
evalcond[0]=((((-1.0)*x2965))+(((-1.0)*r02*x2956)));
evalcond[1]=(((x2955*x2963))+(((-1.0)*cj5*r20*x2970)));
evalcond[2]=(cj0+((x2955*x2960))+(((-1.0)*x2957*x2970)));
evalcond[3]=((((-1.0)*cj1*cj2*x2966))+((cj0*x2958))+((cj3*r02*x2955)));
evalcond[4]=((((-1.0)*x2966*x2968))+(((-1.0)*x2964*x2966))+(((-1.0)*r02*sj3*x2970)));
evalcond[5]=(((r21*x2956*x2962))+((r21*x2959))+(((-1.0)*x2961*x2971))+((r20*x2967))+x2964+x2968);
evalcond[6]=(((r21*x2961))+(((-1.0)*x2969))+(((-1.0)*x2963*x2973))+((r20*x2962))+((x2959*x2971))+x2958);
evalcond[7]=((((-1.0)*x2957*x2972))+((sj0*x2958))+(((-1.0)*cj1*cj2*x2965))+((r10*x2967))+((x2960*x2972))+((r11*x2959)));
evalcond[8]=((((-1.0)*x2965*x2968))+((r11*x2961))+((r10*x2962))+(((-1.0)*x2960*x2973))+((x2957*x2973))+(((-1.0)*x2964*x2965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2974=((1.0)*sj0);
IkReal x2975=((1.0)*cj0);
CheckValue<IkReal> x2976 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2974))+(((-1.0)*r02*x2975)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2974))+(((-1.0)*r01*sj5*x2975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2976.valid){
continue;
}
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2976.value)+(((1.5707963267949)*(x2977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2978=IKsin(j4);
IkReal x2979=IKcos(j4);
IkReal x2980=(r11*sj5);
IkReal x2981=(cj5*r10);
IkReal x2982=(sj1*sj2);
IkReal x2983=(cj5*sj3);
IkReal x2984=((1.0)*sj0);
IkReal x2985=(cj3*cj5);
IkReal x2986=(cj3*sj5);
IkReal x2987=(r21*sj5);
IkReal x2988=(cj2*sj1);
IkReal x2989=(sj3*sj5);
IkReal x2990=(r01*sj5);
IkReal x2991=((1.0)*cj0);
IkReal x2992=(cj1*sj2);
IkReal x2993=((1.0)*x2979);
IkReal x2994=((1.0)*x2978);
IkReal x2995=(cj3*x2979);
IkReal x2996=((1.0)*cj1*cj2);
IkReal x2997=(cj3*x2978);
evalcond[0]=((((-1.0)*r22*x2993))+(((-1.0)*cj5*r20*x2994))+((x2978*x2987)));
evalcond[1]=(cj0+(((-1.0)*r12*x2993))+((x2978*x2980))+(((-1.0)*x2981*x2994)));
evalcond[2]=((((-1.0)*x2984))+(((-1.0)*cj5*r00*x2994))+((x2978*x2990))+(((-1.0)*r02*x2993)));
evalcond[3]=(((r20*x2989))+((r21*x2979*x2986))+(((-1.0)*r20*x2985*x2993))+((r22*x2997))+x2988+x2992+((r21*x2983)));
evalcond[4]=((((-1.0)*x2996))+((r20*x2979*x2983))+(((-1.0)*sj3*x2987*x2993))+((r20*x2986))+(((-1.0)*r22*sj3*x2994))+x2982+((r21*x2985)));
evalcond[5]=(((cj0*x2982))+((r00*x2989))+((r01*x2983))+(((-1.0)*r00*x2985*x2993))+((r02*x2997))+((r01*x2979*x2986))+(((-1.0)*cj1*cj2*x2991)));
evalcond[6]=(((x2980*x2995))+((r11*x2983))+((r12*x2997))+(((-1.0)*cj3*x2981*x2993))+((sj0*x2982))+((r10*x2989))+(((-1.0)*cj1*cj2*x2984)));
evalcond[7]=((((-1.0)*x2988*x2991))+((r00*x2979*x2983))+((r00*x2986))+((r01*x2985))+(((-1.0)*r02*sj3*x2994))+(((-1.0)*r01*x2989*x2993))+(((-1.0)*x2991*x2992)));
evalcond[8]=(((r11*x2985))+(((-1.0)*x2984*x2988))+((sj3*x2979*x2981))+(((-1.0)*r12*sj3*x2994))+(((-1.0)*x2984*x2992))+(((-1.0)*sj3*x2980*x2993))+((r10*x2986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2998=((1.0)*cj5);
CheckValue<IkReal> x2999 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2999.valid){
continue;
}
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2998)))),-1);
if(!x3000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2999.value)+(((1.5707963267949)*(x3000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3001=IKsin(j4);
IkReal x3002=IKcos(j4);
IkReal x3003=(r11*sj5);
IkReal x3004=(cj5*r10);
IkReal x3005=(sj1*sj2);
IkReal x3006=(cj5*sj3);
IkReal x3007=((1.0)*sj0);
IkReal x3008=(cj3*cj5);
IkReal x3009=(cj3*sj5);
IkReal x3010=(r21*sj5);
IkReal x3011=(cj2*sj1);
IkReal x3012=(sj3*sj5);
IkReal x3013=(r01*sj5);
IkReal x3014=((1.0)*cj0);
IkReal x3015=(cj1*sj2);
IkReal x3016=((1.0)*x3002);
IkReal x3017=((1.0)*x3001);
IkReal x3018=(cj3*x3002);
IkReal x3019=((1.0)*cj1*cj2);
IkReal x3020=(cj3*x3001);
evalcond[0]=((((-1.0)*r22*x3016))+((x3001*x3010))+(((-1.0)*cj5*r20*x3017)));
evalcond[1]=(cj0+((x3001*x3003))+(((-1.0)*r12*x3016))+(((-1.0)*x3004*x3017)));
evalcond[2]=((((-1.0)*r02*x3016))+((x3001*x3013))+(((-1.0)*x3007))+(((-1.0)*cj5*r00*x3017)));
evalcond[3]=(x3011+x3015+((r21*x3002*x3009))+((r22*x3020))+((r20*x3012))+(((-1.0)*r20*x3008*x3016))+((r21*x3006)));
evalcond[4]=((((-1.0)*r22*sj3*x3017))+x3005+(((-1.0)*sj3*x3010*x3016))+((r20*x3002*x3006))+(((-1.0)*x3019))+((r20*x3009))+((r21*x3008)));
evalcond[5]=(((r00*x3012))+((r01*x3006))+((cj0*x3005))+((r02*x3020))+(((-1.0)*r00*x3008*x3016))+(((-1.0)*cj1*cj2*x3014))+((r01*x3002*x3009)));
evalcond[6]=(((r12*x3020))+((r10*x3012))+(((-1.0)*cj1*cj2*x3007))+((x3003*x3018))+((sj0*x3005))+((r11*x3006))+(((-1.0)*cj3*x3004*x3016)));
evalcond[7]=(((r01*x3008))+((r00*x3009))+(((-1.0)*r02*sj3*x3017))+(((-1.0)*r01*x3012*x3016))+((r00*x3002*x3006))+(((-1.0)*x3011*x3014))+(((-1.0)*x3014*x3015)));
evalcond[8]=((((-1.0)*r12*sj3*x3017))+((r10*x3009))+(((-1.0)*x3007*x3011))+(((-1.0)*x3007*x3015))+(((-1.0)*sj3*x3003*x3016))+((r11*x3008))+((sj3*x3002*x3004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3021=((1.0)*cj5);
CheckValue<IkReal> x3022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3021)))),-1);
if(!x3022.valid){
continue;
}
CheckValue<IkReal> x3023 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3022.value)))+(x3023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3024=IKsin(j4);
IkReal x3025=IKcos(j4);
IkReal x3026=(r11*sj5);
IkReal x3027=(cj5*r10);
IkReal x3028=(sj1*sj2);
IkReal x3029=(cj5*sj3);
IkReal x3030=((1.0)*sj0);
IkReal x3031=(cj3*cj5);
IkReal x3032=(cj3*sj5);
IkReal x3033=(r21*sj5);
IkReal x3034=(cj2*sj1);
IkReal x3035=(sj3*sj5);
IkReal x3036=(r01*sj5);
IkReal x3037=((1.0)*cj0);
IkReal x3038=(cj1*sj2);
IkReal x3039=((1.0)*x3025);
IkReal x3040=((1.0)*x3024);
IkReal x3041=(cj3*x3025);
IkReal x3042=((1.0)*cj1*cj2);
IkReal x3043=(cj3*x3024);
evalcond[0]=(((x3024*x3033))+(((-1.0)*r22*x3039))+(((-1.0)*cj5*r20*x3040)));
evalcond[1]=(cj0+(((-1.0)*x3027*x3040))+(((-1.0)*r12*x3039))+((x3024*x3026)));
evalcond[2]=(((x3024*x3036))+(((-1.0)*cj5*r00*x3040))+(((-1.0)*x3030))+(((-1.0)*r02*x3039)));
evalcond[3]=(((r22*x3043))+x3038+x3034+((r21*x3025*x3032))+((r21*x3029))+(((-1.0)*r20*x3031*x3039))+((r20*x3035)));
evalcond[4]=(x3028+((r20*x3025*x3029))+(((-1.0)*sj3*x3033*x3039))+(((-1.0)*x3042))+((r21*x3031))+(((-1.0)*r22*sj3*x3040))+((r20*x3032)));
evalcond[5]=((((-1.0)*r00*x3031*x3039))+((r00*x3035))+((r01*x3025*x3032))+((r02*x3043))+((r01*x3029))+((cj0*x3028))+(((-1.0)*cj1*cj2*x3037)));
evalcond[6]=((((-1.0)*cj3*x3027*x3039))+((r11*x3029))+((sj0*x3028))+((x3026*x3041))+((r10*x3035))+((r12*x3043))+(((-1.0)*cj1*cj2*x3030)));
evalcond[7]=((((-1.0)*x3037*x3038))+((r00*x3025*x3029))+((r01*x3031))+(((-1.0)*r02*sj3*x3040))+((r00*x3032))+(((-1.0)*x3034*x3037))+(((-1.0)*r01*x3035*x3039)));
evalcond[8]=((((-1.0)*x3030*x3038))+(((-1.0)*x3030*x3034))+((sj3*x3025*x3027))+((r11*x3031))+(((-1.0)*sj3*x3026*x3039))+((r10*x3032))+(((-1.0)*r12*sj3*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3044=cj5*cj5;
IkReal x3045=r21*r21;
IkReal x3046=r20*r20;
IkReal x3047=(r20*r21);
IkReal x3048=((1.0)*cj3);
IkReal x3049=((1.0)*cj5);
IkReal x3050=(cj1*sj2);
IkReal x3051=(cj5*sj5);
IkReal x3052=(sj3*sj5);
IkReal x3053=(cj2*sj1);
IkReal x3054=(r21*sj5);
CheckValue<IkReal> x3055 = IKatan2WithCheck(IkReal((((r20*r22*x3052))+((cj5*r21*r22*sj3))+((r22*x3050))+((r22*x3053)))),IkReal(((((-2.0)*sj3*x3044*x3047))+((sj3*x3045*x3051))+((sj3*x3047))+(((-1.0)*r20*x3049*x3050))+(((-1.0)*r20*x3049*x3053))+((x3053*x3054))+(((-1.0)*x3046*x3049*x3052))+((x3050*x3054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3045*x3048))+((cj3*x3044*x3045))+(((-1.0)*x3048*(r22*r22)))+(((2.0)*cj3*x3047*x3051))+(((-1.0)*x3044*x3046*x3048)))),-1);
if(!x3056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3055.value)+(((1.5707963267949)*(x3056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3057=IKsin(j4);
IkReal x3058=IKcos(j4);
IkReal x3059=(cj3*r21);
IkReal x3060=(r21*sj5);
IkReal x3061=(r20*sj5);
IkReal x3062=(cj5*r20);
IkReal x3063=((1.0)*x3058);
IkReal x3064=((1.0)*x3057);
evalcond[0]=((((-1.0)*r22*x3063))+(((-1.0)*x3062*x3064))+((x3057*x3060)));
evalcond[1]=(((cj2*sj1))+((sj5*x3058*x3059))+((cj3*r22*x3057))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x3061))+(((-1.0)*cj3*x3062*x3063)));
evalcond[2]=(((sj3*x3058*x3062))+(((-1.0)*r22*sj3*x3064))+((cj3*x3061))+(((-1.0)*cj1*cj2))+(((-1.0)*sj3*x3060*x3063))+((sj1*sj2))+((cj5*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3065=(cj5*sj4);
IkReal x3066=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x3066))+(((-1.0)*r00*x3065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3065))+(((-1.0)*r11*x3066))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x3066))+(((-1.0)*r00*x3065))))+IKsqr((((r10*x3065))+(((-1.0)*r11*x3066))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x3066))+(((-1.0)*r00*x3065))), (((r10*x3065))+(((-1.0)*r11*x3066))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3067=IKcos(j0);
IkReal x3068=IKsin(j0);
IkReal x3069=(r02*sj4);
IkReal x3070=((0.1)*sj5);
IkReal x3071=(cj5*r11);
IkReal x3072=((1.0)*sj3);
IkReal x3073=(r12*sj4);
IkReal x3074=((1.0)*cj3);
IkReal x3075=(r11*sj5);
IkReal x3076=(cj3*cj4);
IkReal x3077=((1.0)*sj2);
IkReal x3078=(cj5*r01);
IkReal x3079=(r01*sj5);
IkReal x3080=(sj1*sj2);
IkReal x3081=(cj1*cj2);
IkReal x3082=(r00*sj5);
IkReal x3083=((1.0)*cj2);
IkReal x3084=(r10*sj5);
IkReal x3085=((1.0)*cj4);
IkReal x3086=(cj4*cj5*r00);
IkReal x3087=(cj1*x3067);
IkReal x3088=(cj4*cj5*r10);
IkReal x3089=((0.392)*x3068);
IkReal x3090=((1.0)*x3068);
IkReal x3091=(cj1*x3068);
IkReal x3092=((1.0)*cj5*sj4);
evalcond[0]=(x3067+(((-1.0)*r10*x3092))+(((-1.0)*r12*x3085))+((sj4*x3075)));
evalcond[1]=((((-1.0)*x3090))+(((-1.0)*r00*x3092))+(((-1.0)*r02*x3085))+((sj4*x3079)));
evalcond[2]=((((-0.1)*x3078))+(((-0.392)*x3067*x3080))+(((-0.134)*x3068))+(((-1.0)*r00*x3070))+(((0.392)*x3067*x3081))+(((-1.0)*px))+(((0.425)*x3087)));
evalcond[3]=((((-1.0)*r10*x3070))+(((-0.1)*x3071))+(((-1.0)*x3080*x3089))+((x3081*x3089))+(((0.134)*x3067))+(((-1.0)*py))+(((0.425)*x3091)));
evalcond[4]=(((x3076*x3079))+((cj3*x3069))+((x3067*x3080))+(((-1.0)*x3067*x3081))+((sj3*x3078))+(((-1.0)*x3074*x3086))+((sj3*x3082)));
evalcond[5]=(((x3068*x3080))+((x3075*x3076))+(((-1.0)*x3081*x3090))+((sj3*x3071))+((cj3*x3073))+(((-1.0)*x3074*x3088))+((sj3*x3084)));
evalcond[6]=(((cj3*x3082))+(((-1.0)*x3077*x3087))+((cj3*x3078))+(((-1.0)*x3069*x3072))+(((-1.0)*cj4*x3072*x3079))+(((-1.0)*sj1*x3067*x3083))+((sj3*x3086)));
evalcond[7]=(((cj3*x3084))+(((-1.0)*sj1*x3068*x3083))+(((-1.0)*x3072*x3073))+((cj3*x3071))+(((-1.0)*cj4*x3072*x3075))+((sj3*x3088))+(((-1.0)*x3077*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3093=cj5*cj5;
IkReal x3094=r21*r21;
IkReal x3095=r20*r20;
IkReal x3096=(r20*r21);
IkReal x3097=(sj1*sj2);
IkReal x3098=(r21*sj5);
IkReal x3099=(cj1*cj2);
IkReal x3100=(cj5*r20);
IkReal x3101=(cj5*sj5);
IkReal x3102=(cj3*r22);
IkReal x3103=(sj3*x3094);
CheckValue<IkReal> x3104=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x3103+(((-2.0)*sj3*x3096*x3101))+((sj3*x3093*x3095))+(((-1.0)*x3093*x3103)))),-1);
if(!x3104.valid){
continue;
}
CheckValue<IkReal> x3105 = IKatan2WithCheck(IkReal((((cj5*r21*x3102))+((r20*sj5*x3102))+((r22*x3097))+(((-1.0)*r22*x3099)))),IkReal((((x3099*x3100))+(((-1.0)*cj3*x3095*x3101))+(((-1.0)*x3097*x3100))+((cj3*x3096))+(((-1.0)*x3098*x3099))+((cj3*x3094*x3101))+(((-2.0)*cj3*x3093*x3096))+((x3097*x3098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3104.value)))+(x3105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3106=IKsin(j4);
IkReal x3107=IKcos(j4);
IkReal x3108=(cj3*r21);
IkReal x3109=(r21*sj5);
IkReal x3110=(r20*sj5);
IkReal x3111=(cj5*r20);
IkReal x3112=((1.0)*x3107);
IkReal x3113=((1.0)*x3106);
evalcond[0]=((((-1.0)*r22*x3112))+((x3106*x3109))+(((-1.0)*x3111*x3113)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x3106))+((cj5*r21*sj3))+((sj3*x3110))+((cj1*sj2))+((sj5*x3107*x3108))+(((-1.0)*cj3*x3111*x3112)));
evalcond[2]=(((cj5*x3108))+(((-1.0)*sj3*x3109*x3112))+((cj3*x3110))+((sj3*x3107*x3111))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x3113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3114=(cj5*sj4);
IkReal x3115=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3114))+((r01*x3115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3115))+((r10*x3114))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3114))+((r01*x3115))))+IKsqr(((((-1.0)*r11*x3115))+((r10*x3114))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3114))+((r01*x3115))), ((((-1.0)*r11*x3115))+((r10*x3114))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3116=IKcos(j0);
IkReal x3117=IKsin(j0);
IkReal x3118=(r02*sj4);
IkReal x3119=((0.1)*sj5);
IkReal x3120=(cj5*r11);
IkReal x3121=((1.0)*sj3);
IkReal x3122=(r12*sj4);
IkReal x3123=((1.0)*cj3);
IkReal x3124=(r11*sj5);
IkReal x3125=(cj3*cj4);
IkReal x3126=((1.0)*sj2);
IkReal x3127=(cj5*r01);
IkReal x3128=(r01*sj5);
IkReal x3129=(sj1*sj2);
IkReal x3130=(cj1*cj2);
IkReal x3131=(r00*sj5);
IkReal x3132=((1.0)*cj2);
IkReal x3133=(r10*sj5);
IkReal x3134=((1.0)*cj4);
IkReal x3135=(cj4*cj5*r00);
IkReal x3136=(cj1*x3116);
IkReal x3137=(cj4*cj5*r10);
IkReal x3138=((0.392)*x3117);
IkReal x3139=((1.0)*x3117);
IkReal x3140=(cj1*x3117);
IkReal x3141=((1.0)*cj5*sj4);
evalcond[0]=(x3116+((sj4*x3124))+(((-1.0)*r10*x3141))+(((-1.0)*r12*x3134)));
evalcond[1]=((((-1.0)*r02*x3134))+((sj4*x3128))+(((-1.0)*r00*x3141))+(((-1.0)*x3139)));
evalcond[2]=((((-0.134)*x3117))+(((0.392)*x3116*x3130))+(((-0.1)*x3127))+(((-1.0)*r00*x3119))+(((-1.0)*px))+(((0.425)*x3136))+(((-0.392)*x3116*x3129)));
evalcond[3]=((((0.425)*x3140))+((x3130*x3138))+(((-0.1)*x3120))+(((-1.0)*py))+(((-1.0)*r10*x3119))+(((0.134)*x3116))+(((-1.0)*x3129*x3138)));
evalcond[4]=(((x3116*x3129))+(((-1.0)*x3116*x3130))+((cj3*x3118))+((x3125*x3128))+(((-1.0)*x3123*x3135))+((sj3*x3131))+((sj3*x3127)));
evalcond[5]=((((-1.0)*x3130*x3139))+((cj3*x3122))+(((-1.0)*x3123*x3137))+((sj3*x3133))+((sj3*x3120))+((x3124*x3125))+((x3117*x3129)));
evalcond[6]=((((-1.0)*sj1*x3116*x3132))+(((-1.0)*cj4*x3121*x3128))+((cj3*x3127))+((cj3*x3131))+((sj3*x3135))+(((-1.0)*x3126*x3136))+(((-1.0)*x3118*x3121)));
evalcond[7]=((((-1.0)*cj4*x3121*x3124))+((cj3*x3120))+((cj3*x3133))+(((-1.0)*sj1*x3117*x3132))+(((-1.0)*x3126*x3140))+((sj3*x3137))+(((-1.0)*x3121*x3122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (0f26f783be3795544d9b9fff2278af33)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
